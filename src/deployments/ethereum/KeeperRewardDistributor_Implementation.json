{
  "address": "0x86890E30cE9E1e13Db5560BbEb435c55567Af1cd",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "additionalGas",
          "type": "uint256"
        }
      ],
      "name": "AdditionalGasChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IKeeperRewardDistributorStorage.KeeperCallingMethod",
          "name": "callingMethod",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRoutesLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseLength",
          "type": "uint256"
        }
      ],
      "name": "DataLengthRestrictionsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IKeeperRewardDistributorStorage.DecreasingReason",
          "name": "reason",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DecreasingGasByReasonChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "defaultMaxGasPrice",
          "type": "uint256"
        }
      ],
      "name": "DefaultMaxGasPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardInPmx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardInNativeCurrency",
          "type": "uint256"
        }
      ],
      "name": "KeeperRewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IKeeperRewardDistributorStorage.KeeperActionType",
          "name": "actionType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseMaxGas1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseMaxGas2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inflectionPoint",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IKeeperRewardDistributorStorage.KeeperActionRewardConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "MaxGasPerPositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newMinPositionSizeMultiplier",
          "type": "int256"
        }
      ],
      "name": "MinPositionSizeMultiplierChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nativePartInReward",
          "type": "uint256"
        }
      ],
      "name": "NativePartInRewardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oracleGasPriceTolerance",
          "type": "uint256"
        }
      ],
      "name": "OracleGasPriceToleranceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pmxPartInReward",
          "type": "uint256"
        }
      ],
      "name": "PmxPartInRewardChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionSizeCoefficientA",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "int256",
          "name": "positionSizeCoefficientB",
          "type": "int256"
        }
      ],
      "name": "PositionSizeCoefficientsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "additionalGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pmxAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nativeAmount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IKeeperRewardDistributorStorage.KeeperCallingMethod",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "dataLengthRestrictions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxRoutesLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IKeeperRewardDistributorStorage.DecreasingReason",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "decreasingGasByReason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultMaxGasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pmx",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "whiteBlackList",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pmxPartInReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nativePartInReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeCoefficientA",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "positionSizeCoefficientB",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "additionalGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "defaultMaxGasPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleGasPriceTolerance",
              "type": "uint256"
            },
            {
              "internalType": "enum IKeeperRewardDistributorStorage.PaymentModel",
              "name": "paymentModel",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "enum IKeeperRewardDistributorStorage.KeeperActionType",
                  "name": "actionType",
                  "type": "uint8"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "baseMaxGas1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "baseMaxGas2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "multiplier1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "multiplier2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "inflectionPoint",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IKeeperRewardDistributorStorage.KeeperActionRewardConfig",
                  "name": "config",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IKeeperRewardDistributor.MaxGasPerPositionParams[]",
              "name": "maxGasPerPositionParams",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "enum IKeeperRewardDistributorStorage.DecreasingReason",
                  "name": "reason",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IKeeperRewardDistributor.DecreasingGasByReasonParams[]",
              "name": "decreasingGasByReasonParams",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IKeeperRewardDistributor.InitParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "keeperBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pmxBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nativeBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IKeeperRewardDistributorStorage.KeeperActionType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "maxGasPerPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseMaxGas1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseMaxGas2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplier1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplier2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inflectionPoint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPositionSizeMultiplier",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativePartInReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleGasPriceTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentModel",
      "outputs": [
        {
          "internalType": "enum IKeeperRewardDistributorStorage.PaymentModel",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pmx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pmxPartInReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionSizeCoefficientA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionSizeCoefficientB",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_additionalGas",
          "type": "uint256"
        }
      ],
      "name": "setAdditionalGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IKeeperRewardDistributorStorage.KeeperCallingMethod",
          "name": "_callingMethod",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_maxRoutesLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseLength",
          "type": "uint256"
        }
      ],
      "name": "setDataLengthRestrictions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IKeeperRewardDistributorStorage.DecreasingReason",
          "name": "_reason",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setDecreasingGasByReason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultMaxGasPrice",
          "type": "uint256"
        }
      ],
      "name": "setDefaultMaxGasPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IKeeperRewardDistributorStorage.KeeperActionType",
          "name": "_actionType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseMaxGas1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseMaxGas2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inflectionPoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct IKeeperRewardDistributorStorage.KeeperActionRewardConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setMaxGasPerPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_minPositionSizeMultiplier",
          "type": "int256"
        }
      ],
      "name": "setMinPositionSizeMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nativePartInReward",
          "type": "uint256"
        }
      ],
      "name": "setNativePartInReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oracleGasPriceTolerance",
          "type": "uint256"
        }
      ],
      "name": "setOracleGasPriceTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pmxPartInReward",
          "type": "uint256"
        }
      ],
      "name": "setPmxPartInReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_positionSizeCoefficientA",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_positionSizeCoefficientB",
          "type": "int256"
        }
      ],
      "name": "setPositionSizeCoefficients",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pmxBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nativeBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "keeper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "positionSize",
              "type": "uint256"
            },
            {
              "internalType": "enum IKeeperRewardDistributorStorage.KeeperActionType",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "numberOfActions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasSpent",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "decreasingCounter",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "routesLength",
              "type": "uint256"
            }
          ],
          "internalType": "struct IKeeperRewardDistributor.UpdateRewardParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06bcfd9e75e51fcd7893c3edbf88d8f38cf39d17bac626b7e686393b6b7d91a6",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0x86890E30cE9E1e13Db5560BbEb435c55567Af1cd",
    "transactionIndex": 74,
    "gasUsed": "2114844",
    "logsBloom": "0x
    "blockHash": "0x281b416455bbef4da9f41852aab2c21d1828a495a7dd452b6bb71435242f0e10",
    "transactionHash": "0x06bcfd9e75e51fcd7893c3edbf88d8f38cf39d17bac626b7e686393b6b7d91a6",
    "logs": [
      {
        "transactionIndex": 74,
        "blockNumber": 18747634,
        "transactionHash": "0x06bcfd9e75e51fcd7893c3edbf88d8f38cf39d17bac626b7e686393b6b7d91a6",
        "address": "0x86890E30cE9E1e13Db5560BbEb435c55567Af1cd",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 142,
        "blockHash": "0x281b416455bbef4da9f41852aab2c21d1828a495a7dd452b6bb71435242f0e10"
      }
    ],
    "blockNumber": 18747634,
    "cumulativeGasUsed": "7717016",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ac08d1652288d4d03be56436412dd0c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"additionalGas\",\"type\":\"uint256\"}],\"name\":\"AdditionalGasChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IKeeperRewardDistributorStorage.KeeperCallingMethod\",\"name\":\"callingMethod\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRoutesLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseLength\",\"type\":\"uint256\"}],\"name\":\"DataLengthRestrictionsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IKeeperRewardDistributorStorage.DecreasingReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DecreasingGasByReasonChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"defaultMaxGasPrice\",\"type\":\"uint256\"}],\"name\":\"DefaultMaxGasPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardInPmx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardInNativeCurrency\",\"type\":\"uint256\"}],\"name\":\"KeeperRewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IKeeperRewardDistributorStorage.KeeperActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseMaxGas1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseMaxGas2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflectionPoint\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IKeeperRewardDistributorStorage.KeeperActionRewardConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"MaxGasPerPositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newMinPositionSizeMultiplier\",\"type\":\"int256\"}],\"name\":\"MinPositionSizeMultiplierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nativePartInReward\",\"type\":\"uint256\"}],\"name\":\"NativePartInRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oracleGasPriceTolerance\",\"type\":\"uint256\"}],\"name\":\"OracleGasPriceToleranceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pmxPartInReward\",\"type\":\"uint256\"}],\"name\":\"PmxPartInRewardChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionSizeCoefficientA\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"positionSizeCoefficientB\",\"type\":\"int256\"}],\"name\":\"PositionSizeCoefficientsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"additionalGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pmxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nativeAmount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IKeeperRewardDistributorStorage.KeeperCallingMethod\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"dataLengthRestrictions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxRoutesLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IKeeperRewardDistributorStorage.DecreasingReason\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"decreasingGasByReason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultMaxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pmx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"whiteBlackList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pmxPartInReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativePartInReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeCoefficientA\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"positionSizeCoefficientB\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"additionalGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultMaxGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleGasPriceTolerance\",\"type\":\"uint256\"},{\"internalType\":\"enum IKeeperRewardDistributorStorage.PaymentModel\",\"name\":\"paymentModel\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum IKeeperRewardDistributorStorage.KeeperActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseMaxGas1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseMaxGas2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflectionPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct IKeeperRewardDistributorStorage.KeeperActionRewardConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"internalType\":\"struct IKeeperRewardDistributor.MaxGasPerPositionParams[]\",\"name\":\"maxGasPerPositionParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum IKeeperRewardDistributorStorage.DecreasingReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IKeeperRewardDistributor.DecreasingGasByReasonParams[]\",\"name\":\"decreasingGasByReasonParams\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IKeeperRewardDistributor.InitParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keeperBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pmxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IKeeperRewardDistributorStorage.KeeperActionType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"maxGasPerPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseMaxGas1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseMaxGas2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflectionPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPositionSizeMultiplier\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativePartInReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleGasPriceTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentModel\",\"outputs\":[{\"internalType\":\"enum IKeeperRewardDistributorStorage.PaymentModel\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pmxPartInReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionSizeCoefficientA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionSizeCoefficientB\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_additionalGas\",\"type\":\"uint256\"}],\"name\":\"setAdditionalGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IKeeperRewardDistributorStorage.KeeperCallingMethod\",\"name\":\"_callingMethod\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_maxRoutesLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseLength\",\"type\":\"uint256\"}],\"name\":\"setDataLengthRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IKeeperRewardDistributorStorage.DecreasingReason\",\"name\":\"_reason\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDecreasingGasByReason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultMaxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setDefaultMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IKeeperRewardDistributorStorage.KeeperActionType\",\"name\":\"_actionType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseMaxGas1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseMaxGas2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflectionPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct IKeeperRewardDistributorStorage.KeeperActionRewardConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setMaxGasPerPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_minPositionSizeMultiplier\",\"type\":\"int256\"}],\"name\":\"setMinPositionSizeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nativePartInReward\",\"type\":\"uint256\"}],\"name\":\"setNativePartInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oracleGasPriceTolerance\",\"type\":\"uint256\"}],\"name\":\"setOracleGasPriceTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pmxPartInReward\",\"type\":\"uint256\"}],\"name\":\"setPmxPartInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionSizeCoefficientA\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_positionSizeCoefficientB\",\"type\":\"int256\"}],\"name\":\"setPositionSizeCoefficients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pmxBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"internalType\":\"enum IKeeperRewardDistributorStorage.KeeperActionType\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"numberOfActions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"decreasingCounter\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"routesLength\",\"type\":\"uint256\"}],\"internalType\":\"struct IKeeperRewardDistributor.UpdateRewardParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"claim(uint256,uint256)\":{\"params\":{\"_nativeAmount\":\"Amount of native token to claim\",\"_pmxAmount\":\"Amount of PMX token to claim\"}},\"initialize((address,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint8,(uint8,(uint256,uint256,uint256,uint256,uint256))[],(uint8,uint256)[]))\":{\"params\":{\"_params\":\"Parameters for initialization\"}},\"pause()\":{\"details\":\"Triggers stopped state. This function can only be called by an address with the EMERGENCY_ADMIN role. Requirements: - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setAdditionalGas(uint256)\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_additionalGas\":\"The new additionalGas value.\"}},\"setDataLengthRestrictions(uint8,uint256,uint256)\":{\"params\":{\"_baseLength\":\"The length of the data entering the protocol function including method signature and excluding dynamic types(e.g, routesLength), in bytes\",\"_callingMethod\":\"The calling method for which dataLengthRestrictions is set\",\"_maxRoutesLength\":\"The maximum routes length for which an additional fee will be paid in the ARBITRUM payment model, in bytes\"}},\"setDecreasingGasByReason(uint8,uint256)\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_amount\":\"Gas amount.\",\"_reason\":\"The reason for which an amount is set\"}},\"setDefaultMaxGasPrice(uint256)\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_defaultMaxGasPrice\":\"The new default maximum gas price value.\"}},\"setMaxGasPerPosition(uint8,(uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_actionType\":\"The action type for which the config is set\",\"_config\":\"The KeeperActionRewardConfig struct\"}},\"setMinPositionSizeMultiplier(int256)\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_minPositionSizeMultiplier\":\"The new minPositionSizeMultiplier value (in WAD).\"}},\"setNativePartInReward(uint256)\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_nativePartInReward\":\"The new native token's portion in the reward calculation (percent expressed as WAD).\"}},\"setOracleGasPriceTolerance(uint256)\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_oracleGasPriceTolerance\":\"The new oracle gas price tolerance value (percent expressed as WAD).\"}},\"setPmxPartInReward(uint256)\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_pmxPartInReward\":\"The new PMX token's portion in the reward calculation (percent expressed as WAD).\"}},\"setPositionSizeCoefficients(uint256,int256)\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_positionSizeCoefficientA\":\"The new positionSizeCoefficientA value (in WAD).\",\"_positionSizeCoefficientB\":\"The new positionSizeCoefficientB value (in WAD).\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The interface id to check\"}},\"unpause()\":{\"details\":\"Returns to normal state. This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract. Requirements: - The contract must be paused.\"},\"updateReward((address,address,uint256,uint8,uint256,uint256,uint256[],uint256))\":{\"details\":\"Only callable by the PM_ROLE, LOM_ROLE, BATCH_MANAGER_ROLE roles.\",\"params\":{\"_params\":\"The UpdateRewardParams params\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint256,uint256)\":{\"notice\":\"Claims earned reward of the keeper\"},\"initialize((address,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint8,(uint8,(uint256,uint256,uint256,uint256,uint256))[],(uint8,uint256)[]))\":{\"notice\":\"Initializes the KeeperRewardDistributor contract.\"},\"setAdditionalGas(uint256)\":{\"notice\":\"Sets the additional gas value for reward calculations.\"},\"setDataLengthRestrictions(uint8,uint256,uint256)\":{\"notice\":\"Sets the dataLengthRestrictions for the specified KeeperCallingMethod.\"},\"setDecreasingGasByReason(uint8,uint256)\":{\"notice\":\"Sets the amount of gas to be removed for the specified reason\"},\"setDefaultMaxGasPrice(uint256)\":{\"notice\":\"Sets the default maximum gas price allowed.\"},\"setMaxGasPerPosition(uint8,(uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Sets the KeeperActionRewardConfig for the specified action type\"},\"setMinPositionSizeMultiplier(int256)\":{\"notice\":\"Sets the minPositionSizeMultiplier for reward calculations.\"},\"setNativePartInReward(uint256)\":{\"notice\":\"Sets the native token's portion in the reward calculation.\"},\"setOracleGasPriceTolerance(uint256)\":{\"notice\":\"Sets the tolerance for gas price fluctuations from the oracle price.\"},\"setPmxPartInReward(uint256)\":{\"notice\":\"Sets the PMX token's portion in the reward calculation.\"},\"setPositionSizeCoefficients(uint256,int256)\":{\"notice\":\"Sets the position size coefficients for reward calculations.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"},\"updateReward((address,address,uint256,uint8,uint256,uint256,uint256[],uint256))\":{\"notice\":\"Updates reward for keeper for closing position or executing order\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol\":\"KeeperRewardDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IActivityRewardDistributorStorage, IERC20, IPrimexDNS, ITraderBalanceVault} from \\\"./IActivityRewardDistributorStorage.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IActivityRewardDistributor is IActivityRewardDistributorStorage, IPausable {\\n    enum Role {\\n        LENDER,\\n        TRADER\\n    }\\n\\n    struct BucketWithRole {\\n        address bucketAddress;\\n        Role role;\\n    }\\n\\n    /**\\n     * @notice Emitted on claimReward()\\n     * @param user The address of the user who claimed reward\\n     * @param bucket The address of the bucket this reward is related to\\n     * @param role User role - TRADER or LENDER\\n     * @param amount Claimed amount\\n     */\\n    event ClaimReward(address indexed user, address indexed bucket, Role indexed role, uint256 amount);\\n\\n    /**\\n     * @notice  Initializes the ActivityRewardDistributor contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _pmx The address of the PMXToken contract.\\n     * @param _dns The address of the PrimexDNS contract.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _treasury The address of the treasury where fees will be collected.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IERC20 _pmx,\\n        IPrimexDNS _dns,\\n        address _registry,\\n        address _treasury,\\n        ITraderBalanceVault _traderBalanceVault,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice  Saves user activity in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   user  User address\\n     * @param   newBalance  User balance after action\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUserActivity(IBucket bucket, address user, uint256 newBalance, Role role) external;\\n\\n    /**\\n     * @notice  Saves activity of multiple users in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   users  Array of user addresses\\n     * @param   newBalances  Array of users balances after action\\n     * @param   length  The length of the users and oldBalances arrays\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUsersActivities(\\n        IBucket bucket,\\n        address[] calldata users,\\n        uint256[] calldata newBalances,\\n        uint256 length,\\n        Role role\\n    ) external;\\n\\n    /**\\n     * @notice Allows the caller to claim their accumulated reward from the specified buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets from which to claim the rewards.\\n     */\\n    function claimReward(BucketWithRole[] calldata bucketsArray) external;\\n\\n    /**\\n     * @notice Sets up activity rewards distribution in bucket with the specified role and reward parameters.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket to set up.\\n     * @param role The role associated with the bucket.\\n     * @param increaseAmount The amount by which to increase the total reward for the bucket (in PMX).\\n     * Adds specified amount to totalReward of the bucket. Initial value of totalReward is 0.\\n     * @param rewardPerDay The reward amount per day for the bucket.\\n     */\\n    function setupBucket(address bucket, Role role, uint256 increaseAmount, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Allows the caller to withdraw PMX tokens from a specific bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket from which to withdraw PMX tokens.\\n     * @param role The role associated with the bucket.\\n     * @param amount The amount of PMX tokens to withdraw.\\n     */\\n    function withdrawPmx(address bucket, Role role, uint256 amount) external;\\n\\n    /**\\n     * @notice Decreases the reward per day for a bucket and role.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param bucket The address of the bucket for which to decrease the reward per day.\\n     * @param role The role associated with the bucket.\\n     * @param rewardPerDay The amount by which to decrease the reward per day.\\n     */\\n    function decreaseRewardPerDay(address bucket, Role role, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Returns the accumulated reward for a specific bucket and role.\\n     * @param bucket The address of the bucket for which to retrieve the accumulated reward.\\n     * @param role The role associated with the bucket.\\n     * @return The accumulated reward for the specified bucket and role.\\n     */\\n    function getBucketAccumulatedReward(address bucket, Role role) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable reward for a user across multiple buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets to check for claimable rewards.\\n     * @param user The address of the user for whom to calculate the claimable reward.\\n     * @return The total claimable reward for the specified user across all provided buckets.\\n     */\\n    function getClaimableReward(BucketWithRole[] calldata bucketsArray, address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the user information from a specific bucket and role.\\n     * @param bucket The address of the bucket from which to retrieve the user information.\\n     * @param role The role associated with the bucket.\\n     * @param user The address of the user for whom to retrieve the information.\\n     * @return A UserInfo struct containing the user information.\\n     */\\n    function getUserInfoFromBucket(address bucket, Role role, address user) external view returns (UserInfo memory);\\n}\\n\",\"keccak256\":\"0x92e646c799437ad1e02850a871701b0d1a4fcf0d9b88062720d85aca99bd2152\",\"license\":\"BUSL-1.1\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface IActivityRewardDistributorStorage {\\n    /*\\n     * @param oldBalance last updated balance for user\\n     * @param fixedReward the accumulated value of the reward at the time lastUpdatedRewardIndex\\n     * @param lastUpdatedRewardIndex last index with which the user's reward was accumulated\\n     */\\n    struct UserInfo {\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardIndex;\\n        uint256 oldBalance;\\n    }\\n\\n    /*\\n     * @param users data to calculate users rewards in this bucket\\n     * @param rewardIndex an index that accumulates user rewards\\n     * @param lastUpdatedTimestamp timestamp of the last update of user activity\\n     * @param rewardPerToken current reward for one token(PToken or DebtToken of bucket)\\n     * @param isFinished Shows that the bucket has distributed all the rewards\\n     * @param fixedReward reward distributed by a bucket over the past period\\n     * with a certain reward per day or with the entire reward fully distributed\\n     * @param lastUpdatedRewardTimestamp timestamp of last fixed reward update\\n     * @param rewardPerDay current reward distributed for 1 day\\n     * @param totalReward Full distributable reward\\n     * @param endTimestamp end time of the distribution of rewards, which is calculated relative to the rewardPerDay and totalReward\\n     */\\n    struct BucketInfo {\\n        mapping(address => UserInfo) users;\\n        //accumulated reward per token\\n        uint256 rewardIndex;\\n        uint256 lastUpdatedTimestamp;\\n        uint256 rewardPerToken;\\n        uint256 scaledTotalSupply;\\n        bool isFinished;\\n        // setted by admin's actions\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardTimestamp;\\n        uint256 rewardPerDay;\\n        uint256 totalReward;\\n        uint256 endTimestamp;\\n    }\\n\\n    function pmx() external returns (IERC20);\\n\\n    function dns() external returns (IPrimexDNS);\\n\\n    function registry() external returns (address);\\n\\n    function traderBalanceVault() external returns (ITraderBalanceVault);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc4e25952cf7dd9eade5559b4c78a2e857381b67d4554e2afa2dfd2edc48af950\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IFeeExecutorStorage} from \\\"./IFeeExecutorStorage.sol\\\";\\n\\ninterface IFeeExecutor is IFeeExecutorStorage {\\n    /**\\n     * @dev Sets tier bonuses for a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @param _tiers The array of tier values.\\n     * @param _bonuses The array of NFT bonus parameters.\\n     */\\n    function setTierBonus(address _bucket, uint256[] calldata _tiers, NFTBonusParams[] calldata _bonuses) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the Debt-Token\\n     * @param _user User for which the bonus will be updated. If user doesn't have the bonus for paused\\n     * @param _oldScaledBalance Balance of the user before the operation at which the updateBonus function was called (e.g mint/burn)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonus(address _user, uint256 _oldScaledBalance, address _bucket, uint256 _currentIndex) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called directly by the user\\n     * @param _nftId Id of activated token\\n     **/\\n    function updateBonus(uint256 _nftId) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the P-Token or Debt-Token\\n     * @param _users Array of the users for whom the bonus will be updated.\\n     * @param _oldBalances Array of the balances before the operation at which the updateBonus function was called (e.g mint/transfer)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonuses(\\n        address[] memory _users,\\n        uint256[] memory _oldBalances,\\n        address _bucket,\\n        uint256 _currentIndex\\n    ) external;\\n\\n    /**\\n     * @dev Returns accumulated amount of p-tokens at the moment\\n     * @param _user The user for which the accumatedAmount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     * @return The accumulated amount.\\n     */\\n    function getAccumulatedAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the available amount (accumulated - claimedAmount) of p-tokens at the moment.\\n     * @param _user The user for which the available amount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     **/\\n    function getAvailableAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the bonus information for a user and NFT.\\n     * @param _user The address of the user.\\n     * @param _nftId The ID of the NFT.\\n     * @return bonus The activated bonus information.\\n     */\\n    function getBonus(address _user, uint256 _nftId) external view returns (ActivatedBonus memory);\\n}\\n\",\"keccak256\":\"0x4e89772ddb2daeefc1f970ce15d03bc6de8c284e126498bfd9f39d8646f2325a\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\n\\ninterface IFeeExecutorStorage {\\n    struct ActivatedBonus {\\n        uint256 nftId;\\n        IBucket bucket;\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 accumulatedAmount;\\n        uint256 lastUpdatedIndex;\\n        uint256 deadline;\\n        //if we allow to claim funds before the end of the bonus\\n        uint256 claimedAmount;\\n    }\\n\\n    struct NFTBonusParams {\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 duration;\\n    }\\n}\\n\",\"keccak256\":\"0x1a966b20c524d3f40b1f3afcc425d37502efde4d043e022de4078af4c334fb54\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucket.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\nimport {ISwapManager} from \\\"../interfaces/ISwapManager.sol\\\";\\nimport {IBucketStorage} from \\\"./IBucketStorage.sol\\\";\\n\\ninterface IBucket is IBucketStorage {\\n    struct ConstructorParams {\\n        string name;\\n        IPToken pToken;\\n        IDebtToken debtToken;\\n        IPositionManager positionManager;\\n        IPriceOracle priceOracle;\\n        IPrimexDNS dns;\\n        IReserve reserve;\\n        IWhiteBlackList whiteBlackList;\\n        address[] assets;\\n        IERC20Metadata borrowedAsset;\\n        uint256 feeBuffer;\\n        uint256 withdrawalFeeRate;\\n        uint256 reserveRate;\\n        // liquidityMining params\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        uint256 liquidityMiningAmount;\\n        uint256 liquidityMiningDeadline;\\n        uint256 stabilizationDuration;\\n        IInterestRateStrategy interestRateStrategy;\\n        uint128 estimatedBar;\\n        uint128 estimatedLar;\\n        uint256 maxAmountPerUser;\\n        bool isReinvestToAaveEnabled;\\n        bytes barCalcParams;\\n        uint256 maxTotalDeposit;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed pTokenReceiver, uint256 amount);\\n\\n    event Withdraw(address indexed withdrawer, address indexed borrowAssetReceiver, uint256 amount);\\n\\n    event DepositToAave(address indexed pool, uint256 amount);\\n\\n    event WithdrawFromAave(address indexed pool, uint256 amount);\\n\\n    event TopUpTreasury(address indexed sender, uint256 amount);\\n\\n    event FeeBufferChanged(uint256 feeBuffer);\\n\\n    event ReserveRateChanged(uint256 reserveRate);\\n\\n    event RatesIndexesUpdated(\\n        uint128 bar,\\n        uint128 lar,\\n        uint128 variableBorrowIndex,\\n        uint128 liquidityIndex,\\n        uint256 timestamp\\n    );\\n\\n    event WithdrawalFeeChanged(uint256 withdrawalFeeRate);\\n\\n    event InterestRateStrategyChanged(address interestRateStrategy);\\n\\n    event AddAsset(address addedAsset);\\n\\n    event RemoveAsset(address deletedAsset);\\n\\n    event MaxTotalDepositChanged(uint256 maxTotalDeposit);\\n\\n    event BarCalculationParamsChanged(bytes params);\\n\\n    event BucketLaunched();\\n\\n    /**\\n     * @dev Initializes the contract with the given parameters.\\n     * @param _params The ConstructorParams struct containing initialization parameters.\\n     * @param _registry The address of the registry contract.\\n     */\\n    function initialize(ConstructorParams memory _params, address _registry) external;\\n\\n    /**\\n     * @dev Function to add new trading asset for this bucket\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _newAsset The address of trading asset\\n     */\\n    function addAsset(address _newAsset) external;\\n\\n    /**\\n     * @notice Removes a trading asset from this bucket.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _assetToDelete The address of the asset to be removed.\\n     */\\n    function removeAsset(address _assetToDelete) external;\\n\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Sets the reserve rate.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _reserveRate The new reserve rate value.\\n     */\\n    function setReserveRate(uint256 _reserveRate) external;\\n\\n    /**\\n     * @dev Sets the new fee buffer.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _feeBuffer The new fee buffer value.\\n     */\\n    function setFeeBuffer(uint256 _feeBuffer) external;\\n\\n    /**\\n     * @dev Sets the withdrawal fee.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _withdrawalFee The new withdrawal fee value.\\n     */\\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\\n\\n    /**\\n     * @dev Sets the interest rate strategy contract address.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _interestRateStrategy The address of the interest rate strategy contract.\\n     */\\n    function setInterestRateStrategy(address _interestRateStrategy) external;\\n\\n    /**\\n     * @notice The function sets the max total deposit for the particular bucket\\n     * @param _maxTotalDeposit The amount of max total deposit for the bucket\\n     */\\n    function setMaxTotalDeposit(uint256 _maxTotalDeposit) external;\\n\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraws the 'amount' of underlying asset from the bucket. The 'amount' of overlying pTokens will be burned.\\n     * @param _borrowAssetReceiver The address of receiver of the borrowed asset.\\n     * @param amount The amount of underlying tokens to be withdrawn.\\n     */\\n    function withdraw(address _borrowAssetReceiver, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the BIG_TIMELOCK_ADMIN role to withdraw a specified amount of tokens after delisting.\\n     * @param _amount The amount of tokens to withdraw.\\n     */\\n    function withdrawAfterDelisting(uint256 _amount) external;\\n\\n    /**\\n     * @dev Receives a deposit and distributes it to the specified pToken receiver.\\n     * @dev Can be called only by another bucket.\\n     * @param _pTokenReceiver The address of the recipient of the pToken.\\n     * @param _amount The amount of tokens being deposited.\\n     * @param _duration The blocking time for a fixed-term deposit (if it's 0, then it will be a usual deposit)\\n     * @param _bucketFrom The name of the bucket from which the deposit is being made.\\n     */\\n    function receiveDeposit(\\n        address _pTokenReceiver,\\n        uint256 _amount,\\n        uint256 _duration,\\n        string memory _bucketFrom\\n    ) external;\\n\\n    /**\\n     * @notice Deposits (reinvests) funds from a bucket to another bucket.\\n     * Used only in the case of failed liquidity mining in the bucket from where the transfer happens.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _swapManager The address of the swap manager.\\n     * @param routes The array of routes for swapping tokens.\\n     * @param _amountOutMin The minimum amount of tokens to receive from the swap.\\n     */\\n    function depositFromBucket(\\n        string calldata _bucketTo,\\n        ISwapManager _swapManager,\\n        PrimexPricingLibrary.Route[] calldata routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @dev Allows the SMALL_TIMELOCK_ADMIN to withdraw all liquidity from Aave to Bucket.\\n     */\\n    function returnLiquidityFromAaveToBucket() external;\\n\\n    /**\\n     * @dev Function to update rates and indexes when a trader opens a trading position.\\n     * Mints debt tokens to trader. Calls only by positionManager contract.\\n     * @param _trader The address of the trader, who opens position.\\n     * @param _amount The 'amount' for which the deal is open, and 'amount' of debtTokens will be minted to the trader.\\n     * @param _to The address to transfer the borrowed asset to.\\n     */\\n\\n    function increaseDebt(address _trader, uint256 _amount, address _to) external;\\n\\n    /**\\n     * @dev Function to update rates and indexes.\\n     * Burns debt tokens of trader. Called only by positionManager contract.\\n     * @param _trader The address of the trader, who opened position.\\n     * @param _debtToBurn The 'amount' of trader's debtTokens will be burned by the trader.\\n     * @param _receiverOfAmountToReturn Treasury in case of liquidation. TraderBalanceVault in other cases\\n     * @param _amountToReturn Amount to transfer from bucket\\n     * @param _permanentLossAmount The amount of the protocol's debt to creditors accrued for this position\\n     */\\n    function decreaseTraderDebt(\\n        address _trader,\\n        uint256 _debtToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount\\n    ) external;\\n\\n    /**\\n     * @notice Batch decreases the debt of multiple traders.\\n     * @dev This function can only be called by the BATCH_MANAGER_ROLE.\\n     * @param _traders An array of addresses representing the traders.\\n     * @param _debtsToBurn An array of uint256 values representing the debts to burn for each trader.\\n     * @param _receiverOfAmountToReturn The address that will receive the amount to be returned.\\n     * @param _amountToReturn The amount to be returned.\\n     * @param _permanentLossAmount The amount of permanent loss.\\n     * @param _length The length of the traders array.\\n     */\\n    function batchDecreaseTradersDebt(\\n        address[] memory _traders,\\n        uint256[] memory _debtsToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount,\\n        uint256 _length\\n    ) external;\\n\\n    /**\\n     * @notice This function allows a user to pay back a permanent loss by burning his pTokens.\\n     * @param amount The amount of pTokens to be burned to pay back the permanent loss.\\n     */\\n    function paybackPermanentLoss(uint256 amount) external;\\n\\n    /**\\n     * @dev Calculates the permanent loss based on the scaled permanent loss and the normalized income.\\n     * @return The amount of permanent loss.\\n     */\\n    function permanentLoss() external view returns (uint256);\\n\\n    /**\\n     * @dev Checks if the bucket is deprecated in the protocol.\\n     * @return Whether the bucket is deprecated or not.\\n     */\\n    function isDeprecated() external view returns (bool);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is delisted.\\n     * @return True if the bucket is delisted, otherwise false.\\n     */\\n    function isDelisted() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if an admin can withdraw from the bucket after delisting.\\n     * @return A boolean indicating whether withdrawal is available.\\n     */\\n    function isWithdrawAfterDelistingAvailable() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if this bucket is active in the protocol.\\n     * @return bool True if the bucket is active, false otherwise.\\n     */\\n    function isActive() external view returns (bool);\\n\\n    /**\\n     * @dev Returns the parameters for liquidity mining.\\n     * @return LMparams The liquidity mining parameters.\\n     */\\n    function getLiquidityMiningParams() external view returns (LiquidityMiningParams memory);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is stable in the liquidity mining event.\\n     * @return A boolean value representing the stability of the bucket.\\n     */\\n    function isBucketStable() external view returns (bool);\\n\\n    /**\\n     * @dev Calculates the max leverage according to the following formula:\\n     * ((1 + maintenanceBuffer) * feeBuffer) / ((1 + maintenanceBuffer) * feeBuffer - (1 - securityBuffer) *\\n     * (1 - pairPriceDropBA) * (1 - oracleTolerableLimitAB) * (1 - oracleTolerableLimitBA))\\n     * @param _asset The address of trading asset\\n     * @return The maximum leverage as a uint256 value.\\n     */\\n    function maxAssetLeverage(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized income per unit of underlying asset, expressed in ray\\n     * @return The normalized income per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedIncome() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedVariableDebt() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns allowed trading assets for current bucket\\n     * @return List of addresses of allowed assets\\n     */\\n    function getAllowedAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns current avalable liquidity of borrowedAsset for trading.\\n     * @return The amount of available borrowedAsset\\n     */\\n    function availableLiquidity() external view returns (uint256);\\n}\\n\\ninterface IBucketV2 is IBucket {\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit from user wallet\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount, bool _takeDepositFromWallet) external;\\n}\\n\",\"keccak256\":\"0xcb6d018cd67323ea8891193d1dfcd8f19d23e8aae921797c39244aa30c33e0f2\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucketStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\n\\ninterface IBucketStorage {\\n    /**\\n     * @dev Parameters of liquidity mining\\n     */\\n    struct LiquidityMiningParams {\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        bool isBucketLaunched;\\n        uint256 accumulatingAmount;\\n        uint256 deadlineTimestamp;\\n        uint256 stabilizationDuration;\\n        uint256 stabilizationEndTimestamp;\\n        uint256 maxAmountPerUser; // if maxAmountPerUser is >= accumulatingAmount then check on maxAmountPerUser is off\\n        // Constant max variables are used for calculating users' points.\\n        // These intervals are used for fair distribution of points among Lenders.\\n        // Lenders who brought liquidity earlier receive more than the ones who deposited later.\\n        // To get maximum points per token, a Lender should deposit immediately after the Bucket deployment.\\n        uint256 maxDuration;\\n        uint256 maxStabilizationEndTimestamp;\\n    }\\n    //                                        1. Corner case of bucket launch\\n    //\\n    //                                              maxDuration\\n    //       ------------------------------------------------------------------------------------------------\\n    //      |                                                                                               |\\n    //      |                                                                        stabilizationDuration  |\\n    //      |                                                                      -------------------------|\\n    //      |                                                                     | bucket launch           |\\n    //   +--+---------------------------------------------------------------------+-------------------------+------> time\\n    //      bucket deploy                                                         deadlineTimestamp         maxStabilizationEndTimestamp\\n    //                                                                                                       (=stabilizationEndTimestamp here)\\n    //                                  (corner case of bucket launch)\\n\\n    //                                        2. One of cases of bucket launch\\n    //\\n    //      |                     stabilizationDuration\\n    //      |                   -------------------------\\n    //      |                  |                         |\\n    //   +--+------------------+-------------------------+------------------------+-------------------------+------> time\\n    //      bucket deploy      bucket launch            stabilizationEndTimestamp  deadlineTimestamp        maxStabilizationEndTimestamp\\n    //                                                                            (after deadline bucket can't be launched)\\n\\n    struct Asset {\\n        uint256 index;\\n        bool isSupported;\\n    }\\n\\n    function liquidityIndex() external returns (uint128);\\n\\n    function variableBorrowIndex() external returns (uint128);\\n\\n    function name() external view returns (string memory);\\n\\n    function registry() external view returns (address);\\n\\n    function positionManager() external view returns (IPositionManager);\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function permanentLossScaled() external view returns (uint256);\\n\\n    function pToken() external view returns (IPToken);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowedAsset() external view returns (IERC20Metadata);\\n\\n    function feeBuffer() external view returns (uint256);\\n\\n    function withdrawalFeeRate() external view returns (uint256);\\n\\n    /**\\n     * @notice bar = borrowing annual rate (originally APR)\\n     */\\n    function bar() external view returns (uint128);\\n\\n    /**\\n     * @notice lar = lending annual rate (originally APY)\\n     */\\n    function lar() external view returns (uint128);\\n\\n    function interestRateStrategy() external view returns (IInterestRateStrategy);\\n\\n    function estimatedBar() external view returns (uint128);\\n\\n    function estimatedLar() external view returns (uint128);\\n\\n    function allowedAssets(address _asset) external view returns (uint256, bool);\\n\\n    function whiteBlackList() external view returns (IWhiteBlackList);\\n\\n    function maxTotalDeposit() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x21ab63957721b0662c50fdff4b13ed53dfad864fc24220517e98a54ce12250f8\",\"license\":\"BUSL-1.1\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\",\"keccak256\":\"0xdfd1623c3bf46ff9a6fbbdff42a7d9a1b5e76c4252dd394db1b7811989dcaba3\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtToken.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IDebtTokenStorage, IBucket, IFeeExecutor, IERC20Upgradeable, IActivityRewardDistributor} from \\\"./IDebtTokenStorage.sol\\\";\\n\\ninterface IDebtToken is IDebtTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     **/\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after DebtTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     **/\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the FeeDecreaser for current DebtToken.\\n     * @param _feeDecreaser The interest increaser address.\\n     */\\n    function setFeeDecreaser(IFeeExecutor _feeDecreaser) external;\\n\\n    /**\\n     * @dev Sets the trader reward distributor contract address.\\n     * @param _traderRewardDistributor The address of the trader reward distributor contract.\\n     * Only the BIG_TIMELOCK_ADMIN role can call this function.\\n     */\\n    function setTraderRewardDistributor(IActivityRewardDistributor _traderRewardDistributor) external;\\n\\n    /**\\n     * @dev Mints `amount` DebtTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current variableBorrowIndex\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns DebtTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the DebtTokens, getting them burned\\n     * @param _amount The amount being burned\\n     * @param _index The current variableBorrowIndex\\n     **/\\n    function burn(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns a batch of tokens from multiple users.\\n     * @param _users An array of user addresses whose tokens will be burned.\\n     * @param _amounts An array of token amounts to be burned for each user.\\n     * @param _index The index used to calculate the scaled amounts.\\n     * @param _length The length of the user and amounts arrays.\\n     */\\n    function batchBurn(address[] memory _users, uint256[] memory _amounts, uint256 _index, uint256 _length) external;\\n\\n    /**\\n     * @dev Returns the principal debt balance of the user\\n     * @param _user The address of the user.\\n     * @return The scaled balance of the user.\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of debtToken.\\n     * @return The scaled total supply of the debtToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x181f52e402dfafa461a15a25983c2c6b13e8d7688accee410987cb8e27f38bdd\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtTokenStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IDebtTokenStorage is IERC20Upgradeable {\\n    function bucket() external view returns (IBucket);\\n\\n    function feeDecreaser() external view returns (IFeeExecutor);\\n\\n    function traderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0x22ecd3fd35265d62e8ee590e1d0fd3fd7df07347e7ed20c4b5745d2aba49f2df\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorStorageV2} from \\\"./IKeeperRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IKeeperRewardDistributor is IKeeperRewardDistributorStorage, IPausable {\\n    struct DecreasingGasByReasonParams {\\n        DecreasingReason reason;\\n        uint256 amount;\\n    }\\n    struct MaxGasPerPositionParams {\\n        KeeperActionType actionType;\\n        KeeperActionRewardConfig config;\\n    }\\n\\n    /**\\n     * @dev     Params for initialize() function\\n     * @param   priceOracle  Address of the PriceOracle contract\\n     * @param   registry  Address of the Registry contract\\n     * @param   pmx  Address of PMXToken\\n     * @param   treasury  Address of the Treasury contract\\n     * @param   pmxPartInReward  Percentage of PMX in reward (in WAD)\\n     * @param   nativePartInReward  Percentage of native token in reward (in WAD)\\n     * @param   positionSizeCoefficientA  CoefficientA in the formula positionSize * CoefficientA + CoefficientB\\n     * @param   positionSizeCoefficientB  CoefficientB in the formula positionSize * CoefficientA + CoefficientB\\n     * @param   additionalGas  Additional gas added to actual gas spent\\n     * @param   defaultMaxGasPrice  Max gas price allowed during reward calculation (used when no oracle price found)\\n     * @param   oracleGasPriceTolerance  Percentage by which oracle gas price can be exceeded (in WAD)\\n     * @param   paymentModel  The model of payment for gas in the network\\n     * @param   maxGasPerPositionParams  Parameters for the setMaxGasPerPosition function\\n     * @param   decreasingGasByReasonParams  Parameters for the setDecreasingGasByReason function\\n     */\\n    struct InitParams {\\n        address priceOracle;\\n        address registry;\\n        address pmx;\\n        address treasury;\\n        address whiteBlackList;\\n        uint256 pmxPartInReward;\\n        uint256 nativePartInReward;\\n        uint256 positionSizeCoefficientA;\\n        int256 positionSizeCoefficientB;\\n        uint256 additionalGas;\\n        uint256 defaultMaxGasPrice;\\n        uint256 oracleGasPriceTolerance;\\n        PaymentModel paymentModel;\\n        MaxGasPerPositionParams[] maxGasPerPositionParams;\\n        DecreasingGasByReasonParams[] decreasingGasByReasonParams;\\n    }\\n\\n    event ClaimFees(address indexed keeper, address indexed asset, uint256 amount);\\n    event DefaultMaxGasPriceChanged(uint256 indexed defaultMaxGasPrice);\\n    event OracleGasPriceToleranceChanged(uint256 indexed oracleGasPriceTolerance);\\n    event MaxGasPerPositionChanged(KeeperActionType indexed actionType, KeeperActionRewardConfig config);\\n    event DataLengthRestrictionsChanged(KeeperCallingMethod callingMethod, uint256 maxRoutesLength, uint256 baseLength);\\n    event DecreasingGasByReasonChanged(DecreasingReason indexed reason, uint256 amount);\\n    event PmxPartInRewardChanged(uint256 indexed pmxPartInReward);\\n    event NativePartInRewardChanged(uint256 indexed nativePartInReward);\\n    event PositionSizeCoefficientsChanged(\\n        uint256 indexed positionSizeCoefficientA,\\n        int256 indexed positionSizeCoefficientB\\n    );\\n    event AdditionalGasChanged(uint256 indexed additionalGas);\\n    event KeeperRewardUpdated(address indexed keeper, uint256 rewardInPmx, uint256 rewardInNativeCurrency);\\n\\n    /**\\n     * @notice Initializes the KeeperRewardDistributor contract.\\n     * @param _params  Parameters for initialization\\n     */\\n    function initialize(InitParams calldata _params) external;\\n\\n    /**\\n     * @dev Params for the updateReward function\\n     * @param keeper  Address of the keeper\\n     * @param positionAsset  Address of the position asset\\n     * @param positionSize  Size of the position\\n     * @param action  The action that was performed by the keeper\\n     * @param numberOfActions  Number of actions performed by the keeper\\n     * @param gasSpent Gas spent on executing transaction\\n     * @param decreasingCounter An array where each index contains the number of decreasing reasons according to the DecreasingReason enum\\n     * @param routesLength  The length of routes provided as input to the protocol function,\\n     * subject to an additional commission in the ARBITRUM payment model.\\n     */\\n\\n    struct UpdateRewardParams {\\n        address keeper;\\n        address positionAsset;\\n        uint256 positionSize;\\n        KeeperActionType action;\\n        uint256 numberOfActions;\\n        uint256 gasSpent;\\n        uint256[] decreasingCounter;\\n        uint256 routesLength;\\n    }\\n\\n    /**\\n     * @notice Updates reward for keeper for closing position or executing order\\n     * @dev Only callable by the PM_ROLE, LOM_ROLE, BATCH_MANAGER_ROLE roles.\\n     * @param _params The UpdateRewardParams params\\n     */\\n    function updateReward(UpdateRewardParams calldata _params) external;\\n\\n    /**\\n     * @notice Claims earned reward of the keeper\\n     * @param _pmxAmount  Amount of PMX token to claim\\n     * @param _nativeAmount  Amount of native token to claim\\n     */\\n    function claim(uint256 _pmxAmount, uint256 _nativeAmount) external;\\n\\n    /**\\n     * @notice Sets the default maximum gas price allowed.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _defaultMaxGasPrice The new default maximum gas price value.\\n     */\\n    function setDefaultMaxGasPrice(uint256 _defaultMaxGasPrice) external;\\n\\n    /**\\n     * @notice Sets the amount of gas to be removed for the specified reason\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _reason The reason for which an amount is set\\n     * @param _amount Gas amount.\\n     */\\n    function setDecreasingGasByReason(DecreasingReason _reason, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the KeeperActionRewardConfig for the specified action type\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _actionType The action type for which the config is set\\n     * @param _config The KeeperActionRewardConfig struct\\n     */\\n\\n    function setMaxGasPerPosition(KeeperActionType _actionType, KeeperActionRewardConfig calldata _config) external;\\n\\n    /**\\n     * @notice Sets the dataLengthRestrictions for the specified KeeperCallingMethod.\\n     * @param _callingMethod The calling method for which dataLengthRestrictions is set\\n     * @param _maxRoutesLength The maximum routes length for which an additional fee will be paid in the ARBITRUM payment model, in bytes\\n     * @param _baseLength The length of the data entering the protocol function including method signature\\n     * and excluding dynamic types(e.g, routesLength), in bytes\\n     */\\n    function setDataLengthRestrictions(\\n        KeeperCallingMethod _callingMethod,\\n        uint256 _maxRoutesLength,\\n        uint256 _baseLength\\n    ) external;\\n\\n    /**\\n     * @notice Sets the tolerance for gas price fluctuations from the oracle price.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _oracleGasPriceTolerance The new oracle gas price tolerance value (percent expressed as WAD).\\n     */\\n    function setOracleGasPriceTolerance(uint256 _oracleGasPriceTolerance) external;\\n\\n    /**\\n     * @notice Sets the PMX token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _pmxPartInReward The new PMX token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setPmxPartInReward(uint256 _pmxPartInReward) external;\\n\\n    /**\\n     * @notice Sets the native token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _nativePartInReward The new native token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setNativePartInReward(uint256 _nativePartInReward) external;\\n\\n    /**\\n     * @notice Sets the position size coefficients for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _positionSizeCoefficientA The new positionSizeCoefficientA value (in WAD).\\n     * @param _positionSizeCoefficientB The new positionSizeCoefficientB value (in WAD).\\n     */\\n    function setPositionSizeCoefficients(uint256 _positionSizeCoefficientA, int256 _positionSizeCoefficientB) external;\\n\\n    /**\\n     * @notice Sets the additional gas value for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _additionalGas The new additionalGas value.\\n     */\\n    function setAdditionalGas(uint256 _additionalGas) external;\\n}\\n\\ninterface IKeeperRewardDistributorV2 is IKeeperRewardDistributor, IKeeperRewardDistributorStorageV2 {\\n    event MinPositionSizeMultiplierChanged(int256 newMinPositionSizeMultiplier);\\n\\n    /**\\n     * @notice Sets the minPositionSizeMultiplier for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _minPositionSizeMultiplier The new minPositionSizeMultiplier value (in WAD).\\n     */\\n\\n    function setMinPositionSizeMultiplier(int256 _minPositionSizeMultiplier) external;\\n}\\n\",\"keccak256\":\"0x7f423b368b400856023883a2a39d6de927e983af935e5bfd05c96031395550e0\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IKeeperRewardDistributorStorage {\\n    enum DecreasingReason {\\n        NonExistentIdForLiquidation,\\n        NonExistentIdForSLOrTP,\\n        IncorrectConditionForLiquidation,\\n        IncorrectConditionForSL,\\n        ClosePostionInTheSameBlock\\n    }\\n\\n    enum KeeperActionType {\\n        OpenByOrder,\\n        StopLoss,\\n        TakeProfit,\\n        Liquidation,\\n        BucketDelisted\\n    }\\n\\n    enum KeeperCallingMethod {\\n        ClosePositionByCondition,\\n        OpenPositionByOrder,\\n        CloseBatchPositions\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of keeper rewards in the ARBITRUM payment model\\n     * @param maxRoutesLength The maximum length of routes for which will be paid keeper rewards, depending on KeeperCallingMethod\\n     * @param baseLength The static length of the data entering the protocol function, depending on KeeperCallingMethod\\n     */\\n    struct DataLengthRestrictions {\\n        uint256 maxRoutesLength;\\n        uint256 baseLength;\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of maximum gas per position\\n     * @param baseMaxGas1 Base gas amount that used to calculate max gas amount\\n     * @param baseMaxGas2 Base gas amount that used to calculate max gas amount when number of keeper actions > inflectionPoint\\n     * @param multiplier2 The multiplier which is multiplied by the number of keeper actions when number of keeper actions > inflectionPoint\\n     * @param inflectionPoint Number of actions after which the multiplier2 takes effect\\n     */\\n    struct KeeperActionRewardConfig {\\n        uint256 baseMaxGas1;\\n        uint256 baseMaxGas2;\\n        uint256 multiplier1;\\n        uint256 multiplier2;\\n        uint256 inflectionPoint;\\n    }\\n\\n    struct KeeperBalance {\\n        uint256 pmxBalance;\\n        uint256 nativeBalance;\\n    }\\n    enum PaymentModel {\\n        DEFAULT,\\n        ARBITRUM\\n    }\\n\\n    function priceOracle() external view returns (address);\\n\\n    function registry() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address payable);\\n\\n    function pmxPartInReward() external view returns (uint256);\\n\\n    function nativePartInReward() external view returns (uint256);\\n\\n    function positionSizeCoefficientA() external view returns (uint256);\\n\\n    function positionSizeCoefficientB() external view returns (int256);\\n\\n    function additionalGas() external view returns (uint256);\\n\\n    function defaultMaxGasPrice() external view returns (uint256);\\n\\n    function oracleGasPriceTolerance() external view returns (uint256);\\n\\n    function paymentModel() external view returns (PaymentModel);\\n\\n    function keeperBalance(address) external view returns (uint256, uint256);\\n\\n    function maxGasPerPosition(KeeperActionType) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function dataLengthRestrictions(KeeperCallingMethod) external view returns (uint256, uint256);\\n\\n    function decreasingGasByReason(DecreasingReason) external view returns (uint256);\\n\\n    function totalBalance() external view returns (uint256, uint256);\\n}\\n\\ninterface IKeeperRewardDistributorStorageV2 is IKeeperRewardDistributorStorage {\\n    function minPositionSizeMultiplier() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xcdb1217375138dbfa37b55c551bbb374c10af7fa39e91113a55921bcb153b4ce\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"../libraries/TokenTransfersLibrary.sol\\\";\\n\\nimport \\\"./KeeperRewardDistributorStorage.sol\\\";\\nimport \\\"../Constants.sol\\\";\\nimport {IKeeperRewardDistributor, IKeeperRewardDistributorV2} from \\\"./IKeeperRewardDistributor.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ITreasury} from \\\"../Treasury/ITreasury.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\nimport {IArbGasInfo} from \\\"../interfaces/IArbGasInfo.sol\\\";\\n\\ncontract KeeperRewardDistributor is IKeeperRewardDistributorV2, KeeperRewardDistributorStorageV2 {\\n    using WadRayMath for uint256;\\n    IArbGasInfo internal constant ARB_NITRO_ORACLE = IArbGasInfo(0x000000000000000000000000000000000000006C);\\n    uint256 internal constant GAS_FOR_BYTE = 16;\\n    uint256 internal constant TRASNSACTION_METADATA_BYTES = 140;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Modifier that checks if the caller has a specific role.\\n     * @param _role The role identifier to check.\\n     */\\n    modifier onlyRole(bytes32 _role) {\\n        _require(IAccessControl(registry).hasRole(_role, msg.sender), Errors.FORBIDDEN.selector);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the sender is not blacklisted.\\n     */\\n    modifier notBlackListed() {\\n        _require(!whiteBlackList.isBlackListed(msg.sender), Errors.SENDER_IS_BLACKLISTED.selector);\\n        _;\\n    }\\n    /**\\n     * @dev Modifier that checks if the caller has a manager role.\\n     */\\n\\n    modifier onlyManagerRole() {\\n        _require(\\n            IAccessControl(registry).hasRole(PM_ROLE, msg.sender) ||\\n                IAccessControl(registry).hasRole(LOM_ROLE, msg.sender) ||\\n                IAccessControl(registry).hasRole(BATCH_MANAGER_ROLE, msg.sender),\\n            Errors.FORBIDDEN.selector\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n    function initialize(InitParams calldata _params) external override initializer {\\n        _require(\\n            IERC165Upgradeable(_params.registry).supportsInterface(type(IAccessControl).interfaceId) &&\\n                IERC165Upgradeable(_params.priceOracle).supportsInterface(type(IPriceOracle).interfaceId) &&\\n                IERC165Upgradeable(_params.treasury).supportsInterface(type(ITreasury).interfaceId) &&\\n                IERC165Upgradeable(_params.pmx).supportsInterface(type(IERC20).interfaceId) &&\\n                IERC165Upgradeable(_params.whiteBlackList).supportsInterface(type(IWhiteBlackList).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        pmx = _params.pmx;\\n        priceOracle = _params.priceOracle;\\n        registry = _params.registry;\\n        treasury = payable(_params.treasury);\\n        whiteBlackList = IWhiteBlackList(_params.whiteBlackList);\\n        pmxPartInReward = _params.pmxPartInReward;\\n        nativePartInReward = _params.nativePartInReward;\\n        positionSizeCoefficientA = _params.positionSizeCoefficientA;\\n        positionSizeCoefficientB = _params.positionSizeCoefficientB;\\n        additionalGas = _params.additionalGas;\\n        defaultMaxGasPrice = _params.defaultMaxGasPrice;\\n        oracleGasPriceTolerance = _params.oracleGasPriceTolerance;\\n        paymentModel = _params.paymentModel;\\n        for (uint i; i < _params.maxGasPerPositionParams.length; ++i) {\\n            _setMaxGasPerPosition(\\n                _params.maxGasPerPositionParams[i].actionType,\\n                _params.maxGasPerPositionParams[i].config\\n            );\\n        }\\n        for (uint i; i < _params.decreasingGasByReasonParams.length; ++i) {\\n            _setDecreasingGasByReason(\\n                _params.decreasingGasByReasonParams[i].reason,\\n                _params.decreasingGasByReasonParams[i].amount\\n            );\\n        }\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        __ERC165_init();\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n    function updateReward(UpdateRewardParams calldata _params) external override onlyManagerRole {\\n        int256 positionSizeMultiplier = int256(\\n            (\\n                PrimexPricingLibrary.getOracleAmountsOut(\\n                    _params.positionAsset,\\n                    NATIVE_CURRENCY,\\n                    _params.positionSize,\\n                    priceOracle\\n                )\\n            ).wmul(positionSizeCoefficientA)\\n        ) + positionSizeCoefficientB;\\n        if (positionSizeMultiplier <= 0) return;\\n        if (positionSizeMultiplier < minPositionSizeMultiplier) positionSizeMultiplier = minPositionSizeMultiplier;\\n\\n        uint256 gasAmount = additionalGas + _pureGasSpent(_params.gasSpent, _params.decreasingCounter);\\n        uint256 maxGasAmount = _getMaxGasAmount(_params.action, _params.numberOfActions);\\n        if (gasAmount > maxGasAmount) {\\n            gasAmount = maxGasAmount;\\n        }\\n        uint256 gasPrice = tx.gasprice;\\n        int256 oracleGasPrice = IPriceOracle(priceOracle).getGasPrice();\\n        uint256 maxGasPriceForReward = oracleGasPrice > 0\\n            ? uint256(oracleGasPrice).wmul(WadRayMath.WAD + oracleGasPriceTolerance)\\n            : defaultMaxGasPrice;\\n        if (gasPrice > maxGasPriceForReward) {\\n            gasPrice = maxGasPriceForReward;\\n        }\\n\\n        uint256 rewardInNativeCurrency;\\n        uint256 rewardInPmx;\\n\\n        // to avoid stack too deep\\n        {\\n            uint256 l1CostWei;\\n            if (paymentModel == PaymentModel.ARBITRUM) {\\n                KeeperCallingMethod callingMethod;\\n                uint256 variableLength;\\n                if (_params.numberOfActions > 1) {\\n                    callingMethod = KeeperCallingMethod.CloseBatchPositions;\\n                    // 64 represents 1 slot (32bytes) of _ids and 1 slot (32 bytes) of _conditionIndexes\\n                    variableLength = _params.numberOfActions * 64;\\n                } else if (_params.action == KeeperActionType.OpenByOrder) {\\n                    callingMethod = KeeperCallingMethod.OpenPositionByOrder;\\n                } else {\\n                    callingMethod = KeeperCallingMethod.ClosePositionByCondition;\\n                }\\n                DataLengthRestrictions memory restrictions = dataLengthRestrictions[callingMethod];\\n                variableLength += _params.routesLength < restrictions.maxRoutesLength\\n                    ? _params.routesLength\\n                    : restrictions.maxRoutesLength;\\n                l1CostWei =\\n                    ARB_NITRO_ORACLE.getL1BaseFeeEstimate() *\\n                    GAS_FOR_BYTE *\\n                    (variableLength + restrictions.baseLength + TRASNSACTION_METADATA_BYTES);\\n            }\\n\\n            uint256 reward = (gasAmount * gasPrice + l1CostWei).wmul(uint256(positionSizeMultiplier));\\n            rewardInNativeCurrency = reward.wmul(nativePartInReward);\\n            rewardInPmx = PrimexPricingLibrary.getOracleAmountsOut(NATIVE_CURRENCY, pmx, reward, priceOracle).wmul(\\n                pmxPartInReward\\n            );\\n        }\\n        keeperBalance[_params.keeper].pmxBalance += rewardInPmx;\\n        keeperBalance[_params.keeper].nativeBalance += rewardInNativeCurrency;\\n\\n        totalBalance.pmxBalance += rewardInPmx;\\n        totalBalance.nativeBalance += rewardInNativeCurrency;\\n        emit KeeperRewardUpdated(_params.keeper, rewardInPmx, rewardInNativeCurrency);\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n    function claim(\\n        uint256 _pmxAmount,\\n        uint256 _nativeAmount\\n    ) external override nonReentrant whenNotPaused notBlackListed {\\n        KeeperBalance memory balance = keeperBalance[msg.sender];\\n        if (_pmxAmount > balance.pmxBalance) _pmxAmount = balance.pmxBalance;\\n        if (_nativeAmount > balance.nativeBalance) _nativeAmount = balance.nativeBalance;\\n\\n        if (_pmxAmount > 0) {\\n            keeperBalance[msg.sender].pmxBalance -= _pmxAmount;\\n            totalBalance.pmxBalance -= _pmxAmount;\\n            ITreasury(treasury).transferFromTreasury(_pmxAmount, pmx, msg.sender);\\n            emit ClaimFees(msg.sender, pmx, _pmxAmount);\\n        }\\n        if (_nativeAmount > 0) {\\n            keeperBalance[msg.sender].nativeBalance -= _nativeAmount;\\n            totalBalance.nativeBalance -= _nativeAmount;\\n            ITreasury(treasury).transferFromTreasury(_nativeAmount, NATIVE_CURRENCY, msg.sender);\\n            emit ClaimFees(msg.sender, NATIVE_CURRENCY, _nativeAmount);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n\\n    function setDecreasingGasByReason(\\n        DecreasingReason _reason,\\n        uint256 _amount\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        _setDecreasingGasByReason(_reason, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributorV2\\n     */\\n\\n    function setMinPositionSizeMultiplier(\\n        int256 _minPositionSizeMultiplier\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        _require(\\n            _minPositionSizeMultiplier > 0 && uint256(_minPositionSizeMultiplier) <= WadRayMath.WAD * 2,\\n            Errors.INCORRECT_MULTIPLIER.selector\\n        );\\n        minPositionSizeMultiplier = _minPositionSizeMultiplier;\\n        emit MinPositionSizeMultiplierChanged(_minPositionSizeMultiplier);\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n\\n    function setMaxGasPerPosition(\\n        KeeperActionType _actionType,\\n        KeeperActionRewardConfig calldata _config\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        _setMaxGasPerPosition(_actionType, _config);\\n    }\\n\\n    function setDataLengthRestrictions(\\n        KeeperCallingMethod _callingMethod,\\n        uint256 _maxRoutesLength,\\n        uint256 _baseLength\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        DataLengthRestrictions storage restrictions = dataLengthRestrictions[_callingMethod];\\n        restrictions.maxRoutesLength = _maxRoutesLength;\\n        restrictions.baseLength = _baseLength;\\n        emit DataLengthRestrictionsChanged(_callingMethod, _maxRoutesLength, _baseLength);\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n    function setDefaultMaxGasPrice(uint256 _defaultMaxGasPrice) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        defaultMaxGasPrice = _defaultMaxGasPrice;\\n        emit DefaultMaxGasPriceChanged(_defaultMaxGasPrice);\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n    function setOracleGasPriceTolerance(\\n        uint256 _oracleGasPriceTolerance\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        oracleGasPriceTolerance = _oracleGasPriceTolerance;\\n        emit OracleGasPriceToleranceChanged(_oracleGasPriceTolerance);\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n    function setPmxPartInReward(uint256 _pmxPartInReward) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        _require(_pmxPartInReward <= TEN_WAD, Errors.INCORRECT_PART_IN_REWARD.selector);\\n        pmxPartInReward = _pmxPartInReward;\\n        emit PmxPartInRewardChanged(_pmxPartInReward);\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n    function setNativePartInReward(uint256 _nativePartInReward) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        _require(_nativePartInReward <= TEN_WAD, Errors.INCORRECT_PART_IN_REWARD.selector);\\n        nativePartInReward = _nativePartInReward;\\n        emit NativePartInRewardChanged(_nativePartInReward);\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n    function setPositionSizeCoefficients(\\n        uint256 _positionSizeCoefficientA,\\n        int256 _positionSizeCoefficientB\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        positionSizeCoefficientA = _positionSizeCoefficientA;\\n        positionSizeCoefficientB = _positionSizeCoefficientB;\\n        emit PositionSizeCoefficientsChanged(_positionSizeCoefficientA, _positionSizeCoefficientB);\\n    }\\n\\n    /**\\n     * @inheritdoc IKeeperRewardDistributor\\n     */\\n    function setAdditionalGas(uint256 _additionalGas) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        additionalGas = _additionalGas;\\n        emit AdditionalGasChanged(_additionalGas);\\n    }\\n\\n    /**\\n     * @inheritdoc IPausable\\n     */\\n    function pause() external override onlyRole(EMERGENCY_ADMIN) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @inheritdoc IPausable\\n     */\\n    function unpause() external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param _interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IKeeperRewardDistributorV2).interfaceId ||\\n            _interfaceId == type(IKeeperRewardDistributor).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    function _setMaxGasPerPosition(KeeperActionType _actionType, KeeperActionRewardConfig calldata _config) internal {\\n        maxGasPerPosition[_actionType] = _config;\\n        emit MaxGasPerPositionChanged(_actionType, _config);\\n    }\\n\\n    function _setDecreasingGasByReason(DecreasingReason _reason, uint256 _amount) internal {\\n        decreasingGasByReason[_reason] = _amount;\\n        emit DecreasingGasByReasonChanged(_reason, _amount);\\n    }\\n\\n    function _pureGasSpent(\\n        uint256 _totalGasSpent,\\n        uint256[] calldata _decreasingCounter\\n    ) internal view returns (uint256) {\\n        if (_decreasingCounter.length == 0) return _totalGasSpent;\\n        uint256 decreaseAmount;\\n        for (uint256 i; i < _decreasingCounter.length; ++i) {\\n            if (_decreasingCounter[i] > 0)\\n                decreaseAmount += _decreasingCounter[i] * decreasingGasByReason[DecreasingReason(i)];\\n        }\\n        return _totalGasSpent > decreaseAmount ? _totalGasSpent - decreaseAmount : 0;\\n    }\\n\\n    function _getMaxGasAmount(KeeperActionType _actionType, uint256 _numberOfActions) internal view returns (uint256) {\\n        // at the moment the number of actions to open by order is always 1\\n        if (_actionType == KeeperActionType.OpenByOrder) return maxGasPerPosition[_actionType].multiplier1;\\n        KeeperActionRewardConfig storage config = maxGasPerPosition[_actionType];\\n        if (config.inflectionPoint == 0 || config.inflectionPoint > _numberOfActions)\\n            return config.baseMaxGas1 + config.multiplier1 * _numberOfActions;\\n        // We apply the multiplier2  only if numberOfActions >= inflectionPoint\\n        return config.baseMaxGas2 + config.multiplier2 * _numberOfActions;\\n    }\\n}\\n\",\"keccak256\":\"0x6236273fceba5bbf8a8a7712765b828235fb0791bc3e5127e1eb14ce5aeb5870\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/KeeperRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorStorageV2} from \\\"./IKeeperRewardDistributorStorage.sol\\\";\\n\\nabstract contract KeeperRewardDistributorStorage is\\n    IKeeperRewardDistributorStorage,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    ERC165Upgradeable\\n{\\n    address public override priceOracle;\\n    address public override registry;\\n    address public override pmx;\\n    address payable public override treasury;\\n    uint256 public override pmxPartInReward;\\n    uint256 public override nativePartInReward;\\n    uint256 public override positionSizeCoefficientA;\\n    int256 public override positionSizeCoefficientB;\\n    uint256 public override additionalGas;\\n    uint256 public override defaultMaxGasPrice;\\n    uint256 public override oracleGasPriceTolerance;\\n    PaymentModel public override paymentModel;\\n    mapping(address => KeeperBalance) public override keeperBalance;\\n    KeeperBalance public override totalBalance;\\n    mapping(KeeperActionType => KeeperActionRewardConfig) public override maxGasPerPosition;\\n    mapping(KeeperCallingMethod => DataLengthRestrictions) public override dataLengthRestrictions;\\n    mapping(DecreasingReason => uint256) public override decreasingGasByReason;\\n    IWhiteBlackList internal whiteBlackList;\\n}\\n\\nabstract contract KeeperRewardDistributorStorageV2 is\\n    IKeeperRewardDistributorStorageV2,\\n    KeeperRewardDistributorStorage\\n{\\n    int256 public override minPositionSizeMultiplier;\\n}\\n\",\"keccak256\":\"0xe125659c524119ebe5bd25f170081d73b29c8b572ae990a16ae7784ab327a081\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {ILiquidityMiningRewardDistributorStorage} from \\\"./ILiquidityMiningRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributor is ILiquidityMiningRewardDistributorStorage, IPausable {\\n    struct RewardsInPMX {\\n        uint256 minReward;\\n        uint256 maxReward;\\n        uint256 extraReward;\\n    }\\n\\n    /**\\n     * @notice Emitted when a reward is claimed by a receiver from a specific bucket.\\n     * @param receiver The address of the receiver.\\n     * @param bucket The address of the bucket from which the reward is claimed.\\n     * @param amount The amount of the claimed reward.\\n     */\\n    event ClaimedReward(address indexed receiver, address indexed bucket, uint256 amount);\\n    /**\\n     * @notice Emitted when PMX tokens are withdrawn by an admin.\\n     * @param amount The amount of PMX tokens withdrawn.\\n     */\\n    event WithdrawPmxByAdmin(uint256 indexed amount);\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _primexDNS The address of the IPrimexDNS contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _registry The address of the registry contract.\\n     * @param _treasury The address of the treasury contract.\\n     * @param _reinvestmentRate The rate at which rewards are reinvested.\\n     * @param _reinvestmentDuration The duration for which rewards are reinvested.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IPrimexDNS _primexDNS,\\n        IERC20 _pmx,\\n        ITraderBalanceVault _traderBalanceVault,\\n        address _registry,\\n        address _treasury,\\n        uint256 _reinvestmentRate,\\n        uint256 _reinvestmentDuration,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Updates the reward amount for a specific bucket.\\n     * @dev Only callable by the PrimexDNS contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _pmxRewardsAmount The amount of PMX rewards to be allocated to the bucket.\\n     */\\n    function updateBucketReward(string memory _bucketName, uint256 _pmxRewardsAmount) external;\\n\\n    /**\\n     * @notice Adds points for a user for future reward distribution.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _miningAmount The amount of mining points to be added.\\n     * @param _maxStabilizationPeriodEnd The maximum end timestamp of the stabilization period.\\n     * @param _maxPeriodTime The maximum period time.\\n     * @param _currentTimestamp The current timestamp.\\n     */\\n    function addPoints(\\n        string memory _bucketName,\\n        address _user,\\n        uint256 _miningAmount,\\n        uint256 _maxStabilizationPeriodEnd,\\n        uint256 _maxPeriodTime,\\n        uint256 _currentTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes points for a user.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _name The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _amount The amount of mining points to be removed.\\n     */\\n    function removePoints(string memory _name, address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Claims the accumulated rewards for a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     */\\n    function claimReward(string memory _bucketName) external;\\n\\n    /**\\n     * @notice Moves rewards from one bucket to another.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketFrom The name of the source bucket.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _user The address of the user.\\n     * @param _isBucketLaunched A flag indicating if the destination bucket is launched.\\n     * @param _liquidityMiningDeadline The deadline for liquidity mining\\n     */\\n    function reinvest(\\n        string memory _bucketFrom,\\n        string memory _bucketTo,\\n        address _user,\\n        bool _isBucketLaunched,\\n        uint256 _liquidityMiningDeadline\\n    ) external;\\n\\n    /**\\n     * @dev The function to withdraw PMX from a delisted bucket or a bucket where liquidity mining failed (after reinvesting period).\\n     * Emits WithdrawPmxByAdmin event.\\n     * @param _bucketFrom Name of the bucket with failed liquidity mining event.\\n     */\\n    function withdrawPmxByAdmin(string memory _bucketFrom) external;\\n\\n    /**\\n     * @notice Retrieves information about a lender in a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @param _timestamp The timestamp for which the information is queried.\\n     * @return amountInMining The amount of tokens the lender has in mining for the given bucket.\\n     * @return currentPercent The current percentage of rewards the lender is eligible to receive for the given bucket.\\n     * Measured in WAD (1 WAD = 100%).\\n     * @return rewardsInPMX An object containing information about the lender's rewards in PMX for the given bucket.\\n     */\\n    function getLenderInfo(\\n        string calldata _bucketName,\\n        address _lender,\\n        uint256 _timestamp\\n    ) external view returns (uint256 amountInMining, uint256 currentPercent, RewardsInPMX memory rewardsInPMX);\\n\\n    /**\\n     * @notice Retrieves rewards information about a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @return totalPmxReward The total amount of PMX reward in the bucket.\\n     * @return withdrawnRewards The total amount of withdrawn rewards from the bucket.\\n     * @return totalPoints The total number of mining points in the bucket.\\n     */\\n    function getBucketInfo(\\n        string calldata _bucketName\\n    ) external view returns (uint256 totalPmxReward, uint256 withdrawnRewards, uint256 totalPoints);\\n\\n    /**\\n     * @notice Retrieves the amount of tokens a lender has in mining for a specific bucket.\\n     * @param _bucket The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @return The amount of tokens the lender has in mining for the given bucket.\\n     */\\n    function getLenderAmountInMining(string calldata _bucket, address _lender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc7af5cea0bdc1399a660a5d861d17af7933cd5665e2016239bc3656f262b40d4\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributorStorage {\\n    struct LenderInfo {\\n        uint256 points;\\n        uint256 depositedAmount;\\n    }\\n\\n    struct BucketInfo {\\n        uint256 totalPoints;\\n        uint256 totalPmxReward;\\n        uint256 withdrawnRewards;\\n        mapping(address => LenderInfo) lendersInfo;\\n    }\\n\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    function pmx() external view returns (IERC20);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function registry() external view returns (address);\\n\\n    function reinvestmentRate() external view returns (uint256);\\n\\n    function reinvestmentDuration() external view returns (uint256);\\n\\n    function extraRewards(address, string calldata) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x57beb8b607e842d2c04494b6cd351101acde829388c9b2c68b7ac0c4a37bdc0d\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPToken.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IPTokenStorage, IBucket, IFeeExecutor, IERC20MetadataUpgradeable, IActivityRewardDistributor} from \\\"./IPTokenStorage.sol\\\";\\n\\ninterface IPToken is IPTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     */\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after pTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     */\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param amount The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     */\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 amount, uint256 index);\\n\\n    event LockDeposit(address indexed user, uint256 indexed id, uint256 deadline, uint256 amount);\\n    event UnlockDeposit(address indexed user, uint256 indexed id);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the InterestIncreaser for current PToken.\\n     * @param _interestIncreaser The interest increaser address.\\n     */\\n    function setInterestIncreaser(IFeeExecutor _interestIncreaser) external;\\n\\n    /**\\n     * @dev Sets the lender reward distributor contract address.\\n     * @param _lenderRewardDistributor The address of the lender reward distributor contract.\\n     */\\n    function setLenderRewardDistributor(IActivityRewardDistributor _lenderRewardDistributor) external;\\n\\n    /**\\n     * @notice Locks a deposit for a specified user.\\n     * @param _user The address of the user for whom the deposit is being locked.\\n     * @param _amount The amount to be locked as a deposit.\\n     * @param _duration The duration for which the deposit will be locked.\\n     * @dev This function can only be called externally and overrides the corresponding function in the parent contract.\\n     * @dev The user must not be blacklisted.\\n     */\\n    function lockDeposit(address _user, uint256 _amount, uint256 _duration) external;\\n\\n    /**\\n     * @dev Unlocks a specific deposit.\\n     * @param _depositId The ID of the deposit to be unlocked.\\n     */\\n    function unlockDeposit(uint256 _depositId) external;\\n\\n    /**\\n     * @dev Mints `amount` pTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     * @return Minted amount of PTokens\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Mints pTokens to the reserve address\\n     * Compared to the normal mint, we don't revert when the amountScaled is equal to the zero. Additional checks were also removed\\n     * Only callable by the Bucket\\n     * @param _reserve The address of the reserve\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     */\\n    function mintToReserve(address _reserve, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns pTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the pTokens, getting them burned\\n     * @param _amount The amount of underlying token being returned to receiver\\n     * @param _index The current liquidityIndex\\n     * @return Burned amount of PTokens\\n     */\\n    function burn(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The scaled balances of the user\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns available balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The available balance of the user\\n     */\\n    function availableBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns locked deposits and balance of user\\n     * @param _user The owner of locked deposits\\n     * @return Structure with deposits and total locked balance of user\\n     */\\n    function getUserLockedBalance(address _user) external view returns (LockedBalance memory);\\n\\n    /**\\n     * @dev Returns the scaled total supply of pToken.\\n     * @return The scaled total supply of the pToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Function to get a deposit index in user's deposit array.\\n     * @param id Deposit id.\\n     * @return index Deposit index in user's 'deposit' array.\\n     */\\n    function getDepositIndexById(uint256 id) external returns (uint256 index);\\n}\\n\",\"keccak256\":\"0x2dc39fe1abee0110b63e93b78a647bfb11e00bed853dd4008efe9847d1028b1f\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPTokenStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IPTokenStorage is IERC20MetadataUpgradeable {\\n    struct Deposit {\\n        uint256 lockedBalance;\\n        uint256 deadline;\\n        uint256 id;\\n    }\\n\\n    struct LockedBalance {\\n        uint256 totalLockedBalance;\\n        Deposit[] deposits;\\n    }\\n\\n    function bucket() external view returns (IBucket);\\n\\n    function interestIncreaser() external view returns (IFeeExecutor);\\n\\n    function lenderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0x7be5f1ceda782aa7ce44588cf3b1f16af3e48d1fda0368f3dc801e84a67e0097\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\n\\nimport {IPositionManagerStorage} from \\\"./IPositionManagerStorage.sol\\\";\\nimport {IKeeperRewardDistributor} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IPositionManager is IPositionManagerStorage, IPausable {\\n    struct ClosePositionVars {\\n        PositionLibrary.Position position;\\n        bool borrowedAmountIsNotZero;\\n        uint256 oracleTolerableLimit;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    event SetMaxPositionSize(address token0, address token1, uint256 amountInToken0, uint256 amountInToken1);\\n    event SetDefaultOracleTolerableLimit(uint256 indexed oracleTolerableLimit);\\n    event SecurityBufferChanged(uint256 indexed securityBuffer);\\n    event MaintenanceBufferChanged(uint256 indexed maintenanceBuffer);\\n    event SetOracleTolerableLimit(address indexed assetA, address indexed assetB, uint256 oracleTolerableLimit);\\n    event KeeperRewardDistributorChanged(address indexed _keeperRewardDistributor);\\n    event MinPositionSizeAndAssetChanged(uint256 indexed _minPositionSize, address indexed _minPositionAsset);\\n    event OracleTolerableLimitMultiplierChanged(uint256 indexed newMultiplier);\\n\\n    event OpenPosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed openedBy,\\n        PositionLibrary.Position position,\\n        address feeToken,\\n        uint256 protocolFee,\\n        uint256 entryPrice,\\n        uint256 leverage,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event PartialClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        uint256 depositedAmount,\\n        uint256 scaledDebtAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut\\n    );\\n\\n    event IncreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event DecreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event UpdatePositionConditions(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    /**\\n     * @notice Initializes the contract with the specified addresses and initializes inherited contracts.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _keeperRewardDistributor,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Sets the maximum position size for a pair of tokens.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _token0 The address of the first token in the pair.\\n     * @param _token1 The address of the second token in the pair.\\n     * @param _amountInToken0 The maximum amount of token0 allowed in the position.\\n     * @param _amountInToken1 The maximum amount of token1 allowed in the position.\\n     */\\n    function setMaxPositionSize(\\n        address _token0,\\n        address _token1,\\n        uint256 _amountInToken0,\\n        uint256 _amountInToken1\\n    ) external;\\n\\n    /**\\n     * @notice Sets the default oracle tolerable limit for the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _percent The new value for the default oracle tolerable limit. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setDefaultOracleTolerableLimit(uint256 _percent) external;\\n\\n    /**\\n     * @notice Sets the oracle tolerable limit between two assets.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _assetA The address of the first asset.\\n     * @param _assetB The address of the second asset.\\n     * @param _percent The new value for the oracle tolerable limit between two assets. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(address _assetA, address _assetB, uint256 _percent) external;\\n\\n    /**\\n     * @notice Function to set oracleTolerableLimitMultiplier.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param newMultiplier New multiplier in WAD format.\\n     */\\n    function setOracleTolerableLimitMultiplier(uint256 newMultiplier) external;\\n\\n    /**\\n     * @notice Sets the security buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * 0 <= newSecurityBuffer < 1.\\n     * Buffer security parameter is used in calculating the liquidation conditions\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.i9v508hvrv42\\n     * @param newSecurityBuffer The new value of the security buffer in WAD format.\\n     */\\n    function setSecurityBuffer(uint256 newSecurityBuffer) external;\\n\\n    /**\\n     * @notice Sets the maintenance buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * The new maintenance buffer value should be greater than zero and less than one.\\n     * Maintenance buffer is used in calculating the maximum leverage\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.87oc1j1s9z21\\n     * @param newMaintenanceBuffer The new value of the maintenance buffer in WAD format.\\n     */\\n    function setMaintenanceBuffer(uint256 newMaintenanceBuffer) external;\\n\\n    /**\\n     * @notice Sets the address of the SpotTradingRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _spotTradingRewardDistributor The address of the SpotTradingRewardDistributor contract.\\n     */\\n    function setSpotTradingRewardDistributor(address _spotTradingRewardDistributor) external;\\n\\n    /**\\n     * @notice Sets the KeeperRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     */\\n    function setKeeperRewardDistributor(IKeeperRewardDistributor _keeperRewardDistributor) external;\\n\\n    /**\\n     * @notice Opens a position based on the provided order parameters.\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param _params The parameters for opening a position.\\n     * @return The total borrowed amount, position amount, position ID, and entry price of the new position.\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Opens margin position.\\n     * @dev Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal.\\n     * Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'.\\n     * Mints debtToken for trader (msg.sender)\\n     * @param _params The parameters required to open a position.\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Close trader's active position or liquidate risky position.\\n     * @dev Protocol will fall down (revert) if two conditions occur both:\\n     * 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1,\\n     * so position will make loss for Protocol.\\n     * 2. Not enough liquidity in bucket to pay that loss.\\n     * @param _id Position id for `msg.sender`.\\n     * @param _dealReceiver The receiver of the rest of trader's deposit.\\n     * @param _routes swap routes on dexes\\n     * @param _amountOutMin minimum allowed amount out for position\\n     */\\n    function closePosition(\\n        uint256 _id,\\n        address _dealReceiver,\\n        PrimexPricingLibrary.Route[] memory _routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Closes trader's active position by closing condition\\n     * @param _id Position id.\\n     * @param _keeper The address of the keeper or the recipient of the reward.\\n     * @param _routes An array of routes for executing trades, swap routes on dexes.\\n     * @param _conditionIndex The index of the condition to be used for closing the position.\\n     * @param _ccmAdditionalParams Additional params needed for canBeClosed() of the ConditionalClosingManager.\\n     * @param _closeReason The reason for closing the position.\\n     */\\n    function closePositionByCondition(\\n        uint256 _id,\\n        address _keeper,\\n        PrimexPricingLibrary.Route[] calldata _routes,\\n        uint256 _conditionIndex,\\n        bytes calldata _ccmAdditionalParams,\\n        PositionLibrary.CloseReason _closeReason\\n    ) external;\\n\\n    /**\\n     * @notice Allows the trader to partially close a position.\\n     * @param _positionId The ID of the position to be partially closed.\\n     * @param _amount The amount of the position asset to be closed from the position.\\n     * @param _depositReceiver The address where the remaining deposit will be sent.\\n     * @param _routes The routing information for swapping assets.\\n     * @param _amountOutMin The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.Route[] calldata _routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Updates the position with the given position ID by setting new close conditions.\\n     * @param _positionId The ID of the position to update.\\n     * @param _closeConditions An array of close conditions for the position.\\n     * @dev The caller of this function must be the trader who owns the position.\\n     * @dev Emits an `UpdatePositionConditions` event upon successful update.\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external;\\n\\n    /**\\n     * @notice Increases the deposit amount for a given position.\\n     * @param _positionId The ID of the position to increase the deposit for.\\n     * @param _amount The amount to increase the deposit by.\\n     * @param _asset The address of the asset to deposit.\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit immediately.\\n     * @param _routes An array of routes to use for trading.\\n     * @param _amountOutMin The minimum amount of the output asset to receive from trading.\\n     */\\n    function increaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _asset,\\n        bool _takeDepositFromWallet,\\n        PrimexPricingLibrary.Route[] calldata _routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Decreases the deposit amount for a given position.\\n     * @param _positionId The ID of the position.\\n     * @param _amount The amount to decrease the deposit by.\\n     */\\n    function decreaseDeposit(uint256 _positionId, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the minimum position size and the corresponding asset for positions.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _minPositionSize The new minimum position size.\\n     * @param _minPositionAsset The address of the asset associated with the minimum position size.\\n     */\\n    function setMinPositionSize(uint256 _minPositionSize, address _minPositionAsset) external;\\n\\n    /**\\n     * @notice Checks if a position can be closed based on a specific condition.\\n     * @param _positionId The ID of the position.\\n     * @param _conditionIndex The index of the condition within the position's close conditions.\\n     * @param _additionalParams Additional parameters required for the condition check.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosed(\\n        uint256 _positionId,\\n        uint256 _conditionIndex,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Deletes a positions by their IDs from a specific bucket for a given traders.\\n     * @param _ids The IDs of the positions to be deleted.\\n     * @param _traders The addresses of the traders who owns the position.\\n     * @param _length The length of the traders array.\\n     * @param _bucket The address of the bucket from which the position is to be deleted.\\n     */\\n    function deletePositions(\\n        uint256[] calldata _ids,\\n        address[] calldata _traders,\\n        uint256 _length,\\n        address _bucket\\n    ) external;\\n\\n    /**\\n     * @notice Transfers a specified amount of tokens from the contract to a specified address.\\n     * @dev Only callable by the BATCH_MANAGER_ROLE role.\\n     * @param _token The address of the token to be transferred.\\n     * @param _to The address to which the tokens will be transferred.\\n     * @param _amount The amount of tokens to be transferred.\\n     */\\n    function doTransferOut(address _token, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Returns the oracle tolerable limit for the given asset pair.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the position information for a given ID.\\n     * @param _id The ID of the position to retrieve.\\n     * @return position The position information associated with the given ID.\\n     */\\n    function getPosition(uint256 _id) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Retrieves the position at the specified index.\\n     * @param _index The index of the position to retrieve.\\n     * @return The Position struct at the specified index.\\n     */\\n    function getPositionByIndex(uint256 _index) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Returns the length of the positions array.\\n     * @return The length of the positions array.\\n     */\\n    function getAllPositionsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The number of positions the trader has.\\n     */\\n    function getTraderPositionsLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of positions the bucket has.\\n     */\\n    function getBucketPositionsLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt of a position with the given ID.\\n     * @param _id The ID of the position.\\n     * @return The debt of the position, measured in the same decimal format as debtTokens.\\n     */\\n    function getPositionDebt(uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the close conditions for a specific position.\\n     * @param _positionId The ID of the position.\\n     * @return An array of close conditions associated with the position.\\n     */\\n    function getCloseConditions(uint256 _positionId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the close condition for a given position and index.\\n     * @param _positionId The identifier of the position.\\n     * @param _index The index of the close condition.\\n     * @return The close condition at the specified position and index.\\n     */\\n    function getCloseCondition(\\n        uint256 _positionId,\\n        uint256 _index\\n    ) external view returns (LimitOrderLibrary.Condition memory);\\n\\n    /**\\n     * @notice \\u0421hecks if the position is risky.\\n     * @param _id the id of the position\\n     * @return (1) True if position is risky\\n     */\\n    function isPositionRisky(uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if a position with the given ID is delisted.\\n     * @param _id The ID of the position.\\n     * @return A boolean indicating whether the position is delisted or not.\\n     */\\n    function isDelistedPosition(uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the health value of a position.\\n     * @param _id The ID of the position.\\n     * @return The health value of the position in WAD format.\\n     */\\n    function healthPosition(uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x980be3b8ebfcd45983fa826a4875e9d5762bed30c3f067d6839c76b0f19c78a1\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManagerStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IKeeperRewardDistributor} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {ISpotTradingRewardDistributor} from \\\"../SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\\\";\\n\\ninterface IPositionManagerStorage {\\n    function maxPositionSize(address, address) external returns (uint256);\\n\\n    function defaultOracleTolerableLimit() external returns (uint256);\\n\\n    function securityBuffer() external view returns (uint256);\\n\\n    function maintenanceBuffer() external view returns (uint256);\\n\\n    function positionsId() external view returns (uint256);\\n\\n    function traderPositionIds(address _trader, uint256 _index) external view returns (uint256);\\n\\n    function bucketPositionIds(address _bucket, uint256 _index) external view returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    function priceOracle() external view returns (IPriceOracle);\\n\\n    function keeperRewardDistributor() external view returns (IKeeperRewardDistributor);\\n\\n    function spotTradingRewardDistributor() external view returns (ISpotTradingRewardDistributor);\\n\\n    function minPositionSize() external view returns (uint256);\\n\\n    function minPositionAsset() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7527f93ae59e40d28aeffed2a17eda5cef1d5caf8cc2c3efcd7ae6388e776f42\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracle.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPriceOracleStorage} from \\\"./IPriceOracleStorage.sol\\\";\\n\\ninterface IPriceOracle is IPriceOracleStorage {\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     */\\n    function initialize(address _registry, address _eth) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Add or update price feed for assets pair. For only the admin role.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @param priceFeed The chain link price feed address for the pair assetA/assetB\\n     */\\n    function updatePriceFeed(address assetA, address assetB, address priceFeed) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Requests two priceFeeds - assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * @dev If there is no price feed found, the code will return a message that no price feed found.\\n     * @param baseAsset The first currency within the currency pair quotation (the base currency).\\n     * @param quoteAsset The second currency within the currency pair quotation (the quote currency).\\n     * @return A tuple of basePriceFeed and quotePriceFeed. The addresses of the price feed for the base asset and quote asset respectively.\\n     */\\n    function getPriceFeedsPair(address baseAsset, address quoteAsset) external view returns (address, address);\\n\\n    /**\\n     * @notice Requests priceFeed for the actual exchange rate for an assetA/assetB pair.\\n     * @dev If no price feed for the pair found, USD and ETH are used as intermediate tokens.\\n     * A price for assetA/assetB can be derived if two data feeds exist:\\n     * assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * If there is no price feed found, the code will return a message that no price feed found.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality which will be recalucaled in PrimexPricingLibrary.\\n     * @return direction of a pair as it stored in chainLinkPriceFeeds (i.e. returns 'true' for assetA/assetB, and 'false' for assetB/assetA).\\n     * Throws if priceFeed wasn't found or priceFeed hasn't answer is 0.\\n     */\\n    function getExchangeRate(address assetA, address assetB) external view returns (uint256, bool);\\n\\n    /**\\n     * @notice Retrieves the direct price feed for the given asset pair.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return priceFeed The address of the direct price feed.\\n     */\\n    function getDirectPriceFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfbf719814c5ec263c449b7bc715594323e892de4b1bf463fe27dd1f6883e52c2\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracleStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IPriceOracleStorage {\\n    function registry() external view returns (address);\\n\\n    function eth() external view returns (address);\\n\\n    function gasPriceFeed() external view returns (address);\\n\\n    function pairPriceDrops(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9231195e9d884dc5fa4b2d772a2a6d6cdd62b9bf321899102983e88e62af8dc\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNS.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPrimexDNSStorage, IPrimexDNSStorageV2} from \\\"./IPrimexDNSStorage.sol\\\";\\n\\ninterface IPrimexDNS is IPrimexDNSStorage {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ChangeFeeRate(OrderType orderType, address token, uint256 rate);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    /**\\n     * @param orderType The order type for which the rate is set\\n     * @param feeToken The token address for which the rate is set\\n     * @param rate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        OrderType orderType;\\n        address feeToken;\\n        uint256 rate;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _treasury The address of the Treasury contract.\\n     * @param _delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param _adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param _feeRateParams Initial fee params\\n     */\\n    function initialize(\\n        address _registry,\\n        address _pmx,\\n        address _treasury,\\n        uint256 _delistingDelay,\\n        uint256 _adminWithdrawalDelay,\\n        FeeRateParams[] calldata _feeRateParams\\n    ) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the protocol rate in PMX.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setFeeRate(FeeRateParams calldata _feeRateParams) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * 3 => TrailingStopCCM\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n}\\n\\ninterface IPrimexDNSV2 is IPrimexDNS, IPrimexDNSStorageV2 {\\n    event ChangeFeeRestrictions(OrderType indexed orderType, FeeRestrictions feeRestrictions);\\n\\n    /**\\n     * @notice Set the protocol fee restriction for one type of order.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setFeeRestrictions(OrderType _orderType, FeeRestrictions calldata _feeRestrictions) external;\\n}\\n\",\"keccak256\":\"0x2d3ab17ad1ba1e1f205695e6f49b6cd91d7e1821762837b8fea1d91c6722ecff\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNSStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IPrimexDNSStorage {\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Deprecated\\n    }\\n\\n    enum OrderType {\\n        MARKET_ORDER,\\n        LIMIT_ORDER,\\n        SWAP_MARKET_ORDER,\\n        SWAP_LIMIT_ORDER\\n    }\\n\\n    struct BucketData {\\n        address bucketAddress;\\n        Status currentStatus;\\n        uint256 delistingDeadline;\\n        // The deadline is for the admin to call Bucket.withdrawAfterDelisting().\\n        uint256 adminDeadline;\\n    }\\n    struct DexData {\\n        address routerAddress;\\n        bool isActive;\\n    }\\n\\n    struct AdapterData {\\n        string[] dexes;\\n        bool isAdded;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function delistingDelay() external view returns (uint256);\\n\\n    function adminWithdrawalDelay() external view returns (uint256);\\n\\n    function buckets(string memory) external view returns (address, Status, uint256, uint256);\\n\\n    function dexes(string memory) external view returns (address, bool);\\n\\n    function cmTypeToAddress(uint256 cmType) external view returns (address);\\n\\n    function dexAdapter() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function aavePool() external view returns (address);\\n\\n    function feeRates(OrderType _orderType, address _token) external view returns (uint256);\\n}\\n\\ninterface IPrimexDNSStorageV2 is IPrimexDNSStorage {\\n    struct FeeRestrictions {\\n        uint256 minProtocolFee;\\n        uint256 maxProtocolFee;\\n    }\\n\\n    function feeRestrictions(\\n        OrderType _orderType\\n    ) external view returns (uint256 minProtocolFee, uint256 maxProtocolFee);\\n}\\n\",\"keccak256\":\"0x4fc48b90b62725d15a9208bdd65e19730512bfb71dc6b5fddda3df188a3ede68\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserve.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserveStorage} from \\\"./IReserveStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IReserve is IReserveStorage, IPausable {\\n    event BurnAmountCalculated(uint256 burnAmount);\\n    event TransferRestrictionsChanged(address indexed pToken, TransferRestrictions newTransferRestrictions);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param dns The address of PrimexDNS contract\\n     * @param registry The address of Registry contract\\n     */\\n    function initialize(IPrimexDNS dns, address registry) external;\\n\\n    /**\\n     * @dev Burns the permanent loss amount (presented in pTokens) from the Reserve for a particular bucket\\n     * @param bucket The address of a bucket\\n     * Emits BurnAmountCalculated(burnAmount) event\\n     */\\n    function paybackPermanentLoss(IBucket bucket) external;\\n\\n    /**\\n     * @dev Transfers some bonus in pTokens to receiver from Reserve\\n     * Can be called by executor only\\n     * @param _bucketName The bucket where the msg.sender should be a fee decreaser (for debtToken) or\\n     * interest increaser (for pToken)\\n     * @param _to The receiver of bonus pTokens\\n     * @param _amount The amount of bonus pTokens to transfer\\n     */\\n    function payBonus(string memory _bucketName, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @dev Function to transfer tokens to the Treasury. Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param bucket The bucket from which to transfer pTokens\\n     * @param amount The amount of pTokens to transfer\\n     */\\n    function transferToTreasury(address bucket, uint256 amount) external;\\n\\n    /**\\n     * @dev Function to set transfer restrictions for a token.\\n     * @notice Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param pToken pToken to set restrictions for\\n     * @param transferRestrictions Min amount to be left in the Reserve\\n     */\\n    function setTransferRestrictions(address pToken, TransferRestrictions calldata transferRestrictions) external;\\n}\\n\",\"keccak256\":\"0x2c2145f1905eca14e254a417095b4999ec8b15a6686446871a9442bc8fd0a44f\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserveStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IReserveStorage {\\n    struct TransferRestrictions {\\n        uint256 minAmountToBeLeft;\\n        uint256 minPercentOfTotalSupplyToBeLeft;\\n    }\\n\\n    event TransferFromReserve(address pToken, address to, uint256 amount);\\n\\n    function transferRestrictions(address pToken) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x427d460adc8ddd1c2b4692baaec00af9b39742647d3bb1ab15b6be456c17289f\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ISpotTradingRewardDistributorStorage} from \\\"./ISpotTradingRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISpotTradingRewardDistributor is ISpotTradingRewardDistributorStorage, IPausable {\\n    event SpotTradingClaimReward(address indexed trader, uint256 amount);\\n    event RewardPerPeriodDecreased(uint256 indexed rewardPerPeriod);\\n    event TopUpUndistributedPmxBalance(uint256 indexed amount);\\n    event RewardPerPeriodChanged(uint256 indexed rewardPerPeriod);\\n    event PmxWithdrawn(uint256 indexed amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param registry The address of Registry contract\\n     * @param periodDuration The duration of a reward period\\n     * @param priceOracle The address of PriceOracle contract\\n     * @param pmx The address of PMX token\\n     * @param traderBalanceVault The address of TraderBalanceVault contract\\n     * @param treasury The address of Treasury contract\\n     */\\n    function initialize(\\n        address registry,\\n        uint256 periodDuration,\\n        address priceOracle,\\n        address pmx,\\n        address payable traderBalanceVault,\\n        address treasury\\n    ) external;\\n\\n    /**\\n     * @dev Function to update spot trader activity. Only PM_ROLE can call it.\\n     * @param trader Address of a trader\\n     * @param positionAsset Address of a position asset\\n     * @param positionAmount Amount of a position asset\\n     */\\n    function updateTraderActivity(address trader, address positionAsset, uint256 positionAmount) external;\\n\\n    /**\\n     * @dev Function to claim reward for spot trading activity.\\n     * Transfer rewards on the balance in traderBalanceVault\\n     * Emits SpotTradingClaimReward(address trader, uint256 amount)\\n     */\\n    function claimReward() external;\\n\\n    /**\\n     * @dev Function to set new reward per period. Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param rewardPerPeriod New value for reward per period\\n     */\\n    function setRewardPerPeriod(uint256 rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to decrease reward per period. Only EMERGENCY_ADMIN can call it.\\n     * @param _rewardPerPeriod New value for reward per period, must be less than the current value\\n     */\\n    function decreaseRewardPerPeriod(uint256 _rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to topUp the contract PMX balance\\n     * @param amount PMX amount to add to the contract balance\\n     */\\n    function topUpUndistributedPmxBalance(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to withdraw PMX from the contract to treasury\\n     * @param amount Amount of PMX to withdraw from the contract\\n     */\\n    function withdrawPmx(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to get SpotTraderActivity\\n     * @param periodNumber Period number\\n     * @param traderAddress Address of a trader\\n     * @return A struct with activity and hasClaimed members\\n     */\\n    function getSpotTraderActivity(uint256 periodNumber, address traderAddress) external view returns (uint256);\\n\\n    /**\\n     * @dev Get information for the period corresponding to the given timestamp\\n     * @param timestamp The timestamp to get information about\\n     * @return totalReward Total reward for the corresponding period\\n     * @return totalActivity Total activity for the corresponding period\\n     */\\n    function getPeriodInfo(uint256 timestamp) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Function to get an array of period numbers when trader had any activity\\n     * @param trader Address of a trader\\n     * @return An array of period numbers with trader activity\\n     */\\n    function getPeriodsWithTraderActivity(address trader) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Function to calculate trader's reward for her activities during periods\\n     * @param trader Address of a trader\\n     * @return reward Amount of reward\\n     * @return currentPeriod The current period\\n     */\\n    function calculateReward(address trader) external view returns (uint256 reward, uint256 currentPeriod);\\n}\\n\",\"keccak256\":\"0xbc25e92e6decf4beb8369378f389ed513371d8ff2deb61d0561699a6f5c39633\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ISpotTradingRewardDistributorStorage {\\n    struct PeriodInfo {\\n        uint256 totalReward;\\n        // map trader address to her activity\\n        mapping(address => uint256) traderActivity;\\n        uint256 totalActivity;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function dns() external view returns (address);\\n\\n    function periodDuration() external view returns (uint256);\\n\\n    function initialPeriodTimestamp() external view returns (uint256);\\n\\n    function rewardPerPeriod() external view returns (uint256);\\n\\n    function pmx() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function traderBalanceVault() external view returns (address payable);\\n\\n    function undistributedPMX() external view returns (uint256);\\n\\n    function periods(uint256 periodNumber) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x23c8112548009d3d70825d16e9850ebacf0fc4f015aa6ab8649bfeec7bf72ea5\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVault.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITraderBalanceVaultStorage} from \\\"./ITraderBalanceVaultStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITraderBalanceVault is ITraderBalanceVaultStorage, IPausable {\\n    /**\\n     * Types of way to open a position or order\\n     */\\n    enum OpenType {\\n        OPEN_BY_ORDER,\\n        OPEN,\\n        CREATE_LIMIT_ORDER\\n    }\\n\\n    /**\\n     * @param trader The trader, who opens margin deal\\n     * @param depositReceiver the address to which the deposit is transferred when blocked.\\n     * This happens because the trader's deposit is involved in the position\\n     * @param borrowedAsset The token to lock for deal in a borrowed asset\\n     * @param depositAsset The token is a deposit asset\\n     * (it is blocked when creating a limit order\\n     * For others, the operations is transferred to the account of the receiver of the deposit and is swapped )\\n     * @param depositAmount Amount of tokens in a deposit asset\\n     * @param depositInBorrowedAmount Amount of tokens to lock for deal in a borrowed asset\\n     * @param openType Corresponds to the purpose of locking\\n     */\\n    struct LockAssetParams {\\n        address trader;\\n        address depositReceiver;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        OpenType openType;\\n    }\\n\\n    /**\\n     * @param trader The trader who opened the position\\n     * @param receiver The receiver of the rest of trader deposit.\\n     * @param asset Borrowed asset of the position being closed (the need for accrual of profit).\\n     * @param unlockAmount The amount of unlocked collateral for deal\\n     * @param returnToTrader The returned to trader amount when position was closed.\\n     */\\n    struct UnlockAssetParams {\\n        address trader;\\n        address receiver;\\n        address asset;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @param traders An array of traders for which available balance should be increased\\n     * @param amounts An array of amounts corresponding to traders' addresses that should be added to their available balances\\n     * @param asset Asset address which amount will be increased\\n     * @param length The amount of traders in an array\\n     */\\n    struct BatchTopUpAvailableBalanceParams {\\n        address[] traders;\\n        uint256[] amounts;\\n        address asset;\\n        uint256 length;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed asset, uint256 amount);\\n    event Withdraw(address indexed withdrawer, address asset, uint256 amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _registry The address of Registry contract\\n     * @param _whiteBlackList The address of WhiteBlackList contract\\n     */\\n    function initialize(address _registry, address _whiteBlackList) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @dev Deposits trader collateral for margin deal\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Withdraws the rest of trader's deposit after closing deal\\n     * @param _asset The collateral asset for withdraw\\n     * @param _amount The amount of '_asset' to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Traders lock their collateral for the limit order.\\n     * @param _trader The owner of collateral\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function increaseLockedBalance(address _trader, address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Locks deposited trader's assets as collateral for orders.\\n     * Decreases the available balance when opening position.\\n     * Transfers deposited amount to the deposit receiver.\\n     * @param _params parameters necessary to lock asset\\n     */\\n    function useTraderAssets(LockAssetParams calldata _params) external;\\n\\n    /**\\n     * @dev Unlocks trader's collateral when open position by order or update deposit.\\n     * @param _params parameters necessary to unlock asset\\n     */\\n    function unlockAsset(UnlockAssetParams calldata _params) external;\\n\\n    /**\\n     * The function to increase available balance for several traders\\n     * @param _params A struct containing BatchTopUpAvailableBalanceParams\\n     */\\n    function batchTopUpAvailableBalance(BatchTopUpAvailableBalanceParams calldata _params) external;\\n\\n    /**\\n     * Withdraws an asset amount from an asset holder to a receiver\\n     * @param _from Withdraw from address\\n     * @param _to Withdraw to address\\n     * @param _asset Address of an asset\\n     * @param _amount Amount of an asset\\n     * @param fromLocked True if withdraw from locked balance\\n     */\\n    function withdrawFrom(address _from, address _to, address _asset, uint256 _amount, bool fromLocked) external;\\n\\n    /**\\n     * Increases available balance of a receiver in the protocol\\n     * @param receiver The address of an asset receiver\\n     * @param asset The asset address for which available balance will be increased\\n     * @param amount The amount of an asset\\n     */\\n    function topUpAvailableBalance(address receiver, address asset, uint256 amount) external payable;\\n}\\n\",\"keccak256\":\"0x7d7021be769ab6a7c4086eb6dfec873f22ae75e84d72b66492fa23d7a9b4f329\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVaultStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ITraderBalanceVaultStorage {\\n    struct TraderBalance {\\n        uint256 availableBalance;\\n        uint256 lockedBalance;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    /**\\n     *\\n     * @param trader Trader's address\\n     * @param asset Asset address\\n     * @return availableBalance availableBalance\\n     * @return lockedBalance lockedBalance\\n     */\\n    function balances(\\n        address trader,\\n        address asset\\n    ) external view returns (uint256 availableBalance, uint256 lockedBalance);\\n}\\n\",\"keccak256\":\"0xd103723047a828ac9dcd2434ac3e8c4f57435faaeb310ae62f1cd67065dc2e80\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury/ITreasury.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITreasuryStorage} from \\\"./ITreasuryStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITreasury is ITreasuryStorage, IPausable {\\n    event MaxSpendingLimitChanged(address indexed spender, address indexed token, SpendingLimits newSpendingLimits);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param registry The address of Registry contract\\n     */\\n    function initialize(address registry) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @notice Transfers an amount of ERC20 or native token from the contract treasury to\\n     *  a receiver address, subject to certain restrictions imposed by the spender.\\n     * @dev The function checks the spender's transfer restrictions per transaction and per timeframe.\\n     * @param amount The amount of tokens to transfer.\\n     * @param token The address of the token to transfer. Use the address NATIVE_TOKEN_ADDRESS for native token.\\n     * @param receiver The address of the receiver\\n     */\\n    function transferFromTreasury(uint256 amount, address token, address receiver) external;\\n\\n    /**\\n     * @notice Sets the maximum spending limit and other restrictions for a given spender and token.\\n     * @dev This function can only be called by an address with the BIG_TIMELOCK_ADMIN role.\\n     * @param spender The address of the spender for whom to set the new spending limit.\\n     * @param token The address of the token for which to set the new spending limit.\\n     * @param newSpendingLimits The new spending limits and restrictions to set for the spender and token.\\n     */\\n    function setMaxSpendingLimit(address spender, address token, SpendingLimits calldata newSpendingLimits) external;\\n\\n    /**\\n     * @notice Decreases Spending limits for a spender for a specific token.\\n     * @dev This function can only be called by an address with the BIG_TIMELOCK_ADMIN or EMERGENCY_ADMIN role.\\n     * @param spender The address of the spender for whom to decrease the maximum transfer amounts and total amount.\\n     * @param token The address of the token for which to decrease the maximum transfer amounts and total amount.\\n     * @param newSpendingLimits The new spending limits and restrictions to set for the spender and token.\\n     */\\n    function decreaseLimits(address spender, address token, SpendingLimits calldata newSpendingLimits) external;\\n\\n    /**\\n     * @notice Checks whether a spender can transfer tokens based on the minimum time between transfers imposed by the spending restrictions.\\n     * @param spender The address of the spender to check for.\\n     * @param token The address of the token for which to check the time restrictions.\\n     * @return A boolean indicating whether the spender can transfer tokens based on the minimum time between transfers.\\n     */\\n    function canTransferByTime(address spender, address token) external returns (bool);\\n}\\n\",\"keccak256\":\"0xeab404d4759be993366d42aaa0b7a5d0d2df1934bde5868e0df8c7341b2ac3c8\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury/ITreasuryStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITreasuryStorage {\\n    struct SpendingLimits {\\n        //transfer settings\\n        uint256 maxTotalAmount;\\n        uint256 maxAmountPerTransfer;\\n        uint256 maxPercentPerTransfer;\\n        uint256 minTimeBetweenTransfers;\\n        // timeframe settings\\n        uint256 timeframeDuration;\\n        uint256 maxAmountDuringTimeframe;\\n    }\\n    struct SpendingInfo {\\n        bool isSpenderExist;\\n        SpendingLimits limits;\\n        uint256 lastWithdrawalTimestamp;\\n        uint256 withdrawnDuringTimeframe;\\n    }\\n\\n    event TransferFromTreasury(\\n        address indexed spender,\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    function spenders(\\n        address spender,\\n        address token\\n    ) external returns (bool, SpendingLimits calldata, uint256, uint256);\\n\\n    function initialTimestamp() external returns (uint256);\\n\\n    function registry() external returns (IAccessControl);\\n}\\n\",\"keccak256\":\"0xde4633a310ca360accf8242f7a92f62dbc18480134eb57191589fca337afe163\",\"license\":\"BUSL-1.1\"},\"contracts/WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IWhiteBlackList {\\n    enum AccessType {\\n        UNLISTED,\\n        WHITELISTED,\\n        BLACKLISTED\\n    }\\n    event WhitelistedAddressAdded(address indexed addr);\\n    event WhitelistedAddressRemoved(address indexed addr);\\n    event BlacklistedAddressAdded(address indexed addr);\\n    event BlacklistedAddressRemoved(address indexed addr);\\n\\n    function addAddressToWhitelist(address _address) external;\\n\\n    function addAddressesToWhitelist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromWhitelist(address _address) external;\\n\\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external;\\n\\n    function addAddressToBlacklist(address _address) external;\\n\\n    function addAddressesToBlacklist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromBlacklist(address _address) external;\\n\\n    function removeAddressesFromBlacklist(address[] calldata _addresses) external;\\n\\n    function getAccessType(address _address) external view returns (AccessType);\\n\\n    function isBlackListed(address _address) external view returns (bool);\\n\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa02e0237ab68d21bb3005cac9d945da1eaab863d2321202295d72a1164d9f0ed\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x4b53df7e37eeb7c34aaed6ed236909444a40d5edf62e944f55cf78cbe43948d6\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/IArbGasInfo.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exists in every Arbitrum Nitro chain at 0x000000000000000000000000000000000000006c.\\ninterface IArbGasInfo {\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x79ed2c73cf61ad91ac52f39dd2a32dfdd0bf98d3343aae35a6255209f643ff18\"},\"contracts/interfaces/IConditionalClosingManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalClosingManager {\\n    /**\\n     * @notice Checks if a position can be closed.\\n     * @param _position The position details.\\n     * @param _params The encoded parameters for closing the position.\\n     * @param _additionalParams Additional encoded parameters.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosedBeforeSwap(\\n        PositionLibrary.Position calldata _position,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if a position can be closed.\\n     * @param _position The position details.\\n     * @param _params The encoded parameters for closing the position.\\n     * @param _additionalParams Additional encoded parameters (not used).\\n     * @param _closeAmount The amount of the position to be closed, measured in the same decimal format as the position's asset.\\n     * @param _borowedAssetAmount The amount of borrowed asset.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosedAfterSwap(\\n        PositionLibrary.Position calldata _position,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _closeAmount,\\n        uint256 _borowedAssetAmount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x18137eb0c4fb8b753c3bd6e9f5dc44aad884c13ed8249351d0e1d59fdb2e5295\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IConditionalOpeningManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalOpeningManager {\\n    /**\\n     * @notice Checks if a limit order can be filled.\\n     * Is used as a view function outside transactions and allows to check whether a specific order can be executed imitating the swap.\\n     * @param _order The limit order details.\\n     * @param _params Open condition parameters for the order.\\n     * @param _additionalParams Additional parameters for the order.\\n     * @return A boolean value indicating if the limit order can be filled.\\n     */\\n    function canBeFilledBeforeSwap(\\n        LimitOrderLibrary.LimitOrder calldata _order,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if a limit order can be filled based on the exchange rate.\\n     * @dev This function compares the exchange rate with the limit price.\\n     * @param _order The limit order details.\\n     * @param _params Open condition parameters for the order.\\n     * @param _additionalParams Additional parameters for the order.\\n     * @param _exchangeRate The exchange rate in WAD format to compare with the limit price.\\n     * @return A boolean value indicating if the limit order can be filled based on the exchange rate.\\n     */\\n    function canBeFilledAfterSwap(\\n        LimitOrderLibrary.LimitOrder calldata _order,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _exchangeRate\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xf5bf329b09f2a53e59e60e7faa30e1df63f474ad8d0359c931277f623f120c54\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDexAdapter.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\n\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ICurveCalc} from \\\"./routers/ICurveCalc.sol\\\";\\nimport {ICurveRegistry} from \\\"./routers/ICurveRegistry.sol\\\";\\n\\ninterface IDexAdapter {\\n    /**\\n     * @notice Possible dex types\\n     */\\n    enum DexType {\\n        none, // 0\\n        UniswapV2, // 1  \\\"uniswap\\\", \\\"sushiswap\\\", \\\"quickswap\\\" (v2)\\n        UniswapV3, // 2\\n        Curve, // 3\\n        Balancer, // 4\\n        AlgebraV3, // 5\\n        Meshswap // 6\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * Encoded differently for different dexes:\\n     * Uniswap v2 - just encoded array of asset addresses\\n     * Uniswap v3 - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes3(uint24(pool1Fee)), bytes20(address(usdc)), bytes3(uint24(pool2Fee)) ...)\\n     * Quickswap - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes20(address(usdc)), bytes20(address(usdt) ...)\\n     * Curve - encoded array of asset addresses and pool addresses\\n     * Balancer - encoded array of asset addresses, pool ids and asset limits\\n     * @param _amountIn TokenA amount in\\n     * @param _amountOutMin Min tokenB amount out\\n     * @param _to Destination address for swap\\n     * @param _deadline Timestamp deadline for swap\\n     * @param _dexRouter Dex router address\\n     */\\n    struct SwapParams {\\n        bytes encodedPath;\\n        uint256 amountIn;\\n        uint256 amountOutMin;\\n        address to;\\n        uint256 deadline;\\n        address dexRouter;\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * @param _amountIn TokenA amount in\\n     * @param _dexRouter Dex router address\\n     */\\n    struct GetAmountsParams {\\n        bytes encodedPath;\\n        uint256 amount; // amountIn or amountOut\\n        address dexRouter;\\n    }\\n\\n    event QuoterChanged(address indexed dexRouter, address indexed quoter);\\n    event DexTypeChanged(address indexed dexRouter, uint256 indexed dexType);\\n\\n    /**\\n     * @param _dexRouter The router address for which the quoter is set\\n     * @param _quoter The quoter address to set\\n     */\\n    function setQuoter(address _dexRouter, address _quoter) external;\\n\\n    /**\\n     * @notice Set a dex type for a dex router\\n     * @param _dexRouter The dex router address\\n     * @param _dexType The dex type from enum DexType\\n     */\\n    function setDexType(address _dexRouter, uint256 _dexType) external;\\n\\n    /**\\n     * @notice Swap ERC20 tokens\\n     * @param _params SwapParams struct\\n     */\\n    function swapExactTokensForTokens(SwapParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountOut calculations\\n     * @notice given an input amount of an asset, returns the maximum output amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsOut(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountIn calculations\\n     * @notice given an output amount of an asset, returns the maximum input amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsIn(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Dex type mapping dexRouter => dex type\\n     */\\n    function dexType(address) external view returns (DexType);\\n\\n    /**\\n     * @notice Mapping from the dexRouter to its quoter\\n     */\\n    function quoters(address) external view returns (address);\\n\\n    /**\\n     * @return The address of the Registry contract\\n     */\\n    function registry() external view returns (address);\\n\\n    /**\\n     * @notice Gets the average amount of gas that is required for the swap on some dex\\n     * @param dexRouter The address of a router\\n     */\\n    function getGas(address dexRouter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20c68407aaf893618f2c1993ab0cef250ecb8c94e82e1801706bf26fbcc8b4f5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateStrategy.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IInterestRateStrategy {\\n    /**\\n     * @dev parameters for BAR calculation - they differ depending on bucket's underlying asset\\n     */\\n    struct BarCalculationParams {\\n        uint256 urOptimal;\\n        uint256 k0;\\n        uint256 k1;\\n        uint256 b0;\\n        int256 b1;\\n    }\\n\\n    event BarCalculationParamsChanged(\\n        address indexed bucket,\\n        uint256 urOptimal,\\n        uint256 k0,\\n        uint256 k1,\\n        uint256 b0,\\n        int256 b1\\n    );\\n\\n    /**\\n     * @dev Updates bucket's BAR and LAR.\\n     * Calculates using utilization ratio (UR):\\n     * BAR = UR <= URoptimal ? (k0 * UR + b0) : (k1 * UR + b1), where 'b1' may be < 0,\\n     * LAR = BAR * UR,\\n     * if reserveRate != 0, then LAR = LAR * (1 - reserveRate)\\n     * @param ur Utilization ratio\\n     * @param reserveRate The reserve portion of the interest that goes to the Primex reserve\\n     * @return tuple containing BAR and LAR\\n     */\\n\\n    function calculateInterestRates(uint256 ur, uint256 reserveRate) external returns (uint128, uint128);\\n\\n    /**\\n     * @dev Set parameters for BAR calculation.\\n     * @param _params parameters are represented in byte string\\n     */\\n\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Retrieves the calculation parameters for the Bar calculation.\\n     * @param _address an address of the bucket\\n     * @return BarCalculationParams struct containing the parameters.\\n     */\\n    function getBarCalculationParams(address _address) external view returns (BarCalculationParams memory);\\n}\\n\",\"keccak256\":\"0x3474a7be6c42ddf5faf12304d1978f0268b7d80c6d1c04880f00832151b280d8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// Copyright (c) 2016-2023 zOS Global Limited and contributors\\n// SPDX-License-Identifier: MIT\\n\\n// Interface for OpenZeppelin's Pausable contract from https://github.com/OpenZeppelin/openzeppelin-contracts/\\npragma solidity ^0.8.18;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Triggers stopped state.\\n     * This function can only be called by an address with the EMERGENCY_ADMIN role.\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract.\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x12e1f74846ecd309150da9ae8d3e119f39ea1ed32ee0d9db5a7509c6baac94e3\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISwapManager is IPausable {\\n    event SpotSwap(\\n        address indexed trader,\\n        address indexed receiver,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountSold,\\n        uint256 amountBought\\n    );\\n\\n    /**\\n     * @param tokenA The address of the asset to be swapped from.\\n     * @param tokenB The address of the asset to be received in the swap.\\n     * @param amountTokenA The amount of tokenA to be swapped.\\n     * @param amountOutMin The minimum amount of tokenB expected to receive.\\n     * @param routes An array of PrimexPricingLibrary.Route structs representing the routes for the swap.\\n     * @param receiver The address where the swapped tokens will be received.\\n     * @param deadline The deadline for the swap transaction.\\n     * @param isSwapFromWallet A flag indicating whether the swap is perfomed from a wallet or a protocol balance.\\n     * @param isSwapToWallet A flag indicating whether the swapped tokens will be sent to a wallet or a protocol balance.\\n     * @param isSwapFeeInPmx A flag indicating whether the swap fee is paid in PMX or in native token.\\n     * @param payFeeFromWallet A flag indicating whether the swap fee is perfomed from a wallet or a protocol balance.\\n     */\\n    struct SwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        uint256 amountOutMin;\\n        PrimexPricingLibrary.Route[] routes;\\n        address receiver;\\n        uint256 deadline;\\n        bool isSwapFromWallet;\\n        bool isSwapToWallet;\\n        bool isSwapFeeInPmx;\\n        bool payFeeFromWallet;\\n    }\\n\\n    /**\\n     * @notice Executes a swap on dexes defined in routes\\n     * @param params The SwapParams struct containing the details of the swap transaction.\\n     * @param maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * @param needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The resulting amount after the swap.\\n     */\\n    function swap(\\n        SwapParams calldata params,\\n        uint256 maximumOracleTolerableLimit,\\n        bool needOracleTolerableLimitCheck\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the instance of PrimexRegistry contract.\\n     */\\n    function registry() external view returns (IAccessControl);\\n\\n    /**\\n     * @notice Retrieves the instance of TraderBalanceVault contract.\\n     */\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    /**\\n     * @notice Retrieves the instance of PrimexDNS contract.\\n     */\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    /**\\n     * @notice Retrieves the instance of PriceOracle contract.\\n     */\\n    function priceOracle() external view returns (IPriceOracle);\\n}\\n\",\"keccak256\":\"0xf91a251dbe30ce2840eb804f09dfa6569723900052bc10f559162774d3124b2d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITakeProfitStopLossCCM.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface ITakeProfitStopLossCCM {\\n    struct CanBeClosedParams {\\n        uint256 takeProfitPrice;\\n        uint256 stopLossPrice;\\n    }\\n\\n    struct AdditionalParams {\\n        PrimexPricingLibrary.Route[] routes;\\n    }\\n\\n    /**\\n     * @notice Checks if the take profit has been reached for a given position.\\n     * @param _position The position details.\\n     * @param takeProfitPrice The take profit price in WAD format.\\n     * @param routes The array of routes for asset swapping.\\n     * @return A boolean indicating whether the take profit has been reached.\\n     */\\n    function isTakeProfitReached(\\n        PositionLibrary.Position calldata _position,\\n        uint256 takeProfitPrice,\\n        PrimexPricingLibrary.Route[] memory routes\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if the take profit has been reached based on the given parameters.\\n     * @dev Used in closeBatchPositions() function.\\n     * @param _params The encoded parameters.\\n     * @param exchangeRate The exchange rate in WAD format.\\n     * @return A boolean indicating whether the take profit has been reached.\\n     */\\n    function isTakeProfitReached(bytes calldata _params, uint256 exchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached for a given position.\\n     * @param _position The position details.\\n     * @param stopLossPrice The stop loss price in WAD format to compare against.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(\\n        PositionLibrary.Position calldata _position,\\n        uint256 stopLossPrice\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached on the given parameters.\\n     * @dev The takeProfitPrice and stopLossPrice values can be obtained from the encoded data via CanBeClosedParams struct.\\n     * @param _params The encoded closing condition parameters containing stop loss price.\\n     * @param oracleExchangeRate The current exchange rate from the oracle in WAD format.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(bytes calldata _params, uint256 oracleExchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the take profit and stop loss prices from the given parameters.\\n     * @param _params The encoded parameters for closing a position.\\n     * @return takeProfitPrice The take profit price.\\n     * @return stopLossPrice The stop loss price.\\n     */\\n    function getTakeProfitStopLossPrices(bytes calldata _params) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x5f5df8c88208778ad4387a39f6cc343199c8df8870f21158a48562e81275c8d7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveCalc.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveCalc {\\n    // solhint-disable func-name-mixedcase\\n    function get_dx(\\n        // solhint-disable-next-line var-name-mixedcase\\n        int128 n_coins,\\n        uint256[8] memory balances,\\n        uint256 amp,\\n        uint256 fee,\\n        uint256[8] memory rates,\\n        uint256[8] memory precisions,\\n        bool underlying,\\n        int128 i,\\n        int128 j,\\n        uint256 dy\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x5fa9879e97a93a46480f230b02f7e8518d2ad482390b3224359dce1c075e4d12\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveRegistry.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveRegistry {\\n    // solhint-disable func-name-mixedcase\\n    function get_n_coins(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[8] memory);\\n\\n    function get_coin_indices(address _pool, address _from, address _to) external view returns (int128, int128, bool);\\n}\\n\",\"keccak256\":\"0xaa6bf52698d973d56d123347ceac0e41bd58d4ceb29f489d74a36ca516b52798\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error DISABLED_TRANSFER_NATIVE_CURRENCY();\\n    error INVALID_AMOUNT();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error DEX_NOT_ACTIVE();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n    error SWAP_DEADLINE_PASSED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n}\\n\",\"keccak256\":\"0xdefed1730079812b35863325fa1451cd220f15f8d26af3cd218e579567a8d65f\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/LimitOrderLibrary.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorage} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalOpeningManager} from \\\"../interfaces/IConditionalOpeningManager.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ISwapManager} from \\\"../interfaces/ISwapManager.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary LimitOrderLibrary {\\n    using WadRayMath for uint256;\\n\\n    enum CloseReason {\\n        FilledMargin,\\n        FilledSpot,\\n        FilledSwap,\\n        Cancelled\\n    }\\n\\n    struct Condition {\\n        uint256 managerType;\\n        bytes params;\\n    }\\n\\n    /**\\n     * @dev Creates a limit order and locks the deposit asset in the traderBalanceVault\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param positionAsset The address of output token for exchange\\n     * @param depositAsset The address of the deposit token\\n     * @param depositAmount The amount of deposit trader funds for deal\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a native currency\\n     * @param trader The trader, who has created the order\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param id The unique id of the order\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition The flag to indicate whether position should be opened\\n     * @param createdAt The timeStamp when the order was created\\n     * @param updatedConditionsAt The timestamp when the open condition was updated\\n     */\\n    struct LimitOrder {\\n        IBucket bucket;\\n        address positionAsset;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address feeToken;\\n        uint256 protocolFee;\\n        address trader;\\n        uint256 deadline;\\n        uint256 id;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        // The byte-encoded params, can be used for future updates\\n        bytes extraParams;\\n    }\\n\\n    /**\\n     * @dev Structure for the \\u0441reateLimitOrder with parameters necessary to create limit order\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition Bool, indicate whether position should be opened\\n     * @param openingManagerAddresses Array of contract addresses that will be called in canBeFilled\\n     * @param openingManagerParams Array of bytes representing params for contracts in openingManagerAddresses\\n     * @param closingManagerAddresses Array of contract addresses that will be called in canBeClosed\\n     * @param closingManagerParams Array of bytes representing params for contracts in closingManagerAddresses\\n     */\\n    struct CreateLimitOrderParams {\\n        string bucket;\\n        uint256 depositAmount;\\n        address depositAsset;\\n        address positionAsset;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        Condition[] openConditions;\\n        Condition[] closeConditions;\\n        bool isProtocolFeeInPmx;\\n    }\\n\\n    struct CreateLimitOrderVars {\\n        bool isSpot;\\n        IBucket bucket;\\n        uint256 positionSize;\\n        address priceOracle;\\n        uint256 rate;\\n        address feeToken;\\n    }\\n\\n    /**\\n     * @dev Opens a position on an existing order\\n     * @param orderId order id\\n     * @param com address of ConditionalOpeningManager\\n     * @param comAdditionalParams  params needed for ConditionalOpeningManager to calc canBeFilled\\n     * @param firstAssetRoutes routes to swap first asset\\n     * @param depositInThirdAssetRoutes routes to swap deposit asset\\n     */\\n    struct OpenPositionParams {\\n        uint256 orderId;\\n        uint256 conditionIndex;\\n        bytes comAdditionalParams;\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n        address keeper;\\n    }\\n\\n    struct OpenPositionByOrderVars {\\n        address assetIn;\\n        address assetOut;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        CloseReason closeReason;\\n        uint256 newPositionId;\\n        uint256 exchangeRate;\\n    }\\n\\n    /**\\n     * @dev Params for PositionManager to open position\\n     * @param order order\\n     * @param firstAssetRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositInThirdAssetRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionByOrderParams {\\n        address sender;\\n        LimitOrder order;\\n        Condition[] closeConditions;\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n    }\\n\\n    /**\\n     * @dev Structure for the updateOrder with parameters necessary to update limit order\\n     * @param orderId order id to update\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param makeDeposit Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     * @param payFeeFromWallet A flag indicating whether the Limit Order fee is perfomed from a wallet or a protocol balance.\\n     */\\n    struct UpdateLimitOrderParams {\\n        uint256 orderId;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n        bool isProtocolFeeInPmx;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n    }\\n\\n    /**\\n     * @notice Updates the protocol fee for a LimitOrder.\\n     * @param _order The LimitOrder storage object to update.\\n     * @param _params The new parameters for the LimitOrder.\\n     * @param _traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param _primexDNS The PrimexDNS contract for accessing PMX-related information.\\n     * @param _priceOracle The address of the price oracle contract.\\n     */\\n    function updateProtocolFee(\\n        LimitOrder storage _order,\\n        UpdateLimitOrderParams calldata _params,\\n        ITraderBalanceVault _traderBalanceVault,\\n        IPrimexDNS _primexDNS,\\n        address _priceOracle\\n    ) public {\\n        address feeToken;\\n        if (_params.isProtocolFeeInPmx) {\\n            feeToken = _primexDNS.pmx();\\n            _require(msg.value == 0, Errors.DISABLED_TRANSFER_NATIVE_CURRENCY.selector);\\n        } else {\\n            feeToken = NATIVE_CURRENCY;\\n        }\\n        if (\\n            _params.leverage != _order.leverage ||\\n            _params.depositAmount != _order.depositAmount ||\\n            feeToken != _order.feeToken\\n        ) {\\n            uint256 newProtocolFee = PrimexPricingLibrary.calculateProtocolFee(\\n                PrimexPricingLibrary.DepositData({\\n                    protocolFee: 0,\\n                    depositAsset: _order.depositAsset,\\n                    depositAmount: _params.depositAmount,\\n                    leverage: _params.leverage\\n                }),\\n                _primexDNS,\\n                _priceOracle,\\n                _order.shouldOpenPosition\\n                    ? IPrimexDNSStorage.OrderType.LIMIT_ORDER\\n                    : IPrimexDNSStorage.OrderType.SWAP_LIMIT_ORDER,\\n                feeToken\\n            );\\n            if (feeToken == _order.feeToken) {\\n                uint256 amount;\\n                unchecked {\\n                    if (newProtocolFee > _order.protocolFee) amount = newProtocolFee - _order.protocolFee;\\n                    else amount = _order.protocolFee - newProtocolFee;\\n                }\\n                depositLockOrUnlock(\\n                    _traderBalanceVault,\\n                    feeToken,\\n                    amount,\\n                    _params.payFeeFromWallet,\\n                    newProtocolFee > _order.protocolFee\\n                );\\n            } else {\\n                if (newProtocolFee > 0) {\\n                    //lock the new fee token\\n                    depositLockOrUnlock(_traderBalanceVault, feeToken, newProtocolFee, _params.payFeeFromWallet, true);\\n                }\\n                //unlock the old fee token\\n                depositLockOrUnlock(\\n                    _traderBalanceVault,\\n                    _order.feeToken,\\n                    _order.protocolFee,\\n                    _params.payFeeFromWallet,\\n                    false\\n                );\\n                _order.feeToken = feeToken;\\n            }\\n            _order.protocolFee = newProtocolFee;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the leverage of a limit order.\\n     * @param _order The limit order to update.\\n     * @param _leverage The new leverage value in WAD format for the order.\\n     */\\n    function updateLeverage(LimitOrder storage _order, uint256 _leverage) public {\\n        _require(_leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n        _require(_order.leverage != WadRayMath.WAD, Errors.CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN.selector);\\n\\n        _require(\\n            _leverage < _order.bucket.maxAssetLeverage(_order.positionAsset),\\n            Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n        );\\n        _order.leverage = _leverage;\\n    }\\n\\n    /**\\n     * @notice Updates the deposit details of a LimitOrder.\\n     * @param _order The LimitOrder to update.\\n     * @param _amount The amount of the asset being deposited.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or unlock the deposited asset.\\n     * @param traderBalanceVault The instance of ITraderBalanceVault used for deposit and unlock operations.\\n     */\\n    function updateDeposit(\\n        LimitOrderLibrary.LimitOrder storage _order,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        ITraderBalanceVault traderBalanceVault\\n    ) public {\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            _order.depositAsset,\\n            (_amount > _order.depositAmount) ? _amount - _order.depositAmount : _order.depositAmount - _amount,\\n            _takeDepositFromWallet,\\n            _amount > _order.depositAmount\\n        );\\n        _order.depositAmount = _amount;\\n    }\\n\\n    /**\\n     * @notice Sets the open conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param openConditionsMap The mapping of order IDs to open conditions.\\n     * @param openConditions The array of open conditions.\\n     * @param primexDNS The instance of the Primex DNS contract.\\n     */\\n    function setOpenConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage openConditionsMap,\\n        Condition[] memory openConditions,\\n        IPrimexDNS primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(openConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(openConditions.length > 0, Errors.SHOULD_HAVE_OPEN_CONDITIONS.selector);\\n        if (openConditionsMap[_order.id].length > 0) {\\n            delete openConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < openConditions.length; i++) {\\n            condition = openConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalOpeningManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_COM.selector\\n            );\\n            openConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the close conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param closeConditionsMap The mapping of order IDs to close conditions.\\n     * @param closeConditions The array of close conditions to set.\\n     * @param primexDNS The Primex DNS contract address.\\n     */\\n    function setCloseConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage closeConditionsMap,\\n        Condition[] memory closeConditions,\\n        IPrimexDNS primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(closeConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(\\n            _order.shouldOpenPosition || closeConditions.length == 0,\\n            Errors.SHOULD_NOT_HAVE_CLOSE_CONDITIONS.selector\\n        );\\n\\n        if (closeConditionsMap[_order.id].length > 0) {\\n            delete closeConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n            closeConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a limit order.\\n     * @param _params The struct containing the order parameters.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param primexDNS The instance of the PrimexDNS contract.\\n     * @return The created limit order.\\n     */\\n    function createLimitOrder(\\n        CreateLimitOrderParams calldata _params,\\n        IPositionManager pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        IPrimexDNS primexDNS\\n    ) public returns (LimitOrder memory) {\\n        _require(_params.leverage >= WadRayMath.WAD, Errors.INCORRECT_LEVERAGE.selector);\\n        _require(_params.deadline > block.timestamp, Errors.INCORRECT_DEADLINE.selector);\\n\\n        CreateLimitOrderVars memory vars;\\n        vars.isSpot = bytes(_params.bucket).length == 0;\\n        vars.positionSize = _params.depositAmount.wmul(_params.leverage);\\n        vars.priceOracle = address(pm.priceOracle());\\n        if (vars.isSpot) {\\n            _require(_params.leverage == WadRayMath.WAD, Errors.LEVERAGE_SHOULD_BE_1.selector);\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            IPriceOracle(vars.priceOracle).getPriceFeedsPair(_params.positionAsset, _params.depositAsset);\\n        } else {\\n            _require(_params.shouldOpenPosition, Errors.SHOULD_OPEN_POSITION.selector);\\n            _require(_params.leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n            vars.bucket = IBucket(primexDNS.getBucketAddress(_params.bucket));\\n            _require(vars.bucket.getLiquidityMiningParams().isBucketLaunched, Errors.BUCKET_IS_NOT_LAUNCHED.selector);\\n\\n            (, bool tokenAllowed) = vars.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n            _require(\\n                _params.leverage < vars.bucket.maxAssetLeverage(_params.positionAsset),\\n                Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n            );\\n        }\\n        LimitOrder memory order = LimitOrder({\\n            bucket: IBucket(address(0)),\\n            positionAsset: _params.positionAsset,\\n            depositAsset: _params.depositAsset,\\n            depositAmount: _params.depositAmount,\\n            feeToken: _params.isProtocolFeeInPmx ? primexDNS.pmx() : NATIVE_CURRENCY,\\n            protocolFee: 0,\\n            trader: msg.sender,\\n            deadline: _params.deadline,\\n            id: 0,\\n            leverage: _params.leverage,\\n            shouldOpenPosition: _params.shouldOpenPosition,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n        order.bucket = vars.bucket;\\n\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            pm.minPositionSize(),\\n            pm.minPositionAsset(),\\n            vars.positionSize,\\n            order.depositAsset,\\n            vars.priceOracle\\n        );\\n        if (_params.isProtocolFeeInPmx) {\\n            vars.feeToken = primexDNS.pmx();\\n            _require(msg.value == 0, Errors.DISABLED_TRANSFER_NATIVE_CURRENCY.selector);\\n        } else {\\n            vars.feeToken = NATIVE_CURRENCY;\\n        }\\n\\n        order.protocolFee = PrimexPricingLibrary.calculateProtocolFee(\\n            PrimexPricingLibrary.DepositData({\\n                protocolFee: 0,\\n                depositAsset: _params.depositAsset,\\n                depositAmount: _params.depositAmount,\\n                leverage: _params.leverage\\n            }),\\n            primexDNS,\\n            vars.priceOracle,\\n            order.shouldOpenPosition\\n                ? IPrimexDNSStorage.OrderType.LIMIT_ORDER\\n                : IPrimexDNSStorage.OrderType.SWAP_LIMIT_ORDER,\\n            vars.feeToken\\n        );\\n\\n        if (order.protocolFee > 0) {\\n            // fee locking\\n            depositLockOrUnlock(traderBalanceVault, vars.feeToken, order.protocolFee, _params.payFeeFromWallet, true);\\n        }\\n        // deposit locking\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            order.depositAsset,\\n            order.depositAmount,\\n            _params.takeDepositFromWallet,\\n            true\\n        );\\n\\n        return order;\\n    }\\n\\n    /**\\n     * @notice Opens a position by order.\\n     * @param order The LimitOrder storage containing order details.\\n     * @param _params The OpenPositionParams calldata containing additional position parameters.\\n     * @param _closeConditions The Condition array containing close conditions for the position.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param primexDNS The instance of the PrimexDNS contract.\\n     * @param swapManager The instance of the SwapManager contract.\\n     * @return vars The OpenPositionByOrderVars struct containing the result of the open position operation.\\n     */\\n    function openPositionByOrder(\\n        LimitOrder storage order,\\n        OpenPositionParams calldata _params,\\n        Condition[] memory _closeConditions,\\n        IPositionManager pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        IPrimexDNS primexDNS,\\n        ISwapManager swapManager\\n    ) public returns (OpenPositionByOrderVars memory) {\\n        OpenPositionByOrderVars memory vars;\\n        bool isSpot = address(order.bucket) == address(0);\\n\\n        if (order.shouldOpenPosition) {\\n            vars.closeReason = isSpot ? CloseReason.FilledSpot : CloseReason.FilledMargin;\\n            (vars.amountIn, vars.amountOut, vars.newPositionId, vars.exchangeRate) = pm.openPositionByOrder(\\n                OpenPositionByOrderParams({\\n                    sender: msg.sender,\\n                    order: order,\\n                    closeConditions: _closeConditions,\\n                    firstAssetRoutes: _params.firstAssetRoutes,\\n                    depositInThirdAssetRoutes: _params.depositInThirdAssetRoutes\\n                })\\n            );\\n        } else {\\n            _require(\\n                _params.depositInThirdAssetRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n            vars.closeReason = CloseReason.FilledSwap;\\n            vars.amountIn = order.depositAmount;\\n\\n            // calculateFee is false so 'depositData' and 'priceOracle' are default values except 'protocolFee'\\n            PrimexPricingLibrary.payProtocolFee(\\n                PrimexPricingLibrary.ProtocolFeeParams({\\n                    depositData: PrimexPricingLibrary.DepositData({\\n                        protocolFee: order.protocolFee,\\n                        depositAsset: address(0),\\n                        depositAmount: 0,\\n                        leverage: 0\\n                    }),\\n                    feeToken: order.feeToken,\\n                    isSwapFromWallet: false,\\n                    calculateFee: false,\\n                    orderType: IPrimexDNSStorage.OrderType.SWAP_LIMIT_ORDER,\\n                    trader: order.trader,\\n                    priceOracle: address(0),\\n                    traderBalanceVault: traderBalanceVault,\\n                    primexDNS: primexDNS\\n                })\\n            );\\n\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams({\\n                    trader: order.trader,\\n                    receiver: address(this),\\n                    asset: order.depositAsset,\\n                    amount: order.depositAmount\\n                })\\n            );\\n\\n            vars.amountOut = swapManager.swap(\\n                ISwapManager.SwapParams({\\n                    tokenA: order.depositAsset,\\n                    tokenB: order.positionAsset,\\n                    amountTokenA: order.depositAmount,\\n                    amountOutMin: 0,\\n                    routes: _params.firstAssetRoutes,\\n                    receiver: order.trader,\\n                    deadline: order.deadline,\\n                    isSwapFromWallet: false,\\n                    isSwapToWallet: false,\\n                    isSwapFeeInPmx: false,\\n                    payFeeFromWallet: false\\n                }),\\n                pm.getOracleTolerableLimit(order.depositAsset, order.positionAsset),\\n                true\\n            );\\n            uint256 multiplierDepositAsset = 10 ** (18 - IERC20Metadata(order.depositAsset).decimals());\\n            uint256 multiplierPositionAsset = 10 ** (18 - IERC20Metadata(order.positionAsset).decimals());\\n            vars.exchangeRate =\\n                (vars.amountIn * multiplierDepositAsset).wdiv(vars.amountOut * multiplierPositionAsset) /\\n                multiplierDepositAsset;\\n        }\\n\\n        vars.assetIn = isSpot ? order.depositAsset : address(order.bucket.borrowedAsset());\\n        vars.assetOut = order.positionAsset;\\n        return vars;\\n    }\\n\\n    /**\\n     * @notice Checks if an array of Condition structs has no duplicate manager types.\\n     * @param conditions The array of Condition structs to be checked.\\n     * @return bool Boolean value indicating whether the array has no duplicate manager types.\\n     */\\n    function hasNoConditionManagerTypeDuplicates(Condition[] memory conditions) public pure returns (bool) {\\n        if (conditions.length == 0) {\\n            return true;\\n        }\\n        for (uint256 i; i < conditions.length - 1; i++) {\\n            for (uint256 j = i + 1; j < conditions.length; j++) {\\n                if (conditions[i].managerType == conditions[j].managerType) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This function is used to either deposit or unlock assets in the trader balance vault.\\n     * @param traderBalanceVault The instance of the trader balance vault.\\n     * @param _depositAsset The address of the asset to be deposited or unlocked.\\n     * @param _amount The amount of the asset to be deposited or unlocked.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or not.\\n     * @param _isAdd Boolean indicating whether to lock or unlock asset. Should lock asset, if true.\\n     */\\n    function depositLockOrUnlock(\\n        ITraderBalanceVault traderBalanceVault,\\n        address _depositAsset,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        bool _isAdd\\n    ) internal {\\n        if (!_isAdd) {\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams(msg.sender, msg.sender, _depositAsset, _amount)\\n            );\\n            return;\\n        }\\n        if (_takeDepositFromWallet) {\\n            if (_depositAsset == NATIVE_CURRENCY) {\\n                _require(msg.value >= _amount, Errors.INSUFFICIENT_DEPOSIT.selector);\\n                traderBalanceVault.increaseLockedBalance{value: _amount}(msg.sender, _depositAsset, _amount);\\n                if (msg.value > _amount) {\\n                    uint256 rest = msg.value - _amount;\\n                    traderBalanceVault.topUpAvailableBalance{value: rest}(msg.sender, NATIVE_CURRENCY, rest);\\n                }\\n                return;\\n            }\\n            TokenTransfersLibrary.doTransferFromTo(_depositAsset, msg.sender, address(traderBalanceVault), _amount);\\n            traderBalanceVault.increaseLockedBalance(msg.sender, _depositAsset, _amount);\\n            return;\\n        }\\n        traderBalanceVault.useTraderAssets(\\n            ITraderBalanceVault.LockAssetParams(\\n                msg.sender,\\n                address(0),\\n                _depositAsset,\\n                _amount,\\n                ITraderBalanceVault.OpenType.CREATE_LIMIT_ORDER\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x809b1633cb9f2bee008b2cdcab6900a977ce546b7bcb8c4d3cc3db73ee8ae681\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PositionLibrary.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"./LimitOrderLibrary.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorage} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {ITakeProfitStopLossCCM} from \\\"../interfaces/ITakeProfitStopLossCCM.sol\\\";\\nimport {IKeeperRewardDistributorStorage} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\\\";\\n\\nlibrary PositionLibrary {\\n    using WadRayMath for uint256;\\n\\n    event ClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed closedBy,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut,\\n        PositionLibrary.CloseReason reason\\n    );\\n\\n    /**\\n     * @notice This struct represents a trading position\\n     * @param id unique identifier for the position\\n     * @param scaledDebtAmount scaled debt amount associated with the position\\n     * @param bucket instance of the Bucket associated for trading\\n     * @param soldAsset bucket asset in the case of margin trading or deposit asset in the case of spot trading\\n     * @param depositAmountInSoldAsset equivalent of trader deposit size (this deposit can be in any asset) in the sold asset\\n     * or just deposit amount for spot trading\\n     * @param positionAsset asset of the trading position\\n     * @param positionAmount amount of the trading position\\n     * @param trader address of the trader holding the position\\n     * @param openBorrowIndex variable borrow index when position was opened\\n     * @param createdAt timestamp when the position was created\\n     * @param updatedConditionsAt timestamp when the close condition was updated\\n     * @param extraParams byte-encoded params, can be used for future updates\\n     */\\n    struct Position {\\n        uint256 id;\\n        uint256 scaledDebtAmount;\\n        IBucket bucket;\\n        address soldAsset;\\n        uint256 depositAmountInSoldAsset;\\n        address positionAsset;\\n        uint256 positionAmount;\\n        address trader;\\n        uint256 openBorrowIndex;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        bytes extraParams;\\n    }\\n\\n    struct IncreaseDepositParams {\\n        uint256 amount;\\n        address asset;\\n        bool takeDepositFromWallet;\\n        PrimexPricingLibrary.Route[] routes;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 amountOutMin;\\n    }\\n\\n    struct DecreaseDepositParams {\\n        uint256 amount;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        uint256 oracleTolerableLimit;\\n        uint256 maintenanceBuffer;\\n    }\\n\\n    struct MultiSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        PrimexPricingLibrary.Route[] routes;\\n        address receiver;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n    }\\n\\n    struct ClosePositionParams {\\n        uint256 closeAmount;\\n        uint256 depositDecrease;\\n        uint256 scaledDebtAmount;\\n        address depositReceiver;\\n        PrimexPricingLibrary.Route[] routes;\\n        uint256 amountOutMin;\\n        uint256 oracleTolerableLimit;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        LimitOrderLibrary.Condition closeCondition;\\n        bytes ccmAdditionalParams;\\n        bool borrowedAmountIsNotZero;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    struct ClosePositionVars {\\n        address dexAdapter;\\n        uint256 borowedAssetAmount;\\n        uint256 amountToReturn;\\n        uint256 permanentLoss;\\n        uint256 fee;\\n    }\\n\\n    struct ClosePositionEventData {\\n        int256 profit;\\n        uint256 debtAmount;\\n        uint256 amountOut;\\n        IKeeperRewardDistributorStorage.KeeperActionType actionType;\\n    }\\n\\n    struct OpenPositionVars {\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n        PrimexPricingLibrary.DepositData depositData;\\n        address feeToken;\\n        uint256 borrowedAmount;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool isSpot;\\n        bool isThirdAsset;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n        bool byOrder;\\n        address sender;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    struct OpenPositionEventData {\\n        uint256 protocolFee;\\n        uint256 entryPrice;\\n        uint256 leverage;\\n    }\\n\\n    /**\\n     * The struct for openPosition function local vars\\n     */\\n    struct OpenPositionLocalData {\\n        uint256 amountToTransfer;\\n        address dexAdapter;\\n        address depositReceiver;\\n        uint256 depositInPositionAsset;\\n        bool isSpot;\\n    }\\n\\n    /**\\n     * @dev Structure for the OpenPositionParams when margin trading is activated\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param borrowedAmount The amount of tokens borrowed to be exchanged\\n     * @param depositInThirdAssetRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionMarginParams {\\n        string bucket;\\n        uint256 borrowedAmount;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n    }\\n\\n    /**\\n     * @dev Structure for the openPosition with parameters necessary to open a position\\n     * @param marginParams margin trading related params\\n     * @param firstAssetRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param amountOutMin The minimum amount of output tokens\\n     * that must be received for the transaction not to revert.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @param takeDepositFromWallet Bool, add a deposit within the current transaction\\n     * @param payFeeFromWallet Bool, add a fee  within the current transaction\\n     * @param closeConditions Array of conditions that position can be closed by\\n     */\\n    struct OpenPositionParams {\\n        OpenPositionMarginParams marginParams;\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address positionAsset;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n        bool isProtocolFeeInPmx;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n    }\\n    struct PositionManagerParams {\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 oracleTolerableLimit;\\n        uint256 oracleTolerableLimitForThirdAsset;\\n        uint256 minPositionSize;\\n        address minPositionAsset;\\n        uint256 maxPositionSize;\\n    }\\n\\n    struct ScaledParams {\\n        uint256 decreasePercent;\\n        uint256 scaledDebtAmount;\\n        uint256 depositDecrease;\\n        bool borrowedAmountIsNotZero;\\n    }\\n\\n    enum CloseReason {\\n        CLOSE_BY_TRADER,\\n        RISKY_POSITION,\\n        BUCKET_DELISTED,\\n        LIMIT_CONDITION,\\n        BATCH_LIQUIDATION,\\n        BATCH_STOP_LOSS,\\n        BATCH_TAKE_PROFIT\\n    }\\n\\n    /**\\n     * @dev Increases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for increasing the deposit.\\n     * @return The amount of trader debtTokens burned.\\n     */\\n    function increaseDeposit(Position storage position, IncreaseDepositParams memory params) public returns (uint256) {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.scaledDebtAmount != 0, Errors.BORROWED_AMOUNT_IS_ZERO.selector);\\n        address borrowedAsset = position.soldAsset;\\n\\n        uint256 depositAmountInBorrowed;\\n        address depositReceiver = params.primexDNS.dexAdapter();\\n        if (params.asset == borrowedAsset) {\\n            depositReceiver = address(position.bucket);\\n            depositAmountInBorrowed = params.amount;\\n        }\\n\\n        if (params.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(params.asset, msg.sender, depositReceiver, params.amount);\\n        } else {\\n            params.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams(\\n                    msg.sender,\\n                    depositReceiver,\\n                    params.asset,\\n                    params.amount,\\n                    ITraderBalanceVault.OpenType.OPEN\\n                )\\n            );\\n        }\\n\\n        if (params.asset != borrowedAsset) {\\n            depositAmountInBorrowed = PrimexPricingLibrary.multiSwap(\\n                PrimexPricingLibrary.MultiSwapParams({\\n                    tokenA: params.asset,\\n                    tokenB: borrowedAsset,\\n                    amountTokenA: params.amount,\\n                    routes: params.routes,\\n                    dexAdapter: params.primexDNS.dexAdapter(),\\n                    receiver: address(position.bucket),\\n                    deadline: block.timestamp\\n                }),\\n                0,\\n                address(params.primexDNS),\\n                address(params.priceOracle),\\n                false // don't need oracle check. add amountOutMin?\\n            );\\n            _require(depositAmountInBorrowed >= params.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n        }\\n\\n        uint256 debt = getDebt(position);\\n        uint256 amountToTrader;\\n        uint256 debtToBurn = depositAmountInBorrowed;\\n\\n        if (depositAmountInBorrowed >= debt) {\\n            amountToTrader = depositAmountInBorrowed - debt;\\n            debtToBurn = debt;\\n            position.scaledDebtAmount = 0;\\n            if (amountToTrader > 0)\\n                params.traderBalanceVault.topUpAvailableBalance(position.trader, borrowedAsset, amountToTrader);\\n        } else {\\n            position.scaledDebtAmount =\\n                position.scaledDebtAmount -\\n                debtToBurn.rdiv(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        position.depositAmountInSoldAsset += debtToBurn;\\n\\n        position.bucket.decreaseTraderDebt(\\n            position.trader,\\n            debtToBurn,\\n            address(params.traderBalanceVault),\\n            amountToTrader,\\n            0\\n        );\\n        return debtToBurn;\\n    }\\n\\n    /**\\n     * @dev Decreases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for the decrease deposit operation.\\n     */\\n    function decreaseDeposit(Position storage position, DecreaseDepositParams memory params) public {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.bucket != IBucket(address(0)), Errors.IS_SPOT_POSITION.selector);\\n        _require(position.bucket.isActive(), Errors.BUCKET_IS_NOT_ACTIVE.selector);\\n        _require(params.amount > 0, Errors.DECREASE_AMOUNT_IS_ZERO.selector);\\n        _require(params.amount <= position.depositAmountInSoldAsset, Errors.AMOUNT_IS_MORE_THAN_DEPOSIT.selector);\\n        position.depositAmountInSoldAsset -= params.amount;\\n        position.scaledDebtAmount =\\n            position.scaledDebtAmount +\\n            params.amount.rdiv(position.bucket.getNormalizedVariableDebt());\\n\\n        params.traderBalanceVault.topUpAvailableBalance(position.trader, position.soldAsset, params.amount);\\n\\n        _require(\\n            health(\\n                position,\\n                params.priceOracle,\\n                params.pairPriceDrop,\\n                params.securityBuffer,\\n                params.oracleTolerableLimit\\n            ) >= WadRayMath.WAD + params.maintenanceBuffer,\\n            Errors.INSUFFICIENT_DEPOSIT_SIZE.selector\\n        );\\n        position.bucket.increaseDebt(position.trader, params.amount, address(params.traderBalanceVault));\\n    }\\n\\n    /**\\n     * @notice Closes a position.\\n     * @param position The position to be closed.\\n     * @param params The parameters for closing the position.\\n     * @param reason The reason for closing the position.\\n     * @return posEventData The event data for the closed position.\\n     */\\n    function closePosition(\\n        Position memory position,\\n        ClosePositionParams memory params,\\n        CloseReason reason\\n    ) public returns (ClosePositionEventData memory) {\\n        ClosePositionEventData memory posEventData;\\n        ClosePositionVars memory vars;\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            posEventData.debtAmount = params.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        vars.dexAdapter = params.primexDNS.dexAdapter();\\n        TokenTransfersLibrary.doTransferOut(position.positionAsset, vars.dexAdapter, params.closeAmount);\\n        posEventData.amountOut = PrimexPricingLibrary.multiSwap(\\n            PrimexPricingLibrary.MultiSwapParams({\\n                tokenA: position.positionAsset,\\n                tokenB: position.soldAsset,\\n                amountTokenA: params.closeAmount,\\n                routes: params.routes,\\n                dexAdapter: vars.dexAdapter,\\n                receiver: params.borrowedAmountIsNotZero\\n                    ? address(position.bucket)\\n                    : address(params.traderBalanceVault),\\n                deadline: block.timestamp\\n            }),\\n            params.oracleTolerableLimit,\\n            address(params.primexDNS),\\n            address(params.priceOracle),\\n            params.needOracleTolerableLimitCheck\\n        );\\n\\n        _require(\\n            posEventData.amountOut >= params.amountOutMin && posEventData.amountOut > 0,\\n            Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector\\n        );\\n\\n        bool canBeClosed;\\n        if (reason == CloseReason.CLOSE_BY_TRADER) {\\n            canBeClosed = position.trader == msg.sender;\\n        } else if (reason == CloseReason.RISKY_POSITION) {\\n            canBeClosed =\\n                health(\\n                    position,\\n                    params.priceOracle,\\n                    params.pairPriceDrop,\\n                    params.securityBuffer,\\n                    params.oracleTolerableLimit\\n                ) <\\n                WadRayMath.WAD;\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.Liquidation;\\n        } else if (reason == CloseReason.LIMIT_CONDITION) {\\n            address cm = params.primexDNS.cmTypeToAddress(params.closeCondition.managerType);\\n            _require(cm != address(0), Errors.INCORRECT_CM_TYPE.selector);\\n\\n            canBeClosed = IConditionalClosingManager(cm).canBeClosedAfterSwap(\\n                position,\\n                params.closeCondition.params,\\n                params.ccmAdditionalParams,\\n                params.closeAmount,\\n                posEventData.amountOut\\n            );\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.StopLoss;\\n        } else if (reason == CloseReason.BUCKET_DELISTED) {\\n            canBeClosed = position.bucket != IBucket(address(0)) && position.bucket.isDelisted();\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.BucketDelisted;\\n        }\\n        _require(canBeClosed, Errors.POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON.selector);\\n\\n        uint256 permanentLoss;\\n        if (posEventData.amountOut > posEventData.debtAmount) {\\n            unchecked {\\n                vars.amountToReturn = posEventData.amountOut - posEventData.debtAmount;\\n            }\\n        } else {\\n            unchecked {\\n                permanentLoss = posEventData.debtAmount - posEventData.amountOut;\\n            }\\n        }\\n\\n        posEventData.profit = -int256(params.depositDecrease);\\n\\n        if (reason != CloseReason.RISKY_POSITION) {\\n            if (vars.amountToReturn > 0) {\\n                posEventData.profit += int256(vars.amountToReturn);\\n                params.traderBalanceVault.topUpAvailableBalance(\\n                    reason == CloseReason.CLOSE_BY_TRADER ? params.depositReceiver : position.trader,\\n                    position.soldAsset,\\n                    vars.amountToReturn\\n                );\\n            }\\n        }\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            position.bucket.decreaseTraderDebt(\\n                position.trader,\\n                posEventData.debtAmount,\\n                reason == CloseReason.RISKY_POSITION ? params.primexDNS.treasury() : address(params.traderBalanceVault),\\n                vars.amountToReturn,\\n                permanentLoss\\n            );\\n        }\\n\\n        // to avoid stack to deep\\n        CloseReason _reason = reason;\\n        if (params.closeAmount == position.positionAmount) {\\n            emit ClosePosition({\\n                positionId: position.id,\\n                trader: position.trader,\\n                closedBy: msg.sender,\\n                bucketAddress: address(position.bucket),\\n                soldAsset: position.soldAsset,\\n                positionAsset: position.positionAsset,\\n                decreasePositionAmount: position.positionAmount,\\n                profit: posEventData.profit,\\n                positionDebt: posEventData.debtAmount,\\n                amountOut: posEventData.amountOut,\\n                reason: _reason\\n            });\\n        }\\n        return posEventData;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum position size between two tokens.\\n     * @param maxPositionSize The storage mapping for maximum position sizes.\\n     * @param token0 The address of token0.\\n     * @param token1 The address of token1.\\n     * @param amountInToken0 The maximum position size in token0.\\n     * @param amountInToken1 The maximum position size in token1.\\n     */\\n    function setMaxPositionSize(\\n        mapping(address => mapping(address => uint256)) storage maxPositionSize,\\n        address token0,\\n        address token1,\\n        uint256 amountInToken0,\\n        uint256 amountInToken1\\n    ) public {\\n        _require(token0 != address(0) && token1 != address(0), Errors.TOKEN_ADDRESS_IS_ZERO.selector);\\n        _require(token0 != token1, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n\\n        maxPositionSize[token1][token0] = amountInToken0;\\n        maxPositionSize[token0][token1] = amountInToken1;\\n    }\\n\\n    /**\\n     * @dev Sets the tolerable limit for an oracle between two assets.\\n     * @param oracleTolerableLimits The mapping to store oracle tolerable limits.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @param percent The percentage tolerable limit for the oracle in WAD format (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(\\n        mapping(address => mapping(address => uint256)) storage oracleTolerableLimits,\\n        address assetA,\\n        address assetB,\\n        uint256 percent\\n    ) public {\\n        _require(assetA != address(0) && assetB != address(0), Errors.ASSET_ADDRESS_NOT_SUPPORTED.selector);\\n        _require(assetA != assetB, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n        _require(percent <= WadRayMath.WAD && percent > 0, Errors.INVALID_PERCENT_NUMBER.selector);\\n        oracleTolerableLimits[assetA][assetB] = percent;\\n        oracleTolerableLimits[assetB][assetA] = percent;\\n    }\\n\\n    /**\\n     * @dev Sets the close conditions for a given position.\\n     * @param position The position for which to set the close conditions.\\n     * @param closeConditionsMap The storage mapping of close conditions for each position ID.\\n     * @param closeConditions The array of close conditions to be set.\\n     * @param primexDNS The address of the IPrimexDNS contract.\\n     */\\n    function setCloseConditions(\\n        Position memory position,\\n        mapping(uint256 => LimitOrderLibrary.Condition[]) storage closeConditionsMap,\\n        LimitOrderLibrary.Condition[] memory closeConditions,\\n        IPrimexDNS primexDNS\\n    ) public {\\n        _require(\\n            LimitOrderLibrary.hasNoConditionManagerTypeDuplicates(closeConditions),\\n            Errors.SHOULD_NOT_HAVE_DUPLICATES.selector\\n        );\\n        if (closeConditionsMap[position.id].length > 0) {\\n            delete closeConditionsMap[position.id];\\n        }\\n        LimitOrderLibrary.Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n\\n            closeConditionsMap[position.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Opens a position by depositing assets and borrowing funds (except when the position is spot)\\n     * @param _position The position to be opened\\n     * @param _vars Variables related to the position opening\\n     * @param _pmParams Parameters for the PositionManager contract\\n     * @return The updated position and event data\\n     */\\n    function openPosition(\\n        Position memory _position,\\n        OpenPositionVars memory _vars,\\n        PositionManagerParams memory _pmParams\\n    ) public returns (Position memory, OpenPositionEventData memory) {\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            _pmParams.minPositionSize,\\n            _pmParams.minPositionAsset,\\n            _vars.borrowedAmount + _position.depositAmountInSoldAsset,\\n            _position.soldAsset,\\n            address(_pmParams.priceOracle)\\n        );\\n        OpenPositionLocalData memory data;\\n        data.amountToTransfer = _vars.borrowedAmount;\\n        data.dexAdapter = _pmParams.primexDNS.dexAdapter();\\n        data.depositReceiver = data.dexAdapter;\\n        if (_vars.depositData.depositAsset == _position.positionAsset) {\\n            _position.positionAmount = _vars.depositData.depositAmount;\\n            data.depositInPositionAsset = _vars.depositData.depositAmount;\\n            data.depositReceiver = address(this);\\n        } else if (_vars.depositData.depositAsset == _position.soldAsset) {\\n            data.amountToTransfer += _vars.depositData.depositAmount;\\n        }\\n\\n        data.isSpot = _vars.borrowedAmount == 0;\\n        if (data.isSpot) _vars.depositData.depositAsset = _position.soldAsset;\\n\\n        if (_vars.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(\\n                _vars.depositData.depositAsset,\\n                msg.sender,\\n                data.depositReceiver,\\n                _vars.depositData.depositAmount\\n            );\\n        } else {\\n            _pmParams.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams({\\n                    trader: _position.trader,\\n                    depositReceiver: data.depositReceiver,\\n                    depositAsset: _vars.depositData.depositAsset,\\n                    depositAmount: _vars.depositData.depositAmount,\\n                    openType: _vars.byOrder\\n                        ? ITraderBalanceVault.OpenType.OPEN_BY_ORDER\\n                        : ITraderBalanceVault.OpenType.OPEN\\n                })\\n            );\\n        }\\n\\n        if (!data.isSpot) {\\n            _position.bucket.increaseDebt(_position.trader, _vars.borrowedAmount, data.dexAdapter);\\n            // @note You need to write index only after opening a position in bucket.\\n            // Since when opening position in the bucket, index becomes relevant (containing accumulated profit)\\n            _position.openBorrowIndex = _position.bucket.variableBorrowIndex();\\n            _position.scaledDebtAmount = _vars.borrowedAmount.rdiv(_position.openBorrowIndex);\\n        }\\n        if (_vars.isThirdAsset) {\\n            data.depositInPositionAsset = PrimexPricingLibrary.multiSwap(\\n                PrimexPricingLibrary.MultiSwapParams({\\n                    tokenA: _vars.depositData.depositAsset,\\n                    tokenB: _position.positionAsset,\\n                    amountTokenA: _vars.depositData.depositAmount,\\n                    routes: _vars.depositInThirdAssetRoutes,\\n                    dexAdapter: data.dexAdapter,\\n                    receiver: address(this),\\n                    deadline: _vars.deadline\\n                }),\\n                _pmParams.oracleTolerableLimitForThirdAsset,\\n                address(_pmParams.primexDNS),\\n                address(_pmParams.priceOracle),\\n                true\\n            );\\n            _position.positionAmount += data.depositInPositionAsset;\\n        } else {\\n            _require(\\n                _vars.depositInThirdAssetRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n        }\\n\\n        uint256 borrowedAmountInPositionAsset = PrimexPricingLibrary.multiSwap(\\n            PrimexPricingLibrary.MultiSwapParams({\\n                tokenA: _position.soldAsset,\\n                tokenB: _position.positionAsset,\\n                amountTokenA: data.isSpot ? _vars.depositData.depositAmount : data.amountToTransfer,\\n                routes: _vars.firstAssetRoutes,\\n                dexAdapter: data.dexAdapter,\\n                receiver: address(this),\\n                deadline: _vars.deadline\\n            }),\\n            _pmParams.oracleTolerableLimit,\\n            address(_pmParams.primexDNS),\\n            address(_pmParams.priceOracle),\\n            _vars.needOracleTolerableLimitCheck\\n        );\\n        _position.positionAmount += borrowedAmountInPositionAsset;\\n        _require(_pmParams.maxPositionSize >= _position.positionAmount, Errors.POSITION_SIZE_EXCEEDED.selector);\\n        uint256 leverage = WadRayMath.WAD;\\n        if (!data.isSpot) {\\n            if (_vars.depositData.depositAsset == _position.soldAsset) {\\n                leverage = (_vars.borrowedAmount + _position.depositAmountInSoldAsset).wdiv(\\n                    _position.depositAmountInSoldAsset\\n                );\\n            } else {\\n                leverage = (borrowedAmountInPositionAsset + data.depositInPositionAsset).wdiv(\\n                    data.depositInPositionAsset\\n                );\\n            }\\n            _require(\\n                leverage <= _position.bucket.maxAssetLeverage(_position.positionAsset),\\n                Errors.INSUFFICIENT_DEPOSIT.selector\\n            );\\n        }\\n\\n        if (!_vars.byOrder) {\\n            _vars.depositData.leverage = leverage;\\n        }\\n\\n        _require(_position.positionAmount >= _vars.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n\\n        OpenPositionEventData memory posEventData;\\n\\n        posEventData.protocolFee = PrimexPricingLibrary.payProtocolFee(\\n            PrimexPricingLibrary.ProtocolFeeParams({\\n                depositData: _vars.depositData,\\n                feeToken: _vars.feeToken,\\n                isSwapFromWallet: _vars.payFeeFromWallet,\\n                calculateFee: !_vars.byOrder,\\n                orderType: _vars.byOrder\\n                    ? IPrimexDNSStorage.OrderType.LIMIT_ORDER\\n                    : IPrimexDNSStorage.OrderType.MARKET_ORDER,\\n                trader: _position.trader,\\n                priceOracle: address(_pmParams.priceOracle),\\n                traderBalanceVault: _pmParams.traderBalanceVault,\\n                primexDNS: _pmParams.primexDNS\\n            })\\n        );\\n\\n        uint256 multiplierBorrowedAsset = 10 ** (18 - IERC20Metadata(_position.soldAsset).decimals());\\n        uint256 multiplierPositionAsset = 10 ** (18 - IERC20Metadata(_position.positionAsset).decimals());\\n        posEventData.entryPrice =\\n            ((_vars.borrowedAmount + _position.depositAmountInSoldAsset) * multiplierBorrowedAsset).wdiv(\\n                _position.positionAmount * multiplierPositionAsset\\n            ) /\\n            multiplierBorrowedAsset;\\n        posEventData.leverage = _vars.depositData.leverage;\\n        return (_position, posEventData);\\n    }\\n\\n    /**\\n     * @dev Retrieves the debt amount for a given position.\\n     * @param position The Position struct representing the position to get the debt amount for.\\n     * @return The debt amount in debtTokens.\\n     */\\n    function getDebt(Position memory position) public view returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return 0;\\n        return position.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n    }\\n\\n    /**\\n     * @dev Calculates the health of a position.\\n     * @dev health = ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * borrowedAssetAmountOut) /\\n     (feeBuffer * debt)\\n     * @param position The position object containing relevant information.\\n     * @param priceOracle The price oracle contract used for obtaining asset prices.\\n     * @param pairPriceDrop The priceDrop in WAD format of the asset pair.\\n     * @param securityBuffer The security buffer in WAD format for the position.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the price oracle.\\n     * @return The health value in WAD format of the position.\\n     */\\n    function health(\\n        Position memory position,\\n        IPriceOracle priceOracle,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit\\n    ) public view returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return WadRayMath.WAD;\\n        return\\n            health(\\n                PrimexPricingLibrary.getOracleAmountsOut(\\n                    position.positionAsset,\\n                    position.soldAsset,\\n                    position.positionAmount,\\n                    address(priceOracle)\\n                ),\\n                pairPriceDrop,\\n                securityBuffer,\\n                oracleTolerableLimit,\\n                getDebt(position),\\n                position.bucket.feeBuffer()\\n            );\\n    }\\n\\n    /**\\n     * @dev Creates a new position based on the given parameters.\\n     * @param _params The input parameters for creating the position.\\n     * @param primexDNS The address of the PrimexDNS contract.\\n     * @param priceOracle The address of the PriceOracle contract.\\n     * @return position The created Position struct.\\n     * @return vars The OpenPositionVars struct.\\n     */\\n    function createPosition(\\n        OpenPositionParams calldata _params,\\n        IPrimexDNS primexDNS,\\n        IPriceOracle priceOracle\\n    ) public view returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetRoutes: _params.firstAssetRoutes,\\n            depositInThirdAssetRoutes: _params.marginParams.depositInThirdAssetRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                protocolFee: 0,\\n                depositAsset: address(0),\\n                depositAmount: _params.depositAmount,\\n                leverage: 0\\n            }),\\n            feeToken: _params.isProtocolFeeInPmx ? primexDNS.pmx() : NATIVE_CURRENCY,\\n            borrowedAmount: _params.marginParams.borrowedAmount,\\n            amountOutMin: _params.amountOutMin,\\n            deadline: _params.deadline,\\n            isSpot: _params.marginParams.borrowedAmount == 0,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: _params.takeDepositFromWallet,\\n            payFeeFromWallet: _params.payFeeFromWallet,\\n            byOrder: false,\\n            sender: address(0),\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: _params.marginParams.borrowedAmount > 0\\n        });\\n        PositionLibrary.Position memory position = PositionLibrary.Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucket(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.positionAsset,\\n            positionAmount: 0,\\n            trader: msg.sender,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            _require(bytes(_params.marginParams.bucket).length == 0, Errors.BUCKET_SHOULD_BE_UNDEFINED.selector);\\n            priceOracle.getPriceFeedsPair(_params.positionAsset, _params.depositAsset);\\n            position.soldAsset = _params.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n            vars.depositData.leverage = WadRayMath.WAD;\\n        } else {\\n            position.bucket = IBucket(primexDNS.getBucketAddress(_params.marginParams.bucket));\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.depositAsset;\\n            (, bool tokenAllowed) = position.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n\\n            vars.isThirdAsset =\\n                _params.depositAsset != position.soldAsset &&\\n                _params.depositAsset != _params.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.depositAsset,\\n                position.soldAsset,\\n                _params.depositAmount,\\n                address(priceOracle)\\n            );\\n        }\\n\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Creates a position based on the provided order parameters.\\n     * @dev This function calculates and returns a Position and OpenPositionVars struct.\\n     * @param _params The OpenPositionByOrderParams struct containing the order parameters.\\n     * @param priceOracle The price oracle contract used for retrieving asset prices.\\n     * @return position The Position struct representing the created position.\\n     * @return vars The OpenPositionVars struct containing additional variables related to the position.\\n     */\\n    function createPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params,\\n        IPriceOracle priceOracle\\n    ) public view returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetRoutes: _params.firstAssetRoutes,\\n            depositInThirdAssetRoutes: _params.depositInThirdAssetRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                protocolFee: _params.order.protocolFee,\\n                depositAsset: address(0),\\n                depositAmount: _params.order.depositAmount,\\n                leverage: _params.order.leverage\\n            }),\\n            feeToken: _params.order.feeToken,\\n            borrowedAmount: 0,\\n            amountOutMin: 0,\\n            deadline: _params.order.deadline,\\n            isSpot: _params.order.leverage == WadRayMath.WAD,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: false,\\n            payFeeFromWallet: false,\\n            byOrder: true,\\n            sender: _params.sender,\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: true\\n        });\\n\\n        Position memory position = Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucket(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.order.positionAsset,\\n            positionAmount: 0,\\n            trader: _params.order.trader,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            position.soldAsset = _params.order.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n        } else {\\n            position.bucket = _params.order.bucket;\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.order.depositAsset;\\n            vars.isThirdAsset =\\n                _params.order.depositAsset != position.soldAsset &&\\n                _params.order.depositAsset != _params.order.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.order.depositAsset,\\n                position.soldAsset,\\n                _params.order.depositAmount,\\n                address(priceOracle)\\n            );\\n            vars.borrowedAmount = position.depositAmountInSoldAsset.wmul(_params.order.leverage - WadRayMath.WAD);\\n        }\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Calculates the health score for a position.\\n     * @param borrowedAssetAmountOut The amount of borrowed assets.\\n     * @param pairPriceDrop The priceDrop in WAD format of the pair.\\n     * @param securityBuffer The security buffer in WAD format.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the oracle.\\n     * @param positionDebt The debt of the position.\\n     * @param feeBuffer The buffer for fees.\\n     * @return The health score of the position.\\n     */\\n    function health(\\n        uint256 borrowedAssetAmountOut,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit,\\n        uint256 positionDebt,\\n        uint256 feeBuffer\\n    ) public pure returns (uint256) {\\n        return\\n            (\\n                (WadRayMath.WAD - securityBuffer)\\n                    .wmul(WadRayMath.WAD - oracleTolerableLimit)\\n                    .wmul(WadRayMath.WAD - pairPriceDrop)\\n                    .wmul(borrowedAssetAmountOut)\\n            ).wdiv(feeBuffer.wmul(positionDebt));\\n    }\\n}\\n\",\"keccak256\":\"0x054406e5e1391057b1a19ba965ca7c68a4ef7c99b98e7c4b339935e8d471eedf\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PrimexPricingLibrary.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {BytesLib} from \\\"./utils/BytesLib.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {NATIVE_CURRENCY, USD, USD_MULTIPLIER} from \\\"../Constants.sol\\\";\\nimport {IDexAdapter} from \\\"../interfaces/IDexAdapter.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS, IPrimexDNSV2, IPrimexDNSStorage} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary PrimexPricingLibrary {\\n    using WadRayMath for uint256;\\n    using BytesLib for bytes;\\n\\n    struct Route {\\n        uint256 shares;\\n        SwapPath[] paths;\\n    }\\n\\n    struct SwapPath {\\n        string dexName;\\n        bytes encodedPath;\\n    }\\n\\n    struct MultiSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        Route[] routes;\\n        address dexAdapter;\\n        address receiver;\\n        uint256 deadline;\\n    }\\n\\n    struct MultiSwapVars {\\n        uint256 sumOfShares;\\n        uint256 balance;\\n        uint256 amountOnDex;\\n        uint256 remainder;\\n        Route route;\\n    }\\n\\n    struct AmountParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amount;\\n        Route[] routes;\\n        address dexAdapter;\\n        address primexDNS;\\n    }\\n\\n    struct LiquidationPriceCalculationParams {\\n        address bucket;\\n        address positionAsset;\\n        uint256 limitPrice;\\n        uint256 leverage;\\n    }\\n\\n    struct DepositData {\\n        uint256 protocolFee;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n    }\\n\\n    /**\\n     * @param depositData the deposit data through which the protocol fee can be calculated\\n     * if the position is opened through an order using deposit asset\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a native currency\\n     * @param isSwapFromWallet bool, the protocol fee is taken from the user wallet or from the Vault\\n     * @param trader trader address\\n     * @param priceOracle PriceOracle contract address\\n     * @param orderType Type of possible order in Primex protocol\\n     * @param traderBalanceVault TraderBalanceVault contract address\\n     * @param primexDNS PrimexDNS contract address\\n     */\\n    struct ProtocolFeeParams {\\n        DepositData depositData;\\n        address feeToken;\\n        bool isSwapFromWallet;\\n        address trader;\\n        address priceOracle;\\n        IPrimexDNSStorage.OrderType orderType;\\n        bool calculateFee;\\n        ITraderBalanceVault traderBalanceVault;\\n        IPrimexDNS primexDNS;\\n    }\\n\\n    /**\\n     * The struct for payProtocolFee function\\n     */\\n    struct ProtocolFeeVars {\\n        bool fromLocked;\\n        address treasury;\\n    }\\n\\n    /**\\n     * The struct for getLiquidationPrice and getLiquidationPriceByOrder functions\\n     */\\n    struct LiquidationPriceData {\\n        IBucket bucket;\\n        IPositionManager positionManager;\\n        IPriceOracle priceOracle;\\n        IERC20Metadata borrowedAsset;\\n    }\\n\\n    event Withdraw(\\n        address indexed withdrawer,\\n        address borrowAssetReceiver,\\n        address borrowedAsset,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Encodes the given parameters into a bytes array based on the specified DEX type.\\n     * @param path The token path for the swap.\\n     * @param dexRouter The address of the DEX router.\\n     * @param ancillaryData Additional data required for certain DEX types.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @param isAmountToBuy A flag indicating whether it is the path for the swap with fixed amountIn or amountOut.\\n     * Swap with fixed amountIn, if true.\\n     * @return The encoded bytes array.\\n     */\\n    function encodePath(\\n        address[] memory path,\\n        address dexRouter,\\n        bytes32 ancillaryData,\\n        address dexAdapter,\\n        bool isAmountToBuy\\n    ) external view returns (bytes memory) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            return abi.encode(path);\\n        }\\n        if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            if (isAmountToBuy)\\n                return bytes.concat(bytes20(path[1]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            if (isAmountToBuy) return bytes.concat(bytes20(path[1]), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.Curve) {\\n            address[] memory pools = new address[](1);\\n            pools[0] = address(uint160(uint256(ancillaryData)));\\n            return abi.encode(path, pools);\\n        }\\n        if (type_ == IDexAdapter.DexType.Balancer) {\\n            int256[] memory limits = new int256[](2);\\n            limits[0] = type(int256).max;\\n            bytes32[] memory pools = new bytes32[](1);\\n            pools[0] = ancillaryData;\\n            return abi.encode(path, pools, limits);\\n        }\\n        _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n    }\\n\\n    /**\\n     * @notice Wrapped getAmountsOut to the dex\\n     * @param _params parameters necessary to get amount out\\n     * @return the amount of `tokenB` by the amount of 'tokenA' on dexes\\n     */\\n    function getAmountOut(AmountParams memory _params) public returns (uint256) {\\n        _require(_params.tokenA != _params.tokenB, Errors.IDENTICAL_ASSETS.selector);\\n        _require(\\n            IERC165(address(_params.primexDNS)).supportsInterface(type(IPrimexDNS).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        uint256 sumOfShares;\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            sumOfShares += _params.routes[i].shares;\\n        }\\n        _require(sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n\\n        uint256 remainder = _params.amount;\\n        uint256 sum;\\n        uint256 amountOnDex;\\n        Route memory route;\\n        IDexAdapter.GetAmountsParams memory getAmountsParams;\\n        address[] memory path;\\n\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            route = _params.routes[i];\\n            amountOnDex = i == _params.routes.length - 1 ? remainder : (_params.amount * route.shares) / sumOfShares;\\n            remainder -= amountOnDex;\\n\\n            for (uint256 j; j < route.paths.length; j++) {\\n                getAmountsParams.encodedPath = route.paths[j].encodedPath;\\n                getAmountsParams.amount = amountOnDex;\\n                getAmountsParams.dexRouter = IPrimexDNS(_params.primexDNS).getDexAddress(route.paths[j].dexName);\\n                path = decodePath(getAmountsParams.encodedPath, getAmountsParams.dexRouter, _params.dexAdapter);\\n                _require(path.length >= 2, Errors.INCORRECT_PATH.selector);\\n                amountOnDex = IDexAdapter(_params.dexAdapter).getAmountsOut(getAmountsParams)[1];\\n            }\\n            sum += amountOnDex;\\n        }\\n\\n        return sum;\\n    }\\n\\n    /**\\n     * @notice Wrapped getAmountIn to the dex\\n     * @param _params parameters necessary to get amount in\\n     * @return the amount of `tokenA` by the amount of 'tokenB' on dexes\\n     */\\n    function getAmountIn(AmountParams memory _params) public returns (uint256) {\\n        _require(_params.tokenA != _params.tokenB, Errors.IDENTICAL_ASSETS.selector);\\n        _require(\\n            IERC165(address(_params.primexDNS)).supportsInterface(type(IPrimexDNS).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        uint256 sumOfShares;\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            sumOfShares += _params.routes[i].shares;\\n        }\\n        _require(sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n\\n        uint256 remainder = _params.amount;\\n        uint256 sum;\\n        uint256 amountOnDex;\\n        Route memory route;\\n        IDexAdapter.GetAmountsParams memory getAmountsParams;\\n        address[] memory path;\\n\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            route = _params.routes[i];\\n            amountOnDex = i == _params.routes.length - 1 ? remainder : (_params.amount * route.shares) / sumOfShares;\\n            remainder -= amountOnDex;\\n            for (uint256 j; j < route.paths.length; j++) {\\n                getAmountsParams.encodedPath = route.paths[route.paths.length - 1 - j].encodedPath;\\n                getAmountsParams.amount = amountOnDex;\\n                getAmountsParams.dexRouter = IPrimexDNS(_params.primexDNS).getDexAddress(\\n                    route.paths[route.paths.length - 1 - j].dexName\\n                );\\n                path = decodePath(getAmountsParams.encodedPath, getAmountsParams.dexRouter, _params.dexAdapter);\\n                _require(path.length >= 2, Errors.INCORRECT_PATH.selector);\\n                amountOnDex = IDexAdapter(_params.dexAdapter).getAmountsIn(getAmountsParams)[0];\\n            }\\n            sum += amountOnDex;\\n        }\\n\\n        return sum;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of deposit assets in borrowed assets.\\n     * @param _params The parameters for the calculation.\\n     * @param _isThirdAsset A flag indicating if deposit is in a third asset.\\n     * @param _priceOracle The address of the price oracle.\\n     * @return The amount of deposit assets is measured in borrowed assets.\\n     */\\n    function getDepositAmountInBorrowed(\\n        AmountParams memory _params,\\n        bool _isThirdAsset,\\n        address _priceOracle\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_params.primexDNS).supportsInterface(type(IPrimexDNS).interfaceId) &&\\n                IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_params.tokenA == _params.tokenB) {\\n            _require(_params.routes.length == 0, Errors.DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0.selector);\\n            return _params.amount;\\n        }\\n\\n        uint256 depositAmountInBorrowed = getAmountOut(_params);\\n        if (_isThirdAsset) {\\n            uint256 oracleDepositAmountOut = getOracleAmountsOut(\\n                _params.tokenA,\\n                _params.tokenB,\\n                _params.amount,\\n                _priceOracle\\n            );\\n            if (depositAmountInBorrowed > oracleDepositAmountOut) depositAmountInBorrowed = oracleDepositAmountOut;\\n        }\\n\\n        return depositAmountInBorrowed;\\n    }\\n\\n    /**\\n     * @notice Performs a multi-hop swap transaction using the specified parameters.\\n     * @dev This function executes a series of token swaps on different DEXs based on the provided routes.\\n     * @param _params The struct containing all the necessary parameters for the multi-hop swap.\\n     * @param _maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * for the price difference between DEX and the oracle.\\n     * @param _primexDNS The address of the Primex DNS contract.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @param _needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The final balance of the _params.tokenB in the receiver's address after the multi-hop swap.\\n     */\\n    function multiSwap(\\n        MultiSwapParams memory _params,\\n        uint256 _maximumOracleTolerableLimit,\\n        address _primexDNS,\\n        address _priceOracle,\\n        bool _needOracleTolerableLimitCheck\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_primexDNS).supportsInterface(type(IPrimexDNS).interfaceId) &&\\n                IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        MultiSwapVars memory vars;\\n        vars.balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver);\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            vars.sumOfShares += _params.routes[i].shares;\\n        }\\n        _require(vars.sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n\\n        vars.remainder = _params.amountTokenA;\\n        IDexAdapter.SwapParams memory swapParams;\\n        swapParams.deadline = _params.deadline;\\n\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            vars.route = _params.routes[i];\\n            vars.amountOnDex = i == _params.routes.length - 1\\n                ? vars.remainder\\n                : (_params.amountTokenA * vars.route.shares) / vars.sumOfShares;\\n            vars.remainder -= vars.amountOnDex;\\n            swapParams.to = _params.dexAdapter;\\n\\n            for (uint256 j; j < vars.route.paths.length; j++) {\\n                swapParams.encodedPath = vars.route.paths[j].encodedPath;\\n                swapParams.amountIn = vars.amountOnDex;\\n                swapParams.dexRouter = IPrimexDNS(_primexDNS).getDexAddress(vars.route.paths[j].dexName);\\n                if (j == vars.route.paths.length - 1) {\\n                    swapParams.to = _params.receiver;\\n                }\\n                vars.amountOnDex = IDexAdapter(_params.dexAdapter).swapExactTokensForTokens(swapParams)[1];\\n            }\\n        }\\n\\n        vars.balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver) - vars.balance;\\n        if (_needOracleTolerableLimitCheck) {\\n            _require(\\n                vars.balance >=\\n                    getOracleAmountsOut(_params.tokenA, _params.tokenB, _params.amountTokenA, _priceOracle).wmul(\\n                        WadRayMath.WAD - _maximumOracleTolerableLimit\\n                    ),\\n                Errors.DIFFERENT_PRICE_DEX_AND_ORACLE.selector\\n            );\\n        }\\n\\n        return vars.balance;\\n    }\\n\\n    /**\\n     * @notice Pays the protocol fee.\\n     * @dev This function transfers the protocol fee from the trader to the protocol treasury.\\n     * @param params The parameters for paying the protocol fee.\\n     * @return protocolFee The amount of the protocol fee in PMX or NATIVE_CURRENCY paid.\\n     */\\n    function payProtocolFee(ProtocolFeeParams memory params) public returns (uint256 protocolFee) {\\n        if (!params.isSwapFromWallet || params.feeToken != NATIVE_CURRENCY) {\\n            _require(msg.value == 0, Errors.DISABLED_TRANSFER_NATIVE_CURRENCY.selector);\\n        }\\n        ProtocolFeeVars memory vars;\\n        vars.treasury = params.primexDNS.treasury();\\n        vars.fromLocked = true;\\n\\n        protocolFee = params.depositData.protocolFee;\\n        if (params.calculateFee) {\\n            protocolFee = calculateProtocolFee(\\n                params.depositData,\\n                params.primexDNS,\\n                params.priceOracle,\\n                params.orderType,\\n                params.feeToken\\n            );\\n            if (protocolFee == 0) return 0;\\n            vars.fromLocked = false;\\n            if (params.isSwapFromWallet) {\\n                if (params.feeToken == NATIVE_CURRENCY) {\\n                    _require(msg.value >= protocolFee, Errors.INSUFFICIENT_DEPOSIT.selector);\\n                    TokenTransfersLibrary.doTransferOutETH(vars.treasury, protocolFee);\\n                    if (msg.value > protocolFee) {\\n                        uint256 rest = msg.value - protocolFee;\\n                        params.traderBalanceVault.topUpAvailableBalance{value: rest}(msg.sender, NATIVE_CURRENCY, rest);\\n                    }\\n                } else {\\n                    TokenTransfersLibrary.doTransferFromTo(params.feeToken, params.trader, vars.treasury, protocolFee);\\n                }\\n                return protocolFee;\\n            }\\n        }\\n\\n        params.traderBalanceVault.withdrawFrom(\\n            params.trader,\\n            vars.treasury,\\n            params.feeToken,\\n            protocolFee,\\n            vars.fromLocked\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate and return protocol fee\\n     * @param _depositData The deposit data through which the protocol fee can be calculated.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _orderType Type of possible order in Primex protocol\\n     * @param _feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a native currency\\n     * @return The amount of the protocol fee in '_feeToken' which needs to be paid according to the specified deposit parameters.\\n     */\\n    function calculateProtocolFee(\\n        DepositData memory _depositData,\\n        IPrimexDNS _primexDNS,\\n        address _priceOracle,\\n        IPrimexDNSStorage.OrderType _orderType,\\n        address _feeToken\\n    ) public view returns (uint256) {\\n        uint256 feeRate = _primexDNS.feeRates(_orderType, _feeToken);\\n        if (feeRate == 0) return 0;\\n        uint256 nativeFeeRate = _feeToken == NATIVE_CURRENCY\\n            ? feeRate\\n            : _primexDNS.feeRates(_orderType, NATIVE_CURRENCY);\\n\\n        _depositData.protocolFee = getOracleAmountsOut(\\n            _depositData.depositAsset,\\n            NATIVE_CURRENCY,\\n            _depositData.depositAmount.wmul(_depositData.leverage).wmul(nativeFeeRate),\\n            _priceOracle\\n        );\\n\\n        (uint256 minFee, uint256 maxFee) = IPrimexDNSV2(address(_primexDNS)).feeRestrictions(_orderType);\\n        if (minFee > _depositData.protocolFee) {\\n            _depositData.protocolFee = minFee;\\n        } else if (maxFee < _depositData.protocolFee) {\\n            _depositData.protocolFee = maxFee;\\n        }\\n\\n        if (_feeToken != NATIVE_CURRENCY) {\\n            _require(nativeFeeRate != 0, Errors.FEE_RATE_IN_NATIVE_IS_ZERO.selector);\\n            uint256 discountMultiplier = feeRate.wdiv(nativeFeeRate);\\n            _depositData.protocolFee = getOracleAmountsOut(\\n                NATIVE_CURRENCY,\\n                _feeToken,\\n                _depositData.protocolFee.wmul(discountMultiplier),\\n                _priceOracle\\n            );\\n        }\\n\\n        return _depositData.protocolFee;\\n    }\\n\\n    /**\\n     * @param _tokenA asset for sell\\n     * @param _tokenB asset to buy\\n     * @param _amountAssetA Amount tokenA to sell\\n     * @param _priceOracle PriceOracle contract address\\n     * @return returns the amount of `tokenB` by the `amountAssetA` by the price of the oracle\\n     */\\n    function getOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountAssetA,\\n        address _priceOracle\\n    ) public view returns (uint256) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountAssetA;\\n        }\\n        (uint256 exchangeRate, bool isForward) = IPriceOracle(_priceOracle).getExchangeRate(_tokenA, _tokenB);\\n        uint256 amountAssetB;\\n        uint256 multiplier1 = _getAssetMultiplier(_tokenA);\\n        uint256 multiplier2 = _getAssetMultiplier(_tokenB);\\n\\n        if (isForward) {\\n            amountAssetB = (_amountAssetA * multiplier1).wmul(exchangeRate) / multiplier2;\\n        } else {\\n            amountAssetB = (_amountAssetA * multiplier1).wdiv(exchangeRate) / multiplier2;\\n        }\\n        return amountAssetB;\\n    }\\n\\n    /**\\n     * @param _tokenA asset for sell\\n     * @param _tokenB asset to buy\\n     * @param _amountsAssetA An array of amounts of tokenA to sell\\n     * @param _priceOracle PriceOracle contract address\\n     * @return returns an array of amounts of `tokenB` by the `amountsAssetA` by the price of the oracle\\n     */\\n    function getBatchOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256[] memory _amountsAssetA,\\n        address _priceOracle\\n    ) public view returns (uint256[] memory) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountsAssetA;\\n        }\\n        uint256[] memory amountsAssetB = new uint256[](_amountsAssetA.length);\\n        (uint256 exchangeRate, bool isForward) = IPriceOracle(_priceOracle).getExchangeRate(_tokenA, _tokenB);\\n        uint256 multiplier1 = 10 ** (18 - IERC20Metadata(_tokenA).decimals());\\n        uint256 multiplier2 = 10 ** (18 - IERC20Metadata(_tokenB).decimals());\\n\\n        if (isForward) {\\n            for (uint256 i; i < _amountsAssetA.length; i++) {\\n                amountsAssetB[i] = (_amountsAssetA[i] * multiplier1).wmul(exchangeRate) / multiplier2;\\n            }\\n        } else {\\n            for (uint256 i; i < _amountsAssetA.length; i++) {\\n                amountsAssetB[i] = (_amountsAssetA[i] * multiplier1).wdiv(exchangeRate) / multiplier2;\\n            }\\n        }\\n        return amountsAssetB;\\n    }\\n\\n    /**\\n     * @notice Calculates the liquidation price for a position.\\n     * @dev liquidationPrice = (feeBuffer * debt) /\\n     * ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * positionAmount))\\n     * @param _bucket The address of the related bucket.\\n     * @param _positionAsset The address of the position asset.\\n     * @param _positionAmount The size of the opened position.\\n     * @param _positionDebt The debt amount in debtTokens associated with the position.\\n     * @return The calculated liquidation price in borrowed asset.\\n     */\\n    function getLiquidationPrice(\\n        address _bucket,\\n        address _positionAsset,\\n        uint256 _positionAmount,\\n        uint256 _positionDebt\\n    ) public view returns (uint256) {\\n        _require(_positionAsset != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        LiquidationPriceData memory data;\\n        data.bucket = IBucket(_bucket);\\n\\n        (, bool tokenAllowed) = data.bucket.allowedAssets(_positionAsset);\\n        _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n\\n        data.positionManager = data.bucket.positionManager();\\n        data.borrowedAsset = data.bucket.borrowedAsset();\\n        data.priceOracle = data.positionManager.priceOracle();\\n\\n        uint256 multiplier1 = 10 ** (18 - data.borrowedAsset.decimals());\\n        uint256 denominator = (WadRayMath.WAD - data.positionManager.securityBuffer())\\n            .wmul(\\n                WadRayMath.WAD -\\n                    data.positionManager.getOracleTolerableLimit(_positionAsset, address(data.borrowedAsset))\\n            )\\n            .wmul(WadRayMath.WAD - data.priceOracle.getPairPriceDrop(_positionAsset, address(data.borrowedAsset)))\\n            .wmul(_positionAmount) * 10 ** (18 - IERC20Metadata(_positionAsset).decimals());\\n        // numerator = data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1;\\n        return (data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1).wdiv(denominator) / multiplier1;\\n    }\\n\\n    /**\\n     * @notice Validates if a position meets the minimum size requirement.\\n     * @param _minPositionSize The minimum position size.\\n     * @param _minPositionAsset The asset associated with the minimum position size.\\n     * @param _amount The amount of the asset in the position.\\n     * @param _asset The asset associated with the position.\\n     * @param _priceOracle The address of the price oracle contract.\\n     */\\n    function validateMinPositionSize(\\n        uint256 _minPositionSize,\\n        address _minPositionAsset,\\n        uint256 _amount,\\n        address _asset,\\n        address _priceOracle\\n    ) public view {\\n        _require(\\n            isCorrespondsMinPositionSize(_minPositionSize, _minPositionAsset, _asset, _amount, _priceOracle),\\n            Errors.INSUFFICIENT_POSITION_SIZE.selector\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks if the given amount of _asset corresponds to the minimum position size _minPositionSize,\\n     * based on the _minPositionAsset and the provided _priceOracle.\\n     * Returns true if the amount corresponds to or exceeds the minimum position size, otherwise returns false.\\n     * @param _minPositionSize The minimum position size required.\\n     * @param _minPositionAsset The address of the asset used for determining the minimum position size.\\n     * @param _asset The address of the asset being checked.\\n     * @param _amount The amount of _asset being checked.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @return A boolean value indicating whether the amount corresponds to or exceeds the minimum position size.\\n     */\\n    function isCorrespondsMinPositionSize(\\n        uint256 _minPositionSize,\\n        address _minPositionAsset,\\n        address _asset,\\n        uint256 _amount,\\n        address _priceOracle\\n    ) public view returns (bool) {\\n        if (_minPositionSize == 0) return true;\\n\\n        uint256 amountInMinPositionAsset = getOracleAmountsOut(_asset, _minPositionAsset, _amount, _priceOracle);\\n        return amountInMinPositionAsset >= _minPositionSize;\\n    }\\n\\n    /**\\n     * @notice Decodes an encoded path and returns an array of addresses.\\n     * @param encodedPath The encoded path to be decoded.\\n     * @param dexRouter The address of the DEX router.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @return path An array of addresses representing the decoded path.\\n     */\\n    function decodePath(\\n        bytes memory encodedPath,\\n        address dexRouter,\\n        address dexAdapter\\n    ) public view returns (address[] memory path) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            path = abi.decode(encodedPath, (address[]));\\n        } else if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 23; // address size(20) + fee size(3)\\n            uint256 pathLength = encodedPath.length / offsetSize + 1;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else if (type_ == IDexAdapter.DexType.Curve) {\\n            (path, ) = abi.decode(encodedPath, (address[], address[]));\\n        } else if (type_ == IDexAdapter.DexType.Balancer) {\\n            (path, , ) = abi.decode(encodedPath, (address[], bytes32[], int256[]));\\n        } else if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 20; // address size(20)\\n            uint256 pathLength = encodedPath.length / offsetSize;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else {\\n            _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the price from two price feeds.\\n     * @dev This function returns the price ratio between the base price and the quote price.\\n     * @param basePriceFeed The address of the base price feed (AggregatorV3Interface).\\n     * @param quotePriceFeed The address of the quote price feed (AggregatorV3Interface).\\n     * @param roundBaseFeed The round ID of the base price feed.\\n     * @param roundQuoteFeed The round ID of the quote price feed.\\n     * @param checkedTimestamp The timestamp used to filter relevant prices. Set to 0 to consider all prices.\\n     * @return The price ratio in WAD format between the base price and the quote price, and the timestamp of the latest price.\\n     */\\n    function getPriceFromFeeds(\\n        AggregatorV3Interface basePriceFeed,\\n        AggregatorV3Interface quotePriceFeed,\\n        uint80 roundBaseFeed,\\n        uint80 roundQuoteFeed,\\n        uint256 checkedTimestamp\\n    ) internal view returns (uint256, uint256) {\\n        (, int256 basePrice, , uint256 basePriceUpdatedAt, ) = basePriceFeed.getRoundData(roundBaseFeed);\\n        (, , , uint256 basePriceUpdatedAtNext, ) = basePriceFeed.getRoundData(roundBaseFeed + 1);\\n        // update to current timestamp if roundBaseFeed is last round\\n        if (basePriceUpdatedAtNext == 0) basePriceUpdatedAtNext = block.timestamp;\\n\\n        (, int256 quotePrice, , uint256 quotePriceUpdatedAt, ) = quotePriceFeed.getRoundData(roundQuoteFeed);\\n        (, , , uint256 quotePriceUpdatedAtNext, ) = quotePriceFeed.getRoundData(roundQuoteFeed + 1);\\n        // update to current timestamp if roundQuoteFeed is last round\\n        if (quotePriceUpdatedAtNext == 0) quotePriceUpdatedAtNext = block.timestamp;\\n\\n        _require(basePriceUpdatedAt > 0 && quotePriceUpdatedAt > 0, Errors.DATA_FOR_ROUND_DOES_NOT_EXIST.selector);\\n\\n        // we work only with prices that were relevant after position creation\\n        _require(\\n            checkedTimestamp == 0 ||\\n                (basePriceUpdatedAtNext > checkedTimestamp && quotePriceUpdatedAtNext > checkedTimestamp),\\n            Errors.HIGH_PRICE_TIMESTAMP_IS_INCORRECT.selector\\n        );\\n        // there should be an intersection between their duration\\n        _require(\\n            quotePriceUpdatedAt < basePriceUpdatedAtNext && basePriceUpdatedAt < quotePriceUpdatedAtNext,\\n            Errors.NO_PRICE_FEED_INTERSECTION.selector\\n        );\\n        //the return value will always be 18 decimals if the basePrice and quotePrice have the same decimals\\n        return (\\n            uint256(basePrice).wdiv(uint256(quotePrice)),\\n            quotePriceUpdatedAt < basePriceUpdatedAt ? quotePriceUpdatedAt : basePriceUpdatedAt\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the asset multiplier for a given asset.\\n     * @dev If the asset is the native currency, the function returns 1.\\n     * If the asset is USD, the function returns the value stored in the constant USD_MULTIPLIER.\\n     * For any other asset, the function calculates the multiplier based on the number of decimals of the token.\\n     * @param _asset The address of the asset.\\n     * @return The asset multiplier. It is a number with 10 raised to a power of decimals of a given asset.\\n     */\\n    function _getAssetMultiplier(address _asset) internal view returns (uint256) {\\n        if (_asset == NATIVE_CURRENCY) return 1;\\n        if (_asset == USD) return USD_MULTIPLIER;\\n\\n        return 10 ** (18 - IERC20Metadata(_asset).decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x809e37adba4a9add4c4586267bcee279140cf4a2d419ac81f33b5b929429b441\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TokenTransfersLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of token transfer logic that allows working with non-standart ERC-20 tokens, added method doTransferFromTo,\\n// modified doTransferIn\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenTransfersLibrary {\\n    function doTransferIn(address token, address from, uint256 amount) public returns (uint256) {\\n        return doTransferFromTo(token, from, address(this), amount);\\n    }\\n\\n    function doTransferFromTo(address token, address from, address to, uint256 amount) public returns (uint256) {\\n        uint256 balanceBefore = IERC20(token).balanceOf(to);\\n        // The returned value is checked in the assembly code below.\\n        // Arbitrary `from` should be checked at a higher level. The library function cannot be called by the user.\\n        // slither-disable-next-line unchecked-transfer arbitrary-send-erc20\\n        EIP20NonStandardInterface(token).transferFrom(from, to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_IN_FAILED.selector);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = IERC20(token).balanceOf(to);\\n        _require(balanceAfter >= balanceBefore, Errors.TOKEN_TRANSFER_IN_OVERFLOW.selector);\\n\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    function doTransferOut(address token, address to, uint256 amount) public {\\n        // The returned value is checked in the assembly code below.\\n        // slither-disable-next-line unchecked-transfer\\n        EIP20NonStandardInterface(token).transfer(to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_OUT_FAILED.selector);\\n    }\\n\\n    function doTransferOutETH(address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        _require(success, Errors.NATIVE_TOKEN_TRANSFER_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x055c6c72633f72ec523e7b74a58549f12e8c92320a6a06ae74503f637cb2ab97\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/utils/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// A modified version of BytesLib\\n// Origin: https://github.com/1inch/universal-router/blob/b972662f8d3f0ba55ef99411720f613f77c3fab5/contracts/modules/uniswap/v3/BytesLib.sol\\n// Unused methods and constants were removed\\npragma solidity 0.8.18;\\n\\nlibrary BytesLib {\\n    error ToAddressOverflow();\\n    error ToAddressOutOfBounds();\\n\\n    /// @notice Returns the address starting at byte `_start`\\n    /// @dev _bytesLength must equal _bytes.length for this to function correctly\\n    /// @param _bytes The input bytes string to slice\\n    /// @param _start The starting index of the address\\n    /// @param _bytesLength The length of _bytes\\n    /// @return tempAddress The address starting at _start\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _bytesLength\\n    ) internal pure returns (address tempAddress) {\\n        unchecked {\\n            if (_start + 20 < _start) revert ToAddressOverflow();\\n            if (_bytesLength < _start + 20) revert ToAddressOutOfBounds();\\n        }\\n\\n        assembly {\\n            tempAddress := mload(add(add(_bytes, 0x14), _start))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x15247d5d083082fd3ada31426c5c355a35606682f4587132c847c63c74d23315\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.18;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0xb0991b2c77df3496e4595618675a4279bd187aa4968bfbcf3be47f80c49280b3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b6040516124c890816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a7146119bd575080630460f0f314611994578063129d82fb146119755780632630c12f1461194c5780632c4c4bc71461189a578063332a72a1146117b45780633963cecd146117955780633f4ba83a14611686578063466c552e146116675780634a8a4f01146115a657806351ed1b201461150c578063522b4a711461143e57806359fd074b146113d95780635c975abb146113b557806361d027b31461138c57806365bf568a146112da578063748397301461121e5780637b103999146111f55780638456cb59146111135780639ba6049f146110d7578063a16538aa14610f09578063a3c37fc714610eea578063a5552950146108ef578063ad7a672f146108c7578063bb9d3dbb14610887578063c01031cd14610868578063c28ee59414610849578063c349026314610577578063c38dca08146104ab578063c932eff61461048c578063d604c08b14610469578063e36d6ebf1461032a578063e6e13338146102f1578063ef1f3c33146101ea5763fcd3f03e146101a457600080fd5b346101e65760203660031901126101e657356001600160a01b038116908190036101e657918192815260d5602052206001815491015482519182526020820152f35b8280fd5b50346101e65760603660031901126101e65780359160038310156102ed57602435604435926044602060018060a01b0360ca5416855192838092632474521560e21b8252600080516020612473833981519152878301523360248301525afa9081156102e35787916102b5575b50156102a757509183916060938260016102917f914216b6e367e07ec47e2356460e0e9ec4997e7919489ed5e8da444b2128a8fa98611a49565b838155015581519384526020840152820152a180f35b825163036be76f60e61b8152fd5b6102d6915060203d81116102dc575b6102ce8183611aa5565b810190611ac7565b38610257565b503d6102c4565b84513d89823e3d90fd5b8380fd5b50346101e65760203660031901126101e6573560058110156101e6576020928161031b8493611a29565b815260da845220549051908152f35b5090346101e65760c03660031901126101e65781359160058310156102ed5760a03660231901126102ed5760ca548251632474521560e21b81526000805160206124738339815191528382015233602482015290602090829060449082906001600160a01b03165afa90811561045f578591610441575b5015610433577fbfc6fa01f8337395cfd01c20354d665a007fc28c8cd1ee7d33ef9924dc9cc4249160a0916103d585611a29565b8460005260d8602052816000206024359283825560443590816001840155606435918260028501556084359384600382015560a435958691015561041889611a29565b8151958652602086015284015260608301526080820152a280f35b905163036be76f60e61b8152fd5b610459915060203d81116102dc576102ce8183611aa5565b386103a1565b83513d87823e3d90fd5b50503461048857816003193601126104885760209060dc549051908152f35b5080fd5b50503461048857816003193601126104885760209060cf549051908152f35b50346101e657816003193601126101e657803590602435926044602060018060a01b0360ca5416835192838092632474521560e21b8252600080516020612473833981519152888301523360248301525afa90811561056d57869161054f575b50156105425750508060cf558160d0557fa4789945324ec10a380a207a60e56ee9a5b8d7b1335a4f98f7e495b07780139c8380a380f35b5163036be76f60e61b8152fd5b610567915060203d81116102dc576102ce8183611aa5565b3861050b565b82513d88823e3d90fd5b5090346101e657806003193601126101e6578135906024356002600154146108065760026001556105a6612214565b60db548251630723eb0360e51b815233868201526020926001600160a01b039290919084908290602490829087165afa9081156107bf5788916107e9575b506107d957908691859084819733865260d58252610603888720611c26565b9081518091116107d1575b5001518091116107c9575b5080610702575b508461062f575b506001805580f35b33825260d58352600184832001610647868254612207565b90556106558560d754612207565b60d75560cc541694853b1561048857848451916334ec91f960e21b83528201528181606481837399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e9a8b60248401523360448401525af180156106f8576106e0575b50507f3a7691a2eabd7b5e0660276ff6ab206719a7f37c923c70c4fd59567243e2cffd91519283523392a3388080808481610627565b6106e990611a7b565b6106f45784386106aa565b8480fd5b84513d84823e3d90fd5b90915033875260d5835283872061071a828254612207565b90556107288160d654612207565b60d6558160cc5416878360cb541691803b15610488576064898386938a5196879586946334ec91f960e21b865285015260248401523360448401525af180156107bf576107aa575b509086918160cb54169085519081527f3a7691a2eabd7b5e0660276ff6ab206719a7f37c923c70c4fd59567243e2cffd853392a338610620565b6107b79097919297611a7b565b959038610770565b85513d8a823e3d90fd5b955038610619565b93503861060e565b83516333df015b60e01b81528690fd5b6108009150843d86116102dc576102ce8183611aa5565b386105e4565b815162461bcd60e51b8152602081860152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b50503461048857816003193601126104885760209060d2549051908152f35b50503461048857816003193601126104885760209060d3549051908152f35b5091903461048857816003193601126104885760ff60d4541690519160028210156108b457602083838152f35b634e487b7160e01b815260218452602490fd5b8284346108ec57806003193601126108ec575060d65460d75482519182526020820152f35b80fd5b50346101e6576020906003199282843601126106f45781359367ffffffffffffffff8511610ee6576101e0858401918636030112610ee65785549460ff8660081c161591828093610ed9575b8015610ec2575b15610e685760019460ff199784878a8316178b55610e57575b506024838101906001600160a01b03908b908261097785611a62565b1689518c8184816301ffc9a760e01b95868252637965db0b60e01b8c8301525afa938415610d7657908d929194610e38575b5083610dde575b83610d81575b83610d19575b83610cb2575b50505015610ca25780610a10816109db60448901611a62565b16936bffffffffffffffffffffffff60a01b948560cb54161760cb5582610a0188611a62565b168560c954161760c955611a62565b168260ca54161760ca5580610a2760648701611a62565b168260cc54161760cc55610a3d60848601611a62565b169060db54161760db5560a483013560cd5560c483013560ce5560e483013560cf5561010483013560d05561012483013560d15561014483013560d25561016483013560d3556101848301359060029182811015610c9e57908793929160ff8b60d4541691161760d4558a91846101a48701905b610bae575b505050506101c4899301915b610b49575b505050610b0b86549560ff8760081c1690610ae182611ba6565b610aea82611ba6565b858055610af682611ba6565b610aff82611ba6565b60655416606555611ba6565b610b13578480f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989361ff001916855551908152a1388080808480f35b610b538282611b60565b9050831015610ba957610b7083610b6a8484611b60565b90611b96565b356005811015610ba55783610b9a610b9f928a610b928b98610b6a8989611b60565b013590612258565b611adf565b92610ac2565b8980fd5b610ac7565b9091929394610bbd8287611b04565b9050851015610c9757508b610bdc85610bd68489611b04565b90611b3a565b35946005861015610488578a957fbfc6fa01f8337395cfd01c20354d665a007fc28c8cd1ee7d33ef9924dc9cc424610c8c938c8f899082610c22888f8c610bd691611b04565b94610c2c88611a29565b87815260d88352208c8b8387013595868455808801358093850155606092838901358093860155608095868a01359586600382015560a0809b01359889910155610c758c611a29565b8251988952880152860152840152820152a2611adf565b929190849594610ab1565b9493610ab6565b8a80fd5b865163044aa57560e41b81528390fd5b9091925083610cc360848a01611a62565b16928a51809481938252633df6cef760e01b898301525afa908115610d0f578c91610cf2575b50388a816109c2565b610d0991508a3d8c116102dc576102ce8183611aa5565b38610ce9565b88513d8e823e3d90fd5b9250818e9185610d2b60448c01611a62565b168c51928380928882526336372b0760e01b8c8301525afa918215610d7657908d92610d59575b50926109bc565b610d709150823d84116102dc576102ce8183611aa5565b38610d52565b8b51903d90823e3d90fd5b9250818e9185610d9360648c01611a62565b168c51928380928882526329abf30760e11b8c8301525afa918215610d7657908d92610dc1575b50926109b6565b610dd89150823d84116102dc576102ce8183611aa5565b38610dba565b9250818e9185610ded8a611a62565b168c51928380928882526341636c7560e11b8c8301525afa918215610d7657908d92610e1b575b50926109b0565b610e329150823d84116102dc576102ce8183611aa5565b38610e14565b610e50919450823d84116102dc576102ce8183611aa5565b92386109a9565b61ffff19166101011789553861095b565b835162461bcd60e51b8152808601879052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156109425750600160ff881614610942565b50600160ff88161061093b565b8580fd5b50503461048857816003193601126104885760209060ce549051908152f35b509190346104885760031990602036830181136102ed5784359267ffffffffffffffff84116106f4576101009084360301126102ed5760ca548251632474521560e21b8082527f5580ea9b7f9becaa48a78f506a2019ea24794b7a717ee6a4b9f62e36b94c25a68883015233602483015290916001600160a01b0316908383604481855afa9283156110ae5787936110b8575b508215611042575b8215610fd2575b5050905015610fc35750610fc0919201611c55565b80f35b5163036be76f60e61b81528390fd5b83919250604485518094819382527f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c8b8301523360248301525afa91821561045f578592611025575b5050803880610fab565b61103b9250803d106102dc576102ce8183611aa5565b388061101b565b915083518281527f8f8b3dc194d940c9ce77bea0cf23855523a0d7b641973e714d9dc5f3528a573a888201523360248201528381604481855afa9081156110ae578791611091575b5091610fa4565b6110a89150843d86116102dc576102ce8183611aa5565b3861108a565b85513d89823e3d90fd5b6110d0919350843d86116102dc576102ce8183611aa5565b9138610f9c565b5082903461048857602036600319011261048857359060038210156108ec575061110090611a49565b6001815491015482519182526020820152f35b50346101e657826003193601126101e65760ca548251632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb8382015233602482015290602090829060449082906001600160a01b03165afa9081156111e85784916111ca575b5015610433575060207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916111b5612214565b600160ff19606554161760655551338152a180f35b6111e2915060203d81116102dc576102ce8183611aa5565b38611182565b50505051903d90823e3d90fd5b50503461048857816003193601126104885760ca5490516001600160a01b039091168152602090f35b50346101e65760203660031901126101e65760ca548251632474521560e21b81526000805160206124738339815191528184015233602482015282359391602090829060449082906001600160a01b03165afa9081156112d05785916112b2575b50156105425750508060d1557fac3e0e532f107b556a4483ee89fa8a6d20788e9ec96a2b0131246a2e790f0f098280a280f35b6112ca915060203d81116102dc576102ce8183611aa5565b3861127f565b82513d87823e3d90fd5b50346101e65760203660031901126101e65760ca548251632474521560e21b81526000805160206124738339815191528184015233602482015282359391602090829060449082906001600160a01b03165afa9081156112d057859161136e575b50156105425750508060d3557fc9b6fec85cf82ed032526c3a1bbc72a81c4cef31fa9ab33b10794ba8403513f48280a280f35b611386915060203d81116102dc576102ce8183611aa5565b3861133b565b50503461048857816003193601126104885760cc5490516001600160a01b039091168152602090f35b50503461048857816003193601126104885760209060ff6065541690519015158152f35b5090346101e65760203660031901126101e657813560058110156102ed5760a093816114058493611a29565b815260d8602052208054926001820154926002830154916003840154930154938151958652602086015284015260608301526080820152f35b50346101e65760203660031901126101e65760ca548251632474521560e21b81526000805160206124738339815191528184015233602482015282359391602090829060449082906001600160a01b03165afa9081156112d05785916114ee575b501561054257678ac7230489e8000083116114e15750508060cd557f0866f0eddab536ffa2ae6d0c094f37e4876779d4079734c513b8ab63520f40468280a280f35b51632e72686160e21b8152fd5b611506915060203d81116102dc576102ce8183611aa5565b3861149f565b50346101e657816003193601126101e65780359160058310156102ed5760ca548151632474521560e21b81526000805160206124738339815191528482015233602482015290602090829060449082906001600160a01b03165afa9081156112d0578591611588575b50156105425783610fc060243585612258565b6115a0915060203d81116102dc576102ce8183611aa5565b38611575565b50346101e65760203660031901126101e65760ca548251632474521560e21b81526000805160206124738339815191528184015233602482015282359391602090829060449082906001600160a01b03165afa9081156112d0578591611649575b501561054257678ac7230489e8000083116114e15750508060ce557fac4e2f47a168b9426760c27ccec778fd54ea706bd269dd48617d7cf68a014a998280a280f35b611661915060203d81116102dc576102ce8183611aa5565b38611607565b50503461048857816003193601126104885760209060cd549051908152f35b50346101e657826003193601126101e65760ca548251632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d88382015233602482015290602090829060449082906001600160a01b03165afa9081156111e8578491611777575b5015610433576065549060ff82161561173d575060ff1916606555513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b606490602084519162461bcd60e51b8352820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152fd5b61178f915060203d81116102dc576102ce8183611aa5565b386116f5565b50503461048857816003193601126104885760209060d0549051908152f35b5090346101e65760203660031901126101e65760ca548151632474521560e21b81526000805160206124738339815191528185015233602482015283359391602090829060449082906001600160a01b03165afa90811561045f57859161187c575b5015610433578383138061186a575b1561185c5750816020917f40066df7a841da7e7ca0b9fb5454b80f1a2d22bca3e3d99d8f395348bdb0799f9360dc5551908152a180f35b90516326711fb360e11b8152fd5b50671bc16d674ec80000831115611825565b611894915060203d81116102dc576102ce8183611aa5565b38611816565b50346101e65760203660031901126101e65760ca548251632474521560e21b81526000805160206124738339815191528184015233602482015282359391602090829060449082906001600160a01b03165afa9081156112d057859161192e575b50156105425750508060d2557f123d6dec98f165501c5a4efa12a37cee89b488c3dbaad98fb2c365bdedf1a8a98280a280f35b611946915060203d81116102dc576102ce8183611aa5565b386118fb565b50503461048857816003193601126104885760c95490516001600160a01b039091168152602090f35b50503461048857816003193601126104885760209060d1549051908152f35b50503461048857816003193601126104885760cb5490516001600160a01b039091168152602090f35b925050346101e65760203660031901126101e6573563ffffffff60e01b81168091036101e6576020925063332a72a160e01b8114908115611a18575b8115611a07575b5015158152f35b6301ffc9a760e01b14905038611a00565b6307cba1f360e41b811491506119f9565b60051115611a3357565b634e487b7160e01b600052602160045260246000fd5b6003811015611a335760005260d9602052604060002090565b356001600160a01b0381168103611a765790565b600080fd5b67ffffffffffffffff8111611a8f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611a8f57604052565b90816020910312611a7657518015158103611a765790565b6000198114611aee5760010190565b634e487b7160e01b600052601160045260246000fd5b903590601e1981360301821215611a76570180359067ffffffffffffffff8211611a76576020019160c0820236038313611a7657565b9190811015611b4a5760c0020190565b634e487b7160e01b600052603260045260246000fd5b903590601e1981360301821215611a76570180359067ffffffffffffffff8211611a7657602001918160061b36038313611a7657565b9190811015611b4a5760061b0190565b15611bad57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b91908201809211611aee57565b81810292918115918404141715611aee57565b906040516040810181811067ffffffffffffffff821117611a8f57604052602060018294805484520154910152565b611c6160208201611a62565b60c9546040805163a3f092a760e01b81526001600160a01b0393841660048201527399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e60248201529084013560448201529116606482015260208160848173ab03C0c0Ba39a886eD51757272E91cd7395421185af48015611fca576000906121d3575b611ce5915060cf54906123df565b9060d0549160008382019384129112908015821691151617611aee578160008113156121ce5760dc548091126121c6575b5060d15460c0820135601e1983360301811215611a765782019081359167ffffffffffffffff8311611a76576020018260051b36038113611a7657611d6992611d639160a08601356122b7565b90611c06565b91600560608301351015611a7657611d8960808301356060840135612352565b8084116121be575b5060c95460405163455259cb60e01b81526001600160a01b0390911693903a90602081600481895afa908115611fca5760009161218c575b5060008113156121835760d354670de0b6b3a7640000908101809111611aee57611df2916123df565b80821161217b575b5060009160ff60d45416600281101561216757600114611fd6575b91611e27611e2c92611e319594611c13565b611c06565b6123df565b611e3d60ce54826123df565b9260018060a01b0360cb5416916040519263a3f092a760e01b84527399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e600485015260248401526044830152606482015260208160848173ab03C0c0Ba39a886eD51757272E91cd7395421185af4908115611fca57600091611f78575b507fb5b60f38246a38a2fd794a7da06cc6a0c32cf4d0b94c9683fde017ee3ea5dbf691611edf60409260cd54906123df565b906001600160a01b03611ef182611a62565b1660005260d560205282600020611f09838254611c06565b90556001600160a01b03611f1c82611a62565b1660005260d560205260018360002001611f37868254611c06565b9055611f458260d654611c06565b60d655611f548560d754611c06565b60d7556001600160a01b0390611f6990611a62565b169382519182526020820152a2565b906020823d602011611fc2575b81611f9260209383611aa5565b810103126108ec5750517fb5b60f38246a38a2fd794a7da06cc6a0c32cf4d0b94c9683fde017ee3ea5dbf6611ead565b3d9150611f85565b6040513d6000823e3d90fd5b9180600160808701351115612132575060026080860135608087013560061b04604014608087013515171561211e5761203a61202161201c608089013560061b93611a49565b611c26565b9160e08801358351808210600014612116575090611c06565b60405163f5d6ded760e01b815291602083600481606c5afa92831561210b5784936120d7575b508260041b92808404601014901517156120c3576020015161208191611c06565b91608c83018093116120af5750611e2c926120a4611e31969593611e2793611c13565b949550925050611e15565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b84526011600452602484fd5b9092506020813d602011612103575b816120f360209383611aa5565b810103126102ed57519138612060565b3d91506120e6565b6040513d86823e3d90fd5b905090611c06565b634e487b7160e01b82526011600452602482fd5b61213f6060870135611a29565b60608601356121585761203a61202161201c6001611a49565b61203a61202161201c84611a49565b634e487b7160e01b84526021600452602484fd5b905038611dfa565b5060d254611df2565b906020823d6020116121b6575b816121a660209383611aa5565b810103126108ec57505138611dc9565b3d9150612199565b925038611d91565b915038611d16565b505050565b6020823d6020116121ff575b816121ec60209383611aa5565b810103126108ec5750611ce59051611cd7565b3d91506121df565b91908203918211611aee57565b60ff6065541661222057565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b9060207f58ab8557e0e847f289f2134b72a469c160191d9b98144339d9bf394987082bb09161228684611a29565b8360005260da82528060406000205561229e84611a29565b604051908152a2565b9190811015611b4a5760051b0190565b919081156122e857600091825b8181106122ed575050506000918181116000146122e8576122e59250612207565b90565b505090565b6122f88183856122a7565b3561230c575b61230790611adf565b6122c4565b9261234a61230791611d636123228786886122a7565b3561232c88611a29565b61233588611a29565b8760005260da60205260406000205490611c13565b9390506122fe565b61235b81611a29565b80156123c05761236a81611a29565b60005260d8602052604060002060048101548281159182156123b6575b50506123a357611d636122e59260036001840154930154611c13565b611d636122e59260028354930154611c13565b1190508238612387565b90506123cb81611a29565b60005260d860205260026040600020015490565b90600091811591821561243f575b50501561242d576706f05b59d3b20000810190818111611aee57811061241b57670de0b6b3a7640000900490565b604051630a77254f60e01b8152600490fd5b604051631550e8b760e01b8152600490fd5b9091925061244d8183611c13565b9261245c5782041438806123ed565b634e487b7160e01b600052601260045260246000fdfec0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b63a2646970667358221220ab8419020d9fb3361c2e0962f708dfc0ed8a4cd13232564699d0257354106ad964736f6c63430008120033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a7146119bd575080630460f0f314611994578063129d82fb146119755780632630c12f1461194c5780632c4c4bc71461189a578063332a72a1146117b45780633963cecd146117955780633f4ba83a14611686578063466c552e146116675780634a8a4f01146115a657806351ed1b201461150c578063522b4a711461143e57806359fd074b146113d95780635c975abb146113b557806361d027b31461138c57806365bf568a146112da578063748397301461121e5780637b103999146111f55780638456cb59146111135780639ba6049f146110d7578063a16538aa14610f09578063a3c37fc714610eea578063a5552950146108ef578063ad7a672f146108c7578063bb9d3dbb14610887578063c01031cd14610868578063c28ee59414610849578063c349026314610577578063c38dca08146104ab578063c932eff61461048c578063d604c08b14610469578063e36d6ebf1461032a578063e6e13338146102f1578063ef1f3c33146101ea5763fcd3f03e146101a457600080fd5b346101e65760203660031901126101e657356001600160a01b038116908190036101e657918192815260d5602052206001815491015482519182526020820152f35b8280fd5b50346101e65760603660031901126101e65780359160038310156102ed57602435604435926044602060018060a01b0360ca5416855192838092632474521560e21b8252600080516020612473833981519152878301523360248301525afa9081156102e35787916102b5575b50156102a757509183916060938260016102917f914216b6e367e07ec47e2356460e0e9ec4997e7919489ed5e8da444b2128a8fa98611a49565b838155015581519384526020840152820152a180f35b825163036be76f60e61b8152fd5b6102d6915060203d81116102dc575b6102ce8183611aa5565b810190611ac7565b38610257565b503d6102c4565b84513d89823e3d90fd5b8380fd5b50346101e65760203660031901126101e6573560058110156101e6576020928161031b8493611a29565b815260da845220549051908152f35b5090346101e65760c03660031901126101e65781359160058310156102ed5760a03660231901126102ed5760ca548251632474521560e21b81526000805160206124738339815191528382015233602482015290602090829060449082906001600160a01b03165afa90811561045f578591610441575b5015610433577fbfc6fa01f8337395cfd01c20354d665a007fc28c8cd1ee7d33ef9924dc9cc4249160a0916103d585611a29565b8460005260d8602052816000206024359283825560443590816001840155606435918260028501556084359384600382015560a435958691015561041889611a29565b8151958652602086015284015260608301526080820152a280f35b905163036be76f60e61b8152fd5b610459915060203d81116102dc576102ce8183611aa5565b386103a1565b83513d87823e3d90fd5b50503461048857816003193601126104885760209060dc549051908152f35b5080fd5b50503461048857816003193601126104885760209060cf549051908152f35b50346101e657816003193601126101e657803590602435926044602060018060a01b0360ca5416835192838092632474521560e21b8252600080516020612473833981519152888301523360248301525afa90811561056d57869161054f575b50156105425750508060cf558160d0557fa4789945324ec10a380a207a60e56ee9a5b8d7b1335a4f98f7e495b07780139c8380a380f35b5163036be76f60e61b8152fd5b610567915060203d81116102dc576102ce8183611aa5565b3861050b565b82513d88823e3d90fd5b5090346101e657806003193601126101e6578135906024356002600154146108065760026001556105a6612214565b60db548251630723eb0360e51b815233868201526020926001600160a01b039290919084908290602490829087165afa9081156107bf5788916107e9575b506107d957908691859084819733865260d58252610603888720611c26565b9081518091116107d1575b5001518091116107c9575b5080610702575b508461062f575b506001805580f35b33825260d58352600184832001610647868254612207565b90556106558560d754612207565b60d75560cc541694853b1561048857848451916334ec91f960e21b83528201528181606481837399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e9a8b60248401523360448401525af180156106f8576106e0575b50507f3a7691a2eabd7b5e0660276ff6ab206719a7f37c923c70c4fd59567243e2cffd91519283523392a3388080808481610627565b6106e990611a7b565b6106f45784386106aa565b8480fd5b84513d84823e3d90fd5b90915033875260d5835283872061071a828254612207565b90556107288160d654612207565b60d6558160cc5416878360cb541691803b15610488576064898386938a5196879586946334ec91f960e21b865285015260248401523360448401525af180156107bf576107aa575b509086918160cb54169085519081527f3a7691a2eabd7b5e0660276ff6ab206719a7f37c923c70c4fd59567243e2cffd853392a338610620565b6107b79097919297611a7b565b959038610770565b85513d8a823e3d90fd5b955038610619565b93503861060e565b83516333df015b60e01b81528690fd5b6108009150843d86116102dc576102ce8183611aa5565b386105e4565b815162461bcd60e51b8152602081860152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b50503461048857816003193601126104885760209060d2549051908152f35b50503461048857816003193601126104885760209060d3549051908152f35b5091903461048857816003193601126104885760ff60d4541690519160028210156108b457602083838152f35b634e487b7160e01b815260218452602490fd5b8284346108ec57806003193601126108ec575060d65460d75482519182526020820152f35b80fd5b50346101e6576020906003199282843601126106f45781359367ffffffffffffffff8511610ee6576101e0858401918636030112610ee65785549460ff8660081c161591828093610ed9575b8015610ec2575b15610e685760019460ff199784878a8316178b55610e57575b506024838101906001600160a01b03908b908261097785611a62565b1689518c8184816301ffc9a760e01b95868252637965db0b60e01b8c8301525afa938415610d7657908d929194610e38575b5083610dde575b83610d81575b83610d19575b83610cb2575b50505015610ca25780610a10816109db60448901611a62565b16936bffffffffffffffffffffffff60a01b948560cb54161760cb5582610a0188611a62565b168560c954161760c955611a62565b168260ca54161760ca5580610a2760648701611a62565b168260cc54161760cc55610a3d60848601611a62565b169060db54161760db5560a483013560cd5560c483013560ce5560e483013560cf5561010483013560d05561012483013560d15561014483013560d25561016483013560d3556101848301359060029182811015610c9e57908793929160ff8b60d4541691161760d4558a91846101a48701905b610bae575b505050506101c4899301915b610b49575b505050610b0b86549560ff8760081c1690610ae182611ba6565b610aea82611ba6565b858055610af682611ba6565b610aff82611ba6565b60655416606555611ba6565b610b13578480f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989361ff001916855551908152a1388080808480f35b610b538282611b60565b9050831015610ba957610b7083610b6a8484611b60565b90611b96565b356005811015610ba55783610b9a610b9f928a610b928b98610b6a8989611b60565b013590612258565b611adf565b92610ac2565b8980fd5b610ac7565b9091929394610bbd8287611b04565b9050851015610c9757508b610bdc85610bd68489611b04565b90611b3a565b35946005861015610488578a957fbfc6fa01f8337395cfd01c20354d665a007fc28c8cd1ee7d33ef9924dc9cc424610c8c938c8f899082610c22888f8c610bd691611b04565b94610c2c88611a29565b87815260d88352208c8b8387013595868455808801358093850155606092838901358093860155608095868a01359586600382015560a0809b01359889910155610c758c611a29565b8251988952880152860152840152820152a2611adf565b929190849594610ab1565b9493610ab6565b8a80fd5b865163044aa57560e41b81528390fd5b9091925083610cc360848a01611a62565b16928a51809481938252633df6cef760e01b898301525afa908115610d0f578c91610cf2575b50388a816109c2565b610d0991508a3d8c116102dc576102ce8183611aa5565b38610ce9565b88513d8e823e3d90fd5b9250818e9185610d2b60448c01611a62565b168c51928380928882526336372b0760e01b8c8301525afa918215610d7657908d92610d59575b50926109bc565b610d709150823d84116102dc576102ce8183611aa5565b38610d52565b8b51903d90823e3d90fd5b9250818e9185610d9360648c01611a62565b168c51928380928882526329abf30760e11b8c8301525afa918215610d7657908d92610dc1575b50926109b6565b610dd89150823d84116102dc576102ce8183611aa5565b38610dba565b9250818e9185610ded8a611a62565b168c51928380928882526341636c7560e11b8c8301525afa918215610d7657908d92610e1b575b50926109b0565b610e329150823d84116102dc576102ce8183611aa5565b38610e14565b610e50919450823d84116102dc576102ce8183611aa5565b92386109a9565b61ffff19166101011789553861095b565b835162461bcd60e51b8152808601879052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156109425750600160ff881614610942565b50600160ff88161061093b565b8580fd5b50503461048857816003193601126104885760209060ce549051908152f35b509190346104885760031990602036830181136102ed5784359267ffffffffffffffff84116106f4576101009084360301126102ed5760ca548251632474521560e21b8082527f5580ea9b7f9becaa48a78f506a2019ea24794b7a717ee6a4b9f62e36b94c25a68883015233602483015290916001600160a01b0316908383604481855afa9283156110ae5787936110b8575b508215611042575b8215610fd2575b5050905015610fc35750610fc0919201611c55565b80f35b5163036be76f60e61b81528390fd5b83919250604485518094819382527f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c8b8301523360248301525afa91821561045f578592611025575b5050803880610fab565b61103b9250803d106102dc576102ce8183611aa5565b388061101b565b915083518281527f8f8b3dc194d940c9ce77bea0cf23855523a0d7b641973e714d9dc5f3528a573a888201523360248201528381604481855afa9081156110ae578791611091575b5091610fa4565b6110a89150843d86116102dc576102ce8183611aa5565b3861108a565b85513d89823e3d90fd5b6110d0919350843d86116102dc576102ce8183611aa5565b9138610f9c565b5082903461048857602036600319011261048857359060038210156108ec575061110090611a49565b6001815491015482519182526020820152f35b50346101e657826003193601126101e65760ca548251632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb8382015233602482015290602090829060449082906001600160a01b03165afa9081156111e85784916111ca575b5015610433575060207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916111b5612214565b600160ff19606554161760655551338152a180f35b6111e2915060203d81116102dc576102ce8183611aa5565b38611182565b50505051903d90823e3d90fd5b50503461048857816003193601126104885760ca5490516001600160a01b039091168152602090f35b50346101e65760203660031901126101e65760ca548251632474521560e21b81526000805160206124738339815191528184015233602482015282359391602090829060449082906001600160a01b03165afa9081156112d05785916112b2575b50156105425750508060d1557fac3e0e532f107b556a4483ee89fa8a6d20788e9ec96a2b0131246a2e790f0f098280a280f35b6112ca915060203d81116102dc576102ce8183611aa5565b3861127f565b82513d87823e3d90fd5b50346101e65760203660031901126101e65760ca548251632474521560e21b81526000805160206124738339815191528184015233602482015282359391602090829060449082906001600160a01b03165afa9081156112d057859161136e575b50156105425750508060d3557fc9b6fec85cf82ed032526c3a1bbc72a81c4cef31fa9ab33b10794ba8403513f48280a280f35b611386915060203d81116102dc576102ce8183611aa5565b3861133b565b50503461048857816003193601126104885760cc5490516001600160a01b039091168152602090f35b50503461048857816003193601126104885760209060ff6065541690519015158152f35b5090346101e65760203660031901126101e657813560058110156102ed5760a093816114058493611a29565b815260d8602052208054926001820154926002830154916003840154930154938151958652602086015284015260608301526080820152f35b50346101e65760203660031901126101e65760ca548251632474521560e21b81526000805160206124738339815191528184015233602482015282359391602090829060449082906001600160a01b03165afa9081156112d05785916114ee575b501561054257678ac7230489e8000083116114e15750508060cd557f0866f0eddab536ffa2ae6d0c094f37e4876779d4079734c513b8ab63520f40468280a280f35b51632e72686160e21b8152fd5b611506915060203d81116102dc576102ce8183611aa5565b3861149f565b50346101e657816003193601126101e65780359160058310156102ed5760ca548151632474521560e21b81526000805160206124738339815191528482015233602482015290602090829060449082906001600160a01b03165afa9081156112d0578591611588575b50156105425783610fc060243585612258565b6115a0915060203d81116102dc576102ce8183611aa5565b38611575565b50346101e65760203660031901126101e65760ca548251632474521560e21b81526000805160206124738339815191528184015233602482015282359391602090829060449082906001600160a01b03165afa9081156112d0578591611649575b501561054257678ac7230489e8000083116114e15750508060ce557fac4e2f47a168b9426760c27ccec778fd54ea706bd269dd48617d7cf68a014a998280a280f35b611661915060203d81116102dc576102ce8183611aa5565b38611607565b50503461048857816003193601126104885760209060cd549051908152f35b50346101e657826003193601126101e65760ca548251632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d88382015233602482015290602090829060449082906001600160a01b03165afa9081156111e8578491611777575b5015610433576065549060ff82161561173d575060ff1916606555513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b606490602084519162461bcd60e51b8352820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152fd5b61178f915060203d81116102dc576102ce8183611aa5565b386116f5565b50503461048857816003193601126104885760209060d0549051908152f35b5090346101e65760203660031901126101e65760ca548151632474521560e21b81526000805160206124738339815191528185015233602482015283359391602090829060449082906001600160a01b03165afa90811561045f57859161187c575b5015610433578383138061186a575b1561185c5750816020917f40066df7a841da7e7ca0b9fb5454b80f1a2d22bca3e3d99d8f395348bdb0799f9360dc5551908152a180f35b90516326711fb360e11b8152fd5b50671bc16d674ec80000831115611825565b611894915060203d81116102dc576102ce8183611aa5565b38611816565b50346101e65760203660031901126101e65760ca548251632474521560e21b81526000805160206124738339815191528184015233602482015282359391602090829060449082906001600160a01b03165afa9081156112d057859161192e575b50156105425750508060d2557f123d6dec98f165501c5a4efa12a37cee89b488c3dbaad98fb2c365bdedf1a8a98280a280f35b611946915060203d81116102dc576102ce8183611aa5565b386118fb565b50503461048857816003193601126104885760c95490516001600160a01b039091168152602090f35b50503461048857816003193601126104885760209060d1549051908152f35b50503461048857816003193601126104885760cb5490516001600160a01b039091168152602090f35b925050346101e65760203660031901126101e6573563ffffffff60e01b81168091036101e6576020925063332a72a160e01b8114908115611a18575b8115611a07575b5015158152f35b6301ffc9a760e01b14905038611a00565b6307cba1f360e41b811491506119f9565b60051115611a3357565b634e487b7160e01b600052602160045260246000fd5b6003811015611a335760005260d9602052604060002090565b356001600160a01b0381168103611a765790565b600080fd5b67ffffffffffffffff8111611a8f57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611a8f57604052565b90816020910312611a7657518015158103611a765790565b6000198114611aee5760010190565b634e487b7160e01b600052601160045260246000fd5b903590601e1981360301821215611a76570180359067ffffffffffffffff8211611a76576020019160c0820236038313611a7657565b9190811015611b4a5760c0020190565b634e487b7160e01b600052603260045260246000fd5b903590601e1981360301821215611a76570180359067ffffffffffffffff8211611a7657602001918160061b36038313611a7657565b9190811015611b4a5760061b0190565b15611bad57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b91908201809211611aee57565b81810292918115918404141715611aee57565b906040516040810181811067ffffffffffffffff821117611a8f57604052602060018294805484520154910152565b611c6160208201611a62565b60c9546040805163a3f092a760e01b81526001600160a01b0393841660048201527399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e60248201529084013560448201529116606482015260208160848173__$75df3f6366b0557754cd3ba14359105414$__5af48015611fca576000906121d3575b611ce5915060cf54906123df565b9060d0549160008382019384129112908015821691151617611aee578160008113156121ce5760dc548091126121c6575b5060d15460c0820135601e1983360301811215611a765782019081359167ffffffffffffffff8311611a76576020018260051b36038113611a7657611d6992611d639160a08601356122b7565b90611c06565b91600560608301351015611a7657611d8960808301356060840135612352565b8084116121be575b5060c95460405163455259cb60e01b81526001600160a01b0390911693903a90602081600481895afa908115611fca5760009161218c575b5060008113156121835760d354670de0b6b3a7640000908101809111611aee57611df2916123df565b80821161217b575b5060009160ff60d45416600281101561216757600114611fd6575b91611e27611e2c92611e319594611c13565b611c06565b6123df565b611e3d60ce54826123df565b9260018060a01b0360cb5416916040519263a3f092a760e01b84527399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e600485015260248401526044830152606482015260208160848173__$75df3f6366b0557754cd3ba14359105414$__5af4908115611fca57600091611f78575b507fb5b60f38246a38a2fd794a7da06cc6a0c32cf4d0b94c9683fde017ee3ea5dbf691611edf60409260cd54906123df565b906001600160a01b03611ef182611a62565b1660005260d560205282600020611f09838254611c06565b90556001600160a01b03611f1c82611a62565b1660005260d560205260018360002001611f37868254611c06565b9055611f458260d654611c06565b60d655611f548560d754611c06565b60d7556001600160a01b0390611f6990611a62565b169382519182526020820152a2565b906020823d602011611fc2575b81611f9260209383611aa5565b810103126108ec5750517fb5b60f38246a38a2fd794a7da06cc6a0c32cf4d0b94c9683fde017ee3ea5dbf6611ead565b3d9150611f85565b6040513d6000823e3d90fd5b9180600160808701351115612132575060026080860135608087013560061b04604014608087013515171561211e5761203a61202161201c608089013560061b93611a49565b611c26565b9160e08801358351808210600014612116575090611c06565b60405163f5d6ded760e01b815291602083600481606c5afa92831561210b5784936120d7575b508260041b92808404601014901517156120c3576020015161208191611c06565b91608c83018093116120af5750611e2c926120a4611e31969593611e2793611c13565b949550925050611e15565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b84526011600452602484fd5b9092506020813d602011612103575b816120f360209383611aa5565b810103126102ed57519138612060565b3d91506120e6565b6040513d86823e3d90fd5b905090611c06565b634e487b7160e01b82526011600452602482fd5b61213f6060870135611a29565b60608601356121585761203a61202161201c6001611a49565b61203a61202161201c84611a49565b634e487b7160e01b84526021600452602484fd5b905038611dfa565b5060d254611df2565b906020823d6020116121b6575b816121a660209383611aa5565b810103126108ec57505138611dc9565b3d9150612199565b925038611d91565b915038611d16565b505050565b6020823d6020116121ff575b816121ec60209383611aa5565b810103126108ec5750611ce59051611cd7565b3d91506121df565b91908203918211611aee57565b60ff6065541661222057565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b9060207f58ab8557e0e847f289f2134b72a469c160191d9b98144339d9bf394987082bb09161228684611a29565b8360005260da82528060406000205561229e84611a29565b604051908152a2565b9190811015611b4a5760051b0190565b919081156122e857600091825b8181106122ed575050506000918181116000146122e8576122e59250612207565b90565b505090565b6122f88183856122a7565b3561230c575b61230790611adf565b6122c4565b9261234a61230791611d636123228786886122a7565b3561232c88611a29565b61233588611a29565b8760005260da60205260406000205490611c13565b9390506122fe565b61235b81611a29565b80156123c05761236a81611a29565b60005260d8602052604060002060048101548281159182156123b6575b50506123a357611d636122e59260036001840154930154611c13565b611d636122e59260028354930154611c13565b1190508238612387565b90506123cb81611a29565b60005260d860205260026040600020015490565b90600091811591821561243f575b50501561242d576706f05b59d3b20000810190818111611aee57811061241b57670de0b6b3a7640000900490565b604051630a77254f60e01b8152600490fd5b604051631550e8b760e01b8152600490fd5b9091925061244d8183611c13565b9261245c5782041438806123ed565b634e487b7160e01b600052601260045260246000fdfec0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b63a2646970667358221220ab8419020d9fb3361c2e0962f708dfc0ed8a4cd13232564699d0257354106ad964736f6c63430008120033",
  "libraries": {
    "PrimexPricingLibrary": "0xab03C0c0Ba39a886eD51757272E91cd739542118",
    "TokenTransfersLibrary": "0xF90aCbeF0eDDdd6854c96137f416a5b7dD67D904",
    "Errors": "0xB959663e3FAb840C9bfebC6d2d32822D25317292"
  },
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "claim(uint256,uint256)": {
        "params": {
          "_nativeAmount": "Amount of native token to claim",
          "_pmxAmount": "Amount of PMX token to claim"
        }
      },
      "initialize((address,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint8,(uint8,(uint256,uint256,uint256,uint256,uint256))[],(uint8,uint256)[]))": {
        "params": {
          "_params": "Parameters for initialization"
        }
      },
      "pause()": {
        "details": "Triggers stopped state. This function can only be called by an address with the EMERGENCY_ADMIN role. Requirements: - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setAdditionalGas(uint256)": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_additionalGas": "The new additionalGas value."
        }
      },
      "setDataLengthRestrictions(uint8,uint256,uint256)": {
        "params": {
          "_baseLength": "The length of the data entering the protocol function including method signature and excluding dynamic types(e.g, routesLength), in bytes",
          "_callingMethod": "The calling method for which dataLengthRestrictions is set",
          "_maxRoutesLength": "The maximum routes length for which an additional fee will be paid in the ARBITRUM payment model, in bytes"
        }
      },
      "setDecreasingGasByReason(uint8,uint256)": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_amount": "Gas amount.",
          "_reason": "The reason for which an amount is set"
        }
      },
      "setDefaultMaxGasPrice(uint256)": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_defaultMaxGasPrice": "The new default maximum gas price value."
        }
      },
      "setMaxGasPerPosition(uint8,(uint256,uint256,uint256,uint256,uint256))": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_actionType": "The action type for which the config is set",
          "_config": "The KeeperActionRewardConfig struct"
        }
      },
      "setMinPositionSizeMultiplier(int256)": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_minPositionSizeMultiplier": "The new minPositionSizeMultiplier value (in WAD)."
        }
      },
      "setNativePartInReward(uint256)": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_nativePartInReward": "The new native token's portion in the reward calculation (percent expressed as WAD)."
        }
      },
      "setOracleGasPriceTolerance(uint256)": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_oracleGasPriceTolerance": "The new oracle gas price tolerance value (percent expressed as WAD)."
        }
      },
      "setPmxPartInReward(uint256)": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_pmxPartInReward": "The new PMX token's portion in the reward calculation (percent expressed as WAD)."
        }
      },
      "setPositionSizeCoefficients(uint256,int256)": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_positionSizeCoefficientA": "The new positionSizeCoefficientA value (in WAD).",
          "_positionSizeCoefficientB": "The new positionSizeCoefficientB value (in WAD)."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The interface id to check"
        }
      },
      "unpause()": {
        "details": "Returns to normal state. This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract. Requirements: - The contract must be paused."
      },
      "updateReward((address,address,uint256,uint8,uint256,uint256,uint256[],uint256))": {
        "details": "Only callable by the PM_ROLE, LOM_ROLE, BATCH_MANAGER_ROLE roles.",
        "params": {
          "_params": "The UpdateRewardParams params"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint256,uint256)": {
        "notice": "Claims earned reward of the keeper"
      },
      "initialize((address,address,address,address,address,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint8,(uint8,(uint256,uint256,uint256,uint256,uint256))[],(uint8,uint256)[]))": {
        "notice": "Initializes the KeeperRewardDistributor contract."
      },
      "setAdditionalGas(uint256)": {
        "notice": "Sets the additional gas value for reward calculations."
      },
      "setDataLengthRestrictions(uint8,uint256,uint256)": {
        "notice": "Sets the dataLengthRestrictions for the specified KeeperCallingMethod."
      },
      "setDecreasingGasByReason(uint8,uint256)": {
        "notice": "Sets the amount of gas to be removed for the specified reason"
      },
      "setDefaultMaxGasPrice(uint256)": {
        "notice": "Sets the default maximum gas price allowed."
      },
      "setMaxGasPerPosition(uint8,(uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Sets the KeeperActionRewardConfig for the specified action type"
      },
      "setMinPositionSizeMultiplier(int256)": {
        "notice": "Sets the minPositionSizeMultiplier for reward calculations."
      },
      "setNativePartInReward(uint256)": {
        "notice": "Sets the native token's portion in the reward calculation."
      },
      "setOracleGasPriceTolerance(uint256)": {
        "notice": "Sets the tolerance for gas price fluctuations from the oracle price."
      },
      "setPmxPartInReward(uint256)": {
        "notice": "Sets the PMX token's portion in the reward calculation."
      },
      "setPositionSizeCoefficients(uint256,int256)": {
        "notice": "Sets the position size coefficients for reward calculations."
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      },
      "updateReward((address,address,uint256,uint8,uint256,uint256,uint256[],uint256))": {
        "notice": "Updates reward for keeper for closing position or executing order"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2890,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2893,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3193,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3262,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5867,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3073,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 3178,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6506,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 32595,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "priceOracle",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 32598,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "registry",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 32601,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "pmx",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 32604,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "treasury",
        "offset": 0,
        "slot": "204",
        "type": "t_address_payable"
      },
      {
        "astId": 32607,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "pmxPartInReward",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 32610,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "nativePartInReward",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 32613,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "positionSizeCoefficientA",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 32616,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "positionSizeCoefficientB",
        "offset": 0,
        "slot": "208",
        "type": "t_int256"
      },
      {
        "astId": 32619,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "additionalGas",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 32622,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "defaultMaxGasPrice",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 32625,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "oracleGasPriceTolerance",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 32629,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "paymentModel",
        "offset": 0,
        "slot": "212",
        "type": "t_enum(PaymentModel)31254"
      },
      {
        "astId": 32635,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "keeperBalance",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_address,t_struct(KeeperBalance)31251_storage)"
      },
      {
        "astId": 32639,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "totalBalance",
        "offset": 0,
        "slot": "214",
        "type": "t_struct(KeeperBalance)31251_storage"
      },
      {
        "astId": 32646,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "maxGasPerPosition",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_enum(KeeperActionType)31226,t_struct(KeeperActionRewardConfig)31246_storage)"
      },
      {
        "astId": 32653,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "dataLengthRestrictions",
        "offset": 0,
        "slot": "217",
        "type": "t_mapping(t_enum(KeeperCallingMethod)31230,t_struct(DataLengthRestrictions)31235_storage)"
      },
      {
        "astId": 32659,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "decreasingGasByReason",
        "offset": 0,
        "slot": "218",
        "type": "t_mapping(t_enum(DecreasingReason)31220,t_uint256)"
      },
      {
        "astId": 32662,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "whiteBlackList",
        "offset": 0,
        "slot": "219",
        "type": "t_contract(IWhiteBlackList)54241"
      },
      {
        "astId": 32670,
        "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
        "label": "minPositionSizeMultiplier",
        "offset": 0,
        "slot": "220",
        "type": "t_int256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IWhiteBlackList)54241": {
        "encoding": "inplace",
        "label": "contract IWhiteBlackList",
        "numberOfBytes": "20"
      },
      "t_enum(DecreasingReason)31220": {
        "encoding": "inplace",
        "label": "enum IKeeperRewardDistributorStorage.DecreasingReason",
        "numberOfBytes": "1"
      },
      "t_enum(KeeperActionType)31226": {
        "encoding": "inplace",
        "label": "enum IKeeperRewardDistributorStorage.KeeperActionType",
        "numberOfBytes": "1"
      },
      "t_enum(KeeperCallingMethod)31230": {
        "encoding": "inplace",
        "label": "enum IKeeperRewardDistributorStorage.KeeperCallingMethod",
        "numberOfBytes": "1"
      },
      "t_enum(PaymentModel)31254": {
        "encoding": "inplace",
        "label": "enum IKeeperRewardDistributorStorage.PaymentModel",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(KeeperBalance)31251_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IKeeperRewardDistributorStorage.KeeperBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(KeeperBalance)31251_storage"
      },
      "t_mapping(t_enum(DecreasingReason)31220,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(DecreasingReason)31220",
        "label": "mapping(enum IKeeperRewardDistributorStorage.DecreasingReason => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(KeeperActionType)31226,t_struct(KeeperActionRewardConfig)31246_storage)": {
        "encoding": "mapping",
        "key": "t_enum(KeeperActionType)31226",
        "label": "mapping(enum IKeeperRewardDistributorStorage.KeeperActionType => struct IKeeperRewardDistributorStorage.KeeperActionRewardConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(KeeperActionRewardConfig)31246_storage"
      },
      "t_mapping(t_enum(KeeperCallingMethod)31230,t_struct(DataLengthRestrictions)31235_storage)": {
        "encoding": "mapping",
        "key": "t_enum(KeeperCallingMethod)31230",
        "label": "mapping(enum IKeeperRewardDistributorStorage.KeeperCallingMethod => struct IKeeperRewardDistributorStorage.DataLengthRestrictions)",
        "numberOfBytes": "32",
        "value": "t_struct(DataLengthRestrictions)31235_storage"
      },
      "t_struct(DataLengthRestrictions)31235_storage": {
        "encoding": "inplace",
        "label": "struct IKeeperRewardDistributorStorage.DataLengthRestrictions",
        "members": [
          {
            "astId": 31232,
            "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
            "label": "maxRoutesLength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31234,
            "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
            "label": "baseLength",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(KeeperActionRewardConfig)31246_storage": {
        "encoding": "inplace",
        "label": "struct IKeeperRewardDistributorStorage.KeeperActionRewardConfig",
        "members": [
          {
            "astId": 31237,
            "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
            "label": "baseMaxGas1",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31239,
            "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
            "label": "baseMaxGas2",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31241,
            "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
            "label": "multiplier1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 31243,
            "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
            "label": "multiplier2",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 31245,
            "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
            "label": "inflectionPoint",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(KeeperBalance)31251_storage": {
        "encoding": "inplace",
        "label": "struct IKeeperRewardDistributorStorage.KeeperBalance",
        "members": [
          {
            "astId": 31248,
            "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
            "label": "pmxBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31250,
            "contract": "contracts/KeeperRewardDistributor/KeeperRewardDistributor.sol:KeeperRewardDistributor",
            "label": "nativeBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}