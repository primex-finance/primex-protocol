{
  "address": "0xc47c2B4c0F019d4f2fD63fe8c8307349534a48ef",
  "abi": [
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bucket",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "urOptimal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "k0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "k1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "b0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "b1",
          "type": "int256"
        }
      ],
      "name": "BarCalculationParamsChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ur",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveRate",
          "type": "uint256"
        }
      ],
      "name": "calculateInterestRates",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getBarCalculationParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "urOptimal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "k0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "k1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "b0",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "b1",
              "type": "int256"
            }
          ],
          "internalType": "struct IInterestRateStrategy.BarCalculationParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_params",
          "type": "bytes"
        }
      ],
      "name": "setBarCalculationParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2bdd0ccd8f7c758c8f7b72caf4a12140505f0d270bfae1365eb599344f8db7da",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0xc47c2B4c0F019d4f2fD63fe8c8307349534a48ef",
    "transactionIndex": 193,
    "gasUsed": "360803",
    "logsBloom": "0x
    "blockHash": "0x22190b4520dfea7fa36fded238233d9e76e6c2e9a9be70954444b68349575150",
    "transactionHash": "0x2bdd0ccd8f7c758c8f7b72caf4a12140505f0d270bfae1365eb599344f8db7da",
    "logs": [],
    "blockNumber": 21087904,
    "cumulativeGasUsed": "17983428",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "89aabf2fa537de3869c847bae20cae69",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bucket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"urOptimal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"k0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"k1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"b0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"b1\",\"type\":\"int256\"}],\"name\":\"BarCalculationParamsChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ur\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveRate\",\"type\":\"uint256\"}],\"name\":\"calculateInterestRates\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBarCalculationParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"urOptimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b0\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"b1\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateStrategy.BarCalculationParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"setBarCalculationParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateInterestRates(uint256,uint256)\":{\"details\":\"Updates bucket's BAR and LAR. Calculates using utilization ratio (UR): BAR = UR <= URoptimal ? (k0 * UR + b0) : (k1 * UR + b1), where 'b1' may be < 0, LAR = BAR * UR, if reserveRate != 0, then LAR = LAR * (1 - reserveRate)\",\"params\":{\"reserveRate\":\"The reserve portion of the interest that goes to the Primex reserve\",\"ur\":\"Utilization ratio\"},\"returns\":{\"_0\":\"tuple containing BAR and LAR\"}},\"getBarCalculationParams(address)\":{\"details\":\"Retrieves the calculation parameters for the Bar calculation.\",\"params\":{\"_address\":\"an address of the bucket\"},\"returns\":{\"_0\":\"BarCalculationParams struct containing the parameters.\"}},\"setBarCalculationParams(bytes)\":{\"details\":\"Set parameters for BAR calculation.\",\"params\":{\"_params\":\"parameters are represented in byte string\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The interface id to check\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InterestRateStrategy.sol\":\"InterestRateStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/InterestRateStrategy.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {WadRayMath} from \\\"./libraries/utils/WadRayMath.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\n\\nimport {IInterestRateStrategy} from \\\"./interfaces/IInterestRateStrategy.sol\\\";\\n\\ncontract InterestRateStrategy is IInterestRateStrategy, ERC165 {\\n    using WadRayMath for uint256;\\n    // a bucket address to its params\\n    mapping(address => BarCalculationParams) internal calculationParams;\\n\\n    /**\\n     * @inheritdoc IInterestRateStrategy\\n     */\\n    function setBarCalculationParams(bytes calldata _params) external override {\\n        BarCalculationParams memory barCalculationParams = abi.decode(_params, (BarCalculationParams));\\n        calculationParams[msg.sender] = barCalculationParams;\\n        emit BarCalculationParamsChanged(\\n            msg.sender,\\n            barCalculationParams.urOptimal,\\n            barCalculationParams.k0,\\n            barCalculationParams.k1,\\n            barCalculationParams.b0,\\n            barCalculationParams.b1\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IInterestRateStrategy\\n     */\\n    function getBarCalculationParams(address _address) external view override returns (BarCalculationParams memory) {\\n        return calculationParams[_address];\\n    }\\n\\n    /**\\n     * @inheritdoc IInterestRateStrategy\\n     */\\n    function calculateInterestRates(uint256 ur, uint256 reserveRate) public view override returns (uint128, uint128) {\\n        _require(ur <= WadRayMath.RAY, Errors.UR_IS_MORE_THAN_1.selector);\\n        if (ur == 0) return (0, 0);\\n        BarCalculationParams memory barCalcParams = calculationParams[msg.sender];\\n        uint256 newBAR;\\n        if (ur <= barCalcParams.urOptimal) {\\n            newBAR = barCalcParams.k0.rmul(ur) + (barCalcParams.b0);\\n        } else {\\n            uint256 k1modified = barCalcParams.k1.rmul(ur);\\n            if (barCalcParams.b1 < 0) {\\n                uint256 b1modified = uint256(barCalcParams.b1 * (-1));\\n                _require(k1modified >= b1modified, Errors.BAR_OVERFLOW.selector);\\n                newBAR = k1modified - b1modified;\\n            } else {\\n                newBAR = k1modified + uint256(barCalcParams.b1);\\n            }\\n        }\\n\\n        // Errors.BAR_OVERFLOW is not possible to test\\n        _require(newBAR <= type(uint128).max, Errors.BAR_OVERFLOW.selector);\\n        uint256 newLAR = newBAR.rmul(ur);\\n        if (reserveRate != 0) {\\n            newLAR = newLAR.wmul(WadRayMath.WAD - reserveRate);\\n        }\\n        _require(newLAR <= type(uint128).max, Errors.LAR_OVERFLOW.selector);\\n\\n        return (uint128(newBAR), uint128(newLAR));\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param _interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IInterestRateStrategy).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf6f3a00799fe70f65986d83ea3776743433469b87a9a4ec15e0cd1a22e4866ef\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateStrategy.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IInterestRateStrategy {\\n    /**\\n     * @dev parameters for BAR calculation - they differ depending on bucket's underlying asset\\n     */\\n    struct BarCalculationParams {\\n        uint256 urOptimal;\\n        uint256 k0;\\n        uint256 k1;\\n        uint256 b0;\\n        int256 b1;\\n    }\\n\\n    event BarCalculationParamsChanged(\\n        address indexed bucket,\\n        uint256 urOptimal,\\n        uint256 k0,\\n        uint256 k1,\\n        uint256 b0,\\n        int256 b1\\n    );\\n\\n    /**\\n     * @dev Updates bucket's BAR and LAR.\\n     * Calculates using utilization ratio (UR):\\n     * BAR = UR <= URoptimal ? (k0 * UR + b0) : (k1 * UR + b1), where 'b1' may be < 0,\\n     * LAR = BAR * UR,\\n     * if reserveRate != 0, then LAR = LAR * (1 - reserveRate)\\n     * @param ur Utilization ratio\\n     * @param reserveRate The reserve portion of the interest that goes to the Primex reserve\\n     * @return tuple containing BAR and LAR\\n     */\\n\\n    function calculateInterestRates(uint256 ur, uint256 reserveRate) external returns (uint128, uint128);\\n\\n    /**\\n     * @dev Set parameters for BAR calculation.\\n     * @param _params parameters are represented in byte string\\n     */\\n\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Retrieves the calculation parameters for the Bar calculation.\\n     * @param _address an address of the bucket\\n     * @return BarCalculationParams struct containing the parameters.\\n     */\\n    function getBarCalculationParams(address _address) external view returns (BarCalculationParams memory);\\n}\\n\",\"keccak256\":\"0xaffa1ce1d9ea17874bd325829c32f6313ac98f1fc1b15a1e0f739aed02caea3c\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    error SWAP_DEADLINE_PASSED();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error INVALID_AMOUNT();\\n    error POOL_CALL_FAILED();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n    error INCORRECT_BORROWED_AMOUNT();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error THERE_IS_DIRECT_ROUTE();\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n    error WRONG_ORACLE_ROUTES_LENGTH();\\n    error WRONG_ASSET_B();\\n    error INCORRECT_ROUTE_SEQUENCE();\\n    error INCORRECT_PYTH_PRICE();\\n    error TOKEN_PAIR_IS_NOT_TRUSTED();\\n    error INCORRECT_TOKEN_TO();\\n    error INCORRECT_PYTH_ROUTE();\\n    error INCORRECT_CHAINLINK_ROUTE();\\n    error NOT_ENOUGH_MSG_VALUE();\\n    error PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME();\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n    error LEVERAGE_TOLERANCE_IS_NOT_CORRECT();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error LEVERAGE_TOLERANCE_EXCEEDED();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n    error MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error TOKEN_APPROVE_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n    error INCORRECT_OPTIMISM_GAS_COEFFICIENT();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n\\n    //FlashLoan\\n    error INCONSISTENT_FLASHLOAN_PARAMS();\\n    error INVALID_FLASHLOAN_EXECUTOR_RETURN();\\n    error FLASH_LOAN_FEE_RATE_IS_MORE_10_PERCENT();\\n    error FLASH_LOAN_PROTOCOL_RATE_IS_MORE_50_PERCENT();\\n\\n    // DepositManager\\n    error REWARD_PERCENT_SHOULD_BE_GREATER_THAN_ZERO();\\n    error TOKEN_CANNOT_BE_P_TOKEN();\\n}\\n\",\"keccak256\":\"0xe51b2018b7a236e4977fd971fb615ea73c9d07ce6a647725352da8b9158ce48a\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.26;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x49afef0dbc484e0e513c163ee4ce090a30fa061c47a262046c0a7311092a3756\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60808060405234601557610590908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a71461024f57508063110966fa146102155780632acabb11146101075763ddce49171461004b57600080fd5b34610102576020366003190112610102576004356001600160a01b03811690819003610102576000608061007d6102a2565b8281528260208201528260408201528260608201520152600052600060205260a060406000206100ab6102a2565b81549182825260018101546020830190815260028201549060408401918252608060046003850154946060870195865201549401938452604051948552516020850152516040840152516060830152516080820152f35b600080fd5b346101025760203660031901126101025760043567ffffffffffffffff8111610102573660238201121561010257806004013567ffffffffffffffff81116101025781013660248201116101025760a0908290031261010257600090600461016d6102a2565b9160248101358352602083019260448201358452604081016064830135815260608201916084840135835260a4608082019401358452338752866020526040872090519586825551918260018301555192836002830155519384600383015551948591015560405194855260208501526040840152606083015260808201527f7bd145cdd7c4e4ed7a51e9e3e4baa3c3c1622230c4dd7b084156536b0b930c1060a03392a280f35b346101025760403660031901126101025760406001600160801b0361023e6024356004356102fb565b835191831682529091166020820152f35b34610102576020366003190112610102576004359063ffffffff60e01b821680920361010257602091633983653f60e21b8114908115610291575b5015158152f35b6301ffc9a760e01b1490508361028a565b6040519060a0820182811067ffffffffffffffff8211176102c257604052565b634e487b7160e01b600052604160045260246000fd5b919082018092116102e557565b634e487b7160e01b600052601160045260246000fd5b9190916b033b2e3c9fd0803ce800000081116104ad5780156104a457336000526000602052604060002061032d6102a2565b9082815480845260018301549360208101948552600284015480604083015260806004600387015496606085019788520154920191825260009284111560001461044f575050506103829061038a93516104bf565b9051906102d8565b905b6001600160801b03821161043d576103a490826104bf565b92806103dc575b506001600160801b0383116103ca576001600160801b03809116921690565b60405163fab766b560e01b8152600490fd5b670de0b6b3a764000093919303670de0b6b3a764000081116102e557610401916104f8565b6706f05b59d3b200008101908181116102e557811061042c57670de0b6b3a7640000900491386103ab565b630a77254f60e01b60005260046000fd5b604051635ebef97160e01b8152600490fd5b90935061045e929194506104bf565b815190928112156104935750518060000381810560001914821517156102e557821061043d5781019081116102e5579061038c565b905061049e916102d8565b9061038c565b50600091508190565b6040516356610cc760e01b8152600490fd5b906104c9916104f8565b6b019d971e4fe8401e740000008101908181116102e557811061042c576b033b2e3c9fd0803ce8000000900490565b91906000928115918215610521575b50501561051057565b631550e8b760e01b60005260046000fd5b818192939550028281048214831517156102e55780946105445704143880610507565b634e487b7160e01b600052601260045260246000fdfea2646970667358221220557c33b5d37e318b48bc0fe63eccce0710561e2c54f1265fbd4cf06553a52a1364736f6c634300081a0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a71461024f57508063110966fa146102155780632acabb11146101075763ddce49171461004b57600080fd5b34610102576020366003190112610102576004356001600160a01b03811690819003610102576000608061007d6102a2565b8281528260208201528260408201528260608201520152600052600060205260a060406000206100ab6102a2565b81549182825260018101546020830190815260028201549060408401918252608060046003850154946060870195865201549401938452604051948552516020850152516040840152516060830152516080820152f35b600080fd5b346101025760203660031901126101025760043567ffffffffffffffff8111610102573660238201121561010257806004013567ffffffffffffffff81116101025781013660248201116101025760a0908290031261010257600090600461016d6102a2565b9160248101358352602083019260448201358452604081016064830135815260608201916084840135835260a4608082019401358452338752866020526040872090519586825551918260018301555192836002830155519384600383015551948591015560405194855260208501526040840152606083015260808201527f7bd145cdd7c4e4ed7a51e9e3e4baa3c3c1622230c4dd7b084156536b0b930c1060a03392a280f35b346101025760403660031901126101025760406001600160801b0361023e6024356004356102fb565b835191831682529091166020820152f35b34610102576020366003190112610102576004359063ffffffff60e01b821680920361010257602091633983653f60e21b8114908115610291575b5015158152f35b6301ffc9a760e01b1490508361028a565b6040519060a0820182811067ffffffffffffffff8211176102c257604052565b634e487b7160e01b600052604160045260246000fd5b919082018092116102e557565b634e487b7160e01b600052601160045260246000fd5b9190916b033b2e3c9fd0803ce800000081116104ad5780156104a457336000526000602052604060002061032d6102a2565b9082815480845260018301549360208101948552600284015480604083015260806004600387015496606085019788520154920191825260009284111560001461044f575050506103829061038a93516104bf565b9051906102d8565b905b6001600160801b03821161043d576103a490826104bf565b92806103dc575b506001600160801b0383116103ca576001600160801b03809116921690565b60405163fab766b560e01b8152600490fd5b670de0b6b3a764000093919303670de0b6b3a764000081116102e557610401916104f8565b6706f05b59d3b200008101908181116102e557811061042c57670de0b6b3a7640000900491386103ab565b630a77254f60e01b60005260046000fd5b604051635ebef97160e01b8152600490fd5b90935061045e929194506104bf565b815190928112156104935750518060000381810560001914821517156102e557821061043d5781019081116102e5579061038c565b905061049e916102d8565b9061038c565b50600091508190565b6040516356610cc760e01b8152600490fd5b906104c9916104f8565b6b019d971e4fe8401e740000008101908181116102e557811061042c576b033b2e3c9fd0803ce8000000900490565b91906000928115918215610521575b50501561051057565b631550e8b760e01b60005260046000fd5b818192939550028281048214831517156102e55780946105445704143880610507565b634e487b7160e01b600052601260045260246000fdfea2646970667358221220557c33b5d37e318b48bc0fe63eccce0710561e2c54f1265fbd4cf06553a52a1364736f6c634300081a0033",
  "libraries": {
    "Errors": "0xB959663e3FAb840C9bfebC6d2d32822D25317292"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateInterestRates(uint256,uint256)": {
        "details": "Updates bucket's BAR and LAR. Calculates using utilization ratio (UR): BAR = UR <= URoptimal ? (k0 * UR + b0) : (k1 * UR + b1), where 'b1' may be < 0, LAR = BAR * UR, if reserveRate != 0, then LAR = LAR * (1 - reserveRate)",
        "params": {
          "reserveRate": "The reserve portion of the interest that goes to the Primex reserve",
          "ur": "Utilization ratio"
        },
        "returns": {
          "_0": "tuple containing BAR and LAR"
        }
      },
      "getBarCalculationParams(address)": {
        "details": "Retrieves the calculation parameters for the Bar calculation.",
        "params": {
          "_address": "an address of the bucket"
        },
        "returns": {
          "_0": "BarCalculationParams struct containing the parameters."
        }
      },
      "setBarCalculationParams(bytes)": {
        "details": "Set parameters for BAR calculation.",
        "params": {
          "_params": "parameters are represented in byte string"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The interface id to check"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 39847,
        "contract": "contracts/InterestRateStrategy.sol:InterestRateStrategy",
        "label": "calculationParams",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(BarCalculationParams)70461_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(BarCalculationParams)70461_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IInterestRateStrategy.BarCalculationParams)",
        "numberOfBytes": "32",
        "value": "t_struct(BarCalculationParams)70461_storage"
      },
      "t_struct(BarCalculationParams)70461_storage": {
        "encoding": "inplace",
        "label": "struct IInterestRateStrategy.BarCalculationParams",
        "members": [
          {
            "astId": 70452,
            "contract": "contracts/InterestRateStrategy.sol:InterestRateStrategy",
            "label": "urOptimal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 70454,
            "contract": "contracts/InterestRateStrategy.sol:InterestRateStrategy",
            "label": "k0",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 70456,
            "contract": "contracts/InterestRateStrategy.sol:InterestRateStrategy",
            "label": "k1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 70458,
            "contract": "contracts/InterestRateStrategy.sol:InterestRateStrategy",
            "label": "b0",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 70460,
            "contract": "contracts/InterestRateStrategy.sol:InterestRateStrategy",
            "label": "b1",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}