{
  "address": "0x47DEe6Cdb9d704b074C31C3a6fC644e3527cb5Af",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxTotalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountPerTransfer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPercentPerTransfer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTimeBetweenTransfers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeframeDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountDuringTimeframe",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITreasuryStorage.SpendingLimits",
          "name": "newSpendingLimits",
          "type": "tuple"
        }
      ],
      "name": "MaxSpendingLimitChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferFromTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "canTransferByTime",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxTotalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountPerTransfer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPercentPerTransfer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTimeBetweenTransfers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeframeDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountDuringTimeframe",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITreasuryStorage.SpendingLimits",
          "name": "_newSpendingLimits",
          "type": "tuple"
        }
      ],
      "name": "decreaseLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxTotalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountPerTransfer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPercentPerTransfer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTimeBetweenTransfers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeframeDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountDuringTimeframe",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITreasuryStorage.SpendingLimits",
          "name": "_newSpendingLimits",
          "type": "tuple"
        }
      ],
      "name": "setMaxSpendingLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "spenders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSpenderExist",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxTotalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountPerTransfer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPercentPerTransfer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTimeBetweenTransfers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeframeDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountDuringTimeframe",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITreasuryStorage.SpendingLimits",
          "name": "limits",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawalTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawnDuringTimeframe",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "transferFromTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdadd3ff0c77e9de676efa4d82d285652a7592acee65b0406586705f9f22270cb",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0x47DEe6Cdb9d704b074C31C3a6fC644e3527cb5Af",
    "transactionIndex": 143,
    "gasUsed": "1083693",
    "logsBloom": "0x
    "blockHash": "0xccfb02370b67b27cbd3bab88131ae7c7dbcf1953e82c90db832e8bf6947fe312",
    "transactionHash": "0xdadd3ff0c77e9de676efa4d82d285652a7592acee65b0406586705f9f22270cb",
    "logs": [
      {
        "transactionIndex": 143,
        "blockNumber": 18747597,
        "transactionHash": "0xdadd3ff0c77e9de676efa4d82d285652a7592acee65b0406586705f9f22270cb",
        "address": "0x47DEe6Cdb9d704b074C31C3a6fC644e3527cb5Af",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 393,
        "blockHash": "0xccfb02370b67b27cbd3bab88131ae7c7dbcf1953e82c90db832e8bf6947fe312"
      }
    ],
    "blockNumber": 18747597,
    "cumulativeGasUsed": "14642896",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ac08d1652288d4d03be56436412dd0c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentPerTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTimeBetweenTransfers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeframeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountDuringTimeframe\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITreasuryStorage.SpendingLimits\",\"name\":\"newSpendingLimits\",\"type\":\"tuple\"}],\"name\":\"MaxSpendingLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFromTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"canTransferByTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentPerTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTimeBetweenTransfers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeframeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountDuringTimeframe\",\"type\":\"uint256\"}],\"internalType\":\"struct ITreasuryStorage.SpendingLimits\",\"name\":\"_newSpendingLimits\",\"type\":\"tuple\"}],\"name\":\"decreaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentPerTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTimeBetweenTransfers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeframeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountDuringTimeframe\",\"type\":\"uint256\"}],\"internalType\":\"struct ITreasuryStorage.SpendingLimits\",\"name\":\"_newSpendingLimits\",\"type\":\"tuple\"}],\"name\":\"setMaxSpendingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"spenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSpenderExist\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPercentPerTransfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTimeBetweenTransfers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeframeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountDuringTimeframe\",\"type\":\"uint256\"}],\"internalType\":\"struct ITreasuryStorage.SpendingLimits\",\"name\":\"limits\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnDuringTimeframe\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"transferFromTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"canTransferByTime(address,address)\":{\"params\":{\"spender\":\"The address of the spender to check for.\",\"token\":\"The address of the token for which to check the time restrictions.\"},\"returns\":{\"_0\":\"A boolean indicating whether the spender can transfer tokens based on the minimum time between transfers.\"}},\"decreaseLimits(address,address,(uint256,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"This function can only be called by an address with the BIG_TIMELOCK_ADMIN or EMERGENCY_ADMIN role.\",\"params\":{\"newSpendingLimits\":\"The new spending limits and restrictions to set for the spender and token.\",\"spender\":\"The address of the spender for whom to decrease the maximum transfer amounts and total amount.\",\"token\":\"The address of the token for which to decrease the maximum transfer amounts and total amount.\"}},\"initialize(address)\":{\"details\":\"contract initializer\",\"params\":{\"registry\":\"The address of Registry contract\"}},\"pause()\":{\"details\":\"Triggers stopped state. This function can only be called by an address with the EMERGENCY_ADMIN role. Requirements: - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setMaxSpendingLimit(address,address,(uint256,uint256,uint256,uint256,uint256,uint256))\":{\"details\":\"This function can only be called by an address with the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"newSpendingLimits\":\"The new spending limits and restrictions to set for the spender and token.\",\"spender\":\"The address of the spender for whom to set the new spending limit.\",\"token\":\"The address of the token for which to set the new spending limit.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The interface id to check\"}},\"transferFromTreasury(uint256,address,address)\":{\"details\":\"The function checks the spender's transfer restrictions per transaction and per timeframe.\",\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"receiver\":\"The address of the receiver\",\"token\":\"The address of the token to transfer. Use the address NATIVE_TOKEN_ADDRESS for native token.\"}},\"unpause()\":{\"details\":\"Returns to normal state. This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract. Requirements: - The contract must be paused.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canTransferByTime(address,address)\":{\"notice\":\"Checks whether a spender can transfer tokens based on the minimum time between transfers imposed by the spending restrictions.\"},\"decreaseLimits(address,address,(uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Decreases Spending limits for a spender for a specific token.\"},\"setMaxSpendingLimit(address,address,(uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Sets the maximum spending limit and other restrictions for a given spender and token.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"},\"transferFromTreasury(uint256,address,address)\":{\"notice\":\"Transfers an amount of ERC20 or native token from the contract treasury to  a receiver address, subject to certain restrictions imposed by the spender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Treasury/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\",\"keccak256\":\"0xdfd1623c3bf46ff9a6fbbdff42a7d9a1b5e76c4252dd394db1b7811989dcaba3\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury/ITreasury.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITreasuryStorage} from \\\"./ITreasuryStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITreasury is ITreasuryStorage, IPausable {\\n    event MaxSpendingLimitChanged(address indexed spender, address indexed token, SpendingLimits newSpendingLimits);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param registry The address of Registry contract\\n     */\\n    function initialize(address registry) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @notice Transfers an amount of ERC20 or native token from the contract treasury to\\n     *  a receiver address, subject to certain restrictions imposed by the spender.\\n     * @dev The function checks the spender's transfer restrictions per transaction and per timeframe.\\n     * @param amount The amount of tokens to transfer.\\n     * @param token The address of the token to transfer. Use the address NATIVE_TOKEN_ADDRESS for native token.\\n     * @param receiver The address of the receiver\\n     */\\n    function transferFromTreasury(uint256 amount, address token, address receiver) external;\\n\\n    /**\\n     * @notice Sets the maximum spending limit and other restrictions for a given spender and token.\\n     * @dev This function can only be called by an address with the BIG_TIMELOCK_ADMIN role.\\n     * @param spender The address of the spender for whom to set the new spending limit.\\n     * @param token The address of the token for which to set the new spending limit.\\n     * @param newSpendingLimits The new spending limits and restrictions to set for the spender and token.\\n     */\\n    function setMaxSpendingLimit(address spender, address token, SpendingLimits calldata newSpendingLimits) external;\\n\\n    /**\\n     * @notice Decreases Spending limits for a spender for a specific token.\\n     * @dev This function can only be called by an address with the BIG_TIMELOCK_ADMIN or EMERGENCY_ADMIN role.\\n     * @param spender The address of the spender for whom to decrease the maximum transfer amounts and total amount.\\n     * @param token The address of the token for which to decrease the maximum transfer amounts and total amount.\\n     * @param newSpendingLimits The new spending limits and restrictions to set for the spender and token.\\n     */\\n    function decreaseLimits(address spender, address token, SpendingLimits calldata newSpendingLimits) external;\\n\\n    /**\\n     * @notice Checks whether a spender can transfer tokens based on the minimum time between transfers imposed by the spending restrictions.\\n     * @param spender The address of the spender to check for.\\n     * @param token The address of the token for which to check the time restrictions.\\n     * @return A boolean indicating whether the spender can transfer tokens based on the minimum time between transfers.\\n     */\\n    function canTransferByTime(address spender, address token) external returns (bool);\\n}\\n\",\"keccak256\":\"0xeab404d4759be993366d42aaa0b7a5d0d2df1934bde5868e0df8c7341b2ac3c8\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury/ITreasuryStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITreasuryStorage {\\n    struct SpendingLimits {\\n        //transfer settings\\n        uint256 maxTotalAmount;\\n        uint256 maxAmountPerTransfer;\\n        uint256 maxPercentPerTransfer;\\n        uint256 minTimeBetweenTransfers;\\n        // timeframe settings\\n        uint256 timeframeDuration;\\n        uint256 maxAmountDuringTimeframe;\\n    }\\n    struct SpendingInfo {\\n        bool isSpenderExist;\\n        SpendingLimits limits;\\n        uint256 lastWithdrawalTimestamp;\\n        uint256 withdrawnDuringTimeframe;\\n    }\\n\\n    event TransferFromTreasury(\\n        address indexed spender,\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    function spenders(\\n        address spender,\\n        address token\\n    ) external returns (bool, SpendingLimits calldata, uint256, uint256);\\n\\n    function initialTimestamp() external returns (uint256);\\n\\n    function registry() external returns (IAccessControl);\\n}\\n\",\"keccak256\":\"0xde4633a310ca360accf8242f7a92f62dbc18480134eb57191589fca337afe163\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury/Treasury.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\n\\nimport {TokenTransfersLibrary} from \\\"../libraries/TokenTransfersLibrary.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport \\\"./TreasuryStorage.sol\\\";\\nimport {BIG_TIMELOCK_ADMIN, MEDIUM_TIMELOCK_ADMIN, SMALL_TIMELOCK_ADMIN, EMERGENCY_ADMIN, NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITreasury, IPausable} from \\\"./ITreasury.sol\\\";\\n\\ncontract Treasury is ITreasury, TreasuryStorage {\\n    using WadRayMath for uint256;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Throws if caller is not granted with _role\\n     * @param _role The role that is being checked for a function caller\\n     */\\n    modifier onlyRole(bytes32 _role) {\\n        _require(registry.hasRole(_role, msg.sender), Errors.FORBIDDEN.selector);\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc ITreasury\\n     */\\n    function initialize(address _registry) external override initializer {\\n        _require(\\n            IERC165Upgradeable(_registry).supportsInterface(type(IAccessControl).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        registry = IAccessControl(_registry);\\n        initialTimestamp = block.timestamp;\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        __ERC165_init();\\n    }\\n\\n    receive() external payable override {}\\n\\n    /**\\n     * @inheritdoc ITreasury\\n     */\\n    function transferFromTreasury(\\n        uint256 _amount,\\n        address _token,\\n        address _receiver\\n    ) external override whenNotPaused nonReentrant {\\n        SpendingInfo storage spender = spenders[msg.sender][_token];\\n        // Check restrictions per transaction\\n        _require(\\n            _amount > 0 &&\\n                _amount <= spender.limits.maxAmountPerTransfer &&\\n                spender.lastWithdrawalTimestamp + spender.limits.minTimeBetweenTransfers <= block.timestamp &&\\n                _amount <= spender.limits.maxTotalAmount,\\n            Errors.TRANSFER_RESTRICTIONS_NOT_MET.selector\\n        );\\n        if (_token == NATIVE_CURRENCY) {\\n            _require(\\n                _amount <= address(this).balance.wmul(spender.limits.maxPercentPerTransfer),\\n                Errors.INSUFFICIENT_NATIVE_TOKEN_BALANCE.selector\\n            );\\n        } else {\\n            _require(\\n                _amount <= IERC20(_token).balanceOf(address(this)).wmul(spender.limits.maxPercentPerTransfer),\\n                Errors.INSUFFICIENT_TOKEN_BALANCE.selector\\n            );\\n        }\\n        // Check restrictions per timeframe\\n        if (\\n            _getTimeframeNumber(block.timestamp, spender) ==\\n            _getTimeframeNumber(spender.lastWithdrawalTimestamp, spender)\\n        ) {\\n            _require(\\n                spender.withdrawnDuringTimeframe + _amount <= spender.limits.maxAmountDuringTimeframe,\\n                Errors.EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME.selector\\n            );\\n            spender.withdrawnDuringTimeframe += _amount;\\n        } else {\\n            _require(\\n                _amount <= spender.limits.maxAmountDuringTimeframe,\\n                Errors.EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME.selector\\n            );\\n            spender.withdrawnDuringTimeframe = _amount;\\n        }\\n\\n        spender.lastWithdrawalTimestamp = block.timestamp;\\n        spender.limits.maxTotalAmount -= _amount;\\n\\n        if (_token == NATIVE_CURRENCY) {\\n            TokenTransfersLibrary.doTransferOutETH(_receiver, _amount);\\n        } else {\\n            TokenTransfersLibrary.doTransferOut(_token, _receiver, _amount);\\n        }\\n        emit TransferFromTreasury(msg.sender, _receiver, _token, _amount);\\n    }\\n\\n    /**\\n     * @inheritdoc ITreasury\\n     */\\n    function setMaxSpendingLimit(\\n        address _spender,\\n        address _token,\\n        SpendingLimits calldata _newSpendingLimits\\n    ) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        _require(\\n            _newSpendingLimits.maxTotalAmount > 0 &&\\n                _newSpendingLimits.maxAmountPerTransfer > 0 &&\\n                _newSpendingLimits.maxPercentPerTransfer > 0 &&\\n                _newSpendingLimits.maxPercentPerTransfer < WadRayMath.WAD &&\\n                _newSpendingLimits.maxAmountDuringTimeframe > 0 &&\\n                _newSpendingLimits.timeframeDuration > 0,\\n            Errors.SPENDING_LIMITS_ARE_INCORRECT.selector\\n        );\\n        SpendingInfo storage spender = spenders[_spender][_token];\\n        spender.isSpenderExist = true;\\n        spender.limits = _newSpendingLimits;\\n        if (spender.lastWithdrawalTimestamp == 0) {\\n            spender.lastWithdrawalTimestamp = initialTimestamp;\\n        }\\n        emit MaxSpendingLimitChanged(_spender, _token, _newSpendingLimits);\\n    }\\n\\n    /**\\n     * @inheritdoc ITreasury\\n     */\\n    function decreaseLimits(\\n        address _spender,\\n        address _token,\\n        SpendingLimits calldata _newSpendingLimits\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        SpendingInfo storage spender = spenders[_spender][_token];\\n        SpendingLimits memory spenderLimits = spender.limits;\\n        _require(spender.isSpenderExist, Errors.SPENDER_IS_NOT_EXIST.selector);\\n        _require(\\n            _newSpendingLimits.maxTotalAmount <= spenderLimits.maxTotalAmount &&\\n                _newSpendingLimits.maxAmountPerTransfer <= spenderLimits.maxAmountPerTransfer &&\\n                _newSpendingLimits.maxPercentPerTransfer <= spenderLimits.maxPercentPerTransfer &&\\n                _newSpendingLimits.minTimeBetweenTransfers >= spenderLimits.minTimeBetweenTransfers &&\\n                _newSpendingLimits.timeframeDuration >= spenderLimits.timeframeDuration &&\\n                _newSpendingLimits.maxAmountDuringTimeframe <= spenderLimits.maxAmountDuringTimeframe,\\n            Errors.EXCEEDED_MAX_SPENDING_LIMITS.selector\\n        );\\n        spender.limits = _newSpendingLimits;\\n        emit MaxSpendingLimitChanged(_spender, _token, _newSpendingLimits);\\n    }\\n\\n    /**\\n     * @inheritdoc IPausable\\n     */\\n    function pause() external override onlyRole(EMERGENCY_ADMIN) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @inheritdoc IPausable\\n     */\\n    function unpause() external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @inheritdoc ITreasury\\n     */\\n    function canTransferByTime(address _spender, address _token) external view override returns (bool) {\\n        SpendingInfo memory spender = spenders[_spender][_token];\\n        _require(spender.isSpenderExist, Errors.SPENDER_IS_NOT_EXIST.selector);\\n        return spender.lastWithdrawalTimestamp + spender.limits.minTimeBetweenTransfers < block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param _interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view override returns (bool) {\\n        return _interfaceId == type(ITreasury).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    function _getTimeframeNumber(uint256 _timestamp, SpendingInfo memory _spender) internal view returns (uint256) {\\n        return ((_timestamp - initialTimestamp) / _spender.limits.timeframeDuration);\\n    }\\n}\\n\",\"keccak256\":\"0xd8266d767f91e430047123e43fac0771f3b2ba6c0b8d098a7bfaa9f3bd6a216f\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury/TreasuryStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {IAccessControl} from \\\"./ITreasuryStorage.sol\\\";\\nimport {ITreasuryStorage} from \\\"./ITreasuryStorage.sol\\\";\\n\\nabstract contract TreasuryStorage is\\n    ITreasuryStorage,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ERC165Upgradeable\\n{\\n    // user=> token => SpendingInfo\\n    mapping(address => mapping(address => SpendingInfo)) public override spenders;\\n    uint256 public override initialTimestamp;\\n    IAccessControl public override registry;\\n}\\n\",\"keccak256\":\"0x495eb30c52dbe73666461c3ec911e5cd1012f85120d14ea5702d28e3c69ce687\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x4b53df7e37eeb7c34aaed6ed236909444a40d5edf62e944f55cf78cbe43948d6\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// Copyright (c) 2016-2023 zOS Global Limited and contributors\\n// SPDX-License-Identifier: MIT\\n\\n// Interface for OpenZeppelin's Pausable contract from https://github.com/OpenZeppelin/openzeppelin-contracts/\\npragma solidity ^0.8.18;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Triggers stopped state.\\n     * This function can only be called by an address with the EMERGENCY_ADMIN role.\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract.\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x12e1f74846ecd309150da9ae8d3e119f39ea1ed32ee0d9db5a7509c6baac94e3\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error DISABLED_TRANSFER_NATIVE_CURRENCY();\\n    error INVALID_AMOUNT();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error DEX_NOT_ACTIVE();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n    error SWAP_DEADLINE_PASSED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n}\\n\",\"keccak256\":\"0xdefed1730079812b35863325fa1451cd220f15f8d26af3cd218e579567a8d65f\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TokenTransfersLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of token transfer logic that allows working with non-standart ERC-20 tokens, added method doTransferFromTo,\\n// modified doTransferIn\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenTransfersLibrary {\\n    function doTransferIn(address token, address from, uint256 amount) public returns (uint256) {\\n        return doTransferFromTo(token, from, address(this), amount);\\n    }\\n\\n    function doTransferFromTo(address token, address from, address to, uint256 amount) public returns (uint256) {\\n        uint256 balanceBefore = IERC20(token).balanceOf(to);\\n        // The returned value is checked in the assembly code below.\\n        // Arbitrary `from` should be checked at a higher level. The library function cannot be called by the user.\\n        // slither-disable-next-line unchecked-transfer arbitrary-send-erc20\\n        EIP20NonStandardInterface(token).transferFrom(from, to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_IN_FAILED.selector);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = IERC20(token).balanceOf(to);\\n        _require(balanceAfter >= balanceBefore, Errors.TOKEN_TRANSFER_IN_OVERFLOW.selector);\\n\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    function doTransferOut(address token, address to, uint256 amount) public {\\n        // The returned value is checked in the assembly code below.\\n        // slither-disable-next-line unchecked-transfer\\n        EIP20NonStandardInterface(token).transfer(to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_OUT_FAILED.selector);\\n    }\\n\\n    function doTransferOutETH(address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        _require(success, Errors.NATIVE_TOKEN_TRANSFER_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x055c6c72633f72ec523e7b74a58549f12e8c92320a6a06ae74503f637cb2ab97\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.18;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0xb0991b2c77df3496e4595618675a4279bd187aa4968bfbcf3be47f80c49280b3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608080604052346100c1576000549060ff8260081c1661006f575060ff80821603610034575b60405161122690816100c78239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c91826301ffc9a714610e83575081633f4ba83a14610d735781635be3ca3814610b6d5781635c975abb14610b49578163697aed1a1461095b57816376aaeb20146108d95781637b103999146108b05781638456cb59146107bf578163c4d66de8146105b6578163d3b247e41461018257508063d6d14171146101645763dde343fd146100b65780610012565b34610160578060031936011261016057610120916100d2610ed6565b826100db610ef1565b9260018060a01b03809316815260c9602052209116600052602052806000209060ff8254169160a061010f60018301610f80565b60086007840154930154938051951515865281516020870152602082015181870152810151606086015260608101516080860152608081015182860152015160c084015260e0830152610100820152f35b5080fd5b503461016057816003193601126101605760209060ca549051908152f35b919050346105b25760603660031901126105b25781356101a0610ef1565b926001600160a01b03604435818116949192908581036105ae576101c26110ce565b60026065541461056b57600260655533885260209360c9855283892097169687895284528288208515158061055d575b80610542575b80610534575b15610524577399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e881490811561049a5761023047600383015490611155565b871161048a575b61024961024382611072565b42611132565b6007820190610262825461025c85611072565b90611132565b03610460576008820180546102778a8261104f565b60068501541061045057906102908a600195949361104f565b90555b429055016102a28782546110c1565b90551561037957825167ffffffffffffffff9185820191838311818410176103645782888c94938580959481958b52525af1903d1561035e573d908111610349578351906102f9601f8201601f1916870183610f48565b815288853d92013e5b1561033b5750907f5e24750571ba267ec3e6fdb479a8d6aaf9e2a6ed458a6d8b5efc63e7125a0f40915b519283523392a4600160655580f35b905163c71509d160e01b8152fd5b604183634e487b7160e01b6000525260246000fd5b50610302565b604185634e487b7160e01b6000525260246000fd5b5073F90aCbeF0eDDdd6854c96137f416a5b7dD67D9049087823b1561044d57606492845193848092636336129b60e11b82528b868301528a60248301528960448301525af48015610443576103f3575b5050907f5e24750571ba267ec3e6fdb479a8d6aaf9e2a6ed458a6d8b5efc63e7125a0f409161032c565b67ffffffffffffffff829893981161043057508652947f5e24750571ba267ec3e6fdb479a8d6aaf9e2a6ed458a6d8b5efc63e7125a0f40386103c9565b634e487b7160e01b835260419052602482fd5b83513d8a823e3d90fd5b80fd5b8751634eb8a6e160e11b81528790fd5b6006820154881161047a5790600191886008830155610293565b8551634eb8a6e160e11b81528590fd5b8451635f8550b160e11b81528490fd5b84516370a0823160e01b8152308582015286816024818d5afa801561051a578b906104e7575b6104d09150600383015490611155565b871115610237578451633c14e2ed60e11b81528490fd5b508681813d8311610513575b6104fd8183610f48565b8101031261050f576104d090516104c0565b8a80fd5b503d6104f3565b86513d8d823e3d90fd5b8351633fe65ba960e01b81528390fd5b5060018101548611156101fe565b506105556007820154848301549061104f565b4210156101f8565b5060028101548611156101f2565b506020606492519162461bcd60e51b8352820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b8780fd5b8280fd5b919050346105b257602090816003193601126107bb576105d4610ed6565b84549360ff8560081c1615918280936107ae575b8015610797575b1561073d5760ff198681166001178855958361072c575b5083516301ffc9a760e01b8152637965db0b60e01b818401526001600160a01b039190911691908581602481865afa9081156107225788916106f5575b50156106e757506bffffffffffffffffffffffff60a01b60cb54161760cb554260ca556106a985549460ff8660081c169061067d82610fef565b61068682610fef565b600160655561069482610fef565b61069d82610fef565b60335416603355610fef565b6106b1578380f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989261ff00191684555160018152a13880808380f35b835163044aa57560e41b8152fd5b6107159150863d881161071b575b61070d8183610f48565b810190610fd7565b38610643565b503d610703565b85513d8a823e3d90fd5b61ffff191661010117875538610606565b835162461bcd60e51b8152808301869052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156105ef5750600160ff8716146105ef565b50600160ff8716106105e8565b8380fd5b9050346105b257826003193601126105b25760cb548251632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb8382015233602482015290602090829060449082906001600160a01b03165afa9081156108a3578491610885575b5015610877575060207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916108626110ce565b600160ff19603354161760335551338152a180f35b905163036be76f60e61b8152fd5b61089d915060203d811161071b5761070d8183610f48565b3861082f565b50505051903d90823e3d90fd5b50503461016057816003193601126101605760cb5490516001600160a01b039091168152602090f35b82843461044d578160031936011261044d5781610924916108f8610ed6565b610900610ef1565b6001600160a01b03918216835260c960209081528484209290911683525220611072565b9182511561094d575080820151602092830151606001516109449161104f565b90519042118152f35b9051631d155e5b60e11b8152fd5b9050346105b25761096b36610f07565b9160018060a09693961b03938460cb541683518091632474521560e21b8252898483015233602483015281604460209485935afa908115610b3f578991610b22575b5015610b135784359283151580610b07575b80610afb575b80610ae7575b80610ada575b80610acd575b15610abd5792610aac9492600792887f1d31acb9e47221445ed64ea1c635885c920508b65e8f6d687c24d33051072ff698961698898c5260c98252858c209a16998a8c528152848b2092600160ff19855416178455600184015585013560028301558385013560038301556060850135908201556080840135600582015560a0840135600682015501805415610ab2575b50519182918291909160a08060c083019480358452602081013560208501526040810135604085015260608101356060850152608081013560808501520135910152565b0390a380f35b60ca54905538610a68565b845163c1adf75560e01b81528390fd5b50608086013515156109d7565b5060a086013515156109d1565b50670de0b6b3a764000085870135106109cb565b508486013515156109c5565b508186013515156109bf565b50825163036be76f60e61b8152fd5b610b399150823d841161071b5761070d8183610f48565b386109ad565b85513d8b823e3d90fd5b50503461016057816003193601126101605760209060ff6033541690519015158152f35b9050346105b257610b7d36610f07565b60cb548551632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d88187015233602482015292956001600160a01b039592949093602093928490829060449082908b165afa908115610b3f578991610d56575b5015610b135785169485885260c9835283882096169586885282528287209160018301610c1181610f80565b9060ff85541615610d465786359180518311159081610d35575b81610d24575b81610d10575b81610cfc575b81610ce9575b5015610cda575584013560028301558383013560038301556060808501359183018290556080808601356005850181905560a080880135600690960186905595518735815260208089013590820152604097880135978101979097529186019290925290840152908201527f1d31acb9e47221445ed64ea1c635885c920508b65e8f6d687c24d33051072ff6908060c08101610aac565b855162ef52a760e51b81528490fd5b60a09150015160a0880135111538610c43565b905060808101516080890135101590610c3d565b905060608101516060890135101590610c37565b878101518989013511159150610c31565b848101518986013511159150610c2b565b8551631d155e5b60e11b81528490fd5b610d6d9150843d861161071b5761070d8183610f48565b38610be5565b9050346105b257826003193601126105b25760cb548251632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d88382015233602482015290602090829060449082906001600160a01b03165afa9081156108a3578491610e65575b5015610877576033549060ff821615610e2b575060ff1916603355513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b606490602084519162461bcd60e51b8352820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152fd5b610e7d915060203d811161071b5761070d8183610f48565b38610de3565b8491346105b25760203660031901126105b2573563ffffffff60e01b81168091036105b257602092506329abf30760e11b8114908115610ec5575b5015158152f35b6301ffc9a760e01b14905083610ebe565b600435906001600160a01b0382168203610eec57565b600080fd5b602435906001600160a01b0382168203610eec57565b610100600319820112610eec576001600160a01b03916004358381168103610eec57926024359081168103610eec5760c090926043190112610eec57604490565b90601f8019910116810190811067ffffffffffffffff821117610f6a57604052565b634e487b7160e01b600052604160045260246000fd5b9060405160c0810181811067ffffffffffffffff821117610f6a5760405260a06005829480548452600181015460208501526002810154604085015260038101546060850152600481015460808501520154910152565b90816020910312610eec57518015158103610eec5790565b15610ff657565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b9190820180921161105c57565b634e487b7160e01b600052601160045260246000fd5b906040516080810181811067ffffffffffffffff821117610f6a5760405260606008829460ff815416151584526110ab60018201610f80565b6020850152600781015460408501520154910152565b9190820391821161105c57565b60ff603354166110da57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b811561111c570490565b634e487b7160e01b600052601260045260246000fd5b90608060206111476111529460ca54906110c1565b920151015190611112565b90565b9060009181159182156111b5575b5050156111a3576706f05b59d3b2000081019081811161105c57811061119157670de0b6b3a7640000900490565b604051630a77254f60e01b8152600490fd5b604051631550e8b760e01b8152600490fd5b818192935002928284048214831517156111dc57506111d49083611112565b143880611163565b634e487b7160e01b81526011600452602490fdfea2646970667358221220cd74ed37b1a857d8fe63f14a5d363ffe7559313f3e455420946d93cbba9336d764736f6c63430008120033",
  "deployedBytecode": "0x6080604081815260049182361015610022575b505050361561002057600080fd5b005b600092833560e01c91826301ffc9a714610e83575081633f4ba83a14610d735781635be3ca3814610b6d5781635c975abb14610b49578163697aed1a1461095b57816376aaeb20146108d95781637b103999146108b05781638456cb59146107bf578163c4d66de8146105b6578163d3b247e41461018257508063d6d14171146101645763dde343fd146100b65780610012565b34610160578060031936011261016057610120916100d2610ed6565b826100db610ef1565b9260018060a01b03809316815260c9602052209116600052602052806000209060ff8254169160a061010f60018301610f80565b60086007840154930154938051951515865281516020870152602082015181870152810151606086015260608101516080860152608081015182860152015160c084015260e0830152610100820152f35b5080fd5b503461016057816003193601126101605760209060ca549051908152f35b919050346105b25760603660031901126105b25781356101a0610ef1565b926001600160a01b03604435818116949192908581036105ae576101c26110ce565b60026065541461056b57600260655533885260209360c9855283892097169687895284528288208515158061055d575b80610542575b80610534575b15610524577399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9e881490811561049a5761023047600383015490611155565b871161048a575b61024961024382611072565b42611132565b6007820190610262825461025c85611072565b90611132565b03610460576008820180546102778a8261104f565b60068501541061045057906102908a600195949361104f565b90555b429055016102a28782546110c1565b90551561037957825167ffffffffffffffff9185820191838311818410176103645782888c94938580959481958b52525af1903d1561035e573d908111610349578351906102f9601f8201601f1916870183610f48565b815288853d92013e5b1561033b5750907f5e24750571ba267ec3e6fdb479a8d6aaf9e2a6ed458a6d8b5efc63e7125a0f40915b519283523392a4600160655580f35b905163c71509d160e01b8152fd5b604183634e487b7160e01b6000525260246000fd5b50610302565b604185634e487b7160e01b6000525260246000fd5b5073__$183737d697d7aa9b5df9988cbe11bc4947$__9087823b1561044d57606492845193848092636336129b60e11b82528b868301528a60248301528960448301525af48015610443576103f3575b5050907f5e24750571ba267ec3e6fdb479a8d6aaf9e2a6ed458a6d8b5efc63e7125a0f409161032c565b67ffffffffffffffff829893981161043057508652947f5e24750571ba267ec3e6fdb479a8d6aaf9e2a6ed458a6d8b5efc63e7125a0f40386103c9565b634e487b7160e01b835260419052602482fd5b83513d8a823e3d90fd5b80fd5b8751634eb8a6e160e11b81528790fd5b6006820154881161047a5790600191886008830155610293565b8551634eb8a6e160e11b81528590fd5b8451635f8550b160e11b81528490fd5b84516370a0823160e01b8152308582015286816024818d5afa801561051a578b906104e7575b6104d09150600383015490611155565b871115610237578451633c14e2ed60e11b81528490fd5b508681813d8311610513575b6104fd8183610f48565b8101031261050f576104d090516104c0565b8a80fd5b503d6104f3565b86513d8d823e3d90fd5b8351633fe65ba960e01b81528390fd5b5060018101548611156101fe565b506105556007820154848301549061104f565b4210156101f8565b5060028101548611156101f2565b506020606492519162461bcd60e51b8352820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b8780fd5b8280fd5b919050346105b257602090816003193601126107bb576105d4610ed6565b84549360ff8560081c1615918280936107ae575b8015610797575b1561073d5760ff198681166001178855958361072c575b5083516301ffc9a760e01b8152637965db0b60e01b818401526001600160a01b039190911691908581602481865afa9081156107225788916106f5575b50156106e757506bffffffffffffffffffffffff60a01b60cb54161760cb554260ca556106a985549460ff8660081c169061067d82610fef565b61068682610fef565b600160655561069482610fef565b61069d82610fef565b60335416603355610fef565b6106b1578380f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989261ff00191684555160018152a13880808380f35b835163044aa57560e41b8152fd5b6107159150863d881161071b575b61070d8183610f48565b810190610fd7565b38610643565b503d610703565b85513d8a823e3d90fd5b61ffff191661010117875538610606565b835162461bcd60e51b8152808301869052602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156105ef5750600160ff8716146105ef565b50600160ff8716106105e8565b8380fd5b9050346105b257826003193601126105b25760cb548251632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb8382015233602482015290602090829060449082906001600160a01b03165afa9081156108a3578491610885575b5015610877575060207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916108626110ce565b600160ff19603354161760335551338152a180f35b905163036be76f60e61b8152fd5b61089d915060203d811161071b5761070d8183610f48565b3861082f565b50505051903d90823e3d90fd5b50503461016057816003193601126101605760cb5490516001600160a01b039091168152602090f35b82843461044d578160031936011261044d5781610924916108f8610ed6565b610900610ef1565b6001600160a01b03918216835260c960209081528484209290911683525220611072565b9182511561094d575080820151602092830151606001516109449161104f565b90519042118152f35b9051631d155e5b60e11b8152fd5b9050346105b25761096b36610f07565b9160018060a09693961b03938460cb541683518091632474521560e21b8252898483015233602483015281604460209485935afa908115610b3f578991610b22575b5015610b135784359283151580610b07575b80610afb575b80610ae7575b80610ada575b80610acd575b15610abd5792610aac9492600792887f1d31acb9e47221445ed64ea1c635885c920508b65e8f6d687c24d33051072ff698961698898c5260c98252858c209a16998a8c528152848b2092600160ff19855416178455600184015585013560028301558385013560038301556060850135908201556080840135600582015560a0840135600682015501805415610ab2575b50519182918291909160a08060c083019480358452602081013560208501526040810135604085015260608101356060850152608081013560808501520135910152565b0390a380f35b60ca54905538610a68565b845163c1adf75560e01b81528390fd5b50608086013515156109d7565b5060a086013515156109d1565b50670de0b6b3a764000085870135106109cb565b508486013515156109c5565b508186013515156109bf565b50825163036be76f60e61b8152fd5b610b399150823d841161071b5761070d8183610f48565b386109ad565b85513d8b823e3d90fd5b50503461016057816003193601126101605760209060ff6033541690519015158152f35b9050346105b257610b7d36610f07565b60cb548551632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d88187015233602482015292956001600160a01b039592949093602093928490829060449082908b165afa908115610b3f578991610d56575b5015610b135785169485885260c9835283882096169586885282528287209160018301610c1181610f80565b9060ff85541615610d465786359180518311159081610d35575b81610d24575b81610d10575b81610cfc575b81610ce9575b5015610cda575584013560028301558383013560038301556060808501359183018290556080808601356005850181905560a080880135600690960186905595518735815260208089013590820152604097880135978101979097529186019290925290840152908201527f1d31acb9e47221445ed64ea1c635885c920508b65e8f6d687c24d33051072ff6908060c08101610aac565b855162ef52a760e51b81528490fd5b60a09150015160a0880135111538610c43565b905060808101516080890135101590610c3d565b905060608101516060890135101590610c37565b878101518989013511159150610c31565b848101518986013511159150610c2b565b8551631d155e5b60e11b81528490fd5b610d6d9150843d861161071b5761070d8183610f48565b38610be5565b9050346105b257826003193601126105b25760cb548251632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d88382015233602482015290602090829060449082906001600160a01b03165afa9081156108a3578491610e65575b5015610877576033549060ff821615610e2b575060ff1916603355513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b606490602084519162461bcd60e51b8352820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152fd5b610e7d915060203d811161071b5761070d8183610f48565b38610de3565b8491346105b25760203660031901126105b2573563ffffffff60e01b81168091036105b257602092506329abf30760e11b8114908115610ec5575b5015158152f35b6301ffc9a760e01b14905083610ebe565b600435906001600160a01b0382168203610eec57565b600080fd5b602435906001600160a01b0382168203610eec57565b610100600319820112610eec576001600160a01b03916004358381168103610eec57926024359081168103610eec5760c090926043190112610eec57604490565b90601f8019910116810190811067ffffffffffffffff821117610f6a57604052565b634e487b7160e01b600052604160045260246000fd5b9060405160c0810181811067ffffffffffffffff821117610f6a5760405260a06005829480548452600181015460208501526002810154604085015260038101546060850152600481015460808501520154910152565b90816020910312610eec57518015158103610eec5790565b15610ff657565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b9190820180921161105c57565b634e487b7160e01b600052601160045260246000fd5b906040516080810181811067ffffffffffffffff821117610f6a5760405260606008829460ff815416151584526110ab60018201610f80565b6020850152600781015460408501520154910152565b9190820391821161105c57565b60ff603354166110da57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b811561111c570490565b634e487b7160e01b600052601260045260246000fd5b90608060206111476111529460ca54906110c1565b920151015190611112565b90565b9060009181159182156111b5575b5050156111a3576706f05b59d3b2000081019081811161105c57811061119157670de0b6b3a7640000900490565b604051630a77254f60e01b8152600490fd5b604051631550e8b760e01b8152600490fd5b818192935002928284048214831517156111dc57506111d49083611112565b143880611163565b634e487b7160e01b81526011600452602490fdfea2646970667358221220cd74ed37b1a857d8fe63f14a5d363ffe7559313f3e455420946d93cbba9336d764736f6c63430008120033",
  "libraries": {
    "TokenTransfersLibrary": "0xF90aCbeF0eDDdd6854c96137f416a5b7dD67D904",
    "Errors": "0xB959663e3FAb840C9bfebC6d2d32822D25317292"
  },
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "canTransferByTime(address,address)": {
        "params": {
          "spender": "The address of the spender to check for.",
          "token": "The address of the token for which to check the time restrictions."
        },
        "returns": {
          "_0": "A boolean indicating whether the spender can transfer tokens based on the minimum time between transfers."
        }
      },
      "decreaseLimits(address,address,(uint256,uint256,uint256,uint256,uint256,uint256))": {
        "details": "This function can only be called by an address with the BIG_TIMELOCK_ADMIN or EMERGENCY_ADMIN role.",
        "params": {
          "newSpendingLimits": "The new spending limits and restrictions to set for the spender and token.",
          "spender": "The address of the spender for whom to decrease the maximum transfer amounts and total amount.",
          "token": "The address of the token for which to decrease the maximum transfer amounts and total amount."
        }
      },
      "initialize(address)": {
        "details": "contract initializer",
        "params": {
          "registry": "The address of Registry contract"
        }
      },
      "pause()": {
        "details": "Triggers stopped state. This function can only be called by an address with the EMERGENCY_ADMIN role. Requirements: - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setMaxSpendingLimit(address,address,(uint256,uint256,uint256,uint256,uint256,uint256))": {
        "details": "This function can only be called by an address with the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "newSpendingLimits": "The new spending limits and restrictions to set for the spender and token.",
          "spender": "The address of the spender for whom to set the new spending limit.",
          "token": "The address of the token for which to set the new spending limit."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The interface id to check"
        }
      },
      "transferFromTreasury(uint256,address,address)": {
        "details": "The function checks the spender's transfer restrictions per transaction and per timeframe.",
        "params": {
          "amount": "The amount of tokens to transfer.",
          "receiver": "The address of the receiver",
          "token": "The address of the token to transfer. Use the address NATIVE_TOKEN_ADDRESS for native token."
        }
      },
      "unpause()": {
        "details": "Returns to normal state. This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract. Requirements: - The contract must be paused."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canTransferByTime(address,address)": {
        "notice": "Checks whether a spender can transfer tokens based on the minimum time between transfers imposed by the spending restrictions."
      },
      "decreaseLimits(address,address,(uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Decreases Spending limits for a spender for a specific token."
      },
      "setMaxSpendingLimit(address,address,(uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Sets the maximum spending limit and other restrictions for a given spender and token."
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      },
      "transferFromTreasury(uint256,address,address)": {
        "notice": "Transfers an amount of ERC20 or native token from the contract treasury to  a receiver address, subject to certain restrictions imposed by the spender."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2890,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2893,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5867,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3073,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 3178,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3193,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 3262,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6506,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 54146,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "spenders",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(SpendingInfo)53488_storage))"
      },
      {
        "astId": 54149,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "initialTimestamp",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 54153,
        "contract": "contracts/Treasury/Treasury.sol:Treasury",
        "label": "registry",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IAccessControl)7879"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControl)7879": {
        "encoding": "inplace",
        "label": "contract IAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(SpendingInfo)53488_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ITreasuryStorage.SpendingInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(SpendingInfo)53488_storage)"
      },
      "t_mapping(t_address,t_struct(SpendingInfo)53488_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ITreasuryStorage.SpendingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SpendingInfo)53488_storage"
      },
      "t_struct(SpendingInfo)53488_storage": {
        "encoding": "inplace",
        "label": "struct ITreasuryStorage.SpendingInfo",
        "members": [
          {
            "astId": 53480,
            "contract": "contracts/Treasury/Treasury.sol:Treasury",
            "label": "isSpenderExist",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 53483,
            "contract": "contracts/Treasury/Treasury.sol:Treasury",
            "label": "limits",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(SpendingLimits)53478_storage"
          },
          {
            "astId": 53485,
            "contract": "contracts/Treasury/Treasury.sol:Treasury",
            "label": "lastWithdrawalTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 53487,
            "contract": "contracts/Treasury/Treasury.sol:Treasury",
            "label": "withdrawnDuringTimeframe",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(SpendingLimits)53478_storage": {
        "encoding": "inplace",
        "label": "struct ITreasuryStorage.SpendingLimits",
        "members": [
          {
            "astId": 53467,
            "contract": "contracts/Treasury/Treasury.sol:Treasury",
            "label": "maxTotalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 53469,
            "contract": "contracts/Treasury/Treasury.sol:Treasury",
            "label": "maxAmountPerTransfer",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 53471,
            "contract": "contracts/Treasury/Treasury.sol:Treasury",
            "label": "maxPercentPerTransfer",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 53473,
            "contract": "contracts/Treasury/Treasury.sol:Treasury",
            "label": "minTimeBetweenTransfers",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 53475,
            "contract": "contracts/Treasury/Treasury.sol:Treasury",
            "label": "timeframeDuration",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 53477,
            "contract": "contracts/Treasury/Treasury.sol:Treasury",
            "label": "maxAmountDuringTimeframe",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}