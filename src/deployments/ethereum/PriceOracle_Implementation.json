{
  "address": "0xd43052E7A4FE8bC7EC2bD83ACef15118311DCfff",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "uniswapV2Token",
          "type": "address"
        }
      ],
      "name": "AddUniswapV2LPToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "ChainlinkPriceFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum IPriceOracleStorageV4.CurveOracleKind",
          "name": "oracleType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "CurveOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "underlyingAsset",
          "type": "address"
        }
      ],
      "name": "EIP4626TokenToUnderlyingAssetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "GasPriceFeedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "OrallySymbolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeTolerance",
          "type": "uint256"
        }
      ],
      "name": "OrallyTimeToleranceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairPriceDrop",
          "type": "uint256"
        }
      ],
      "name": "PairPriceDropChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceDropFeed",
          "type": "address"
        }
      ],
      "name": "PriceDropFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "priceFeedId",
          "type": "bytes32"
        }
      ],
      "name": "PythPairIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "uniswapV2Token",
          "type": "address"
        }
      ],
      "name": "RemoveUniswapV2LPToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "pairId",
          "type": "string"
        }
      ],
      "name": "StorkPairIdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "SupraDataFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeTolerance",
          "type": "uint256"
        }
      ],
      "name": "TimeToleranceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oracleType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "Univ3OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oracleType",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isTrusted",
          "type": "bool"
        }
      ],
      "name": "Univ3TrustedPairUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_lpTokens",
          "type": "address[]"
        }
      ],
      "name": "addUniswapV2LPTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "chainlinkPriceFeedsUsd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IPriceOracleStorageV4.CurveOracleKind",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "curveTypeOracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "eip4626TokenToUnderlyingAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "oracleData",
          "type": "bytes"
        }
      ],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        }
      ],
      "name": "getOraclePriceDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        }
      ],
      "name": "getOraclePriceDropFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetB",
          "type": "address"
        }
      ],
      "name": "getPairPriceDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceDrop",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairPriceDrop",
          "type": "uint256"
        }
      ],
      "name": "increasePairPriceDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isUniswapV2LP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orallyOracle",
      "outputs": [
        {
          "internalType": "contract IOrallyVerifierOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "orallySymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orallyTimeTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairPriceDrops",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pythPairIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_lpTokens",
          "type": "address[]"
        }
      ],
      "name": "removeUniswapV2LPTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "setGasPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_orally",
          "type": "address"
        }
      ],
      "name": "setOrallyOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orallyTimeTolerance",
          "type": "uint256"
        }
      ],
      "name": "setOrallyTimeTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairPriceDrop",
          "type": "uint256"
        }
      ],
      "name": "setPairPriceDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pyth",
          "type": "address"
        }
      ],
      "name": "setPyth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storkPublicKey",
          "type": "address"
        }
      ],
      "name": "setStorkPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_storkVerify",
          "type": "address"
        }
      ],
      "name": "setStorkVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_supraPullOracle",
          "type": "address"
        }
      ],
      "name": "setSupraPullOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_supraStorageOracle",
          "type": "address"
        }
      ],
      "name": "setSupraStorageOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeTolerance",
          "type": "uint256"
        }
      ],
      "name": "setTimeTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        }
      ],
      "name": "setUSDT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapV2LPOracle",
          "type": "address"
        }
      ],
      "name": "setUniswapV2LPOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "storkAssetPairId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storkPublicKey",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storkVerify",
      "outputs": [
        {
          "internalType": "contract IStorkVerify",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supraDataFeedID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "initialize",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supraPullOracle",
      "outputs": [
        {
          "internalType": "contract ISupraOraclePull",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supraStorageOracle",
      "outputs": [
        {
          "internalType": "contract ISupraSValueFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2LPOracle",
      "outputs": [
        {
          "internalType": "contract IUniswapV2LPOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "univ3TrustedPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "univ3TypeOracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_feeds",
          "type": "address[]"
        }
      ],
      "name": "updateChainlinkPriceFeedsUsd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IPriceOracleStorageV4.CurveOracleKind[]",
          "name": "_oracleTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        }
      ],
      "name": "updateCurveTypeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rebaseTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_underlyingAssets",
          "type": "address[]"
        }
      ],
      "name": "updateEIP4626TokenToUnderlyingAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address[2]",
              "name": "tokens",
              "type": "address[2]"
            }
          ],
          "internalType": "struct IPriceOracleV3.UpdateOrallySymbolsParams[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "updateOrallySymbols",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetB",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceDropFeed",
          "type": "address"
        }
      ],
      "name": "updatePriceDropFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetB",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceDropFeed",
              "type": "address"
            }
          ],
          "internalType": "struct IPriceOracleV2.UpdatePriceDropFeedsParams[]",
          "name": "_updateParams",
          "type": "tuple[]"
        }
      ],
      "name": "updatePriceDropFeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[][]",
          "name": "_data",
          "type": "bytes[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_oracleTypes",
          "type": "uint256[]"
        }
      ],
      "name": "updatePullOracle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_priceFeedIds",
          "type": "bytes32[]"
        }
      ],
      "name": "updatePythPairId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "pair",
              "type": "string"
            },
            {
              "internalType": "address[2]",
              "name": "tokens",
              "type": "address[2]"
            }
          ],
          "internalType": "struct IPriceOracleV3.UpdateStorkPairIdsParams[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "updateStorkPairIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "initialize",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPriceOracleStorageV3.SupraDataFeedId",
              "name": "feedData",
              "type": "tuple"
            }
          ],
          "internalType": "struct IPriceOracleV2.UpdateSupraDataFeedParams[]",
          "name": "_params",
          "type": "tuple[]"
        }
      ],
      "name": "updateSupraDataFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "oracleType",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isTrusted",
              "type": "bool"
            }
          ],
          "internalType": "struct IPriceOracleV2.UpdateUniv3TrustedPairParams[]",
          "name": "_updateParams",
          "type": "tuple[]"
        }
      ],
      "name": "updateUniv3TrustedPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_oracleTypes",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        }
      ],
      "name": "updateUniv3TypeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa054928254216c926dea0ba965708d728c0ad66747d6ce4969e3d55f8006a190",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0xd43052E7A4FE8bC7EC2bD83ACef15118311DCfff",
    "transactionIndex": 144,
    "gasUsed": "4491001",
    "logsBloom": "0x
    "blockHash": "0x74ad5863303f4360f70e526ebea4edee38a54a588e049fda276fb019565ba021",
    "transactionHash": "0xa054928254216c926dea0ba965708d728c0ad66747d6ce4969e3d55f8006a190",
    "logs": [
      {
        "transactionIndex": 144,
        "blockNumber": 21361135,
        "transactionHash": "0xa054928254216c926dea0ba965708d728c0ad66747d6ce4969e3d55f8006a190",
        "address": "0xd43052E7A4FE8bC7EC2bD83ACef15118311DCfff",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 391,
        "blockHash": "0x74ad5863303f4360f70e526ebea4edee38a54a588e049fda276fb019565ba021"
      }
    ],
    "blockNumber": 21361135,
    "cumulativeGasUsed": "17336242",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "b9821e6aa5ae8bcd6a583375e546781d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uniswapV2Token\",\"type\":\"address\"}],\"name\":\"AddUniswapV2LPToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"ChainlinkPriceFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum IPriceOracleStorageV4.CurveOracleKind\",\"name\":\"oracleType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"CurveOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"}],\"name\":\"EIP4626TokenToUnderlyingAssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"GasPriceFeedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"OrallySymbolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeTolerance\",\"type\":\"uint256\"}],\"name\":\"OrallyTimeToleranceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"}],\"name\":\"PairPriceDropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceDropFeed\",\"type\":\"address\"}],\"name\":\"PriceDropFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"priceFeedId\",\"type\":\"bytes32\"}],\"name\":\"PythPairIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uniswapV2Token\",\"type\":\"address\"}],\"name\":\"RemoveUniswapV2LPToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pairId\",\"type\":\"string\"}],\"name\":\"StorkPairIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SupraDataFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeTolerance\",\"type\":\"uint256\"}],\"name\":\"TimeToleranceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"Univ3OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"name\":\"Univ3TrustedPairUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"}],\"name\":\"addUniswapV2LPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chainlinkPriceFeedsUsd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPriceOracleStorageV4.CurveOracleKind\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"curveTypeOracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eip4626TokenToUnderlyingAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oracleData\",\"type\":\"bytes\"}],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"}],\"name\":\"getOraclePriceDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"}],\"name\":\"getOraclePriceDropFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetB\",\"type\":\"address\"}],\"name\":\"getPairPriceDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceDrop\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairPriceDrop\",\"type\":\"uint256\"}],\"name\":\"increasePairPriceDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUniswapV2LP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orallyOracle\",\"outputs\":[{\"internalType\":\"contract IOrallyVerifierOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orallySymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orallyTimeTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairPriceDrops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pythPairIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpTokens\",\"type\":\"address[]\"}],\"name\":\"removeUniswapV2LPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"setGasPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orally\",\"type\":\"address\"}],\"name\":\"setOrallyOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orallyTimeTolerance\",\"type\":\"uint256\"}],\"name\":\"setOrallyTimeTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairPriceDrop\",\"type\":\"uint256\"}],\"name\":\"setPairPriceDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pyth\",\"type\":\"address\"}],\"name\":\"setPyth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storkPublicKey\",\"type\":\"address\"}],\"name\":\"setStorkPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storkVerify\",\"type\":\"address\"}],\"name\":\"setStorkVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supraPullOracle\",\"type\":\"address\"}],\"name\":\"setSupraPullOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supraStorageOracle\",\"type\":\"address\"}],\"name\":\"setSupraStorageOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeTolerance\",\"type\":\"uint256\"}],\"name\":\"setTimeTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2LPOracle\",\"type\":\"address\"}],\"name\":\"setUniswapV2LPOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"storkAssetPairId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storkPublicKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storkVerify\",\"outputs\":[{\"internalType\":\"contract IStorkVerify\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supraDataFeedID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialize\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supraPullOracle\",\"outputs\":[{\"internalType\":\"contract ISupraOraclePull\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supraStorageOracle\",\"outputs\":[{\"internalType\":\"contract ISupraSValueFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2LPOracle\",\"outputs\":[{\"internalType\":\"contract IUniswapV2LPOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"univ3TrustedPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"univ3TypeOracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_feeds\",\"type\":\"address[]\"}],\"name\":\"updateChainlinkPriceFeedsUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPriceOracleStorageV4.CurveOracleKind[]\",\"name\":\"_oracleTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"}],\"name\":\"updateCurveTypeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rebaseTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyingAssets\",\"type\":\"address[]\"}],\"name\":\"updateEIP4626TokenToUnderlyingAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"tokens\",\"type\":\"address[2]\"}],\"internalType\":\"struct IPriceOracleV3.UpdateOrallySymbolsParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"updateOrallySymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceDropFeed\",\"type\":\"address\"}],\"name\":\"updatePriceDropFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceDropFeed\",\"type\":\"address\"}],\"internalType\":\"struct IPriceOracleV2.UpdatePriceDropFeedsParams[]\",\"name\":\"_updateParams\",\"type\":\"tuple[]\"}],\"name\":\"updatePriceDropFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[][]\",\"name\":\"_data\",\"type\":\"bytes[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_oracleTypes\",\"type\":\"uint256[]\"}],\"name\":\"updatePullOracle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_priceFeedIds\",\"type\":\"bytes32[]\"}],\"name\":\"updatePythPairId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"pair\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"tokens\",\"type\":\"address[2]\"}],\"internalType\":\"struct IPriceOracleV3.UpdateStorkPairIdsParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"updateStorkPairIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialize\",\"type\":\"bool\"}],\"internalType\":\"struct IPriceOracleStorageV3.SupraDataFeedId\",\"name\":\"feedData\",\"type\":\"tuple\"}],\"internalType\":\"struct IPriceOracleV2.UpdateSupraDataFeedParams[]\",\"name\":\"_params\",\"type\":\"tuple[]\"}],\"name\":\"updateSupraDataFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"internalType\":\"struct IPriceOracleV2.UpdateUniv3TrustedPairParams[]\",\"name\":\"_updateParams\",\"type\":\"tuple[]\"}],\"name\":\"updateUniv3TrustedPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_oracleTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"}],\"name\":\"updateUniv3TypeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"addUniswapV2LPTokens(address[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_lpTokens\":\"the addresses of lp tokens\"}},\"getExchangeRate(address,address,bytes)\":{\"params\":{\"assetA\":\"The address of the first asset in the pair.\",\"assetB\":\"The address of the second asset in the pair.\",\"oracleData\":\"The list of oracles to use for price calculations\"},\"returns\":{\"_0\":\"exchangeRate for assetA/assetB in 10**18 decimality\"}},\"getGasPrice()\":{\"returns\":{\"price\":\"The current gas price.\"}},\"getOraclePriceDrop(address,address)\":{\"params\":{\"assetA\":\"The address of the first asset.\",\"assetB\":\"The address of the second asset.\"},\"returns\":{\"_0\":\"The priceDrop rate as a uint256 value.\"}},\"getOraclePriceDropFeed(address,address)\":{\"params\":{\"assetA\":\"The address of the first asset in the pair.\",\"assetB\":\"The address of the second asset in the pair.\"},\"returns\":{\"_0\":\"priceDropFeed The address of the priceDrop feed associated with the asset pair.\"}},\"getPairPriceDrop(address,address)\":{\"params\":{\"_assetA\":\"The address of asset A.\",\"_assetB\":\"The address of asset B.\"},\"returns\":{\"priceDrop\":\"The priceDrop rate.\"}},\"increasePairPriceDrop(address,address,uint256)\":{\"details\":\"Only callable by the EMERGENCY_ADMIN role. The _pairPriceDrop value must be greater than the current priceDrop value for the pair and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\",\"params\":{\"_assetA\":\"The address of position asset\",\"_assetB\":\"The address of borrowed asset\",\"_pairPriceDrop\":\"The new priceDrop value for the pair (in wad)\"}},\"initialize(address,address,address,address)\":{\"params\":{\"_eth\":\"Weth address if eth isn't native token of network. Otherwise set to zero address.\",\"_registry\":\"The address of PrimexRegistry contract\",\"_treasury\":\"Address of the Treasury\",\"_usdt\":\"Address of the USDT token\"}},\"removeUniswapV2LPTokens(address[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_lpTokens\":\"the addresses of lp tokens\"}},\"setGasPriceFeed(address)\":{\"details\":\"Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"priceFeed\":\"The address of the gas price feed contract.\"}},\"setOrallyOracle(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_orally\":\"the address of the Orally oracle\"}},\"setOrallyTimeTolerance(uint256)\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_orallyTimeTolerance\":\"Time tolerance in seconds\"}},\"setPairPriceDrop(address,address,uint256)\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN.\",\"params\":{\"_assetA\":\"The address of position asset\",\"_assetB\":\"The address of borrowed asset\",\"_pairPriceDrop\":\"The pair priceDrop (in wad)\"}},\"setPyth(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_pyth\":\"the address of the Pyth oracle\"}},\"setStorkPublicKey(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_storkPublicKey\":\"the Stork public key address\"}},\"setStorkVerify(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_storkVerify\":\"the Stork verify address\"}},\"setSupraPullOracle(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_supraPullOracle\":\"the address of the Supra pull oracle\"}},\"setSupraStorageOracle(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_supraStorageOracle\":\"the address of the Supra storage\"}},\"setTimeTolerance(uint256)\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_timeTolerance\":\"Time tolerance in seconds\"}},\"setTreasury(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_treasury\":\"the address of the treasury\"}},\"setUSDT(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_usdt\":\"the address of the USDT\"}},\"setUniswapV2LPOracle(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_uniswapV2LPOracle\":\"the UniswapV2LP oracle address\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The interface id to check\"}},\"updateChainlinkPriceFeedsUsd(address[],address[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_feeds\":\"Array of price feeds.\",\"_tokens\":\"Array of token addresses.\"}},\"updateOrallySymbols((string,address[2])[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"params\":\"Array of UpdateOrallySymbolsParams struct\"}},\"updatePriceDropFeed(address,address,address)\":{\"details\":\"Add or update priceDrop feed for assets pair. Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"assetA\":\"The address of the first asset in the pair.\",\"assetB\":\"The address of the second asset in the pair.\",\"priceDropFeed\":\"The chain link priceDrop feed address for the pair assetA/assetB\"}},\"updatePriceDropFeeds((address,address,address)[])\":{\"details\":\"Add or update priceDrop feed for assets pair. Only callable by the MEDIUM_TIMELOCK_ADMIN role.\",\"params\":{\"_updateParams\":\"The array of the UpdatePriceDropFeedsParams structs\"}},\"updatePullOracle(bytes[][],uint256[])\":{\"params\":{\"_data\":\"An array of update data for passed oracles\",\"_pullOracleTypes\":\"An array of oracle types  (Must conform to the UpdatePullOracle struct)\"}},\"updatePythPairId(address[],bytes32[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_priceFeedIds\":\"Array of pair ids.\",\"_tokens\":\"Array of token addresses.\"}},\"updateStorkPairIds((string,address[2])[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"params\":\"Array of UpdateStorkPairIdsParams struct\"}},\"updateSupraDataFeed((address,address,(uint256,bool))[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_params\":\"Array of token pairs and Supra ids.\"}},\"updateUniv3TrustedPair((uint256,address,address,bool)[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_updateParams\":\"Array of token pairs, their DEXs and new trusted status.\"}},\"updateUniv3TypeOracle(uint256[],address[])\":{\"details\":\"Only callable by the SMALL_TIMELOCK_ADMIN role.\",\"params\":{\"_oracleTypes\":\"Array of ids of TWAP contracts.\",\"_oracles\":\"Array of TWAP contract addresses.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addUniswapV2LPTokens(address[])\":{\"notice\":\"Sets the flag to true for the passed tokens\"},\"getExchangeRate(address,address,bytes)\":{\"notice\":\"Calculates exchange rate of one token to another according to the specific oracle route\"},\"getGasPrice()\":{\"notice\":\"Retrieves the current gas price from the specified gas price feed.\"},\"getOraclePriceDrop(address,address)\":{\"notice\":\"Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\"},\"getOraclePriceDropFeed(address,address)\":{\"notice\":\"Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\"},\"getPairPriceDrop(address,address)\":{\"notice\":\"For a given asset pair retrieves the priceDrop rate which is the higher of the oracle pair priceDrop and the historical pair priceDrop.\"},\"increasePairPriceDrop(address,address,uint256)\":{\"notice\":\"Increases the priceDrop of a pair of assets in the system.\"},\"removeUniswapV2LPTokens(address[])\":{\"notice\":\"Sets the flag to false for the passed tokens\"},\"setGasPriceFeed(address)\":{\"notice\":\"Sets the gas price feed contract address.\"},\"setOrallyOracle(address)\":{\"notice\":\"Sets the orally oracle address\"},\"setOrallyTimeTolerance(uint256)\":{\"notice\":\"Sets the time tolerance specially for the orally\"},\"setPairPriceDrop(address,address,uint256)\":{\"notice\":\"Function to set (change) the pair priceDrop of the trading assets\"},\"setPyth(address)\":{\"notice\":\"Sets the Pyth address\"},\"setStorkPublicKey(address)\":{\"notice\":\"Sets the stork public key (address)\"},\"setStorkVerify(address)\":{\"notice\":\"Sets the stork verify address\"},\"setSupraPullOracle(address)\":{\"notice\":\"Sets the Supra pull oracle address\"},\"setSupraStorageOracle(address)\":{\"notice\":\"Sets the Supra storage address\"},\"setTimeTolerance(uint256)\":{\"notice\":\"Sets the time tolerance\"},\"setTreasury(address)\":{\"notice\":\"Sets the treasury address\"},\"setUSDT(address)\":{\"notice\":\"Sets the usdt address\"},\"setUniswapV2LPOracle(address)\":{\"notice\":\"Sets the UniswapV2LP oracle\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"},\"updateChainlinkPriceFeedsUsd(address[],address[])\":{\"notice\":\"Sets or updates the Chainlink price feed for the list of tokens to usd.\"},\"updateOrallySymbols((string,address[2])[])\":{\"notice\":\"Sets or updates the Orally token symbol for the list of tokens (tokens order MATTERS)\"},\"updatePriceDropFeed(address,address,address)\":{\"notice\":\"Updates the priceDrop feed for a specific pair of assets.\"},\"updatePriceDropFeeds((address,address,address)[])\":{\"notice\":\"Updates the priceDrop feed for a specific pair of assets.\"},\"updatePullOracle(bytes[][],uint256[])\":{\"notice\":\"Updates pull oracle data for passed oracle types\"},\"updatePythPairId(address[],bytes32[])\":{\"notice\":\"Sets or updates the Pyth pair ids for the list of tokens.\"},\"updateStorkPairIds((string,address[2])[])\":{\"notice\":\"Sets or updates the Stork Pair Ids\"},\"updateSupraDataFeed((address,address,(uint256,bool))[])\":{\"notice\":\"Sets or updates the Supra price feeds for the list of tokens.\"},\"updateUniv3TrustedPair((uint256,address,address,bool)[])\":{\"notice\":\"Sets or updates the Supra price feeds for the list of tokens.\"},\"updateUniv3TypeOracle(uint256[],address[])\":{\"notice\":\"Sets Uni v3-based TWAP price oracle contracts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x5a173dcd1c1f0074e4df6a9cdab3257e17f2e64f7b8f30ca9e17a8c5ea250e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@orally-network/solidity-sdk/IOrallyVerifierOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.18;\\n\\nimport {OrallyStructs} from \\\"./OrallyStructs.sol\\\";\\n\\n/**\\n * @title IOrallyVerifierOracle\\n * @notice Interface for the OrallyVerifierOracle contract.\\n * This interface defines the required functions for verifying and handling\\n * data feeds, specifically focusing on functionality related to price feeds\\n * and custom data verification processes.\\n */\\ninterface IOrallyVerifierOracle {\\n    // Events to notify about changes in reporter status or data updates\\n    event ReporterAdded(address indexed reporter);\\n    event ReporterRemoved(address indexed reporter);\\n    event PriceFeedSaved(string indexed pairId, uint256 price, uint256 decimals, uint256 timestamp);\\n    event CustomNumberSaved(string indexed feedId, uint256 value, uint256 decimals);\\n    event CustomStringSaved(string indexed feedId, string value);\\n\\n    // Price Feeds\\n\\n    /**\\n     * @notice Gets the price feed data for a given pair ID.\\n     * @param pairId The unique identifier for the currency pair.\\n     * @return The price feed data for the given pair ID.\\n     */\\n    function getPriceFeed(string memory pairId) external view returns (OrallyStructs.PriceFeed memory);\\n\\n    /**\\n     * @notice Verifies the integrity and authenticity of price feed data, then returns it (if fee paid with API key / allowed domain).\\n     * @param _data The packed byte array containing the price feed and its signature.\\n     * @return Tuple of pair ID, price, decimals, and timestamp if the verification is successful.\\n     */\\n    function verifyPriceFeed(bytes memory _data) external view returns (OrallyStructs.PriceFeed memory);\\n\\n    /**\\n     * @notice Verifies, caches, and returns the details of a price feed (if fee paid with API key / allowed domain).\\n     * Caching is performed to store the most recent and valid data.\\n     * @param _data The packed data containing the price feed and its signature.\\n     * @return Tuple of pair ID, price, decimals, and timestamp.\\n     */\\n    function updatePriceFeed(bytes memory _data) external returns (OrallyStructs.PriceFeed memory);\\n\\n    // --------------------------------------------------------------\\n    // Custom Numbers\\n\\n    /**\\n     * @notice Gets the custom number data for a given feed ID.\\n     * @param _feedId The unique identifier for the custom number feed.\\n     * @return The custom number data for the given feed ID.\\n     */\\n    function getCustomNumber(string memory _feedId) external view returns (OrallyStructs.CustomNumber memory);\\n\\n    /**\\n     * @notice Verifies and returns custom numerical data from provided packed data.\\n     * @param data The packed data containing custom numerical information and its signature.\\n     * @return Tuple containing the feed ID, numerical value, and decimals.\\n     */\\n    function verifyCustomNumber(bytes memory data) external view returns (OrallyStructs.CustomNumber memory);\\n\\n    /**\\n     * @notice Verifies, caches, and returns the details of a custom number feed (if fee paid with API key / allowed domain).\\n     * Caching is performed to store the most recent and valid data.\\n     * @param _data The packed data containing the custom number feed and its signature.\\n     * @return Tuple of feed ID, numerical value, and decimals.\\n     */\\n    function updateCustomNumber(bytes memory _data) external returns (OrallyStructs.CustomNumber memory);\\n\\n    // --------------------------------------------------------------\\n    // Custom Strings\\n\\n    /**\\n     * @notice Gets the custom string data for a given feed ID.\\n     * @param _feedId The unique identifier for the custom string feed.\\n     * @return The custom string data for the given feed ID.\\n     */\\n    function getCustomString(string memory _feedId) external view returns (OrallyStructs.CustomString memory);\\n\\n    /**\\n     * @notice Verifies and returns custom string data from provided packed data.\\n     * @param data The packed data containing custom string information and its signature.\\n     * @return Tuple containing the feed ID and the string value.\\n     */\\n    function verifyCustomString(bytes memory data) external view returns (OrallyStructs.CustomString memory);\\n\\n    /**\\n     * @notice Verifies, caches, and returns the details of a custom string feed (if fee paid with API key / allowed domain).\\n     * Caching is performed to store the most recent and valid data.\\n     * @param _data The packed data containing the custom string feed and its signature.\\n     * @return Tuple of feed ID and the string value.\\n     */\\n    function updateCustomString(bytes memory _data) external returns (OrallyStructs.CustomString memory);\\n\\n    // --------------------------------------------------------------\\n\\n    /**\\n     * @notice Verifies and returns the details of a chain data feed from provided feed.\\n     * @param _chainData The packed data containing the chain data feed and its signature.\\n     * @return Tuple of chainData and metaData if the verification is successful.\\n     */\\n    function verifyReadContractData(bytes memory _chainData) external view returns (bytes memory, bytes memory);\\n\\n    /**\\n    * @notice Verifies and returns the details of a chain data feed from provided feed.\\n     * @param _chainData The packed data containing the chain data feed and its signature.\\n     * @return Tuple of chainData and metaData if the verification is successful.\\n     */\\n    function verifyReadLogsData(bytes memory _chainData) external view returns (bytes memory, bytes memory);\\n\\n    // Reporters\\n\\n    /**\\n     * @notice Checks if an address is an authorized reporter.\\n     * @param _reporter The address to check.\\n     * @return bool Returns true if the address is authorized to submit data.\\n     */\\n    function isReporter(address _reporter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe7e28048dd03c4e0fbe0dab969c0967bf3ec529aeac5fd5539192fb9470fd8b7\",\"license\":\"AGPL-3.0\"},\"@orally-network/solidity-sdk/OrallyStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.18;\\n\\ncontract OrallyStructs {\\n    // Structure to store information about each price feed\\n    struct PriceFeed {\\n        string pairId;     // The identifier for the currency pair\\n        uint256 price;     // The latest price of the currency pair\\n        uint256 decimals;  // The decimal places for the price to ensure precision\\n        uint256 timestamp; // The timestamp when the price was last updated\\n    }\\n\\n    struct Meta {\\n        string feedId;      // The identifier for the data feed\\n        uint256 timestamp;  // The timestamp HTTP Gateway response happened\\n        uint256 fee;        // The update fee in ether (could be zero)\\n//        string fee_symbol;  // The symbol of the fee token\\n    }\\n\\n    // Structure to store custom number data\\n    struct CustomNumber {\\n        string feedId;      // The identifier for the data feed\\n        uint256 value;      // The custom number value\\n        uint256 decimals;   // The timestamp when the number was last updated\\n    }\\n\\n    // Structure to store custom string data\\n    struct CustomString {\\n        string feedId;  // The identifier for the data feed\\n        string value;   // The custom string data\\n    }\\n\\n    // Structure to store chain data feed and metadata\\n    struct ReadContractMetadata {\\n        uint256 chain_id;           // The chain ID of the contract\\n        address contract_address;   // The address of the contract\\n        string method;              // The method of the contract call\\n        string params;              // The parameters of the contract call\\n        uint256 block_number;       // The block number the contract call happened (0 if last one)\\n        uint256 timestamp;          // The timestamp HTTP Gateway response happened\\n        uint256 fee;                // The update fee in ether (could be zero)\\n        string fee_symbol;          // The symbol of the fee token\\n    }\\n\\n    struct ReadLogsData {\\n        address addr;\\n        string[] topics;\\n        bytes data;\\n        string block_hash;\\n        uint256 block_number;\\n        string transaction_hash;\\n        uint256 transaction_index;\\n        string log_index;\\n        string transaction_log_index;\\n        string log_type;\\n        bool removed;\\n    }\\n\\n    struct ReadLogsMetadata {\\n        uint256 chain_id;\\n        uint256 block_from;\\n        uint256 block_to;\\n        string[] topics0;\\n        string[] topics1;\\n        string[] topics2;\\n        string[] topics3;\\n        address[] addresses;\\n        uint256 timestamp;\\n\\n        uint256 fee;        // The update fee in ether (could be zero)\\n        string fee_symbol;  // The symbol of the fee token\\n    }\\n}\\n\",\"keccak256\":\"0x523635406666c42d69898ef784490cd95fb09ef68461455cc58f3311320a4736\",\"license\":\"AGPL-3.0\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\nimport {IArbGasInfo} from \\\"./interfaces/IArbGasInfo.sol\\\";\\nimport {IOVM_GasPriceOracle} from \\\"./interfaces/IOVM_GasPriceOracle.sol\\\";\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_MANAGER_ROLE = keccak256(\\\"FLASH_LOAN_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_FREE_BORROWER_ROLE = keccak256(\\\"FLASH_LOAN_FREE_BORROWER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\naddress constant NATIVE_CURRENCY_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\\n// constants for Arbitrum payment model\\nIArbGasInfo constant ARB_NITRO_ORACLE = IArbGasInfo(0x000000000000000000000000000000000000006C);\\nuint256 constant TRANSACTION_METADATA_BYTES = 140;\\n\\nIOVM_GasPriceOracle constant OVM_GASPRICEORACLE = IOVM_GasPriceOracle(0x420000000000000000000000000000000000000F);\\n\\nuint256 constant GAS_FOR_BYTE = 16;\\n\\n// Magic values\\nuint256 constant TRADER_MAGIC_TIER = uint256(keccak256(\\\"TRADER_MAGIC_TIER\\\"));\\nuint256 constant LENDER_MAGIC_TIER = uint256(keccak256(\\\"LENDER_MAGIC_TIER\\\"));\\nuint256 constant FARMING_MAGIC_TIER = uint256(keccak256(\\\"FARMING_MAGIC_TIER\\\"));\\n\",\"keccak256\":\"0x806aeb2d3007701f19dd16fb2765b3e50c548869ca19310f096059b83ca339b5\",\"license\":\"BUSL-1.1\"},\"contracts/CurvePriceFeeds/ICurveBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport {ICurveAddressProvider} from \\\"../interfaces/curve/ICurveAddressProvider.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title ICurveOracle\\n * @notice Interface for the CurveOracle contract which provides price feed data for assets on Curve Finance.\\n */\\ninterface ICurveBaseOracle {\\n    /**\\n     * @notice Event emitted when a new LP token is registered within its respective implementation.\\n     * @param token Address of the LP token being registered\\n     */\\n    event RegisterLpToken(address token);\\n\\n    /**\\n     * @notice Fetches relevant information about a Curve liquidity pool.\\n     * @param crvLp The address of the Curve liquidity pool token (LP token).\\n     * @return pool Address of the pool contract.\\n     * @return coins A list of underlying tokens in the Curve liquidity pool.\\n     * @return virtualPrice The current virtual price of the LP token for the given Curve liquidity pool.\\n     */\\n    function getPoolInfo(address crvLp) external returns (address pool, address[] memory coins, uint256 virtualPrice);\\n\\n    /// @notice Returns the Curve Address Provider.\\n    function getAddressProvider() external view returns (ICurveAddressProvider);\\n\\n    /**\\n     * @dev Gets a Registry contract address.\\n     */\\n    function primexRegistry() external view returns (IAccessControl);\\n\\n    /**\\n     * @notice Retrieves the address of PriceOracle contract.\\n     */\\n    function primexPriceOracle() external view returns (IPriceOracleV2);\\n\\n    /**\\n     * @notice Fetches the price of the given token in USD with 18 decimals precision.\\n     * @param token Address of the LP token for which the price is requested.\\n     * @param tokensUsdOracleData An array of oracle data to use for price calculations\\n     * @return The USD price of the given token, multiplied by 10**18.\\n     */\\n    function getPrice(address token, bytes[] calldata tokensUsdOracleData) external returns (uint256);\\n\\n    /**\\n     * @notice Initializes the contract\\n     * @param _addressProvider Address of the curve address provider\\n     * @param _primexPriceOracle The base oracle instance.\\n     * @param _primexRegistry Address of the owner of the contract.\\n     */\\n    function initialize(\\n        ICurveAddressProvider _addressProvider,\\n        IPriceOracleV2 _primexPriceOracle,\\n        IAccessControl _primexRegistry\\n    ) external;\\n}\\n\",\"keccak256\":\"0x97594d0d8652bf61c3c682b543b94ca97095318ba9c0a3ff8f5e578315764241\",\"license\":\"MIT\"},\"contracts/PriceOracle/IPriceOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPriceOracleStorage, IPriceOracleStorageV3, IPriceOracleStorageV4} from \\\"./IPriceOracleStorage.sol\\\";\\n\\ninterface IPriceOracleV2 is IPriceOracleStorageV3 {\\n    event ChainlinkPriceFeedUpdated(address indexed token, address indexed priceFeed);\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n    event PythPairIdUpdated(address indexed token, bytes32 indexed priceFeedId);\\n    event Univ3OracleUpdated(uint256 indexed oracleType, address indexed oracle);\\n    event TimeToleranceUpdated(uint256 timeTolerance);\\n    event SupraDataFeedUpdated(address indexed tokenA, address indexed tokenB, uint256 id);\\n\\n    event Univ3TrustedPairUpdated(\\n        uint256 indexed oracleType,\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        bool isTrusted\\n    );\\n\\n    struct UpdateUniv3TrustedPairParams {\\n        uint256 oracleType;\\n        address tokenA;\\n        address tokenB;\\n        bool isTrusted;\\n    }\\n\\n    enum UpdatePullOracle {\\n        Pyth,\\n        Supra,\\n        Orally\\n    }\\n\\n    struct UpdateSupraDataFeedParams {\\n        address tokenA;\\n        address tokenB;\\n        SupraDataFeedId feedData;\\n    }\\n\\n    /**\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    struct UpdatePriceDropFeedsParams {\\n        address assetA;\\n        address assetB;\\n        address priceDropFeed;\\n    }\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     * @param _usdt Address of the USDT token\\n     * @param _treasury Address of the Treasury\\n     */\\n    function initialize(address _registry, address _eth, address _usdt, address _treasury) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _updateParams The array of the UpdatePriceDropFeedsParams structs\\n     */\\n    function updatePriceDropFeeds(UpdatePriceDropFeedsParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Calculates exchange rate of one token to another according to the specific oracle route\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param oracleData The list of oracles to use for price calculations\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality\\n     */\\n    function getExchangeRate(\\n        address assetA,\\n        address assetB,\\n        bytes calldata oracleData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Sets or updates the Chainlink price feed for the list of tokens to usd.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _feeds Array of price feeds.\\n     */\\n    function updateChainlinkPriceFeedsUsd(address[] calldata _tokens, address[] calldata _feeds) external;\\n\\n    /**\\n     * @notice Sets or updates the Pyth pair ids for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _priceFeedIds Array of pair ids.\\n     */\\n    function updatePythPairId(address[] calldata _tokens, bytes32[] calldata _priceFeedIds) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _params Array of token pairs and Supra ids.\\n     */\\n\\n    function updateSupraDataFeed(UpdateSupraDataFeedParams[] calldata _params) external;\\n\\n    /**\\n     * @notice Sets Uni v3-based TWAP price oracle contracts.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _oracleTypes Array of ids of TWAP contracts.\\n     * @param _oracles Array of TWAP contract addresses.\\n     */\\n    function updateUniv3TypeOracle(uint256[] calldata _oracleTypes, address[] calldata _oracles) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _updateParams Array of token pairs, their DEXs and new trusted status.\\n     */\\n    function updateUniv3TrustedPair(UpdateUniv3TrustedPairParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Sets the Pyth address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pyth the address of the Pyth oracle\\n     */\\n\\n    function setPyth(address _pyth) external;\\n\\n    /**\\n     * @notice Sets the Supra pull oracle address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraPullOracle the address of the Supra pull oracle\\n     */\\n\\n    function setSupraPullOracle(address _supraPullOracle) external;\\n\\n    /**\\n     * @notice Sets the Supra storage address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraStorageOracle the address of the Supra storage\\n     */\\n    function setSupraStorageOracle(address _supraStorageOracle) external;\\n\\n    /**\\n     * @notice Updates pull oracle data for passed oracle types\\n     * @param _data An array of update data for passed oracles\\n     * @param _pullOracleTypes An array of oracle types  (Must conform to the UpdatePullOracle struct)\\n     */\\n\\n    function updatePullOracle(bytes[][] calldata _data, uint256[] calldata _pullOracleTypes) external payable;\\n\\n    /**\\n     * @notice Sets the time tolerance\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _timeTolerance Time tolerance in seconds\\n     */\\n\\n    function setTimeTolerance(uint256 _timeTolerance) external;\\n\\n    /**\\n     * @notice Sets the usdt address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _usdt the address of the USDT\\n     */\\n\\n    function setUSDT(address _usdt) external;\\n\\n    /**\\n     * @notice Sets the treasury address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _treasury the address of the treasury\\n     */\\n    function setTreasury(address _treasury) external;\\n}\\n\\ninterface IPriceOracle is IPriceOracleStorage {\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     */\\n    function initialize(address _registry, address _eth) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Add or update price feed for assets pair. For only the admin role.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @param priceFeed The chain link price feed address for the pair assetA/assetB\\n     */\\n    function updatePriceFeed(address assetA, address assetB, address priceFeed) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Requests two priceFeeds - assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * @dev If there is no price feed found, the code will return a message that no price feed found.\\n     * @param baseAsset The first currency within the currency pair quotation (the base currency).\\n     * @param quoteAsset The second currency within the currency pair quotation (the quote currency).\\n     * @return A tuple of basePriceFeed and quotePriceFeed. The addresses of the price feed for the base asset and quote asset respectively.\\n     */\\n    function getPriceFeedsPair(address baseAsset, address quoteAsset) external view returns (address, address);\\n\\n    /**\\n     * @notice Requests priceFeed for the actual exchange rate for an assetA/assetB pair.\\n     * @dev If no price feed for the pair found, USD and ETH are used as intermediate tokens.\\n     * A price for assetA/assetB can be derived if two data feeds exist:\\n     * assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * If there is no price feed found, the code will return a message that no price feed found.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality which will be recalucaled in PrimexPricingLibrary.\\n     * @return direction of a pair as it stored in chainLinkPriceFeeds (i.e. returns 'true' for assetA/assetB, and 'false' for assetB/assetA).\\n     * Throws if priceFeed wasn't found or priceFeed hasn't answer is 0.\\n     */\\n    function getExchangeRate(address assetA, address assetB) external view returns (uint256, bool);\\n\\n    /**\\n     * @notice Retrieves the direct price feed for the given asset pair.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return priceFeed The address of the direct price feed.\\n     */\\n    function getDirectPriceFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n}\\n\\ninterface IPriceOracleV3 is IPriceOracleV2 {\\n    struct UpdateOrallySymbolsParams {\\n        string symbol; // string(\\\"tokenA/tokenB\\\")\\n        address[2] tokens; // [addressA, addressB]\\n    }\\n\\n    struct UpdateStorkPairIdsParams {\\n        string pair; // string(\\\"BTCUSD\\\")\\n        address[2] tokens; // [btc address, usd address]\\n    }\\n    event OrallySymbolUpdated(address indexed tokenA, address indexed tokenB, string symbol);\\n    event OrallyTimeToleranceUpdated(uint256 timeTolerance);\\n    event StorkPairIdUpdated(address indexed tokenA, address indexed tokenB, string pairId);\\n    event CurveOracleUpdated(IPriceOracleStorageV4.CurveOracleKind indexed oracleType, address indexed oracle);\\n    event EIP4626TokenToUnderlyingAssetUpdated(address indexed token, address underlyingAsset);\\n    event AddUniswapV2LPToken(address indexed uniswapV2Token);\\n    event RemoveUniswapV2LPToken(address indexed uniswapV2Token);\\n\\n    /**\\n     * @notice Sets or updates the Orally token symbol for the list of tokens (tokens order MATTERS)\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param params Array of UpdateOrallySymbolsParams struct\\n     */\\n\\n    function updateOrallySymbols(UpdateOrallySymbolsParams[] calldata params) external;\\n\\n    /**\\n     * @notice Sets the time tolerance specially for the orally\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _orallyTimeTolerance Time tolerance in seconds\\n     */\\n\\n    function setOrallyTimeTolerance(uint256 _orallyTimeTolerance) external;\\n\\n    /**\\n     * @notice Sets the orally oracle address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _orally the address of the Orally oracle\\n     */\\n    function setOrallyOracle(address _orally) external;\\n\\n    /**\\n     * @notice Sets or updates the Stork Pair Ids\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param params Array of UpdateStorkPairIdsParams struct\\n     */\\n\\n    function updateStorkPairIds(UpdateStorkPairIdsParams[] calldata params) external;\\n\\n    /**\\n     * @notice Sets the stork verify address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _storkVerify the Stork verify address\\n     */\\n\\n    function setStorkVerify(address _storkVerify) external;\\n\\n    /**\\n     * @notice Sets the stork public key (address)\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _storkPublicKey the Stork public key address\\n     */\\n\\n    function setStorkPublicKey(address _storkPublicKey) external;\\n\\n    function updateCurveTypeOracle(\\n        IPriceOracleStorageV4.CurveOracleKind[] calldata _oracleTypes,\\n        address[] calldata _oracles\\n    ) external;\\n\\n    function updateEIP4626TokenToUnderlyingAsset(\\n        address[] calldata _rebaseTokens,\\n        address[] calldata _underlyingAssets\\n    ) external;\\n\\n    /**\\n     * @notice Sets the flag to true for the passed tokens\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _lpTokens the addresses of lp tokens\\n     */\\n\\n    function addUniswapV2LPTokens(address[] calldata _lpTokens) external;\\n\\n    /**\\n     * @notice Sets the flag to false for the passed tokens\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _lpTokens the addresses of lp tokens\\n     */\\n\\n    function removeUniswapV2LPTokens(address[] calldata _lpTokens) external;\\n\\n    /**\\n     * @notice Sets the UniswapV2LP oracle\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _uniswapV2LPOracle the UniswapV2LP oracle address\\n     */\\n\\n    function setUniswapV2LPOracle(address _uniswapV2LPOracle) external;\\n}\\n\",\"keccak256\":\"0xc325d610885e86499c1c1444c3f5e45ec3751158ca84f3ad5ea7a72bb31db921\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracleStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {ISupraOraclePull} from \\\"../interfaces/ISupraOraclePull.sol\\\";\\nimport {ISupraSValueFeed} from \\\"../interfaces/ISupraSValueFeed.sol\\\";\\nimport {IOrallyVerifierOracle} from \\\"@orally-network/solidity-sdk/IOrallyVerifierOracle.sol\\\";\\nimport {IStorkVerify} from \\\"../interfaces/IStorkVerify.sol\\\";\\nimport {IUniswapV2LPOracle} from \\\"../UniswapV2LPOracle/IUniswapV2LPOracle.sol\\\";\\n\\ninterface IPriceOracleStorage {\\n    function registry() external view returns (address);\\n\\n    function eth() external view returns (address);\\n\\n    function gasPriceFeed() external view returns (address);\\n\\n    function pairPriceDrops(address, address) external view returns (uint256);\\n}\\n\\ninterface IPriceOracleStorageV2 is IPriceOracleStorage {\\n    enum OracleType {\\n        Pyth,\\n        Chainlink,\\n        Uniswapv3,\\n        Supra,\\n        Orally,\\n        Stork,\\n        CurveLPOracle,\\n        EIP4626,\\n        UniswapV2LP\\n    }\\n\\n    struct OracleRoute {\\n        address tokenTo;\\n        OracleType oracleType;\\n        bytes oracleData;\\n    }\\n\\n    function pyth() external view returns (IPyth);\\n\\n    function timeTolerance() external view returns (uint256);\\n\\n    function chainlinkPriceFeedsUsd(address) external view returns (address);\\n\\n    function pythPairIds(address) external view returns (bytes32);\\n\\n    function univ3TypeOracles(uint256) external view returns (address);\\n\\n    function univ3TrustedPairs(uint256, address, address) external view returns (bool);\\n}\\n\\ninterface IPriceOracleStorageV3 is IPriceOracleStorageV2 {\\n    struct SupraDataFeedId {\\n        uint256 id;\\n        bool initialize;\\n    }\\n\\n    function supraPullOracle() external view returns (ISupraOraclePull);\\n\\n    function supraStorageOracle() external view returns (ISupraSValueFeed);\\n\\n    function supraDataFeedID(address, address) external view returns (uint256, bool);\\n\\n    function usdt() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\\ninterface IPriceOracleStorageV4 is IPriceOracleStorageV3 {\\n    enum CurveOracleKind {\\n        STABLE,\\n        TRICRYPTO,\\n        VOLATILE\\n    }\\n\\n    function orallySymbol(address, address) external view returns (string memory);\\n\\n    function orallyOracle() external view returns (IOrallyVerifierOracle);\\n\\n    function orallyTimeTolerance() external view returns (uint256);\\n\\n    function storkVerify() external view returns (IStorkVerify);\\n\\n    function storkPublicKey() external view returns (address);\\n\\n    function storkAssetPairId(address, address) external view returns (string memory);\\n\\n    function curveTypeOracles(CurveOracleKind) external view returns (address);\\n\\n    function eip4626TokenToUnderlyingAsset(address) external view returns (address);\\n\\n    function isUniswapV2LP(address) external view returns (bool);\\n\\n    function uniswapV2LPOracle() external view returns (IUniswapV2LPOracle);\\n}\\n\",\"keccak256\":\"0x186e0f61de8f99cbaa7819d984f1b6b61ce4608d0a8f5102b493eb7234921d56\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/PriceOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\nimport {IUniLikeOracle} from \\\"../interfaces/IUniLikeOracle.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"../libraries/TokenTransfersLibrary.sol\\\";\\n\\nimport \\\"./PriceOracleStorage.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport {BIG_TIMELOCK_ADMIN, MEDIUM_TIMELOCK_ADMIN, SMALL_TIMELOCK_ADMIN, NATIVE_CURRENCY, EMERGENCY_ADMIN, USD} from \\\"../Constants.sol\\\";\\nimport {IPriceOracleV2, IPriceOracleV3} from \\\"./IPriceOracle.sol\\\";\\nimport {ISupraSValueFeed} from \\\"../interfaces/ISupraSValueFeed.sol\\\";\\nimport {ITreasury} from \\\"../Treasury/ITreasury.sol\\\";\\nimport {OrallyStructs} from \\\"@orally-network/solidity-sdk/OrallyStructs.sol\\\";\\nimport {ICurveBaseOracle} from \\\"../CurvePriceFeeds/ICurveBaseOracle.sol\\\";\\nimport {IUniswapV2LPOracle} from \\\"../UniswapV2LPOracle/IUniswapV2LPOracle.sol\\\";\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\ncontract PriceOracle is IPriceOracleV3, PriceOracleStorageV4 {\\n    using WadRayMath for uint256;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Modifier that checks if the caller has a specific role.\\n     * @param role The role identifier to check.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _require(IAccessControl(registry).hasRole(role, msg.sender), Errors.FORBIDDEN.selector);\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function initialize(\\n        address _registry,\\n        address _eth,\\n        address _usdt,\\n        address _treasury\\n    ) external override initializer {\\n        _require(\\n            IERC165Upgradeable(_registry).supportsInterface(type(IAccessControl).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        registry = _registry;\\n        eth = _eth;\\n        usdt = _usdt;\\n        _setTreasury(_treasury);\\n        __ERC165_init();\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setTreasury(address _treasury) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setPyth(address _pyth) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        pyth = IPyth(_pyth);\\n    }\\n\\n    function setStorkVerify(address _storkVerify) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        storkVerify = IStorkVerify(_storkVerify);\\n    }\\n\\n    function setStorkPublicKey(address _storkPublicKey) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        storkPublicKey = _storkPublicKey;\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n\\n    function setUSDT(address _usdt) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        usdt = _usdt;\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV3\\n     */\\n    function setUniswapV2LPOracle(address _uniswapV2LPOracle) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        uniswapV2LPOracle = IUniswapV2LPOracle(_uniswapV2LPOracle);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV3\\n     */\\n    function setOrallyOracle(address _orally) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        orallyOracle = IOrallyVerifierOracle(_orally);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setSupraPullOracle(address _supraPullOracle) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        supraPullOracle = ISupraOraclePull(_supraPullOracle);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setSupraStorageOracle(address _supraStorageOracle) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        supraStorageOracle = ISupraSValueFeed(_supraStorageOracle);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function increasePairPriceDrop(\\n        address _assetA,\\n        address _assetB,\\n        uint256 _pairPriceDrop\\n    ) external override onlyRole(EMERGENCY_ADMIN) {\\n        _require(\\n            _pairPriceDrop > pairPriceDrops[_assetA][_assetB] && _pairPriceDrop <= WadRayMath.WAD / 2,\\n            Errors.PAIR_PRICE_DROP_IS_NOT_CORRECT.selector\\n        );\\n        _setPairPriceDrop(_assetA, _assetB, _pairPriceDrop);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setTimeTolerance(uint256 _timeTolerance) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        timeTolerance = _timeTolerance;\\n        emit TimeToleranceUpdated(_timeTolerance);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV3\\n     */\\n    function setOrallyTimeTolerance(uint256 _orallyTimeTolerance) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        orallyTimeTolerance = _orallyTimeTolerance;\\n        emit OrallyTimeToleranceUpdated(_orallyTimeTolerance);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setPairPriceDrop(\\n        address _assetA,\\n        address _assetB,\\n        uint256 _pairPriceDrop\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _require(_pairPriceDrop > 0 && _pairPriceDrop < WadRayMath.WAD, Errors.PAIR_PRICE_DROP_IS_NOT_CORRECT.selector);\\n        _setPairPriceDrop(_assetA, _assetB, _pairPriceDrop);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updatePriceDropFeed(\\n        address assetA,\\n        address assetB,\\n        address priceDropFeed\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        _updatePriceDropFeed(assetA, assetB, priceDropFeed);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updatePriceDropFeeds(\\n        UpdatePriceDropFeedsParams[] calldata _updateParams\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < _updateParams.length; i++) {\\n            _updatePriceDropFeed(_updateParams[i].assetA, _updateParams[i].assetB, _updateParams[i].priceDropFeed);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updateChainlinkPriceFeedsUsd(\\n        address[] calldata _tokens,\\n        address[] calldata _feeds\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _require(_tokens.length == _feeds.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            chainlinkPriceFeedsUsd[_tokens[i]] = _feeds[i];\\n            emit ChainlinkPriceFeedUpdated(_tokens[i], _feeds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV3\\n     */\\n    function updateEIP4626TokenToUnderlyingAsset(\\n        address[] calldata _rebaseTokens,\\n        address[] calldata _underlyingAssets\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _require(_rebaseTokens.length == _underlyingAssets.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        for (uint256 i; i < _rebaseTokens.length; i++) {\\n            eip4626TokenToUnderlyingAsset[_rebaseTokens[i]] = _underlyingAssets[i];\\n            emit EIP4626TokenToUnderlyingAssetUpdated(_rebaseTokens[i], _underlyingAssets[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updatePythPairId(\\n        address[] calldata _tokens,\\n        bytes32[] calldata _priceFeedIds\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _require(_tokens.length == _priceFeedIds.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        for (uint256 i; i < _tokens.length; i++) {\\n            pythPairIds[_tokens[i]] = _priceFeedIds[i];\\n            emit PythPairIdUpdated(_tokens[i], _priceFeedIds[i]);\\n        }\\n    }\\n\\n    function updateOrallySymbols(\\n        UpdateOrallySymbolsParams[] calldata params\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < params.length; i++) {\\n            orallySymbol[params[i].tokens[0]][params[i].tokens[1]] = params[i].symbol;\\n            emit OrallySymbolUpdated(params[i].tokens[0], params[i].tokens[1], params[i].symbol);\\n        }\\n    }\\n\\n    function updateStorkPairIds(\\n        UpdateStorkPairIdsParams[] calldata params\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < params.length; i++) {\\n            storkAssetPairId[params[i].tokens[0]][params[i].tokens[1]] = params[i].pair;\\n            emit StorkPairIdUpdated(params[i].tokens[0], params[i].tokens[1], params[i].pair);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updateSupraDataFeed(\\n        UpdateSupraDataFeedParams[] calldata _params\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < _params.length; i++) {\\n            supraDataFeedID[_params[i].tokenA][_params[i].tokenB] = _params[i].feedData;\\n            emit SupraDataFeedUpdated(_params[i].tokenA, _params[i].tokenB, _params[i].feedData.id);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updatePullOracle(bytes[][] calldata _data, uint256[] calldata _oracleTypes) external payable override {\\n        _require(_data.length == _oracleTypes.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        uint256 remainingValue = msg.value;\\n        for (uint256 i; i < _oracleTypes.length; i++) {\\n            if (_oracleTypes[i] == uint256(UpdatePullOracle.Pyth)) {\\n                uint256 updateFee = pyth.getUpdateFee(_data[i]);\\n                _require(updateFee <= remainingValue, Errors.NOT_ENOUGH_MSG_VALUE.selector);\\n                remainingValue -= updateFee;\\n                pyth.updatePriceFeeds{value: updateFee}(_data[i]);\\n                continue;\\n            } else if (_oracleTypes[i] == uint256(UpdatePullOracle.Supra)) {\\n                supraPullOracle.verifyOracleProof(_data[i][0]);\\n            } else if (_oracleTypes[i] == uint256(UpdatePullOracle.Orally)) {\\n                for (uint256 j; j < _data[i].length; j++) {\\n                    orallyOracle.updatePriceFeed(_data[i][j]);\\n                }\\n            }\\n        }\\n        if (remainingValue > 0) {\\n            TokenTransfersLibrary.doTransferOutETH(treasury, remainingValue);\\n        }\\n    }\\n\\n    function updateCurveTypeOracle(\\n        CurveOracleKind[] calldata _oracleTypes,\\n        address[] calldata _oracles\\n    ) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        _require(_oracleTypes.length == _oracles.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        for (uint256 i; i < _oracleTypes.length; i++) {\\n            curveTypeOracles[_oracleTypes[i]] = _oracles[i];\\n            emit CurveOracleUpdated(_oracleTypes[i], _oracles[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV3\\n     */\\n    function addUniswapV2LPTokens(address[] calldata _lpTokens) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < _lpTokens.length; i++) {\\n            isUniswapV2LP[_lpTokens[i]] = true;\\n            emit AddUniswapV2LPToken(_lpTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV3\\n     */\\n    function removeUniswapV2LPTokens(address[] calldata _lpTokens) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < _lpTokens.length; i++) {\\n            isUniswapV2LP[_lpTokens[i]] = false;\\n            emit RemoveUniswapV2LPToken(_lpTokens[i]);\\n        }\\n    }\\n\\n    function updateUniv3TypeOracle(\\n        uint256[] calldata _oracleTypes,\\n        address[] calldata _oracles\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _require(_oracleTypes.length == _oracles.length, Errors.PARAMS_LENGTH_MISMATCH.selector);\\n        for (uint256 i; i < _oracleTypes.length; i++) {\\n            univ3TypeOracles[_oracleTypes[i]] = _oracles[i];\\n            emit Univ3OracleUpdated(_oracleTypes[i], _oracles[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function updateUniv3TrustedPair(\\n        UpdateUniv3TrustedPairParams[] calldata _updateParams\\n    ) external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        for (uint256 i; i < _updateParams.length; i++) {\\n            univ3TrustedPairs[_updateParams[i].oracleType][_updateParams[i].tokenA][\\n                _updateParams[i].tokenB\\n            ] = _updateParams[i].isTrusted;\\n            // reverse order\\n            univ3TrustedPairs[_updateParams[i].oracleType][_updateParams[i].tokenB][\\n                _updateParams[i].tokenA\\n            ] = _updateParams[i].isTrusted;\\n            emit Univ3TrustedPairUpdated(\\n                _updateParams[i].oracleType,\\n                _updateParams[i].tokenA,\\n                _updateParams[i].tokenB,\\n                _updateParams[i].isTrusted\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function getExchangeRate(\\n        address assetA,\\n        address assetB,\\n        bytes calldata oracleData\\n    ) public payable override returns (uint256) {\\n        OracleRoute[] memory oracleRoutes = abi.decode(oracleData, (OracleRoute[]));\\n        _require(oracleRoutes.length > 0 && oracleRoutes.length < 5, Errors.WRONG_ORACLE_ROUTES_LENGTH.selector);\\n        _require(oracleRoutes[oracleRoutes.length - 1].tokenTo == assetB, Errors.INCORRECT_TOKEN_TO.selector);\\n        if (oracleRoutes.length == 3)\\n            _require(oracleRoutes[1].oracleType != OracleType.Uniswapv3, Errors.INCORRECT_ROUTE_SEQUENCE.selector);\\n        if (oracleRoutes.length == 4)\\n            _require(\\n                oracleRoutes[1].oracleType != OracleType.Uniswapv3 &&\\n                    (oracleRoutes[0].oracleType == OracleType.Uniswapv3 ||\\n                        oracleRoutes[0].oracleType == OracleType.Orally),\\n                Errors.INCORRECT_ROUTE_SEQUENCE.selector\\n            );\\n\\n        address tokenFrom = assetA;\\n        uint256 price = WadRayMath.WAD;\\n        bool uniWasChecked;\\n\\n        for (uint256 i; i < oracleRoutes.length; i++) {\\n            if (\\n                (oracleRoutes[i].oracleType == OracleType.Uniswapv3 ||\\n                    oracleRoutes[i].oracleType == OracleType.Orally) && !uniWasChecked\\n            ) {\\n                // try to find a direct route between the assetA and the assetB, if there is one, then revert it\\n                if (_checkTokenToUsd(assetA) && _checkTokenToUsd(assetB))\\n                    _revert(Errors.THERE_IS_DIRECT_ROUTE.selector);\\n                // cache var in case there are two uniswap routes in the oracleData\\n                uniWasChecked = true;\\n            }\\n            price = price.wmul(_getExchangeRate(tokenFrom, oracleRoutes[i]));\\n            tokenFrom = oracleRoutes[i].tokenTo;\\n        }\\n        return price;\\n    }\\n\\n    function _getExchangeRate(address _assetA, OracleRoute memory _oracleRoute) internal returns (uint256) {\\n        bool assetAIsUsd = _assetA == USD;\\n        if (_oracleRoute.oracleType == OracleType.Pyth) {\\n            if (!assetAIsUsd) _require(_oracleRoute.tokenTo == USD, Errors.INCORRECT_PYTH_ROUTE.selector);\\n            bytes32 pairID = pythPairIds[assetAIsUsd ? _oracleRoute.tokenTo : _assetA];\\n            _require(pairID != bytes32(0), Errors.NO_PRICEFEED_FOUND.selector);\\n            PythStructs.Price memory price = pyth.getPrice(pairID);\\n            _require(\\n                price.publishTime >= block.timestamp - timeTolerance,\\n                Errors.PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME.selector\\n            );\\n            // price in WAD format and invert if necessary\\n            return assetAIsUsd ? WadRayMath.WAD.wdiv(_convertPythPriceToWad(price)) : _convertPythPriceToWad(price);\\n        }\\n        if (_oracleRoute.oracleType == OracleType.Supra) {\\n            SupraDataFeedId memory feedId = supraDataFeedID[_assetA][_oracleRoute.tokenTo];\\n            ISupraSValueFeed.priceFeed memory feedData;\\n            uint256 exchangeRate;\\n            if (feedId.initialize) {\\n                feedData = supraStorageOracle.getSvalue(feedId.id);\\n                exchangeRate = feedData.price * 10 ** (18 - feedData.decimals);\\n            } else {\\n                feedId = supraDataFeedID[_oracleRoute.tokenTo][_assetA];\\n                _require(feedId.initialize, Errors.NO_PRICEFEED_FOUND.selector);\\n                feedData = supraStorageOracle.getSvalue(feedId.id);\\n                exchangeRate = WadRayMath.WAD.wdiv(feedData.price * 10 ** (18 - feedData.decimals));\\n            }\\n            _require(\\n                feedData.time >= block.timestamp - timeTolerance,\\n                Errors.PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME.selector\\n            );\\n            return exchangeRate;\\n        }\\n        if (_oracleRoute.oracleType == OracleType.Chainlink) {\\n            if (!assetAIsUsd) _require(_oracleRoute.tokenTo == USD, Errors.INCORRECT_CHAINLINK_ROUTE.selector);\\n            address priceFeed = chainlinkPriceFeedsUsd[assetAIsUsd ? _oracleRoute.tokenTo : _assetA];\\n            _require(priceFeed != address(0), Errors.NO_PRICEFEED_FOUND.selector);\\n\\n            (, int256 answer, , , ) = AggregatorV3Interface(priceFeed).latestRoundData();\\n            _require(answer > 0, Errors.ZERO_EXCHANGE_RATE.selector);\\n            // price in WAD format and invert if necessary\\n            return\\n                assetAIsUsd\\n                    ? WadRayMath.WAD.wdiv((uint256(answer) * 10 ** (18 - AggregatorV3Interface(priceFeed).decimals())))\\n                    : (uint256(answer) * 10 ** (18 - AggregatorV3Interface(priceFeed).decimals()));\\n        }\\n        if (_oracleRoute.oracleType == OracleType.Orally) {\\n            string memory tokenSymbol = orallySymbol[_assetA][_oracleRoute.tokenTo];\\n            bool reverseOrder;\\n            if (bytes(tokenSymbol).length == 0) {\\n                tokenSymbol = orallySymbol[_oracleRoute.tokenTo][_assetA];\\n                _require(bytes(tokenSymbol).length > 0, Errors.NO_TOKEN_SYMBOL_FOUND.selector);\\n                reverseOrder = true;\\n            }\\n            OrallyStructs.PriceFeed memory priceFeed = orallyOracle.getPriceFeed(tokenSymbol);\\n            _require(priceFeed.price > 0, Errors.INCORRECT_ORALLY_PRICE.selector);\\n            _require(\\n                priceFeed.timestamp >= block.timestamp - orallyTimeTolerance,\\n                Errors.PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME.selector\\n            );\\n            return\\n                reverseOrder\\n                    ? WadRayMath.WAD.wdiv(priceFeed.price * 10 ** (18 - priceFeed.decimals))\\n                    : priceFeed.price * 10 ** (18 - priceFeed.decimals);\\n        }\\n        if (_oracleRoute.oracleType == OracleType.Stork) {\\n            (uint256 timestamp, uint256 price, bytes32 r, bytes32 s, uint8 v) = abi.decode(\\n                _oracleRoute.oracleData,\\n                (uint256, uint256, bytes32, bytes32, uint8)\\n            );\\n            string memory pair = storkAssetPairId[_assetA][_oracleRoute.tokenTo];\\n            bool reverseOrder;\\n            if (bytes(pair).length == 0) {\\n                pair = storkAssetPairId[_oracleRoute.tokenTo][_assetA];\\n                _require(bytes(pair).length > 0, Errors.NO_TOKEN_PAIR_FOUND.selector);\\n                reverseOrder = true;\\n            }\\n            _require(\\n                storkVerify.verifySignature(storkPublicKey, pair, timestamp, price, r, s, v),\\n                Errors.STORK_VERIFY_FAILED.selector\\n            );\\n            _require(timestamp >= block.timestamp - timeTolerance, Errors.PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME.selector);\\n            return reverseOrder ? WadRayMath.WAD.wdiv(price) : price;\\n        }\\n        if (_oracleRoute.oracleType == OracleType.CurveLPOracle) {\\n            if (!assetAIsUsd) _require(_oracleRoute.tokenTo == USD, Errors.INCORRECT_CURVELP_ROUTE.selector);\\n\\n            (uint256 curveOracleType, bytes[] memory oracleData) = abi.decode(\\n                _oracleRoute.oracleData,\\n                (uint256, bytes[])\\n            );\\n            address curveOracle = curveTypeOracles[CurveOracleKind(curveOracleType)];\\n            _require(curveOracle != address(0), Errors.NO_PRICEFEED_FOUND.selector);\\n            uint256 price = ICurveBaseOracle(curveOracle).getPrice(\\n                assetAIsUsd ? _oracleRoute.tokenTo : _assetA,\\n                oracleData\\n            );\\n            return assetAIsUsd ? WadRayMath.WAD.wdiv(price) : price;\\n        }\\n        if (_oracleRoute.oracleType == OracleType.EIP4626) {\\n            if (!assetAIsUsd) _require(_oracleRoute.tokenTo == USD, Errors.INCORRECT_EIP4626_ROUTE.selector);\\n            IERC4626 token = IERC4626(assetAIsUsd ? _oracleRoute.tokenTo : _assetA);\\n            address underlyingAsset = eip4626TokenToUnderlyingAsset[address(token)];\\n            _require(underlyingAsset != address(0), Errors.NO_UNDERLYING_TOKEN_FOUND.selector);\\n            uint256 baseAmount = 10 ** token.decimals();\\n\\n            uint256 multiplierQuote = 10 ** (18 - IERC20Metadata(token.asset()).decimals());\\n            uint256 assets = token.previewRedeem(\\n                baseAmount // 1 share\\n            );\\n            uint256 sharesPrice = assets * multiplierQuote;\\n            uint256 price = sharesPrice.wmul(\\n                this.getExchangeRate(eip4626TokenToUnderlyingAsset[address(token)], USD, _oracleRoute.oracleData)\\n            );\\n            return assetAIsUsd ? WadRayMath.WAD.wdiv(price) : price;\\n        }\\n        if (_oracleRoute.oracleType == OracleType.UniswapV2LP) {\\n            if (!assetAIsUsd) _require(_oracleRoute.tokenTo == USD, Errors.INCORRECT_UNISWAPV2LP_ROUTE.selector);\\n            address lpToken = assetAIsUsd ? _oracleRoute.tokenTo : _assetA;\\n            _require(isUniswapV2LP[lpToken], Errors.ADDRESS_IS_NOT_UNISWAPV2LP_TOKEN.selector);\\n\\n            bytes[] memory tokenOracleData = abi.decode(_oracleRoute.oracleData, (bytes[]));\\n\\n            uint256 price = uniswapV2LPOracle.getLPExchangeRate(\\n                IUniswapV2Pair(lpToken),\\n                tokenOracleData[0],\\n                tokenOracleData[1]\\n            );\\n            return assetAIsUsd ? WadRayMath.WAD.wdiv(price) : price;\\n        }\\n        uint256 oracleType = uint256(bytes32(_oracleRoute.oracleData));\\n        address uniOracle = univ3TypeOracles[oracleType];\\n        _require(uniOracle != address(0), Errors.NO_PRICEFEED_FOUND.selector);\\n        _require(\\n            univ3TrustedPairs[oracleType][_assetA][_oracleRoute.tokenTo],\\n            Errors.TOKEN_PAIR_IS_NOT_TRUSTED.selector\\n        );\\n        // always returns price in WAD\\n        return IUniLikeOracle(uniOracle).getExchangeRate(_assetA, _oracleRoute.tokenTo);\\n    }\\n\\n    function _convertPythPriceToWad(PythStructs.Price memory price) internal pure returns (uint256) {\\n        if (price.price < 0 || price.expo > 0 || price.expo < -255) {\\n            _revert(Errors.INCORRECT_PYTH_PRICE.selector);\\n        }\\n        uint8 priceDecimals = uint8(uint32(-1 * price.expo));\\n\\n        if (18 >= priceDecimals) {\\n            return uint256(uint64(price.price)) * 10 ** uint32(18 - priceDecimals);\\n        } else {\\n            return uint256(uint64(price.price)) / 10 ** uint32(priceDecimals - 18);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view override returns (uint256 priceDrop) {\\n        uint256 oraclePairPriceDrop = getOraclePriceDrop(_assetA, _assetB);\\n        uint256 pairPriceDrop = pairPriceDrops[_assetA][_assetB];\\n        priceDrop = pairPriceDrop > oraclePairPriceDrop ? pairPriceDrop : oraclePairPriceDrop;\\n        if (priceDrop > WadRayMath.WAD) return WadRayMath.WAD;\\n        return priceDrop;\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view override returns (address) {\\n        _require(assetA != assetB, Errors.IDENTICAL_TOKEN_ADDRESSES.selector);\\n        address priceDropFeed = oraclePriceDropFeeds[assetA][assetB];\\n        _require(priceDropFeed != address(0), Errors.NO_PRICE_DROP_FEED_FOUND.selector);\\n        return priceDropFeed;\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function setGasPriceFeed(address priceFeed) public override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        gasPriceFeed = priceFeed;\\n        emit GasPriceFeedChanged(priceFeed);\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) public view override returns (uint256) {\\n        address priceDropFeed = oraclePriceDropFeeds[assetA][assetB];\\n        if (priceDropFeed == address(0)) return 0;\\n        (, int256 answer, , , ) = AggregatorV3Interface(priceDropFeed).latestRoundData();\\n        uint256 answerDecimals = AggregatorV3Interface(priceDropFeed).decimals();\\n        return (uint256(answer) * 10 ** (18 - answerDecimals));\\n    }\\n\\n    /**\\n     * @inheritdoc IPriceOracleV2\\n     */\\n    function getGasPrice() public view override returns (int256 price) {\\n        if (gasPriceFeed != address(0)) (, price, , , ) = AggregatorV3Interface(gasPriceFeed).latestRoundData();\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param _interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IPriceOracleV2).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice Sets the priceDrop for a pair of assets.\\n     * @param _assetA The address of the first asset in the pair.\\n     * @param _assetB The address of the second asset in the pair.\\n     * @param _pairPriceDrop The priceDrop value in WAD format to be set for the pair.\\n     */\\n    function _setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) internal {\\n        _require(_assetA != address(0) && _assetB != address(0), Errors.ASSET_ADDRESS_NOT_SUPPORTED.selector);\\n        _require(_assetA != _assetB, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n        pairPriceDrops[_assetA][_assetB] = _pairPriceDrop;\\n        emit PairPriceDropChanged(_assetA, _assetB, _pairPriceDrop);\\n    }\\n\\n    function _updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) internal {\\n        _require(assetA != assetB, Errors.IDENTICAL_TOKEN_ADDRESSES.selector);\\n        oraclePriceDropFeeds[assetA][assetB] = priceDropFeed;\\n        emit PriceDropFeedUpdated(assetA, assetB, priceDropFeed);\\n    }\\n\\n    /**\\n     * @dev Checks, whether a token-to-usd pair exists for the oracles Pyth, CL, and Supra.\\n     */\\n    function _checkTokenToUsd(address _token) internal view returns (bool) {\\n        // check pyth\\n        if (pythPairIds[_token] != bytes32(0)) return true;\\n\\n        // check CL\\n        if (chainlinkPriceFeedsUsd[_token] != address(0)) return true;\\n\\n        // check Supra USD\\n        SupraDataFeedId storage feedUsd = supraDataFeedID[_token][USD];\\n        if (feedUsd.initialize) return true;\\n\\n        // check Supra USDT\\n        SupraDataFeedId storage feedUSDT = supraDataFeedID[_token][usdt];\\n        if (feedUSDT.initialize) return true;\\n        return false;\\n    }\\n\\n    function _setTreasury(address _treasury) internal {\\n        _require(\\n            IERC165Upgradeable(_treasury).supportsInterface(type(ITreasury).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        treasury = _treasury;\\n    }\\n}\\n\",\"keccak256\":\"0xa19df14ba11e1f472094c5599abafa3b8d2434375c6bc35ff3d3c35070753fd5\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/PriceOracleStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\nimport {IPriceOracleStorage, IPriceOracleStorageV2, IPriceOracleStorageV3, IPriceOracleStorageV4} from \\\"./IPriceOracleStorage.sol\\\";\\n\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {PythStructs} from \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport {ISupraOraclePull} from \\\"../interfaces/ISupraOraclePull.sol\\\";\\nimport {ISupraSValueFeed} from \\\"../interfaces/ISupraSValueFeed.sol\\\";\\nimport {IOrallyVerifierOracle} from \\\"@orally-network/solidity-sdk/IOrallyVerifierOracle.sol\\\";\\nimport {IStorkVerify} from \\\"../interfaces/IStorkVerify.sol\\\";\\nimport {IUniswapV2LPOracle} from \\\"../UniswapV2LPOracle/IUniswapV2LPOracle.sol\\\";\\n\\nabstract contract PriceOracleStorage is IPriceOracleStorage, ERC165Upgradeable {\\n    address public override registry;\\n    address public override eth;\\n    address public override gasPriceFeed;\\n\\n    // PriceDrop of asset A relative to asset B\\n    mapping(address => mapping(address => uint256)) public override pairPriceDrops;\\n\\n    /**\\n     * @notice The mapping stores priceDrop feeds adresses associated with the asset pair.\\n     * @dev 'The address of the first asset in the pair' -> ' The address of the second asset in the pair' -> 'priceDrop feed address'\\n     */\\n    mapping(address => mapping(address => address)) internal oraclePriceDropFeeds;\\n\\n    /**\\n     * @notice The mapping stores price feeds for currency pairs.\\n     * @dev 'base currency address' -> 'quote currency address' -> 'price feed address'\\n     */\\n    mapping(address => mapping(address => address)) internal chainLinkPriceFeeds;\\n}\\n\\nabstract contract PriceOracleStorageV2 is IPriceOracleStorageV2, PriceOracleStorage {\\n    IPyth public override pyth;\\n    uint256 public override timeTolerance;\\n    // baseToken => chainlink usd price feed;\\n    mapping(address => address) public override chainlinkPriceFeedsUsd;\\n\\n    // baseToken => the pyth ID of the price feed to get an update for\\n    mapping(address => bytes32) public override pythPairIds;\\n\\n    // oracleType => corresponding oracle address\\n    mapping(uint256 => address) public override univ3TypeOracles;\\n\\n    // univ3TypeOracles => tokenA => tokenB\\n    mapping(uint256 => mapping(address => mapping(address => bool))) public override univ3TrustedPairs;\\n}\\n\\nabstract contract PriceOracleStorageV3 is IPriceOracleStorageV3, PriceOracleStorageV2 {\\n    ISupraOraclePull public override supraPullOracle;\\n    ISupraSValueFeed public override supraStorageOracle;\\n\\n    // assetA => assetB => feedId\\n    mapping(address => mapping(address => SupraDataFeedId)) public override supraDataFeedID;\\n    address public override usdt;\\n    address public override treasury;\\n}\\n\\nabstract contract PriceOracleStorageV4 is IPriceOracleStorageV4, PriceOracleStorageV3 {\\n    //orally oracle\\n    IOrallyVerifierOracle public override orallyOracle;\\n    // asset => asset => orallySymbol\\n    mapping(address => mapping(address => string)) public override orallySymbol;\\n\\n    uint256 public override orallyTimeTolerance;\\n    //stork oracle\\n    IStorkVerify public override storkVerify;\\n    address public override storkPublicKey;\\n    // asset => asset => pair (BTCUSD)\\n    mapping(address => mapping(address => string)) public override storkAssetPairId;\\n\\n    // Curve oracleType => corresponding oracle address\\n    mapping(CurveOracleKind => address) public override curveTypeOracles;\\n    // ERC4626 token to its underlying asset\\n    // for the statAToken it will be underlying asset of the AToken\\n    mapping(address => address) public override eip4626TokenToUnderlyingAsset;\\n\\n    mapping(address => bool) public override isUniswapV2LP;\\n\\n    IUniswapV2LPOracle public override uniswapV2LPOracle;\\n}\\n\",\"keccak256\":\"0xfd9cd75c8b795d0e350ec01f999049928e3e23899796a3591205533fd52e1dfa\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury/ITreasury.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITreasuryStorage} from \\\"./ITreasuryStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITreasury is ITreasuryStorage, IPausable {\\n    event MaxSpendingLimitChanged(address indexed spender, address indexed token, SpendingLimits newSpendingLimits);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param registry The address of Registry contract\\n     */\\n    function initialize(address registry) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @notice Transfers an amount of ERC20 or native token from the contract treasury to\\n     *  a receiver address, subject to certain restrictions imposed by the spender.\\n     * @dev The function checks the spender's transfer restrictions per transaction and per timeframe.\\n     * @param amount The amount of tokens to transfer.\\n     * @param token The address of the token to transfer. Use the address NATIVE_TOKEN_ADDRESS for native token.\\n     * @param receiver The address of the receiver\\n     */\\n    function transferFromTreasury(uint256 amount, address token, address receiver) external;\\n\\n    /**\\n     * @notice Sets the maximum spending limit and other restrictions for a given spender and token.\\n     * @dev This function can only be called by an address with the BIG_TIMELOCK_ADMIN role.\\n     * @param spender The address of the spender for whom to set the new spending limit.\\n     * @param token The address of the token for which to set the new spending limit.\\n     * @param newSpendingLimits The new spending limits and restrictions to set for the spender and token.\\n     */\\n    function setMaxSpendingLimit(address spender, address token, SpendingLimits calldata newSpendingLimits) external;\\n\\n    /**\\n     * @notice Decreases Spending limits for a spender for a specific token.\\n     * @dev This function can only be called by an address with the SMALL_TIMELOCK_ADMIN role.\\n     * @param spender The address of the spender for whom to decrease the maximum transfer amounts and total amount.\\n     * @param token The address of the token for which to decrease the maximum transfer amounts and total amount.\\n     * @param newSpendingLimits The new spending limits and restrictions to set for the spender and token.\\n     */\\n    function decreaseLimits(address spender, address token, SpendingLimits calldata newSpendingLimits) external;\\n\\n    /**\\n     * @notice Checks whether a spender can transfer tokens based on the minimum time between transfers imposed by the spending restrictions.\\n     * @param spender The address of the spender to check for.\\n     * @param token The address of the token for which to check the time restrictions.\\n     * @return A boolean indicating whether the spender can transfer tokens based on the minimum time between transfers.\\n     */\\n    function canTransferByTime(address spender, address token) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd7aded330c00ef654ee0dc462b2f8ac8c6904d39ea0d492a61449408cef33fe0\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury/ITreasuryStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITreasuryStorage {\\n    struct SpendingLimits {\\n        //transfer settings\\n        uint256 maxTotalAmount;\\n        uint256 maxAmountPerTransfer;\\n        uint256 maxPercentPerTransfer;\\n        uint256 minTimeBetweenTransfers;\\n        // timeframe settings\\n        uint256 timeframeDuration;\\n        uint256 maxAmountDuringTimeframe;\\n    }\\n    struct SpendingInfo {\\n        bool isSpenderExist;\\n        SpendingLimits limits;\\n        uint256 lastWithdrawalTimestamp;\\n        uint256 withdrawnDuringTimeframe;\\n    }\\n\\n    event TransferFromTreasury(\\n        address indexed spender,\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    function spenders(\\n        address spender,\\n        address token\\n    ) external returns (bool, SpendingLimits calldata, uint256, uint256);\\n\\n    function initialTimestamp() external returns (uint256);\\n\\n    function registry() external returns (IAccessControl);\\n}\\n\",\"keccak256\":\"0x95cf210b879cf7510bc35da0306a7c229cb5f90f842c97f341cb5794095e6276\",\"license\":\"BUSL-1.1\"},\"contracts/UniswapV2LPOracle/IUniswapV2LPOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IUniswapV2LPOracle {\\n    function getQuoteInUsd(\\n        address lpToken,\\n        uint256 amount,\\n        bytes calldata token0UsdOracleData,\\n        bytes calldata token1UsdOracleData\\n    ) external returns (uint256);\\n\\n    function getLPExchangeRate(\\n        IUniswapV2Pair pair,\\n        bytes calldata token0UsdOracleData,\\n        bytes calldata token1UsdOracleData\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1d234b20d5ed0b581aa6c696639c3473287929667ad5f256bfaaf88e509951a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `approve` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     */\\n    function approve(address spender, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xd8ed07c2eb87e6e0e774ef1a92e62e6a3bf1e99d1a3cd365efc21011843688a9\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/IArbGasInfo.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exists in every Arbitrum Nitro chain at 0x000000000000000000000000000000000000006c.\\ninterface IArbGasInfo {\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n\\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\\n    /// @return return gas prices in wei\\n    ///        (\\n    ///            per L2 tx,\\n    ///            per L1 calldata byte\\n    ///            per storage allocation,\\n    ///            per ArbGas base,\\n    ///            per ArbGas congestion,\\n    ///            per ArbGas total\\n    ///        )\\n    function getPricesInWei() external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xec7f78ef81a1aee6f7cf835a6dd75313e8f02fc2ef4e4044871bf1ee8fe02080\"},\"contracts/interfaces/IOVM_GasPriceOracle.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exist on opBNB chain at 0x420000000000000000000000000000000000000F.\\ninterface IOVM_GasPriceOracle {\\n    /// @notice returns an upper bound for the L1 fee for a given transaction size.\\n    /// It is provided for callers who wish to estimate L1 transaction costs in the\\n    /// write path, and is much more gas efficient than `getL1Fee`.\\n    /// It assumes the worst case of fastlz upper-bound which covers %99.99 txs.\\n    /// @param _unsignedTxSize Unsigned fully RLP-encoded transaction size to get the L1 fee for.\\n    /// @return L1 estimated upper-bound fee that should be paid for the tx\\n    function getL1FeeUpperBound(uint256 _unsignedTxSize) external view returns (uint256);\\n\\n    /// @notice Retrieves the current gas price (base fee).\\n    /// @return Current L2 gas price (base fee).\\n    function gasPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fc2611c6c185d738d5370fb217f04ecc60b07c299abbc0b04130eb2b085ccce\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// Copyright (c) 2016-2024 zOS Global Limited and contributors\\n// SPDX-License-Identifier: MIT\\n\\n// Interface for OpenZeppelin's Pausable contract from https://github.com/OpenZeppelin/openzeppelin-contracts/\\npragma solidity ^0.8.18;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Triggers stopped state.\\n     * This function can only be called by an address with the EMERGENCY_ADMIN role.\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract.\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xd36ff25b5efe39529dd92bec8aab8fba396c7fc7fed936e64a1de358e52ad2e4\",\"license\":\"MIT\"},\"contracts/interfaces/IStorkVerify.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\n/* solhint-disable */\\n\\ninterface IStorkVerify {\\n    function verifySignature(\\n        address oracle_pubkey,\\n        string memory asset_pair_id,\\n        uint256 timestamp,\\n        uint256 price,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xd37f0c3c2f7862f9a55579ef13c4a5af4e541c935586b05aeca3799de8b0d3d0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISupraOraclePull.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ISupraOraclePull {\\n    //Verified price data\\n    struct PriceData {\\n        // List of pairs\\n        uint256[] pairs;\\n        // List of prices\\n        // prices[i] is the price of pairs[i]\\n        uint256[] prices;\\n        // List of decimals\\n        // decimals[i] is the decimals of pairs[i]\\n        uint256[] decimals;\\n    }\\n\\n    function verifyOracleProof(bytes calldata _bytesproof) external returns (PriceData memory);\\n}\\n\",\"keccak256\":\"0xf38fcd53bef093ff9dee4914a2ac0ccbe383d624ed6a13ee079c0545cae69198\",\"license\":\"MIT\"},\"contracts/interfaces/ISupraSValueFeed.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/* solhint-disable var-name-mixedcase */\\ninterface ISupraSValueFeed {\\n    struct derivedData {\\n        int256 roundDifference;\\n        uint256 derivedPrice;\\n        uint256 decimals;\\n    }\\n\\n    struct priceFeed {\\n        uint256 round;\\n        uint256 decimals;\\n        uint256 time;\\n        uint256 price;\\n    }\\n\\n    function getDerivedSvalue(\\n        uint256 pair_id_1,\\n        uint256 pair_id_2,\\n        uint256 operation\\n    ) external view returns (derivedData memory);\\n\\n    function getSvalue(uint256 _pairIndex) external view returns (priceFeed memory);\\n}\\n\",\"keccak256\":\"0x7b4e9eaabfd4e929d1006ddb1c01684875eeb95a2c64ac8a848e61b91a8ee21f\",\"license\":\"MIT\"},\"contracts/interfaces/IUniLikeOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IUniLikeOracle {\\n    function getExchangeRate(address baseToken, address quoteToken) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xe20040ff35672ca98995e2876b5cdf690991f5766da748f42483a5ec28f61fbc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/curve/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface ICurveAddressProvider {\\n    /* solhint-disable func-name-mixedcase */\\n    /* solhint-disable var-name-mixedcase */\\n    function get_registry() external view returns (address);\\n\\n    function get_id_info(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (address addr, bool is_active, uint256 version, uint256 last_modified, string memory description);\\n\\n    function get_address(uint256 id) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfca417f82f1e055a1df52f88c0a9019f60ef887c68c78f2a8d76712ffcc58cce\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    error SWAP_DEADLINE_PASSED();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error INVALID_AMOUNT();\\n    error POOL_CALL_FAILED();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n    error INCORRECT_BORROWED_AMOUNT();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error WRONG_DEADLINE();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error THERE_IS_DIRECT_ROUTE();\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n    error WRONG_ORACLE_ROUTES_LENGTH();\\n    error WRONG_ASSET_B();\\n    error INCORRECT_ROUTE_SEQUENCE();\\n    error INCORRECT_PYTH_PRICE();\\n    error INCORRECT_ORALLY_PRICE();\\n    error TOKEN_PAIR_IS_NOT_TRUSTED();\\n    error INCORRECT_TOKEN_TO();\\n    error INCORRECT_PYTH_ROUTE();\\n    error INCORRECT_CHAINLINK_ROUTE();\\n    error INCORRECT_CURVELP_ROUTE();\\n    error INCORRECT_UNISWAPV2LP_ROUTE();\\n    error ADDRESS_IS_NOT_UNISWAPV2LP_TOKEN();\\n    error NOT_ENOUGH_MSG_VALUE();\\n    error PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME();\\n    error STORK_VERIFY_FAILED();\\n    error NO_TOKEN_SYMBOL_FOUND();\\n    error NO_TOKEN_PAIR_FOUND();\\n    error INCORRECT_EIP4626_ROUTE();\\n    error NO_UNDERLYING_TOKEN_FOUND();\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n    error LEVERAGE_TOLERANCE_IS_NOT_CORRECT();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error LEVERAGE_TOLERANCE_EXCEEDED();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n    error MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error TOKEN_APPROVE_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n    error INCORRECT_OPTIMISM_GAS_COEFFICIENT();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n\\n    //FlashLoan\\n    error INCONSISTENT_FLASHLOAN_PARAMS();\\n    error INVALID_FLASHLOAN_EXECUTOR_RETURN();\\n    error FLASH_LOAN_FEE_RATE_IS_MORE_10_PERCENT();\\n    error FLASH_LOAN_PROTOCOL_RATE_IS_MORE_50_PERCENT();\\n\\n    // DepositManager\\n    error REWARD_PERCENT_SHOULD_BE_GREATER_THAN_ZERO();\\n    error TOKEN_CANNOT_BE_P_TOKEN();\\n    //Curve oracle\\n    error ORACLE_NOT_SUPPORT_LP();\\n    error ZERO_ADDRESS();\\n    error REENTRANCY_RISK();\\n    error ORACLE_DATA_AND_TOKENS_LENGTH_MISMATCH();\\n    error INCORRECT_LIMITS();\\n    error INCORRECT_ORACLE_DATA();\\n    error VALUE_OUT_OF_RANGE();\\n    //UniswapV2LPOracle\\n    error INVALID_RESERVES();\\n    error INVALID_PRICES();\\n\\n    // TiersManager\\n    error INCORRECT_TIERS_ORDER();\\n    error INCORRECT_TIER();\\n}\\n\",\"keccak256\":\"0xa994f6418d472a072bf4cb0e4c124e01a8a89847cc275a0793e474e68484087d\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TokenTransfersLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of token transfer logic that allows working with non-standart ERC-20 tokens, added method doTransferFromTo,\\n// modified doTransferIn\\n\\npragma solidity 0.8.26;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenTransfersLibrary {\\n    function doTransferIn(address token, address from, uint256 amount) public returns (uint256) {\\n        return doTransferFromTo(token, from, address(this), amount);\\n    }\\n\\n    function doTransferFromTo(address token, address from, address to, uint256 amount) public returns (uint256) {\\n        uint256 balanceBefore = IERC20(token).balanceOf(to);\\n        // The returned value is checked in the assembly code below.\\n        // Arbitrary `from` should be checked at a higher level. The library function cannot be called by the user.\\n        // slither-disable-next-line unchecked-transfer arbitrary-send-erc20\\n        EIP20NonStandardInterface(token).transferFrom(from, to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_IN_FAILED.selector);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = IERC20(token).balanceOf(to);\\n        _require(balanceAfter >= balanceBefore, Errors.TOKEN_TRANSFER_IN_OVERFLOW.selector);\\n\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    function doTransferOut(address token, address to, uint256 amount) public {\\n        // The returned value is checked in the assembly code below.\\n        // slither-disable-next-line unchecked-transfer\\n        EIP20NonStandardInterface(token).transfer(to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_OUT_FAILED.selector);\\n    }\\n\\n    function doTransferOutETH(address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        _require(success, Errors.NATIVE_TOKEN_TRANSFER_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x1d8585473739875d2f97e984ac6752b121a656bcded82f73c4b06174ab8786d9\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.26;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x49afef0dbc484e0e513c163ee4ce090a30fa061c47a262046c0a7311092a3756\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523460bd576000549060ff8260081c16606b575060ff808216036031575b604051614fbe90816100c38239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a1386022565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a71461312f5750806304aca68b14612fe05780630a3c434c14612eb55780630bc6b20314612e515780630fa95a4214612e33578063150fc4dd14612df457806318c92f4114612dcb5780631e6a948f14612da257806322c1ea4014612d4c5780632ecd987d14612caa5780632f48ab7d14612c8157806339d9043414612ae6578063416be2f3146126b4578063455259cb146126205780634858138f146125cf57806350c1b9231461252d57806350d3a9c61461228e57806350f60990146122485780635362be5a146121da57806354f76237146121385780635510bfce14611f205780635d4934c014611e7e5780635e25359714611d4157806361d027b314611d1857806376b926e414611cec5780637b10399914611cc35780638457473814611c595780638c7c9e0c14611c305780638eeae4a714611c07578063970b6e7814611b5257806398bbc8dd14611b1e5780639fb9b68f14611a7c578063a5bbe8b5146119d3578063a6d1b92014611991578063ac8c5db914611901578063b29ce00d146118c7578063b45994f8146117ee578063b508e5d11461174c578063b8b72b1f14611491578063bc5adf3714611376578063be49304e14611292578063c83978fa14611274578063caf8f6b31461124b578063cbaf3d091461118c578063cc2e4c4b14611052578063ce87385314610f30578063da3bd62114610e0c578063dec0af6a14610dd8578063e1031e0e14610d36578063e6402f3d14610cf4578063e963971514610ccb578063e9a8f48414610baf578063ee22fd6f14610b0d578063ef44920d14610ae4578063f0c9738e14610abe578063f0f4426014610a33578063f197ce3514610620578063f7d2401a14610559578063f8c8765e146102e15763f98d06f0146102b357600080fd5b346102dc5760003660031901126102dc576039546040516001600160a01b039091168152602090f35b600080fd5b346102dc5760803660031901126102dc576102fa613202565b610302613218565b61030a61322e565b606435906001600160a01b03821682036102dc576000549360ff8560081c16159485809661054c575b8015610535575b156104d95760ff198116600117600055856104c7575b506040516301ffc9a760e01b8152637965db0b60e01b60048201526001600160a01b03919091169390602081602481885afa9081156104bb5760009161048c575b501561047a57603380546001600160a01b031990811690951790556034805485166001600160a01b03928316179055604280549094169116179091556103d690614daa565b6000549060ff8260081c1615610421576103ec57005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60405163044aa57560e41b8152600490fd5b6104ae915060203d6020116104b4575b6104a681836132cf565b810190613450565b86610391565b503d61049c565b6040513d6000823e3d90fd5b61ffff19166101011760005585610350565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561033a5750600160ff82161461033a565b50600160ff821610610333565b346102dc5760203660031901126102dc576004356044602060018060a01b036033541660405192838092632474521560e21b8252600080516020614f4983398151915260048301523360248301525afa9081156104bb57600091610601575b50156105ef576020817fe588a2371c46c5565aa8f0737ea1b716d8518750afaa9a930c8df8877d8746c492604655604051908152a1005b60405163036be76f60e61b8152600490fd5b61061a915060203d6020116104b4576104a681836132cf565b826105b8565b610629366131b2565b92838303610a2157349360005b8181106106bf57858061064557005b60008060018060a01b03604354166020936040519061066486836132cf565b83825285820191601f19870136843751925af1903d156106b95760003d9161068b836134c0565b9261069960405194856132cf565b83523d92013e5b156106a757005b60405163c71509d160e01b8152600490fd5b506106a0565b6106ca818386613468565b356107de5760395461070c966001600160a01b03909116919060206106f08389886137bb565b60405163d47eed4560e01b81529a8b9283929060048401613914565b0381865afa9788156104bb576000986107a8575b508088116107975787610732916134db565b9661073e8288876137bb565b9093803b156102dc57604051631df3cbc560e31b81529460009386938492839161076b9160048401613914565b03925af19182156104bb57600192610786575b505b01610636565b6000610791916132cf565b8761077e565b604051624726cd60e11b8152600490fd5b90976020823d82116107d6575b816107c2602093836132cf565b810103126107d35750519688610720565b80fd5b3d91506107b5565b60016107eb828487613468565b350361092857603f546001600160a01b0316906108098187866137bb565b15610912576108469261081e82600093613594565b83604093929351809781958294632ce81dbd60e21b84526020600485015260248401916135c6565b03925af180156104bb5761085e575b60019150610780565b3d806000843e61086e81846132cf565b8201916020818403126102dc578051906001600160401b0382116102dc57016060818403126102dc57604051906108a48261327e565b80516001600160401b0381116102dc57846108c09183016138b7565b825260208101516001600160401b0381116102dc57846108e19183016138b7565b60208301526040810151906001600160401b0382116102dc5760019460409261090a92016138b7565b910152610855565b634e487b7160e01b600052603260045260246000fd5b6002610935828487613468565b3514610944575b600190610780565b926000959192955b6109578587896137bb565b9050811015610a14576044546001600160a01b031661097786888a6137bb565b600090841015610a00575082916109996000926109c39560051b810190613594565b6040516340bd1a9f60e01b81526020600482015295869392849286928492909160248401916135c6565b03925af19182156104bb576001926109dd575b500161094c565b6109f9903d806000833e6109f181836132cf565b810190613834565b50886109d6565b634e487b7160e01b81526032600452602490fd5b509094909290919061093c565b60405163554a08d160e11b8152600490fd5b346102dc5760203660031901126102dc57610a4c613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091610a9f575b50156105ef57610a9d90614daa565b005b610ab8915060203d6020116104b4576104a681836132cf565b82610a8e565b346102dc5760003660031901126102dc57602060018060a01b0360405416604051908152f35b346102dc5760003660031901126102dc57603f546040516001600160a01b039091168152602090f35b346102dc5760203660031901126102dc57610b26613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091610b90575b50156105ef57603980546001600160a01b0319166001600160a01b0392909216919091179055005b610ba9915060203d6020116104b4576104a681836132cf565b82610b68565b346102dc57610bbd366131b2565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291949190602090829060449082906001600160a01b03165afa9081156104bb57600091610cac575b50156105ef57838303610a215760005b838110610c2857005b80610c366001928786613468565b35828060a01b03610c50610c4b848988613468565b613478565b16600052603c602052604060002055610c6d610c4b828786613468565b610c78828887613468565b3590838060a01b03167f5f0ac2c1d339aa71cfd244b1806061c2dd58c142319c355a4b503464f39f0ce5600080a301610c1f565b610cc5915060203d6020116104b4576104a681836132cf565b85610c0f565b346102dc5760003660031901126102dc576044546040516001600160a01b039091168152602090f35b346102dc5760203660031901126102dc576001600160a01b03610d15613202565b16600052604b602052602060018060a01b0360406000205416604051908152f35b346102dc5760203660031901126102dc57610d4f613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091610db9575b50156105ef57604d80546001600160a01b0319166001600160a01b0392909216919091179055005b610dd2915060203d6020116104b4576104a681836132cf565b82610d91565b346102dc5760203660031901126102dc57600435600052603d602052602060018060a01b0360406000205416604051908152f35b346102dc5760203660031901126102dc576004356001600160401b0381116102dc57610e3c903690600401613182565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb57600091610f11575b50156105ef5760005b828110610ea057005b6001906001600160a01b03610eb9610c4b838787613468565b16600052604c60205260406000208260ff19825416179055818060a01b03610ee5610c4b838787613468565b167fd63a7e11f9ca79ad96b1afb09ff5d5e3f49476dca65c972896e83135314a273f600080a201610e97565b610f2a915060203d6020116104b4576104a681836132cf565b83610e8e565b346102dc5760203660031901126102dc576004356001600160401b0381116102dc57610f60903690600401613182565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb57600091611033575b50156105ef5760005b828110610fc457005b6001906001600160a01b03610fdd610c4b838787613468565b16600052604c602052604060002060ff198154169055818060a01b03611007610c4b838787613468565b167f0d995214b04653d7a20d03bf4d4e1ad1e893df0fb927faa445f402e9b880bef8600080a201610fbb565b61104c915060203d6020116104b4576104a681836132cf565b83610fb2565b346102dc57611060366131b2565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb5760009161116d575b50156105ef57818303610a215760005b8381106110cb57005b806110dc610c4b6001938686613468565b828060a01b036110f0610c4b84898b613468565b16600052603b602052604060002090838060a01b03166001600160601b0360a01b825416179055611125610c4b828789613468565b828060a01b03611139610c4b848888613468565b1690838060a01b03167fe57bb0967c057cc1250686db6226a32119cd5417ae09e1905b8f844499880fe2600080a3016110c2565b611186915060203d6020116104b4576104a681836132cf565b856110b2565b346102dc5761119a36613416565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb5760009161122c575b50156105ef578115158061121b575b1561120957610a9d92614d04565b604051633c15d6ff60e21b8152600490fd5b50670de0b6b3a764000082106111fb565b611245915060203d6020116104b4576104a681836132cf565b846111ec565b346102dc5760003660031901126102dc57604d546040516001600160a01b039091168152602090f35b346102dc5760003660031901126102dc576020604654604051908152f35b346102dc576112a036613416565b603354604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb57600091611357575b50156105ef576001600160a01b03838116600090815260366020908152604080832093851683529290522054821180611345571561120957610a9d92614d04565b506706f05b59d3b200008211156111fb565b611370915060203d6020116104b4576104a681836132cf565b84611304565b346102dc5760203660031901126102dc576004356001600160401b0381116102dc57366023820112156102dc578060040135906001600160401b0382116102dc57602481019060243691606085020101116102dc57603354604051632474521560e21b8152600080516020614f69833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091611472575b50156105ef5760005b82811061142c57005b8061146c611440610c4b600194878761378b565b611456602061145085898961378b565b01613478565b6114666040611450868a8a61378b565b91614c8f565b01611423565b61148b915060203d6020116104b4576104a681836132cf565b8361141a565b346102dc5760203660031901126102dc576004356001600160401b0381116102dc576114c1903690600401613182565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb5760009161172d575b50156105ef57906000915b80831061152457005b611538611532848385613572565b80613594565b93906001600160a01b036115526020611450858789613572565b1660005260496020526040806000206115708261145086888a613572565b6001600160a01b0316600090815260209190915220906001600160401b0386116117175761159e8254613244565b601f81116116cf575b50600090601f871160011461166757958091600195969760009261165c575b5050600019600383901b1c191690841b1790555b6115ea6020611450838688613572565b6115fa6040611450848789613572565b7f4dbaefd1a2b997bf0a063a0ad7e482d970c424dc4a8b9fdb33669e9d1c9ad69861162961153285888a613572565b9261165160405192839260208452898060a01b031696898060a01b03169560208401916135c6565b0390a301919061151b565b0135905087806115c6565b8282526020822091601f198816815b8181106116b757509160019697989291838895931061169d575b505050811b0190556115da565b0135600019600384901b60f8161c19169055878080611690565b83830135855560019094019360209283019201611676565b826000526020600020601f880160051c8101916020891061170d575b601f0160051c01905b81811061170157506115a7565b600081556001016116f4565b90915081906116eb565b634e487b7160e01b600052604160045260246000fd5b611746915060203d6020116104b4576104a681836132cf565b83611510565b346102dc5760203660031901126102dc57611765613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb576000916117cf575b50156105ef57604780546001600160a01b0319166001600160a01b0392909216919091179055005b6117e8915060203d6020116104b4576104a681836132cf565b826117a7565b346102dc5760203660031901126102dc57611807613202565b603354604051632474521560e21b8152600080516020614f69833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb576000916118a8575b50156105ef57603580546001600160a01b0319166001600160a01b0390921691821790556040519081527f5689afd64620ca3aba1015be2907df3b5ae25149d96691ba3de19f92e96ec14d90602090a1005b6118c1915060203d6020116104b4576104a681836132cf565b82611856565b346102dc5760203660031901126102dc576001600160a01b036118e8613202565b16600052603c6020526020604060002054604051908152f35b346102dc5760403660031901126102dc5761191a613202565b611922613218565b906001600160a01b03908116908216811461197f5760009081526037602090815260408083206001600160a01b03948516845290915290205416801561196d57602090604051908152f35b604051636ae912f160e11b8152600490fd5b60405163b213646160e01b8152600490fd5b346102dc5760203660031901126102dc576001600160a01b036119b2613202565b16600052603b602052602060018060a01b0360406000205416604051908152f35b346102dc5760603660031901126102dc576119ec613202565b6119f4613218565b6119fc61322e565b603354604051632474521560e21b8152600080516020614f69833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb57600091611a5d575b50156105ef57610a9d92614c8f565b611a76915060203d6020116104b4576104a681836132cf565b84611a4e565b346102dc5760203660031901126102dc57611a95613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091611aff575b50156105ef57603f80546001600160a01b0319166001600160a01b0392909216919091179055005b611b18915060203d6020116104b4576104a681836132cf565b82611ad7565b346102dc5760403660031901126102dc576020611b4a611b3c613202565b611b44613218565b9061367f565b604051908152f35b346102dc5760203660031901126102dc576004356044602060018060a01b036033541660405192838092632474521560e21b8252600080516020614f4983398151915260048301523360248301525afa9081156104bb57600091611be8575b50156105ef576020817f13c9323fdd8bdc59bca744cb04a1255896c91de5ebfd82b75e0040ffd672a2ec92603a55604051908152a1005b611c01915060203d6020116104b4576104a681836132cf565b82611bb1565b346102dc5760003660031901126102dc576048546040516001600160a01b039091168152602090f35b346102dc5760003660031901126102dc576034546040516001600160a01b039091168152602090f35b346102dc5760603660031901126102dc57611c72613218565b611c7a61322e565b90600435600052603e60205260406000209060018060a01b031660005260205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346102dc5760003660031901126102dc576033546040516001600160a01b039091168152602090f35b346102dc5760403660031901126102dc576020611b4a611d0a613202565b611d12613218565b906135e7565b346102dc5760003660031901126102dc576043546040516001600160a01b039091168152602090f35b346102dc57611d4f366131b2565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291949190602090829060449082906001600160a01b03165afa9081156104bb57600091611e5f575b50156105ef57838303610a215760005b838110611dba57005b80611dcb610c4b6001938887613468565b828060a01b03611ddf610c4b848988613468565b16600052604b602052604060002090838060a01b03166001600160601b0360a01b825416179055611e14610c4b828786613468565b7fd9c8bb4bc29d42f7149cb137ee0071b6acae6b34c414465e87e4bca0ad83d2a86020611e45610c4b858b8a613468565b60405160a087901b8790039182168152931692a201611db1565b611e78915060203d6020116104b4576104a681836132cf565b85611da1565b346102dc5760203660031901126102dc57611e97613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091611f01575b50156105ef57604080546001600160a01b0319166001600160a01b0392909216919091179055005b611f1a915060203d6020116104b4576104a681836132cf565b82611ed9565b346102dc5760203660031901126102dc576004356001600160401b0381116102dc57611f509036906004016133dc565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091612119575b50156105ef5760005b818110611fb157005b8061203a611fcd6060611fc7600195878961348c565b0161349c565b611fd883868861348c565b35600052603e60205260408080600020611ff86020611450888b8d61348c565b90600091888060a01b031682526020522061201882611450878a8c61348c565b90600091878060a01b03168252602052209060ff801983541691151516179055565b61209861204d6060611fc784878961348c565b61205883868861348c565b35600052603e6020526040808060002061207782611450888b8d61348c565b90600091888060a01b03168252602052206120186020611450878a8c61348c565b6120a381848661348c565b356120b4602061145084878961348c565b906120c5604061145085888a61348c565b907fb9a3049feba6628f1f03d582f4092ed3d7b923b1e9b3e115ac55f7fd2d78198f60206120f96060611fc7888b8d61348c565b936040519415158552878060a01b031694878060a01b031693a401611fa8565b612132915060203d6020116104b4576104a681836132cf565b83611f9f565b346102dc5760203660031901126102dc57612151613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb576000916121bb575b50156105ef57604480546001600160a01b0319166001600160a01b0392909216919091179055005b6121d4915060203d6020116104b4576104a681836132cf565b82612193565b346102dc5760403660031901126102dc576121f3613202565b6121fb613218565b9060018060a01b0316600052604560205260406000209060018060a01b031660005260205261224461223060406000206132f0565b6040519182916020835260208301906133b7565b0390f35b346102dc5760203660031901126102dc5760043560038110156102dc5761226e8161340c565b600052604a602052602060018060a01b0360406000205416604051908152f35b346102dc5760203660031901126102dc576004356001600160401b0381116102dc576122be903690600401613182565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb5760009161250e575b50156105ef57906000915b80831061232157005b61232f611532848385613572565b93906001600160a01b036123496020611450858789613572565b1660005260456020526040806000206123678261145086888a613572565b6001600160a01b0316600090815260209190915220906001600160401b038611611717576123958254613244565b601f81116124c6575b50600090601f871160011461245e579580916001959697600092612453575b5050600019600383901b1c191690841b1790555b6123e16020611450838688613572565b6123f16040611450848789613572565b7f6d9aa9fead4615c8c7f606f3037bd4acd950dcbd5676999b5923de04025da9a861242061153285888a613572565b9261244860405192839260208452898060a01b031696898060a01b03169560208401916135c6565b0390a3019190612318565b0135905087806123bd565b8282526020822091601f198816815b8181106124ae575091600196979892918388959310612494575b505050811b0190556123d1565b0135600019600384901b60f8161c19169055878080612487565b8383013585556001909401936020928301920161246d565b826000526020600020601f880160051c81019160208910612504575b601f0160051c01905b8181106124f8575061239e565b600081556001016124eb565b90915081906124e2565b612527915060203d6020116104b4576104a681836132cf565b8361230d565b346102dc5760203660031901126102dc57612546613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb576000916125b0575b50156105ef57604280546001600160a01b0319166001600160a01b0392909216919091179055005b6125c9915060203d6020116104b4576104a681836132cf565b82612588565b346102dc5760403660031901126102dc576125e8613202565b6125f0613218565b6001600160a01b039182166000908152603660209081526040808320949093168252928352819020549051908152f35b346102dc5760003660031901126102dc576035546001600160a01b0316600081612650575b602090604051908152f35b5060a060049160405192838092633fabe5a360e21b82525afa80156104bb57602091600091612680575b50612645565b6126a2915060a03d60a0116126ad575b61269a81836132cf565b81019061353d565b50505090508261267a565b503d612690565b60603660031901126102dc576126c8613202565b6126d0613218565b906044356001600160401b0381116102dc57366023820112156102dc5780600401356001600160401b0381116102dc5781019060248201903682116102dc576020818403126102dc576024810135906001600160401b0382116102dc5701816043820112156102dc57602481013592612748846134a9565b9361275660405195866132cf565b808552602060248187019260051b85010101928484116102dc5760448101915b848310612a1a5788888880518015159081612a0f575b50156129fd57805160001981019081116129e7576001600160a01b03906127b39083613505565b5151166001600160a01b038416036129d55760038151146129a5575b60048151146128f4575b819291670de0b6b3a7640000926000936000925b84518410156128e95761280c60206128058688613505565b5101613519565b60098110156128d35760021480156128b2575b806128aa575b61286c575b906128436128499261283c8688613505565b5190613b31565b90614c12565b9460016001600160a01b0361285e8587613505565b5151169301929590956127ed565b9450612877866139a6565b8061289b575b6128895760019461282a565b604051630efbb43d60e21b8152600490fd5b506128a5826139a6565b61287d565b508515612825565b506128c260206128058688613505565b60098110156128d35760041461281f565b634e487b7160e01b600052602160045260246000fd5b602082604051908152f35b60206128ff826134e8565b51015160098110156128d3576002141560008161292e575b506127d95760405163980171a360e01b8152600490fd5b905061293e6020612805846134f8565b600981101561299157600214908115612959575b5084612917565b90506129696020612805846134f8565b90600982101561297d575060041484612952565b634e487b7160e01b81526021600452602490fd5b634e487b7160e01b82526021600452602482fd5b60206129b0826134e8565b51015160098110156128d3576002036127cf5760405163980171a360e01b8152600490fd5b6040516309bf411560e11b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b60405163308c6ea760e21b8152600490fd5b60059150108461278c565b82356001600160401b0381116102dc5782016024810191906060908603601f1901126102dc5760405191612a4d8361327e565b60208101356001600160a01b03811681036102dc578352604081013560098110156102dc57602084015260608101356001600160401b0381116102dc5760209101019087601f830112156102dc57813592612aa7846134c0565b612ab460405191826132cf565b84815289602086860101116102dc57600060208681978280980183860137830101526040820152815201920191612776565b346102dc5760203660031901126102dc576004356001600160401b0381116102dc57612b169036906004016133dc565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091612c62575b50156105ef5760005b818110612b7757005b80612bf4612b88600193858761348c565b838060a01b03612b9c610c4b85888a61348c565b16600052604160205283612be16060604089612bc260206114508a8d866000209561348c565b90600091868060a01b031682526020522093604081013585550161349c565b91019060ff801983541691151516179055565b612c02610c4b82858761348c565b612c12602061145084878961348c565b7fa38bfa44bbba9266438e9ec2c9f2001eb6517aa484626b25ec296ee888517f7960206040612c4286898b61348c565b013592604051938452868060a01b031693868060a01b031692a301612b6e565b612c7b915060203d6020116104b4576104a681836132cf565b83612b65565b346102dc5760003660031901126102dc576042546040516001600160a01b039091168152602090f35b346102dc5760203660031901126102dc57612cc3613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091612d2d575b50156105ef57604880546001600160a01b0319166001600160a01b0392909216919091179055005b612d46915060203d6020116104b4576104a681836132cf565b82612d05565b346102dc5760403660031901126102dc57612d65613202565b612d6d613218565b9060018060a01b0316600052604960205260406000209060018060a01b031660005260205261224461223060406000206132f0565b346102dc5760003660031901126102dc576035546040516001600160a01b039091168152602090f35b346102dc5760003660031901126102dc576047546040516001600160a01b039091168152602090f35b346102dc5760203660031901126102dc576001600160a01b03612e15613202565b16600052604c602052602060ff604060002054166040519015158152f35b346102dc5760003660031901126102dc576020603a54604051908152f35b346102dc5760403660031901126102dc57612e6a613202565b612e72613218565b9060018060a01b0316600052604160205260406000209060018060a01b031660005260205260408060002060ff6001825492015416825191825215156020820152f35b346102dc57612ec3366131b2565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015293949391929190602090829060449082906001600160a01b03165afa9081156104bb57600091612fc1575b50156105ef57818403610a215760005b848110612f3157005b80612f42610c4b6001938686613468565b612f4d828888613468565b35600052603d602052604060002090838060a01b03166001600160601b0360a01b825416179055612f7f818787613468565b35828060a01b03612f94610c4b848888613468565b16907f23e0d9edcf44c0ab085e4918b7030577f9da7dd0c7869257b4598f9e7ff59eff600080a301612f28565b612fda915060203d6020116104b4576104a681836132cf565b85612f18565b346102dc57612fee366131b2565b603354604051632474521560e21b8152600080516020614f6983398151915260048201523360248201529194939190602090829060449082906001600160a01b03165afa9081156104bb57600091613110575b50156105ef57838103610a215760005b81811061305a57005b613068610c4b828786613468565b613073828487613468565b3560038110156102dc576130868161340c565b600052604a60205260406000209060018060a01b03166001600160601b0360a01b8254161790556130b8818386613468565b359060038210156102dc576001916130d4610c4b838988613468565b6130dd8261340c565b838060a01b0316907fe6574ff52bd4d3e89a140bba3bd969bfa5aad8116f46d1bce8d214e3229b9b0c600080a301613051565b613129915060203d6020116104b4576104a681836132cf565b85613041565b346102dc5760203660031901126102dc576004359063ffffffff60e01b82168092036102dc576020916333ca6d2360e21b8114908115613171575b5015158152f35b6301ffc9a760e01b1490508361316a565b9181601f840112156102dc578235916001600160401b0383116102dc576020808501948460051b0101116102dc57565b60406003198201126102dc576004356001600160401b0381116102dc57816131dc91600401613182565b92909291602435906001600160401b0382116102dc576131fe91600401613182565b9091565b600435906001600160a01b03821682036102dc57565b602435906001600160a01b03821682036102dc57565b604435906001600160a01b03821682036102dc57565b90600182811c92168015613274575b602083101461325e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691613253565b606081019081106001600160401b0382111761171757604052565b608081019081106001600160401b0382111761171757604052565b604081019081106001600160401b0382111761171757604052565b90601f801991011681019081106001600160401b0382111761171757604052565b906040519182600082549261330484613244565b8084529360018116908115613372575060011461332b575b50613329925003836132cf565b565b90506000929192526020600020906000915b818310613356575050906020613329928201013861331c565b602091935080600191548385890101520191019091849261333d565b90506020925061332994915060ff191682840152151560051b8201013861331c565b60005b8381106133a75750506000910152565b8181015183820152602001613397565b906020916133d081518092818552858086019101613394565b601f01601f1916010190565b9181601f840112156102dc578235916001600160401b0383116102dc576020808501948460071b0101116102dc57565b600311156128d357565b60609060031901126102dc576004356001600160a01b03811681036102dc57906024356001600160a01b03811681036102dc579060443590565b908160209103126102dc575180151581036102dc5790565b91908110156109125760051b0190565b356001600160a01b03811681036102dc5790565b91908110156109125760071b0190565b3580151581036102dc5790565b6001600160401b0381116117175760051b60200190565b6001600160401b03811161171757601f01601f191660200190565b919082039182116129e757565b8051600110156109125760400190565b8051156109125760200190565b80518210156109125760209160051b010190565b5160098110156128d35790565b519069ffffffffffffffffffff821682036102dc57565b908160a09103126102dc5761355181613526565b9160208201519160408101519161356f608060608401519301613526565b90565b91908110156109125760051b81013590605e19813603018212156102dc570190565b903590601e19813603018212156102dc57018035906001600160401b0382116102dc576020019181360383136102dc57565b908060209392818452848401376000828201840152601f01601f1916010190565b906135f2818361367f565b9160018060a01b0316600052603660205260406000209060018060a01b03166000526020526040600020549080821160001461364957505b670de0b6b3a7640000811161363c5790565b50670de0b6b3a764000090565b905061362a565b519060ff821682036102dc57565b604d81116129e757600a0a90565b818102929181159184041417156129e757565b6001600160a01b0390811660009081526037602090815260408083209484168352939052919091205416801561378557604051633fabe5a360e21b81529060a082600481845afa9182156104bb57600092613759575b5060206004916040519283809263313ce56760e01b82525afa80156104bb5760009061371f575b60ff91501660120390601282116129e75761371961356f9261365e565b9061366c565b506020813d602011613751575b81613739602093836132cf565b810103126102dc5761374c60ff91613650565b6136fc565b3d915061372c565b600491925061377860209160a03d60a0116126ad5761269a81836132cf565b50505090509291506136d5565b50600090565b9190811015610912576060020190565b81156137a5570490565b634e487b7160e01b600052601260045260246000fd5b91908110156109125760051b81013590601e19813603018212156102dc5701908135916001600160401b0383116102dc576020018260051b360381136102dc579190565b9092919261380c816134c0565b9161381a60405193846132cf565b8294828452828201116102dc576020613329930190613394565b6020818303126102dc578051906001600160401b0382116102dc5701906080828203126102dc576040519161386883613299565b80516001600160401b0381116102dc57810182601f820112156102dc57606092816020613897935191016137ff565b835260208101516020840152604081015160408401520151606082015290565b9080601f830112156102dc5781516138ce816134a9565b926138dc60405194856132cf565b81845260208085019260051b8201019283116102dc57602001905b8282106139045750505090565b81518152602091820191016138f7565b9180602084016020855252604083019060408160051b8501019383600091601e1982360301905b84841061394c575050505050505090565b90919293949596603f198282030187528735838112156102dc57840190602082359201916001600160401b0381116102dc5780360383136102dc5761399760209283926001956135c6565b9901970195940192919061393b565b6001600160a01b03166000818152603c6020526040902054613a3e576000818152603b60205260409020546001600160a01b0316613a3e57806000526041602052604060002061034860005260205260ff60016040600020015416613a3e5760009081526041602090815260408083206042546001600160a01b0316845290915290206001015460ff16613a3957600090565b600190565b50600190565b908160809103126102dc57606060405191613a5e83613299565b8051835260208101516020840152604081015160408401520151606082015290565b60ff166012039060ff82116129e757565b60ff16604d81116129e757600a0a90565b81601f820112156102dc57805190613ab9826134a9565b92613ac760405194856132cf565b82845260208085019360051b830101918183116102dc5760208101935b838510613af357505050505090565b84516001600160401b0381116102dc57820183603f820112156102dc57602091613b2685836040868096015191016137ff565b815201940193613ae4565b602082018051926001600160a01b0383169290916103488414919060098610156128d35760009515614ab657805160098110156141e3576003146148be57805160098110156141e3576001146146df57805160098110156141e35760041461453257805160098110156141e35760051461437857805160098110156141e3576006146141f757805160098110156141e357600714613ebe57516009811015613eaa57600814613cff575050604081015191602083519301519260208110613ce9575b50828452603d60205260408420546001600160a01b0316928315613cd7578452603e60209081526040808620838752825280862084516001600160a01b0316875290915284205460ff1615613cc5579051604051635d5530df60e11b815260048101929092526001600160a01b03166024820152906020908290604490829086905af1918215613cb9578092613c8857505090565b9091506020823d602011613cb1575b81613ca4602093836132cf565b810103126107d357505190565b3d9150613c97565b604051903d90823e3d90fd5b604051632ccb516160e21b8152600490fd5b6040516345f68a8f60e11b8152600490fd5b6000939193199060200360031b1b169138613bf3565b90809294935015613e83575b8115613e7e575082516001600160a01b03165b6001600160a01b0316808352604c602052604083205490939060ff1615613e6c576040015180518101602082820312613e68576020820151906001600160401b038211613e645760209283613dcb9381613d7b9401920101613aa2565b604d546001600160a01b03169085613d9c613d95836134f8565b51926134e8565b5197613ddd604051998a968795869463b8b7523960e01b865260048601526060602486015260648501906133b7565b838103600319016044850152906133b7565b03925af1928315613e59578293613e21575b5015613e1d575061356f90613e18613e0e670de0b6b3a7640000614ef8565b8260011c90614f34565b61379b565b5090565b9092506020813d602011613e51575b81613e3d602093836132cf565b81010312613e4d57519138613def565b5080fd5b3d9150613e30565b6040513d84823e3d90fd5b8480fd5b8380fd5b6040516372b06ab960e11b8152600490fd5b613d1e565b83516001600160a01b0316610347190115613d0b576040516345e90b8760e01b8152600490fd5b634e487b7160e01b86526021600452602486fd5b509080949350156141bc575b83156141b7575080516001600160a01b03165b6001600160a01b03908116808452604b602052604084205490929116156141a55760405163313ce56760e01b8152602081600481865afa801561419a57849061415f575b613f2b9150613a91565b6040516338d52e0f60e01b8152602081600481875afa9081156140d057859161411c575b5060405163313ce56760e01b815290602090829060049082906001600160a01b03165afa9081156140d05785916140db575b50613f8e613f9391613a80565b613a91565b906040519063266d6a8360e11b82526004820152602081602481875afa9081156140d057859161409c575b5091613fcf60209261401c9461366c565b938552604b825260408086205491810151905163416be2f360e01b81526001600160a01b0390921660048301526103486024830152606060448301529092839182919060648301906133b7565b038186305af1908115614091578391614059575b5061403a91614c12565b9115613e1d575061356f90613e18613e0e670de0b6b3a7640000614ef8565b90506020813d602011614089575b81614074602093836132cf565b81010312614085575161403a614030565b8280fd5b3d9150614067565b6040513d85823e3d90fd5b90506020813d6020116140c8575b816140b7602093836132cf565b81010312613e645751613fcf613fbe565b3d91506140aa565b6040513d87823e3d90fd5b90506020813d602011614114575b816140f6602093836132cf565b81010312613e6457613f8e61410d613f9392613650565b9150613f81565b3d91506140e9565b90506020813d602011614157575b81614137602093836132cf565b81010312613e6457516001600160a01b0381168103613e64576020613f4f565b3d915061412a565b506020813d602011614192575b81614179602093836132cf565b81010312613e685761418d613f2b91613650565b613f21565b3d915061416c565b6040513d86823e3d90fd5b604051632b5d296d60e21b8152600490fd5b613edd565b81516001600160a01b0316610347190115613eca57604051634c508a4f60e01b8152600490fd5b634e487b7160e01b87526021600452602487fd5b5090809294935015614351575b6040840151938451850194604081870312613e64576020810151956040820151906001600160401b03821161434d57614244926020918201920101613aa2565b9461424e8161340c565b6142578161340c565b8452604a60205260408420546001600160a01b0316918215613cd7578315614343575060018060a01b039051168394915b604080516313f839b960e01b81526001600160a01b03909316600484015260248301528251604483018190529195600583901b87016064908101948894602090910191839086015b828210614311575050505082908160209503925af1928315613e59578293613e21575015613e1d575061356f90613e18613e0e670de0b6b3a7640000614ef8565b929550925092946020806143316001936063198d820301865288516133b7565b960192019201928894959388936142d0565b9050839491614288565b8680fd5b83516001600160a01b0316610347190115614204576040516386170b0d60e01b8152600490fd5b50505060408193929301519260a084805181010312614085576020840151906040850151946060810151916143b460a060808401519301613650565b81875260496020908152604080892088516001600160a01b03168a5290915287209092906143e1906132f0565b9187968351156144e1575b5050604754604854604051639c88171560e01b81526001600160a01b03918216600482015260e060248201529560209587959290931693859384938d9360ff939161443b9060e48801906133b7565b948c60448801526064870152608486015260a48501521660c483015203915afa90811561419a5784916144c2575b50156144b05761447b603a54426134db565b1161449e5715613e1d575061356f90613e18613e0e670de0b6b3a7640000614ef8565b60405163141f934360e31b8152600490fd5b6040516318f57d1360e21b8152600490fd5b6144db915060203d6020116104b4576104a681836132cf565b38614469565b516001600160a01b03168852604960209081526040808a20928a52919052872090955061450e91506132f0565b805115614520576001948160206143ec565b604051638d55073560e01b8152600490fd5b50505081835260456020908152604080852083516001600160a01b0316865290915283208390614561906132f0565b819281511561468c575b5061459f935060018060a01b0360445416604051808096819463b50584b360e01b83526020600484015260248301906133b7565b03915afa918215614091578392614670575b50602082019081511561465e5760608301516145cf604654426134db565b1161449e57156146265760409051910151601203601281116146125761356f92916137196145fc9261365e565b9050613e18613e0e670de0b6b3a7640000614ef8565b634e487b7160e01b83526011600452602483fd5b60409092919251920151601203906012821161464a57509061371961356f9261365e565b634e487b7160e01b81526011600452602490fd5b6040516305a22a3360e11b8152600490fd5b6146859192503d8085833e6109f181836132cf565b90386145b1565b516001600160a01b0316855250506045602090815260408085209385529290525081206146b8906132f0565b8051156146cd5761459f90826001913861456b565b60405163dde5170160e01b8152600490fd5b509080935015614897575b82156148905750516001600160a01b03165b6001600160a01b039081168352603b6020526040832054168015613cd757604051633fabe5a360e21b81529160a083600481855afa92831561419a57849361486a575b508383131561485857156147d55760206004916040519283809263313ce56760e01b82525afa908115614091578391614788575b5061356f9291613719613f8e6145fc93613a80565b90506020813d6020116147cd575b816147a3602093836132cf565b810103126140855761356f9291613719613f8e6147c26145fc94613650565b935050509192614773565b3d9150614796565b60206004916040949394519283809263313ce56760e01b82525afa918215613cb9578092614810575b505090613719613f8e61356f93613a80565b9091506020823d602011614850575b8161482c602093836132cf565b810103126107d3575090613719613f8e61484861356f94613650565b9293506147fe565b3d915061481f565b6040516302eb41cf60e51b8152600490fd5b61488491935060a03d60a0116126ad5761269a81836132cf565b5050509050913861473f565b90506146fc565b81516001600160a01b03166103471901156146ea576040516381c30d7b60e01b8152600490fd5b50505081835260416020908152604080852083516001600160a01b03168652909152808420905192919060ff906001906148f7866132b4565b8054865201541615156020840190815260405161491381613299565b858152602081018690526040810186905260600185905251156149d9575050608060018060a01b036040541691516024604051809481936344dca75160e11b835260048301525afa908115613e595782916149aa575b50809160206060830151920151601203906012821161464a57506040916137196149929261365e565b915b01516149a2603a54426134db565b1161449e5790565b6149cc915060803d6080116149d2575b6149c481836132cf565b810190613a44565b38614969565b503d6149ba565b516001600160a01b03168352604160209081526040808520928552919052808320905192915060ff90600190614a0e856132b4565b805485520154161580156020840152613cd757608060018060a01b036040541692516024604051809581936344dca75160e11b835260048301525afa918215614aa9578192614a88575b5081602060608201519101516012036012811161461257916145fc614a829261371960409561365e565b91614994565b614aa291925060803d6080116149d2576149c481836132cf565b9038614a58565b50604051903d90823e3d90fd5b50908094935015614beb575b8315614be45750516001600160a01b03165b6001600160a01b03168152603c6020526040812054918215613cd7576039546040516331d98b3f60e01b81526004810194909452608090849060249082906001600160a01b03165afa928315613e59578293614b5d575b506060830151614b3d603a54426134db565b1161449e5715614b53576145fc61356f92614e37565b5061356f90614e37565b9092506080813d608011614bdc575b81614b79608093836132cf565b81010312613e4d5760405190614b8e82613299565b80518060070b8103613e6857825260208101516001600160401b0381168103613e6857602083015260408101518060030b8103613e6857906060916040840152015160608201529138614b2b565b3d9150614b6c565b9050614ad4565b81516001600160a01b0316610347190115614ac257604051633c2f4f2360e21b8152600490fd5b6000918015918215614c6f575b505015614c5e576706f05b59d3b200008101908181116129e7578110614c4d57670de0b6b3a7640000900490565b630a77254f60e01b60005260046000fd5b631550e8b760e01b60005260046000fd5b91509150614c87614c80838361366c565b928361379b565b143880614c1f565b6001600160a01b039081169291169082821461197f576000838152603760209081526040808320858452909152812080546001600160a01b0319166001600160a01b039390931692831790559092907f410d79a2eddf639a562ae356290f947311e7c951e05ee1e957f18898bd664bb39080a4565b6001600160a01b03169081151580614d98575b15614d86576001600160a01b031691818314614d745760207ffc6e73fcfea315539ce6038e373ebf76c8fd5169e820723ef2d2f4485528ced8918360005260368252604060002085600052825280604060002055604051908152a3565b604051631d8fdb5560e11b8152600490fd5b604051630803ae7360e11b8152600490fd5b506001600160a01b0381161515614d17565b6040516301ffc9a760e01b81526329abf30760e11b60048201526001600160a01b039190911690602081602481855afa9081156104bb57600091614e04575b501561047a576001600160601b0360a01b6043541617604355565b614e1d915060203d6020116104b4576104a681836132cf565b38614de9565b63ffffffff16604d81116129e757600a0a90565b6000815160070b128015614ee7575b8015614ed5575b614ec357604081015160030b600003808060030b036129e75760ff169060128211614e95579061371960ff614e8f6001600160401b0361356f95511693613a80565b16614e23565b51601119909101906001600160401b031660ff82116129e757614ebd60ff61356f9316614e23565b9061379b565b6040516365a5785160e11b8152600490fd5b5060fe19604082015160030b12614e4d565b506000604082015160030b13614e46565b90600091670de0b6b3a7640000808202828104821483151715614f20578094500403614c5e57565b634e487b7160e01b85526011600452602485fd5b91908201918281116129e7578210614c4d5756fe5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8c0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b63a26469706673582212202143f1ff30658835dd4cc30228586312d1eb70bcbad2d6c94e77d2e2b12c5eeb64736f6c634300081a0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a71461312f5750806304aca68b14612fe05780630a3c434c14612eb55780630bc6b20314612e515780630fa95a4214612e33578063150fc4dd14612df457806318c92f4114612dcb5780631e6a948f14612da257806322c1ea4014612d4c5780632ecd987d14612caa5780632f48ab7d14612c8157806339d9043414612ae6578063416be2f3146126b4578063455259cb146126205780634858138f146125cf57806350c1b9231461252d57806350d3a9c61461228e57806350f60990146122485780635362be5a146121da57806354f76237146121385780635510bfce14611f205780635d4934c014611e7e5780635e25359714611d4157806361d027b314611d1857806376b926e414611cec5780637b10399914611cc35780638457473814611c595780638c7c9e0c14611c305780638eeae4a714611c07578063970b6e7814611b5257806398bbc8dd14611b1e5780639fb9b68f14611a7c578063a5bbe8b5146119d3578063a6d1b92014611991578063ac8c5db914611901578063b29ce00d146118c7578063b45994f8146117ee578063b508e5d11461174c578063b8b72b1f14611491578063bc5adf3714611376578063be49304e14611292578063c83978fa14611274578063caf8f6b31461124b578063cbaf3d091461118c578063cc2e4c4b14611052578063ce87385314610f30578063da3bd62114610e0c578063dec0af6a14610dd8578063e1031e0e14610d36578063e6402f3d14610cf4578063e963971514610ccb578063e9a8f48414610baf578063ee22fd6f14610b0d578063ef44920d14610ae4578063f0c9738e14610abe578063f0f4426014610a33578063f197ce3514610620578063f7d2401a14610559578063f8c8765e146102e15763f98d06f0146102b357600080fd5b346102dc5760003660031901126102dc576039546040516001600160a01b039091168152602090f35b600080fd5b346102dc5760803660031901126102dc576102fa613202565b610302613218565b61030a61322e565b606435906001600160a01b03821682036102dc576000549360ff8560081c16159485809661054c575b8015610535575b156104d95760ff198116600117600055856104c7575b506040516301ffc9a760e01b8152637965db0b60e01b60048201526001600160a01b03919091169390602081602481885afa9081156104bb5760009161048c575b501561047a57603380546001600160a01b031990811690951790556034805485166001600160a01b03928316179055604280549094169116179091556103d690614daa565b6000549060ff8260081c1615610421576103ec57005b61ff0019166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b60405163044aa57560e41b8152600490fd5b6104ae915060203d6020116104b4575b6104a681836132cf565b810190613450565b86610391565b503d61049c565b6040513d6000823e3d90fd5b61ffff19166101011760005585610350565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561033a5750600160ff82161461033a565b50600160ff821610610333565b346102dc5760203660031901126102dc576004356044602060018060a01b036033541660405192838092632474521560e21b8252600080516020614f4983398151915260048301523360248301525afa9081156104bb57600091610601575b50156105ef576020817fe588a2371c46c5565aa8f0737ea1b716d8518750afaa9a930c8df8877d8746c492604655604051908152a1005b60405163036be76f60e61b8152600490fd5b61061a915060203d6020116104b4576104a681836132cf565b826105b8565b610629366131b2565b92838303610a2157349360005b8181106106bf57858061064557005b60008060018060a01b03604354166020936040519061066486836132cf565b83825285820191601f19870136843751925af1903d156106b95760003d9161068b836134c0565b9261069960405194856132cf565b83523d92013e5b156106a757005b60405163c71509d160e01b8152600490fd5b506106a0565b6106ca818386613468565b356107de5760395461070c966001600160a01b03909116919060206106f08389886137bb565b60405163d47eed4560e01b81529a8b9283929060048401613914565b0381865afa9788156104bb576000986107a8575b508088116107975787610732916134db565b9661073e8288876137bb565b9093803b156102dc57604051631df3cbc560e31b81529460009386938492839161076b9160048401613914565b03925af19182156104bb57600192610786575b505b01610636565b6000610791916132cf565b8761077e565b604051624726cd60e11b8152600490fd5b90976020823d82116107d6575b816107c2602093836132cf565b810103126107d35750519688610720565b80fd5b3d91506107b5565b60016107eb828487613468565b350361092857603f546001600160a01b0316906108098187866137bb565b15610912576108469261081e82600093613594565b83604093929351809781958294632ce81dbd60e21b84526020600485015260248401916135c6565b03925af180156104bb5761085e575b60019150610780565b3d806000843e61086e81846132cf565b8201916020818403126102dc578051906001600160401b0382116102dc57016060818403126102dc57604051906108a48261327e565b80516001600160401b0381116102dc57846108c09183016138b7565b825260208101516001600160401b0381116102dc57846108e19183016138b7565b60208301526040810151906001600160401b0382116102dc5760019460409261090a92016138b7565b910152610855565b634e487b7160e01b600052603260045260246000fd5b6002610935828487613468565b3514610944575b600190610780565b926000959192955b6109578587896137bb565b9050811015610a14576044546001600160a01b031661097786888a6137bb565b600090841015610a00575082916109996000926109c39560051b810190613594565b6040516340bd1a9f60e01b81526020600482015295869392849286928492909160248401916135c6565b03925af19182156104bb576001926109dd575b500161094c565b6109f9903d806000833e6109f181836132cf565b810190613834565b50886109d6565b634e487b7160e01b81526032600452602490fd5b509094909290919061093c565b60405163554a08d160e11b8152600490fd5b346102dc5760203660031901126102dc57610a4c613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091610a9f575b50156105ef57610a9d90614daa565b005b610ab8915060203d6020116104b4576104a681836132cf565b82610a8e565b346102dc5760003660031901126102dc57602060018060a01b0360405416604051908152f35b346102dc5760003660031901126102dc57603f546040516001600160a01b039091168152602090f35b346102dc5760203660031901126102dc57610b26613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091610b90575b50156105ef57603980546001600160a01b0319166001600160a01b0392909216919091179055005b610ba9915060203d6020116104b4576104a681836132cf565b82610b68565b346102dc57610bbd366131b2565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291949190602090829060449082906001600160a01b03165afa9081156104bb57600091610cac575b50156105ef57838303610a215760005b838110610c2857005b80610c366001928786613468565b35828060a01b03610c50610c4b848988613468565b613478565b16600052603c602052604060002055610c6d610c4b828786613468565b610c78828887613468565b3590838060a01b03167f5f0ac2c1d339aa71cfd244b1806061c2dd58c142319c355a4b503464f39f0ce5600080a301610c1f565b610cc5915060203d6020116104b4576104a681836132cf565b85610c0f565b346102dc5760003660031901126102dc576044546040516001600160a01b039091168152602090f35b346102dc5760203660031901126102dc576001600160a01b03610d15613202565b16600052604b602052602060018060a01b0360406000205416604051908152f35b346102dc5760203660031901126102dc57610d4f613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091610db9575b50156105ef57604d80546001600160a01b0319166001600160a01b0392909216919091179055005b610dd2915060203d6020116104b4576104a681836132cf565b82610d91565b346102dc5760203660031901126102dc57600435600052603d602052602060018060a01b0360406000205416604051908152f35b346102dc5760203660031901126102dc576004356001600160401b0381116102dc57610e3c903690600401613182565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb57600091610f11575b50156105ef5760005b828110610ea057005b6001906001600160a01b03610eb9610c4b838787613468565b16600052604c60205260406000208260ff19825416179055818060a01b03610ee5610c4b838787613468565b167fd63a7e11f9ca79ad96b1afb09ff5d5e3f49476dca65c972896e83135314a273f600080a201610e97565b610f2a915060203d6020116104b4576104a681836132cf565b83610e8e565b346102dc5760203660031901126102dc576004356001600160401b0381116102dc57610f60903690600401613182565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb57600091611033575b50156105ef5760005b828110610fc457005b6001906001600160a01b03610fdd610c4b838787613468565b16600052604c602052604060002060ff198154169055818060a01b03611007610c4b838787613468565b167f0d995214b04653d7a20d03bf4d4e1ad1e893df0fb927faa445f402e9b880bef8600080a201610fbb565b61104c915060203d6020116104b4576104a681836132cf565b83610fb2565b346102dc57611060366131b2565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb5760009161116d575b50156105ef57818303610a215760005b8381106110cb57005b806110dc610c4b6001938686613468565b828060a01b036110f0610c4b84898b613468565b16600052603b602052604060002090838060a01b03166001600160601b0360a01b825416179055611125610c4b828789613468565b828060a01b03611139610c4b848888613468565b1690838060a01b03167fe57bb0967c057cc1250686db6226a32119cd5417ae09e1905b8f844499880fe2600080a3016110c2565b611186915060203d6020116104b4576104a681836132cf565b856110b2565b346102dc5761119a36613416565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb5760009161122c575b50156105ef578115158061121b575b1561120957610a9d92614d04565b604051633c15d6ff60e21b8152600490fd5b50670de0b6b3a764000082106111fb565b611245915060203d6020116104b4576104a681836132cf565b846111ec565b346102dc5760003660031901126102dc57604d546040516001600160a01b039091168152602090f35b346102dc5760003660031901126102dc576020604654604051908152f35b346102dc576112a036613416565b603354604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb57600091611357575b50156105ef576001600160a01b03838116600090815260366020908152604080832093851683529290522054821180611345571561120957610a9d92614d04565b506706f05b59d3b200008211156111fb565b611370915060203d6020116104b4576104a681836132cf565b84611304565b346102dc5760203660031901126102dc576004356001600160401b0381116102dc57366023820112156102dc578060040135906001600160401b0382116102dc57602481019060243691606085020101116102dc57603354604051632474521560e21b8152600080516020614f69833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091611472575b50156105ef5760005b82811061142c57005b8061146c611440610c4b600194878761378b565b611456602061145085898961378b565b01613478565b6114666040611450868a8a61378b565b91614c8f565b01611423565b61148b915060203d6020116104b4576104a681836132cf565b8361141a565b346102dc5760203660031901126102dc576004356001600160401b0381116102dc576114c1903690600401613182565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb5760009161172d575b50156105ef57906000915b80831061152457005b611538611532848385613572565b80613594565b93906001600160a01b036115526020611450858789613572565b1660005260496020526040806000206115708261145086888a613572565b6001600160a01b0316600090815260209190915220906001600160401b0386116117175761159e8254613244565b601f81116116cf575b50600090601f871160011461166757958091600195969760009261165c575b5050600019600383901b1c191690841b1790555b6115ea6020611450838688613572565b6115fa6040611450848789613572565b7f4dbaefd1a2b997bf0a063a0ad7e482d970c424dc4a8b9fdb33669e9d1c9ad69861162961153285888a613572565b9261165160405192839260208452898060a01b031696898060a01b03169560208401916135c6565b0390a301919061151b565b0135905087806115c6565b8282526020822091601f198816815b8181106116b757509160019697989291838895931061169d575b505050811b0190556115da565b0135600019600384901b60f8161c19169055878080611690565b83830135855560019094019360209283019201611676565b826000526020600020601f880160051c8101916020891061170d575b601f0160051c01905b81811061170157506115a7565b600081556001016116f4565b90915081906116eb565b634e487b7160e01b600052604160045260246000fd5b611746915060203d6020116104b4576104a681836132cf565b83611510565b346102dc5760203660031901126102dc57611765613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb576000916117cf575b50156105ef57604780546001600160a01b0319166001600160a01b0392909216919091179055005b6117e8915060203d6020116104b4576104a681836132cf565b826117a7565b346102dc5760203660031901126102dc57611807613202565b603354604051632474521560e21b8152600080516020614f69833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb576000916118a8575b50156105ef57603580546001600160a01b0319166001600160a01b0390921691821790556040519081527f5689afd64620ca3aba1015be2907df3b5ae25149d96691ba3de19f92e96ec14d90602090a1005b6118c1915060203d6020116104b4576104a681836132cf565b82611856565b346102dc5760203660031901126102dc576001600160a01b036118e8613202565b16600052603c6020526020604060002054604051908152f35b346102dc5760403660031901126102dc5761191a613202565b611922613218565b906001600160a01b03908116908216811461197f5760009081526037602090815260408083206001600160a01b03948516845290915290205416801561196d57602090604051908152f35b604051636ae912f160e11b8152600490fd5b60405163b213646160e01b8152600490fd5b346102dc5760203660031901126102dc576001600160a01b036119b2613202565b16600052603b602052602060018060a01b0360406000205416604051908152f35b346102dc5760603660031901126102dc576119ec613202565b6119f4613218565b6119fc61322e565b603354604051632474521560e21b8152600080516020614f69833981519152600482015233602482015291929190602090829060449082906001600160a01b03165afa9081156104bb57600091611a5d575b50156105ef57610a9d92614c8f565b611a76915060203d6020116104b4576104a681836132cf565b84611a4e565b346102dc5760203660031901126102dc57611a95613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091611aff575b50156105ef57603f80546001600160a01b0319166001600160a01b0392909216919091179055005b611b18915060203d6020116104b4576104a681836132cf565b82611ad7565b346102dc5760403660031901126102dc576020611b4a611b3c613202565b611b44613218565b9061367f565b604051908152f35b346102dc5760203660031901126102dc576004356044602060018060a01b036033541660405192838092632474521560e21b8252600080516020614f4983398151915260048301523360248301525afa9081156104bb57600091611be8575b50156105ef576020817f13c9323fdd8bdc59bca744cb04a1255896c91de5ebfd82b75e0040ffd672a2ec92603a55604051908152a1005b611c01915060203d6020116104b4576104a681836132cf565b82611bb1565b346102dc5760003660031901126102dc576048546040516001600160a01b039091168152602090f35b346102dc5760003660031901126102dc576034546040516001600160a01b039091168152602090f35b346102dc5760603660031901126102dc57611c72613218565b611c7a61322e565b90600435600052603e60205260406000209060018060a01b031660005260205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346102dc5760003660031901126102dc576033546040516001600160a01b039091168152602090f35b346102dc5760403660031901126102dc576020611b4a611d0a613202565b611d12613218565b906135e7565b346102dc5760003660031901126102dc576043546040516001600160a01b039091168152602090f35b346102dc57611d4f366131b2565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015291949190602090829060449082906001600160a01b03165afa9081156104bb57600091611e5f575b50156105ef57838303610a215760005b838110611dba57005b80611dcb610c4b6001938887613468565b828060a01b03611ddf610c4b848988613468565b16600052604b602052604060002090838060a01b03166001600160601b0360a01b825416179055611e14610c4b828786613468565b7fd9c8bb4bc29d42f7149cb137ee0071b6acae6b34c414465e87e4bca0ad83d2a86020611e45610c4b858b8a613468565b60405160a087901b8790039182168152931692a201611db1565b611e78915060203d6020116104b4576104a681836132cf565b85611da1565b346102dc5760203660031901126102dc57611e97613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091611f01575b50156105ef57604080546001600160a01b0319166001600160a01b0392909216919091179055005b611f1a915060203d6020116104b4576104a681836132cf565b82611ed9565b346102dc5760203660031901126102dc576004356001600160401b0381116102dc57611f509036906004016133dc565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091612119575b50156105ef5760005b818110611fb157005b8061203a611fcd6060611fc7600195878961348c565b0161349c565b611fd883868861348c565b35600052603e60205260408080600020611ff86020611450888b8d61348c565b90600091888060a01b031682526020522061201882611450878a8c61348c565b90600091878060a01b03168252602052209060ff801983541691151516179055565b61209861204d6060611fc784878961348c565b61205883868861348c565b35600052603e6020526040808060002061207782611450888b8d61348c565b90600091888060a01b03168252602052206120186020611450878a8c61348c565b6120a381848661348c565b356120b4602061145084878961348c565b906120c5604061145085888a61348c565b907fb9a3049feba6628f1f03d582f4092ed3d7b923b1e9b3e115ac55f7fd2d78198f60206120f96060611fc7888b8d61348c565b936040519415158552878060a01b031694878060a01b031693a401611fa8565b612132915060203d6020116104b4576104a681836132cf565b83611f9f565b346102dc5760203660031901126102dc57612151613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb576000916121bb575b50156105ef57604480546001600160a01b0319166001600160a01b0392909216919091179055005b6121d4915060203d6020116104b4576104a681836132cf565b82612193565b346102dc5760403660031901126102dc576121f3613202565b6121fb613218565b9060018060a01b0316600052604560205260406000209060018060a01b031660005260205261224461223060406000206132f0565b6040519182916020835260208301906133b7565b0390f35b346102dc5760203660031901126102dc5760043560038110156102dc5761226e8161340c565b600052604a602052602060018060a01b0360406000205416604051908152f35b346102dc5760203660031901126102dc576004356001600160401b0381116102dc576122be903690600401613182565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb5760009161250e575b50156105ef57906000915b80831061232157005b61232f611532848385613572565b93906001600160a01b036123496020611450858789613572565b1660005260456020526040806000206123678261145086888a613572565b6001600160a01b0316600090815260209190915220906001600160401b038611611717576123958254613244565b601f81116124c6575b50600090601f871160011461245e579580916001959697600092612453575b5050600019600383901b1c191690841b1790555b6123e16020611450838688613572565b6123f16040611450848789613572565b7f6d9aa9fead4615c8c7f606f3037bd4acd950dcbd5676999b5923de04025da9a861242061153285888a613572565b9261244860405192839260208452898060a01b031696898060a01b03169560208401916135c6565b0390a3019190612318565b0135905087806123bd565b8282526020822091601f198816815b8181106124ae575091600196979892918388959310612494575b505050811b0190556123d1565b0135600019600384901b60f8161c19169055878080612487565b8383013585556001909401936020928301920161246d565b826000526020600020601f880160051c81019160208910612504575b601f0160051c01905b8181106124f8575061239e565b600081556001016124eb565b90915081906124e2565b612527915060203d6020116104b4576104a681836132cf565b8361230d565b346102dc5760203660031901126102dc57612546613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb576000916125b0575b50156105ef57604280546001600160a01b0319166001600160a01b0392909216919091179055005b6125c9915060203d6020116104b4576104a681836132cf565b82612588565b346102dc5760403660031901126102dc576125e8613202565b6125f0613218565b6001600160a01b039182166000908152603660209081526040808320949093168252928352819020549051908152f35b346102dc5760003660031901126102dc576035546001600160a01b0316600081612650575b602090604051908152f35b5060a060049160405192838092633fabe5a360e21b82525afa80156104bb57602091600091612680575b50612645565b6126a2915060a03d60a0116126ad575b61269a81836132cf565b81019061353d565b50505090508261267a565b503d612690565b60603660031901126102dc576126c8613202565b6126d0613218565b906044356001600160401b0381116102dc57366023820112156102dc5780600401356001600160401b0381116102dc5781019060248201903682116102dc576020818403126102dc576024810135906001600160401b0382116102dc5701816043820112156102dc57602481013592612748846134a9565b9361275660405195866132cf565b808552602060248187019260051b85010101928484116102dc5760448101915b848310612a1a5788888880518015159081612a0f575b50156129fd57805160001981019081116129e7576001600160a01b03906127b39083613505565b5151166001600160a01b038416036129d55760038151146129a5575b60048151146128f4575b819291670de0b6b3a7640000926000936000925b84518410156128e95761280c60206128058688613505565b5101613519565b60098110156128d35760021480156128b2575b806128aa575b61286c575b906128436128499261283c8688613505565b5190613b31565b90614c12565b9460016001600160a01b0361285e8587613505565b5151169301929590956127ed565b9450612877866139a6565b8061289b575b6128895760019461282a565b604051630efbb43d60e21b8152600490fd5b506128a5826139a6565b61287d565b508515612825565b506128c260206128058688613505565b60098110156128d35760041461281f565b634e487b7160e01b600052602160045260246000fd5b602082604051908152f35b60206128ff826134e8565b51015160098110156128d3576002141560008161292e575b506127d95760405163980171a360e01b8152600490fd5b905061293e6020612805846134f8565b600981101561299157600214908115612959575b5084612917565b90506129696020612805846134f8565b90600982101561297d575060041484612952565b634e487b7160e01b81526021600452602490fd5b634e487b7160e01b82526021600452602482fd5b60206129b0826134e8565b51015160098110156128d3576002036127cf5760405163980171a360e01b8152600490fd5b6040516309bf411560e11b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b60405163308c6ea760e21b8152600490fd5b60059150108461278c565b82356001600160401b0381116102dc5782016024810191906060908603601f1901126102dc5760405191612a4d8361327e565b60208101356001600160a01b03811681036102dc578352604081013560098110156102dc57602084015260608101356001600160401b0381116102dc5760209101019087601f830112156102dc57813592612aa7846134c0565b612ab460405191826132cf565b84815289602086860101116102dc57600060208681978280980183860137830101526040820152815201920191612776565b346102dc5760203660031901126102dc576004356001600160401b0381116102dc57612b169036906004016133dc565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091612c62575b50156105ef5760005b818110612b7757005b80612bf4612b88600193858761348c565b838060a01b03612b9c610c4b85888a61348c565b16600052604160205283612be16060604089612bc260206114508a8d866000209561348c565b90600091868060a01b031682526020522093604081013585550161349c565b91019060ff801983541691151516179055565b612c02610c4b82858761348c565b612c12602061145084878961348c565b7fa38bfa44bbba9266438e9ec2c9f2001eb6517aa484626b25ec296ee888517f7960206040612c4286898b61348c565b013592604051938452868060a01b031693868060a01b031692a301612b6e565b612c7b915060203d6020116104b4576104a681836132cf565b83612b65565b346102dc5760003660031901126102dc576042546040516001600160a01b039091168152602090f35b346102dc5760203660031901126102dc57612cc3613202565b603354604051632474521560e21b81526000600482015233602482015290602090829060449082906001600160a01b03165afa9081156104bb57600091612d2d575b50156105ef57604880546001600160a01b0319166001600160a01b0392909216919091179055005b612d46915060203d6020116104b4576104a681836132cf565b82612d05565b346102dc5760403660031901126102dc57612d65613202565b612d6d613218565b9060018060a01b0316600052604960205260406000209060018060a01b031660005260205261224461223060406000206132f0565b346102dc5760003660031901126102dc576035546040516001600160a01b039091168152602090f35b346102dc5760003660031901126102dc576047546040516001600160a01b039091168152602090f35b346102dc5760203660031901126102dc576001600160a01b03612e15613202565b16600052604c602052602060ff604060002054166040519015158152f35b346102dc5760003660031901126102dc576020603a54604051908152f35b346102dc5760403660031901126102dc57612e6a613202565b612e72613218565b9060018060a01b0316600052604160205260406000209060018060a01b031660005260205260408060002060ff6001825492015416825191825215156020820152f35b346102dc57612ec3366131b2565b603354604051632474521560e21b8152600080516020614f49833981519152600482015233602482015293949391929190602090829060449082906001600160a01b03165afa9081156104bb57600091612fc1575b50156105ef57818403610a215760005b848110612f3157005b80612f42610c4b6001938686613468565b612f4d828888613468565b35600052603d602052604060002090838060a01b03166001600160601b0360a01b825416179055612f7f818787613468565b35828060a01b03612f94610c4b848888613468565b16907f23e0d9edcf44c0ab085e4918b7030577f9da7dd0c7869257b4598f9e7ff59eff600080a301612f28565b612fda915060203d6020116104b4576104a681836132cf565b85612f18565b346102dc57612fee366131b2565b603354604051632474521560e21b8152600080516020614f6983398151915260048201523360248201529194939190602090829060449082906001600160a01b03165afa9081156104bb57600091613110575b50156105ef57838103610a215760005b81811061305a57005b613068610c4b828786613468565b613073828487613468565b3560038110156102dc576130868161340c565b600052604a60205260406000209060018060a01b03166001600160601b0360a01b8254161790556130b8818386613468565b359060038210156102dc576001916130d4610c4b838988613468565b6130dd8261340c565b838060a01b0316907fe6574ff52bd4d3e89a140bba3bd969bfa5aad8116f46d1bce8d214e3229b9b0c600080a301613051565b613129915060203d6020116104b4576104a681836132cf565b85613041565b346102dc5760203660031901126102dc576004359063ffffffff60e01b82168092036102dc576020916333ca6d2360e21b8114908115613171575b5015158152f35b6301ffc9a760e01b1490508361316a565b9181601f840112156102dc578235916001600160401b0383116102dc576020808501948460051b0101116102dc57565b60406003198201126102dc576004356001600160401b0381116102dc57816131dc91600401613182565b92909291602435906001600160401b0382116102dc576131fe91600401613182565b9091565b600435906001600160a01b03821682036102dc57565b602435906001600160a01b03821682036102dc57565b604435906001600160a01b03821682036102dc57565b90600182811c92168015613274575b602083101461325e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691613253565b606081019081106001600160401b0382111761171757604052565b608081019081106001600160401b0382111761171757604052565b604081019081106001600160401b0382111761171757604052565b90601f801991011681019081106001600160401b0382111761171757604052565b906040519182600082549261330484613244565b8084529360018116908115613372575060011461332b575b50613329925003836132cf565b565b90506000929192526020600020906000915b818310613356575050906020613329928201013861331c565b602091935080600191548385890101520191019091849261333d565b90506020925061332994915060ff191682840152151560051b8201013861331c565b60005b8381106133a75750506000910152565b8181015183820152602001613397565b906020916133d081518092818552858086019101613394565b601f01601f1916010190565b9181601f840112156102dc578235916001600160401b0383116102dc576020808501948460071b0101116102dc57565b600311156128d357565b60609060031901126102dc576004356001600160a01b03811681036102dc57906024356001600160a01b03811681036102dc579060443590565b908160209103126102dc575180151581036102dc5790565b91908110156109125760051b0190565b356001600160a01b03811681036102dc5790565b91908110156109125760071b0190565b3580151581036102dc5790565b6001600160401b0381116117175760051b60200190565b6001600160401b03811161171757601f01601f191660200190565b919082039182116129e757565b8051600110156109125760400190565b8051156109125760200190565b80518210156109125760209160051b010190565b5160098110156128d35790565b519069ffffffffffffffffffff821682036102dc57565b908160a09103126102dc5761355181613526565b9160208201519160408101519161356f608060608401519301613526565b90565b91908110156109125760051b81013590605e19813603018212156102dc570190565b903590601e19813603018212156102dc57018035906001600160401b0382116102dc576020019181360383136102dc57565b908060209392818452848401376000828201840152601f01601f1916010190565b906135f2818361367f565b9160018060a01b0316600052603660205260406000209060018060a01b03166000526020526040600020549080821160001461364957505b670de0b6b3a7640000811161363c5790565b50670de0b6b3a764000090565b905061362a565b519060ff821682036102dc57565b604d81116129e757600a0a90565b818102929181159184041417156129e757565b6001600160a01b0390811660009081526037602090815260408083209484168352939052919091205416801561378557604051633fabe5a360e21b81529060a082600481845afa9182156104bb57600092613759575b5060206004916040519283809263313ce56760e01b82525afa80156104bb5760009061371f575b60ff91501660120390601282116129e75761371961356f9261365e565b9061366c565b506020813d602011613751575b81613739602093836132cf565b810103126102dc5761374c60ff91613650565b6136fc565b3d915061372c565b600491925061377860209160a03d60a0116126ad5761269a81836132cf565b50505090509291506136d5565b50600090565b9190811015610912576060020190565b81156137a5570490565b634e487b7160e01b600052601260045260246000fd5b91908110156109125760051b81013590601e19813603018212156102dc5701908135916001600160401b0383116102dc576020018260051b360381136102dc579190565b9092919261380c816134c0565b9161381a60405193846132cf565b8294828452828201116102dc576020613329930190613394565b6020818303126102dc578051906001600160401b0382116102dc5701906080828203126102dc576040519161386883613299565b80516001600160401b0381116102dc57810182601f820112156102dc57606092816020613897935191016137ff565b835260208101516020840152604081015160408401520151606082015290565b9080601f830112156102dc5781516138ce816134a9565b926138dc60405194856132cf565b81845260208085019260051b8201019283116102dc57602001905b8282106139045750505090565b81518152602091820191016138f7565b9180602084016020855252604083019060408160051b8501019383600091601e1982360301905b84841061394c575050505050505090565b90919293949596603f198282030187528735838112156102dc57840190602082359201916001600160401b0381116102dc5780360383136102dc5761399760209283926001956135c6565b9901970195940192919061393b565b6001600160a01b03166000818152603c6020526040902054613a3e576000818152603b60205260409020546001600160a01b0316613a3e57806000526041602052604060002061034860005260205260ff60016040600020015416613a3e5760009081526041602090815260408083206042546001600160a01b0316845290915290206001015460ff16613a3957600090565b600190565b50600190565b908160809103126102dc57606060405191613a5e83613299565b8051835260208101516020840152604081015160408401520151606082015290565b60ff166012039060ff82116129e757565b60ff16604d81116129e757600a0a90565b81601f820112156102dc57805190613ab9826134a9565b92613ac760405194856132cf565b82845260208085019360051b830101918183116102dc5760208101935b838510613af357505050505090565b84516001600160401b0381116102dc57820183603f820112156102dc57602091613b2685836040868096015191016137ff565b815201940193613ae4565b602082018051926001600160a01b0383169290916103488414919060098610156128d35760009515614ab657805160098110156141e3576003146148be57805160098110156141e3576001146146df57805160098110156141e35760041461453257805160098110156141e35760051461437857805160098110156141e3576006146141f757805160098110156141e357600714613ebe57516009811015613eaa57600814613cff575050604081015191602083519301519260208110613ce9575b50828452603d60205260408420546001600160a01b0316928315613cd7578452603e60209081526040808620838752825280862084516001600160a01b0316875290915284205460ff1615613cc5579051604051635d5530df60e11b815260048101929092526001600160a01b03166024820152906020908290604490829086905af1918215613cb9578092613c8857505090565b9091506020823d602011613cb1575b81613ca4602093836132cf565b810103126107d357505190565b3d9150613c97565b604051903d90823e3d90fd5b604051632ccb516160e21b8152600490fd5b6040516345f68a8f60e11b8152600490fd5b6000939193199060200360031b1b169138613bf3565b90809294935015613e83575b8115613e7e575082516001600160a01b03165b6001600160a01b0316808352604c602052604083205490939060ff1615613e6c576040015180518101602082820312613e68576020820151906001600160401b038211613e645760209283613dcb9381613d7b9401920101613aa2565b604d546001600160a01b03169085613d9c613d95836134f8565b51926134e8565b5197613ddd604051998a968795869463b8b7523960e01b865260048601526060602486015260648501906133b7565b838103600319016044850152906133b7565b03925af1928315613e59578293613e21575b5015613e1d575061356f90613e18613e0e670de0b6b3a7640000614ef8565b8260011c90614f34565b61379b565b5090565b9092506020813d602011613e51575b81613e3d602093836132cf565b81010312613e4d57519138613def565b5080fd5b3d9150613e30565b6040513d84823e3d90fd5b8480fd5b8380fd5b6040516372b06ab960e11b8152600490fd5b613d1e565b83516001600160a01b0316610347190115613d0b576040516345e90b8760e01b8152600490fd5b634e487b7160e01b86526021600452602486fd5b509080949350156141bc575b83156141b7575080516001600160a01b03165b6001600160a01b03908116808452604b602052604084205490929116156141a55760405163313ce56760e01b8152602081600481865afa801561419a57849061415f575b613f2b9150613a91565b6040516338d52e0f60e01b8152602081600481875afa9081156140d057859161411c575b5060405163313ce56760e01b815290602090829060049082906001600160a01b03165afa9081156140d05785916140db575b50613f8e613f9391613a80565b613a91565b906040519063266d6a8360e11b82526004820152602081602481875afa9081156140d057859161409c575b5091613fcf60209261401c9461366c565b938552604b825260408086205491810151905163416be2f360e01b81526001600160a01b0390921660048301526103486024830152606060448301529092839182919060648301906133b7565b038186305af1908115614091578391614059575b5061403a91614c12565b9115613e1d575061356f90613e18613e0e670de0b6b3a7640000614ef8565b90506020813d602011614089575b81614074602093836132cf565b81010312614085575161403a614030565b8280fd5b3d9150614067565b6040513d85823e3d90fd5b90506020813d6020116140c8575b816140b7602093836132cf565b81010312613e645751613fcf613fbe565b3d91506140aa565b6040513d87823e3d90fd5b90506020813d602011614114575b816140f6602093836132cf565b81010312613e6457613f8e61410d613f9392613650565b9150613f81565b3d91506140e9565b90506020813d602011614157575b81614137602093836132cf565b81010312613e6457516001600160a01b0381168103613e64576020613f4f565b3d915061412a565b506020813d602011614192575b81614179602093836132cf565b81010312613e685761418d613f2b91613650565b613f21565b3d915061416c565b6040513d86823e3d90fd5b604051632b5d296d60e21b8152600490fd5b613edd565b81516001600160a01b0316610347190115613eca57604051634c508a4f60e01b8152600490fd5b634e487b7160e01b87526021600452602487fd5b5090809294935015614351575b6040840151938451850194604081870312613e64576020810151956040820151906001600160401b03821161434d57614244926020918201920101613aa2565b9461424e8161340c565b6142578161340c565b8452604a60205260408420546001600160a01b0316918215613cd7578315614343575060018060a01b039051168394915b604080516313f839b960e01b81526001600160a01b03909316600484015260248301528251604483018190529195600583901b87016064908101948894602090910191839086015b828210614311575050505082908160209503925af1928315613e59578293613e21575015613e1d575061356f90613e18613e0e670de0b6b3a7640000614ef8565b929550925092946020806143316001936063198d820301865288516133b7565b960192019201928894959388936142d0565b9050839491614288565b8680fd5b83516001600160a01b0316610347190115614204576040516386170b0d60e01b8152600490fd5b50505060408193929301519260a084805181010312614085576020840151906040850151946060810151916143b460a060808401519301613650565b81875260496020908152604080892088516001600160a01b03168a5290915287209092906143e1906132f0565b9187968351156144e1575b5050604754604854604051639c88171560e01b81526001600160a01b03918216600482015260e060248201529560209587959290931693859384938d9360ff939161443b9060e48801906133b7565b948c60448801526064870152608486015260a48501521660c483015203915afa90811561419a5784916144c2575b50156144b05761447b603a54426134db565b1161449e5715613e1d575061356f90613e18613e0e670de0b6b3a7640000614ef8565b60405163141f934360e31b8152600490fd5b6040516318f57d1360e21b8152600490fd5b6144db915060203d6020116104b4576104a681836132cf565b38614469565b516001600160a01b03168852604960209081526040808a20928a52919052872090955061450e91506132f0565b805115614520576001948160206143ec565b604051638d55073560e01b8152600490fd5b50505081835260456020908152604080852083516001600160a01b0316865290915283208390614561906132f0565b819281511561468c575b5061459f935060018060a01b0360445416604051808096819463b50584b360e01b83526020600484015260248301906133b7565b03915afa918215614091578392614670575b50602082019081511561465e5760608301516145cf604654426134db565b1161449e57156146265760409051910151601203601281116146125761356f92916137196145fc9261365e565b9050613e18613e0e670de0b6b3a7640000614ef8565b634e487b7160e01b83526011600452602483fd5b60409092919251920151601203906012821161464a57509061371961356f9261365e565b634e487b7160e01b81526011600452602490fd5b6040516305a22a3360e11b8152600490fd5b6146859192503d8085833e6109f181836132cf565b90386145b1565b516001600160a01b0316855250506045602090815260408085209385529290525081206146b8906132f0565b8051156146cd5761459f90826001913861456b565b60405163dde5170160e01b8152600490fd5b509080935015614897575b82156148905750516001600160a01b03165b6001600160a01b039081168352603b6020526040832054168015613cd757604051633fabe5a360e21b81529160a083600481855afa92831561419a57849361486a575b508383131561485857156147d55760206004916040519283809263313ce56760e01b82525afa908115614091578391614788575b5061356f9291613719613f8e6145fc93613a80565b90506020813d6020116147cd575b816147a3602093836132cf565b810103126140855761356f9291613719613f8e6147c26145fc94613650565b935050509192614773565b3d9150614796565b60206004916040949394519283809263313ce56760e01b82525afa918215613cb9578092614810575b505090613719613f8e61356f93613a80565b9091506020823d602011614850575b8161482c602093836132cf565b810103126107d3575090613719613f8e61484861356f94613650565b9293506147fe565b3d915061481f565b6040516302eb41cf60e51b8152600490fd5b61488491935060a03d60a0116126ad5761269a81836132cf565b5050509050913861473f565b90506146fc565b81516001600160a01b03166103471901156146ea576040516381c30d7b60e01b8152600490fd5b50505081835260416020908152604080852083516001600160a01b03168652909152808420905192919060ff906001906148f7866132b4565b8054865201541615156020840190815260405161491381613299565b858152602081018690526040810186905260600185905251156149d9575050608060018060a01b036040541691516024604051809481936344dca75160e11b835260048301525afa908115613e595782916149aa575b50809160206060830151920151601203906012821161464a57506040916137196149929261365e565b915b01516149a2603a54426134db565b1161449e5790565b6149cc915060803d6080116149d2575b6149c481836132cf565b810190613a44565b38614969565b503d6149ba565b516001600160a01b03168352604160209081526040808520928552919052808320905192915060ff90600190614a0e856132b4565b805485520154161580156020840152613cd757608060018060a01b036040541692516024604051809581936344dca75160e11b835260048301525afa918215614aa9578192614a88575b5081602060608201519101516012036012811161461257916145fc614a829261371960409561365e565b91614994565b614aa291925060803d6080116149d2576149c481836132cf565b9038614a58565b50604051903d90823e3d90fd5b50908094935015614beb575b8315614be45750516001600160a01b03165b6001600160a01b03168152603c6020526040812054918215613cd7576039546040516331d98b3f60e01b81526004810194909452608090849060249082906001600160a01b03165afa928315613e59578293614b5d575b506060830151614b3d603a54426134db565b1161449e5715614b53576145fc61356f92614e37565b5061356f90614e37565b9092506080813d608011614bdc575b81614b79608093836132cf565b81010312613e4d5760405190614b8e82613299565b80518060070b8103613e6857825260208101516001600160401b0381168103613e6857602083015260408101518060030b8103613e6857906060916040840152015160608201529138614b2b565b3d9150614b6c565b9050614ad4565b81516001600160a01b0316610347190115614ac257604051633c2f4f2360e21b8152600490fd5b6000918015918215614c6f575b505015614c5e576706f05b59d3b200008101908181116129e7578110614c4d57670de0b6b3a7640000900490565b630a77254f60e01b60005260046000fd5b631550e8b760e01b60005260046000fd5b91509150614c87614c80838361366c565b928361379b565b143880614c1f565b6001600160a01b039081169291169082821461197f576000838152603760209081526040808320858452909152812080546001600160a01b0319166001600160a01b039390931692831790559092907f410d79a2eddf639a562ae356290f947311e7c951e05ee1e957f18898bd664bb39080a4565b6001600160a01b03169081151580614d98575b15614d86576001600160a01b031691818314614d745760207ffc6e73fcfea315539ce6038e373ebf76c8fd5169e820723ef2d2f4485528ced8918360005260368252604060002085600052825280604060002055604051908152a3565b604051631d8fdb5560e11b8152600490fd5b604051630803ae7360e11b8152600490fd5b506001600160a01b0381161515614d17565b6040516301ffc9a760e01b81526329abf30760e11b60048201526001600160a01b039190911690602081602481855afa9081156104bb57600091614e04575b501561047a576001600160601b0360a01b6043541617604355565b614e1d915060203d6020116104b4576104a681836132cf565b38614de9565b63ffffffff16604d81116129e757600a0a90565b6000815160070b128015614ee7575b8015614ed5575b614ec357604081015160030b600003808060030b036129e75760ff169060128211614e95579061371960ff614e8f6001600160401b0361356f95511693613a80565b16614e23565b51601119909101906001600160401b031660ff82116129e757614ebd60ff61356f9316614e23565b9061379b565b6040516365a5785160e11b8152600490fd5b5060fe19604082015160030b12614e4d565b506000604082015160030b13614e46565b90600091670de0b6b3a7640000808202828104821483151715614f20578094500403614c5e57565b634e487b7160e01b85526011600452602485fd5b91908201918281116129e7578210614c4d5756fe5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d8c0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b63a26469706673582212202143f1ff30658835dd4cc30228586312d1eb70bcbad2d6c94e77d2e2b12c5eeb64736f6c634300081a0033",
  "libraries": {},
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "addUniswapV2LPTokens(address[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_lpTokens": "the addresses of lp tokens"
        }
      },
      "getExchangeRate(address,address,bytes)": {
        "params": {
          "assetA": "The address of the first asset in the pair.",
          "assetB": "The address of the second asset in the pair.",
          "oracleData": "The list of oracles to use for price calculations"
        },
        "returns": {
          "_0": "exchangeRate for assetA/assetB in 10**18 decimality"
        }
      },
      "getGasPrice()": {
        "returns": {
          "price": "The current gas price."
        }
      },
      "getOraclePriceDrop(address,address)": {
        "params": {
          "assetA": "The address of the first asset.",
          "assetB": "The address of the second asset."
        },
        "returns": {
          "_0": "The priceDrop rate as a uint256 value."
        }
      },
      "getOraclePriceDropFeed(address,address)": {
        "params": {
          "assetA": "The address of the first asset in the pair.",
          "assetB": "The address of the second asset in the pair."
        },
        "returns": {
          "_0": "priceDropFeed The address of the priceDrop feed associated with the asset pair."
        }
      },
      "getPairPriceDrop(address,address)": {
        "params": {
          "_assetA": "The address of asset A.",
          "_assetB": "The address of asset B."
        },
        "returns": {
          "priceDrop": "The priceDrop rate."
        }
      },
      "increasePairPriceDrop(address,address,uint256)": {
        "details": "Only callable by the EMERGENCY_ADMIN role. The _pairPriceDrop value must be greater than the current priceDrop value for the pair and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).",
        "params": {
          "_assetA": "The address of position asset",
          "_assetB": "The address of borrowed asset",
          "_pairPriceDrop": "The new priceDrop value for the pair (in wad)"
        }
      },
      "initialize(address,address,address,address)": {
        "params": {
          "_eth": "Weth address if eth isn't native token of network. Otherwise set to zero address.",
          "_registry": "The address of PrimexRegistry contract",
          "_treasury": "Address of the Treasury",
          "_usdt": "Address of the USDT token"
        }
      },
      "removeUniswapV2LPTokens(address[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_lpTokens": "the addresses of lp tokens"
        }
      },
      "setGasPriceFeed(address)": {
        "details": "Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "priceFeed": "The address of the gas price feed contract."
        }
      },
      "setOrallyOracle(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_orally": "the address of the Orally oracle"
        }
      },
      "setOrallyTimeTolerance(uint256)": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_orallyTimeTolerance": "Time tolerance in seconds"
        }
      },
      "setPairPriceDrop(address,address,uint256)": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN.",
        "params": {
          "_assetA": "The address of position asset",
          "_assetB": "The address of borrowed asset",
          "_pairPriceDrop": "The pair priceDrop (in wad)"
        }
      },
      "setPyth(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_pyth": "the address of the Pyth oracle"
        }
      },
      "setStorkPublicKey(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_storkPublicKey": "the Stork public key address"
        }
      },
      "setStorkVerify(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_storkVerify": "the Stork verify address"
        }
      },
      "setSupraPullOracle(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_supraPullOracle": "the address of the Supra pull oracle"
        }
      },
      "setSupraStorageOracle(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_supraStorageOracle": "the address of the Supra storage"
        }
      },
      "setTimeTolerance(uint256)": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_timeTolerance": "Time tolerance in seconds"
        }
      },
      "setTreasury(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_treasury": "the address of the treasury"
        }
      },
      "setUSDT(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_usdt": "the address of the USDT"
        }
      },
      "setUniswapV2LPOracle(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_uniswapV2LPOracle": "the UniswapV2LP oracle address"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The interface id to check"
        }
      },
      "updateChainlinkPriceFeedsUsd(address[],address[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_feeds": "Array of price feeds.",
          "_tokens": "Array of token addresses."
        }
      },
      "updateOrallySymbols((string,address[2])[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "params": "Array of UpdateOrallySymbolsParams struct"
        }
      },
      "updatePriceDropFeed(address,address,address)": {
        "details": "Add or update priceDrop feed for assets pair. Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "assetA": "The address of the first asset in the pair.",
          "assetB": "The address of the second asset in the pair.",
          "priceDropFeed": "The chain link priceDrop feed address for the pair assetA/assetB"
        }
      },
      "updatePriceDropFeeds((address,address,address)[])": {
        "details": "Add or update priceDrop feed for assets pair. Only callable by the MEDIUM_TIMELOCK_ADMIN role.",
        "params": {
          "_updateParams": "The array of the UpdatePriceDropFeedsParams structs"
        }
      },
      "updatePullOracle(bytes[][],uint256[])": {
        "params": {
          "_data": "An array of update data for passed oracles",
          "_pullOracleTypes": "An array of oracle types  (Must conform to the UpdatePullOracle struct)"
        }
      },
      "updatePythPairId(address[],bytes32[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_priceFeedIds": "Array of pair ids.",
          "_tokens": "Array of token addresses."
        }
      },
      "updateStorkPairIds((string,address[2])[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "params": "Array of UpdateStorkPairIdsParams struct"
        }
      },
      "updateSupraDataFeed((address,address,(uint256,bool))[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_params": "Array of token pairs and Supra ids."
        }
      },
      "updateUniv3TrustedPair((uint256,address,address,bool)[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_updateParams": "Array of token pairs, their DEXs and new trusted status."
        }
      },
      "updateUniv3TypeOracle(uint256[],address[])": {
        "details": "Only callable by the SMALL_TIMELOCK_ADMIN role.",
        "params": {
          "_oracleTypes": "Array of ids of TWAP contracts.",
          "_oracles": "Array of TWAP contract addresses."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addUniswapV2LPTokens(address[])": {
        "notice": "Sets the flag to true for the passed tokens"
      },
      "getExchangeRate(address,address,bytes)": {
        "notice": "Calculates exchange rate of one token to another according to the specific oracle route"
      },
      "getGasPrice()": {
        "notice": "Retrieves the current gas price from the specified gas price feed."
      },
      "getOraclePriceDrop(address,address)": {
        "notice": "Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop."
      },
      "getOraclePriceDropFeed(address,address)": {
        "notice": "Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping"
      },
      "getPairPriceDrop(address,address)": {
        "notice": "For a given asset pair retrieves the priceDrop rate which is the higher of the oracle pair priceDrop and the historical pair priceDrop."
      },
      "increasePairPriceDrop(address,address,uint256)": {
        "notice": "Increases the priceDrop of a pair of assets in the system."
      },
      "removeUniswapV2LPTokens(address[])": {
        "notice": "Sets the flag to false for the passed tokens"
      },
      "setGasPriceFeed(address)": {
        "notice": "Sets the gas price feed contract address."
      },
      "setOrallyOracle(address)": {
        "notice": "Sets the orally oracle address"
      },
      "setOrallyTimeTolerance(uint256)": {
        "notice": "Sets the time tolerance specially for the orally"
      },
      "setPairPriceDrop(address,address,uint256)": {
        "notice": "Function to set (change) the pair priceDrop of the trading assets"
      },
      "setPyth(address)": {
        "notice": "Sets the Pyth address"
      },
      "setStorkPublicKey(address)": {
        "notice": "Sets the stork public key (address)"
      },
      "setStorkVerify(address)": {
        "notice": "Sets the stork verify address"
      },
      "setSupraPullOracle(address)": {
        "notice": "Sets the Supra pull oracle address"
      },
      "setSupraStorageOracle(address)": {
        "notice": "Sets the Supra storage address"
      },
      "setTimeTolerance(uint256)": {
        "notice": "Sets the time tolerance"
      },
      "setTreasury(address)": {
        "notice": "Sets the treasury address"
      },
      "setUSDT(address)": {
        "notice": "Sets the usdt address"
      },
      "setUniswapV2LPOracle(address)": {
        "notice": "Sets the UniswapV2LP oracle"
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      },
      "updateChainlinkPriceFeedsUsd(address[],address[])": {
        "notice": "Sets or updates the Chainlink price feed for the list of tokens to usd."
      },
      "updateOrallySymbols((string,address[2])[])": {
        "notice": "Sets or updates the Orally token symbol for the list of tokens (tokens order MATTERS)"
      },
      "updatePriceDropFeed(address,address,address)": {
        "notice": "Updates the priceDrop feed for a specific pair of assets."
      },
      "updatePriceDropFeeds((address,address,address)[])": {
        "notice": "Updates the priceDrop feed for a specific pair of assets."
      },
      "updatePullOracle(bytes[][],uint256[])": {
        "notice": "Updates pull oracle data for passed oracle types"
      },
      "updatePythPairId(address[],bytes32[])": {
        "notice": "Sets or updates the Pyth pair ids for the list of tokens."
      },
      "updateStorkPairIds((string,address[2])[])": {
        "notice": "Sets or updates the Stork Pair Ids"
      },
      "updateSupraDataFeed((address,address,(uint256,bool))[])": {
        "notice": "Sets or updates the Supra price feeds for the list of tokens."
      },
      "updateUniv3TrustedPair((uint256,address,address,bool)[])": {
        "notice": "Sets or updates the Supra price feeds for the list of tokens."
      },
      "updateUniv3TypeOracle(uint256[],address[])": {
        "notice": "Sets Uni v3-based TWAP price oracle contracts."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3021,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3024,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6637,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 59696,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "registry",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 59699,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "eth",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 59702,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "gasPriceFeed",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 59709,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "pairPriceDrops",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 59716,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "oraclePriceDropFeeds",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 59723,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "chainLinkPriceFeeds",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 59732,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "pyth",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IPyth)15661"
      },
      {
        "astId": 59735,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "timeTolerance",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 59740,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "chainlinkPriceFeedsUsd",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 59745,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "pythPairIds",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 59750,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "univ3TypeOracles",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 59759,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "univ3TrustedPairs",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 59768,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "supraPullOracle",
        "offset": 0,
        "slot": "63",
        "type": "t_contract(ISupraOraclePull)78486"
      },
      {
        "astId": 59772,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "supraStorageOracle",
        "offset": 0,
        "slot": "64",
        "type": "t_contract(ISupraSValueFeed)78525"
      },
      {
        "astId": 59780,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "supraDataFeedID",
        "offset": 0,
        "slot": "65",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(SupraDataFeedId)56799_storage))"
      },
      {
        "astId": 59783,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "usdt",
        "offset": 0,
        "slot": "66",
        "type": "t_address"
      },
      {
        "astId": 59786,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "treasury",
        "offset": 0,
        "slot": "67",
        "type": "t_address"
      },
      {
        "astId": 59795,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "orallyOracle",
        "offset": 0,
        "slot": "68",
        "type": "t_contract(IOrallyVerifierOracle)15114"
      },
      {
        "astId": 59802,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "orallySymbol",
        "offset": 0,
        "slot": "69",
        "type": "t_mapping(t_address,t_mapping(t_address,t_string_storage))"
      },
      {
        "astId": 59805,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "orallyTimeTolerance",
        "offset": 0,
        "slot": "70",
        "type": "t_uint256"
      },
      {
        "astId": 59809,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "storkVerify",
        "offset": 0,
        "slot": "71",
        "type": "t_contract(IStorkVerify)78465"
      },
      {
        "astId": 59812,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "storkPublicKey",
        "offset": 0,
        "slot": "72",
        "type": "t_address"
      },
      {
        "astId": 59819,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "storkAssetPairId",
        "offset": 0,
        "slot": "73",
        "type": "t_mapping(t_address,t_mapping(t_address,t_string_storage))"
      },
      {
        "astId": 59825,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "curveTypeOracles",
        "offset": 0,
        "slot": "74",
        "type": "t_mapping(t_enum(CurveOracleKind)56839,t_address)"
      },
      {
        "astId": 59830,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "eip4626TokenToUnderlyingAsset",
        "offset": 0,
        "slot": "75",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 59835,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "isUniswapV2LP",
        "offset": 0,
        "slot": "76",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 59839,
        "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
        "label": "uniswapV2LPOracle",
        "offset": 0,
        "slot": "77",
        "type": "t_contract(IUniswapV2LPOracle)74574"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOrallyVerifierOracle)15114": {
        "encoding": "inplace",
        "label": "contract IOrallyVerifierOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IPyth)15661": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_contract(IStorkVerify)78465": {
        "encoding": "inplace",
        "label": "contract IStorkVerify",
        "numberOfBytes": "20"
      },
      "t_contract(ISupraOraclePull)78486": {
        "encoding": "inplace",
        "label": "contract ISupraOraclePull",
        "numberOfBytes": "20"
      },
      "t_contract(ISupraSValueFeed)78525": {
        "encoding": "inplace",
        "label": "contract ISupraSValueFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2LPOracle)74574": {
        "encoding": "inplace",
        "label": "contract IUniswapV2LPOracle",
        "numberOfBytes": "20"
      },
      "t_enum(CurveOracleKind)56839": {
        "encoding": "inplace",
        "label": "enum IPriceOracleStorageV4.CurveOracleKind",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_string_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(SupraDataFeedId)56799_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IPriceOracleStorageV3.SupraDataFeedId))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(SupraDataFeedId)56799_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(SupraDataFeedId)56799_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPriceOracleStorageV3.SupraDataFeedId)",
        "numberOfBytes": "32",
        "value": "t_struct(SupraDataFeedId)56799_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(CurveOracleKind)56839,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(CurveOracleKind)56839",
        "label": "mapping(enum IPriceOracleStorageV4.CurveOracleKind => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SupraDataFeedId)56799_storage": {
        "encoding": "inplace",
        "label": "struct IPriceOracleStorageV3.SupraDataFeedId",
        "members": [
          {
            "astId": 56796,
            "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 56798,
            "contract": "contracts/PriceOracle/PriceOracle.sol:PriceOracle",
            "label": "initialize",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}