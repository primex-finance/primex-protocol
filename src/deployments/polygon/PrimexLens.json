{
  "address": "0xCbaEc4b0683Ed6F2C2C318500962857768Fc1366",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_takeProfitStopLossCCM",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bucketFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_showDeprecated",
          "type": "bool"
        }
      ],
      "name": "getAllBucketsFactory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bucketAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "bar",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lar",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "demand",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "utilizationRatio",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "id",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "isSupported",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "pairPriceDrop",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxLeverage",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.BucketTokenMetadata",
                  "name": "properties",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IPrimexLens.SupportedAsset[]",
              "name": "supportedAssets",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "pToken",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "debtToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "feeBuffer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawalFeeRate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "contract ILiquidityMiningRewardDistributor",
                  "name": "liquidityMiningRewardDistributor",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isBucketLaunched",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "accumulatingAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadlineTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stabilizationDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stabilizationEndTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxAmountPerUser",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxStabilizationEndTimestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBucketStorage.LiquidityMiningParams",
              "name": "miningParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amountInMining",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPercent",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "minReward",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxReward",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "extraReward",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ILiquidityMiningRewardDistributor.RewardsInPMX",
                  "name": "rewardsInPMX",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IPrimexLens.LenderInfo",
              "name": "lenderInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "pmxAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawnRewards",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalPoints",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.LiquidityMiningBucketInfo",
              "name": "lmBucketInfo",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "estimatedBar",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "estimatedLar",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "isDeprecated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDelisted",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "urOptimal",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "k0",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "k1",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "b0",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "b1",
                  "type": "int256"
                }
              ],
              "internalType": "struct IInterestRateStrategy.BarCalculationParams",
              "name": "barCalcParams",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalDeposit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrimexLens.BucketMetaData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bucket",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getArrayOpenPositionDataByBucket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "bucketAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint128",
                  "name": "bar",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "lar",
                  "type": "uint128"
                },
                {
                  "internalType": "uint256",
                  "name": "supply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "demand",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableLiquidity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "utilizationRatio",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "tokenAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "string",
                          "name": "symbol",
                          "type": "string"
                        },
                        {
                          "internalType": "string",
                          "name": "name",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "decimals",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "balance",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IPrimexLens.TokenMetadata",
                      "name": "asset",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "id",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bool",
                          "name": "isSupported",
                          "type": "bool"
                        },
                        {
                          "internalType": "uint256",
                          "name": "pairPriceDrop",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "maxLeverage",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IPrimexLens.BucketTokenMetadata",
                      "name": "properties",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPrimexLens.SupportedAsset[]",
                  "name": "supportedAssets",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "pToken",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "debtToken",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "feeBuffer",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawalFeeRate",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "contract ILiquidityMiningRewardDistributor",
                      "name": "liquidityMiningRewardDistributor",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isBucketLaunched",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "accumulatingAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "deadlineTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stabilizationDuration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stabilizationEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxAmountPerUser",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxDuration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxStabilizationEndTimestamp",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IBucketStorage.LiquidityMiningParams",
                  "name": "miningParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "amountInMining",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "currentPercent",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "minReward",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "maxReward",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "extraReward",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct ILiquidityMiningRewardDistributor.RewardsInPMX",
                      "name": "rewardsInPMX",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPrimexLens.LenderInfo",
                  "name": "lenderInfo",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "pmxAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "withdrawnRewards",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalPoints",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.LiquidityMiningBucketInfo",
                  "name": "lmBucketInfo",
                  "type": "tuple"
                },
                {
                  "internalType": "uint128",
                  "name": "estimatedBar",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "estimatedLar",
                  "type": "uint128"
                },
                {
                  "internalType": "bool",
                  "name": "isDeprecated",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isDelisted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "urOptimal",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "k0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "k1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "b0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "b1",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct IInterestRateStrategy.BarCalculationParams",
                  "name": "barCalcParams",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTotalDeposit",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.BucketMetaData",
              "name": "bucket",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata[2]",
              "name": "pair",
              "type": "tuple[2]"
            },
            {
              "internalType": "uint256",
              "name": "positionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopLossPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takeProfitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrimexLens.OpenPositionData[]",
          "name": "positionsData",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "newCursor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getArrayOpenPositionDataByTrader",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "bucketAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint128",
                  "name": "bar",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "lar",
                  "type": "uint128"
                },
                {
                  "internalType": "uint256",
                  "name": "supply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "demand",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableLiquidity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "utilizationRatio",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "tokenAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "string",
                          "name": "symbol",
                          "type": "string"
                        },
                        {
                          "internalType": "string",
                          "name": "name",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "decimals",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "balance",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IPrimexLens.TokenMetadata",
                      "name": "asset",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "id",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bool",
                          "name": "isSupported",
                          "type": "bool"
                        },
                        {
                          "internalType": "uint256",
                          "name": "pairPriceDrop",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "maxLeverage",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IPrimexLens.BucketTokenMetadata",
                      "name": "properties",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPrimexLens.SupportedAsset[]",
                  "name": "supportedAssets",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "pToken",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "debtToken",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "feeBuffer",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawalFeeRate",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "contract ILiquidityMiningRewardDistributor",
                      "name": "liquidityMiningRewardDistributor",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isBucketLaunched",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "accumulatingAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "deadlineTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stabilizationDuration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stabilizationEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxAmountPerUser",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxDuration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxStabilizationEndTimestamp",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IBucketStorage.LiquidityMiningParams",
                  "name": "miningParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "amountInMining",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "currentPercent",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "minReward",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "maxReward",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "extraReward",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct ILiquidityMiningRewardDistributor.RewardsInPMX",
                      "name": "rewardsInPMX",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPrimexLens.LenderInfo",
                  "name": "lenderInfo",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "pmxAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "withdrawnRewards",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalPoints",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.LiquidityMiningBucketInfo",
                  "name": "lmBucketInfo",
                  "type": "tuple"
                },
                {
                  "internalType": "uint128",
                  "name": "estimatedBar",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "estimatedLar",
                  "type": "uint128"
                },
                {
                  "internalType": "bool",
                  "name": "isDeprecated",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isDelisted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "urOptimal",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "k0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "k1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "b0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "b1",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct IInterestRateStrategy.BarCalculationParams",
                  "name": "barCalcParams",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTotalDeposit",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.BucketMetaData",
              "name": "bucket",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata[2]",
              "name": "pair",
              "type": "tuple[2]"
            },
            {
              "internalType": "uint256",
              "name": "positionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopLossPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takeProfitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrimexLens.OpenPositionData[]",
          "name": "positionsData",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "newCursor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bucket",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getAssetMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSupported",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "pairPriceDrop",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLeverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrimexLens.BucketTokenMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bucket",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBucket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bucketAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "bar",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lar",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "demand",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "utilizationRatio",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "id",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "isSupported",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "pairPriceDrop",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxLeverage",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.BucketTokenMetadata",
                  "name": "properties",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IPrimexLens.SupportedAsset[]",
              "name": "supportedAssets",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "pToken",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "debtToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "feeBuffer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawalFeeRate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "contract ILiquidityMiningRewardDistributor",
                  "name": "liquidityMiningRewardDistributor",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isBucketLaunched",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "accumulatingAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadlineTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stabilizationDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stabilizationEndTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxAmountPerUser",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxStabilizationEndTimestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBucketStorage.LiquidityMiningParams",
              "name": "miningParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amountInMining",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPercent",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "minReward",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxReward",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "extraReward",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ILiquidityMiningRewardDistributor.RewardsInPMX",
                  "name": "rewardsInPMX",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IPrimexLens.LenderInfo",
              "name": "lenderInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "pmxAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawnRewards",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalPoints",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.LiquidityMiningBucketInfo",
              "name": "lmBucketInfo",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "estimatedBar",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "estimatedLar",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "isDeprecated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDelisted",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "urOptimal",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "k0",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "k1",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "b0",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "b1",
                  "type": "int256"
                }
              ],
              "internalType": "struct IInterestRateStrategy.BarCalculationParams",
              "name": "barCalcParams",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalDeposit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrimexLens.BucketMetaData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_buckets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_showDeprecated",
          "type": "bool"
        }
      ],
      "name": "getBucketsArray",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bucketAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "bar",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "lar",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "demand",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "utilizationRatio",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "id",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "isSupported",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "pairPriceDrop",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxLeverage",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.BucketTokenMetadata",
                  "name": "properties",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IPrimexLens.SupportedAsset[]",
              "name": "supportedAssets",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "pToken",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "debtToken",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "feeBuffer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawalFeeRate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "contract ILiquidityMiningRewardDistributor",
                  "name": "liquidityMiningRewardDistributor",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isBucketLaunched",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "accumulatingAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadlineTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stabilizationDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stabilizationEndTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxAmountPerUser",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxDuration",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxStabilizationEndTimestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBucketStorage.LiquidityMiningParams",
              "name": "miningParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amountInMining",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currentPercent",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "minReward",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxReward",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "extraReward",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ILiquidityMiningRewardDistributor.RewardsInPMX",
                  "name": "rewardsInPMX",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IPrimexLens.LenderInfo",
              "name": "lenderInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "pmxAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawnRewards",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalPoints",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.LiquidityMiningBucketInfo",
              "name": "lmBucketInfo",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "estimatedBar",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "estimatedLar",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "isDeprecated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isDelisted",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "urOptimal",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "k0",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "k1",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "b0",
                  "type": "uint256"
                },
                {
                  "internalType": "int256",
                  "name": "b1",
                  "type": "int256"
                }
              ],
              "internalType": "struct IInterestRateStrategy.BarCalculationParams",
              "name": "barCalcParams",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "maxTotalDeposit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrimexLens.BucketMetaData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_feeds",
          "type": "address[]"
        }
      ],
      "name": "getChainlinkLatestRoundData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint80",
              "name": "roundId",
              "type": "uint80"
            },
            {
              "internalType": "int256",
              "name": "answer",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedAt",
              "type": "uint256"
            },
            {
              "internalType": "uint80",
              "name": "answeredInRound",
              "type": "uint80"
            }
          ],
          "internalType": "struct IPrimexLens.RoundData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILiquidityMiningRewardDistributor",
          "name": "liquidityMiningRewardDistributor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bucketName",
          "type": "string"
        }
      ],
      "name": "getLMBucketInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "pmxAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawnRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPoints",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrimexLens.LiquidityMiningBucketInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILiquidityMiningRewardDistributor",
          "name": "liquidityMiningRewardDistributor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bucketName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getLenderInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountInMining",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentPercent",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "minReward",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxReward",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "extraReward",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ILiquidityMiningRewardDistributor.RewardsInPMX",
              "name": "rewardsInPMX",
              "type": "tuple"
            }
          ],
          "internalType": "struct IPrimexLens.LenderInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_limitOrderManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getLimitOrdersWithConditions",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract IBucket",
                  "name": "bucket",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "positionAsset",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "depositAsset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "depositAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "feeToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "protocolFee",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "shouldOpenPosition",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "createdAt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedConditionsAt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraParams",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LimitOrderLibrary.LimitOrder",
              "name": "limitOrderData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "managerType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LimitOrderLibrary.Condition[]",
              "name": "openConditionsData",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IPrimexLens.LimitOrderWithConditions[]",
          "name": "limitOrdersWithConditions",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "newCursor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_bucket",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_borrowedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_positionAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_positionAmount",
          "type": "uint256"
        }
      ],
      "name": "getLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOpenPositionData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "bucketAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint128",
                  "name": "bar",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "lar",
                  "type": "uint128"
                },
                {
                  "internalType": "uint256",
                  "name": "supply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "demand",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableLiquidity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "utilizationRatio",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "tokenAddress",
                          "type": "address"
                        },
                        {
                          "internalType": "string",
                          "name": "symbol",
                          "type": "string"
                        },
                        {
                          "internalType": "string",
                          "name": "name",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "decimals",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "balance",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IPrimexLens.TokenMetadata",
                      "name": "asset",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "id",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bool",
                          "name": "isSupported",
                          "type": "bool"
                        },
                        {
                          "internalType": "uint256",
                          "name": "pairPriceDrop",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "maxLeverage",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct IPrimexLens.BucketTokenMetadata",
                      "name": "properties",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPrimexLens.SupportedAsset[]",
                  "name": "supportedAssets",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "pToken",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "balance",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.TokenMetadata",
                  "name": "debtToken",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "feeBuffer",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "withdrawalFeeRate",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "contract ILiquidityMiningRewardDistributor",
                      "name": "liquidityMiningRewardDistributor",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "isBucketLaunched",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "accumulatingAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "deadlineTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stabilizationDuration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stabilizationEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxAmountPerUser",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxDuration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxStabilizationEndTimestamp",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IBucketStorage.LiquidityMiningParams",
                  "name": "miningParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "amountInMining",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "currentPercent",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint256",
                          "name": "minReward",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "maxReward",
                          "type": "uint256"
                        },
                        {
                          "internalType": "uint256",
                          "name": "extraReward",
                          "type": "uint256"
                        }
                      ],
                      "internalType": "struct ILiquidityMiningRewardDistributor.RewardsInPMX",
                      "name": "rewardsInPMX",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPrimexLens.LenderInfo",
                  "name": "lenderInfo",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "pmxAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "withdrawnRewards",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalPoints",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IPrimexLens.LiquidityMiningBucketInfo",
                  "name": "lmBucketInfo",
                  "type": "tuple"
                },
                {
                  "internalType": "uint128",
                  "name": "estimatedBar",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "estimatedLar",
                  "type": "uint128"
                },
                {
                  "internalType": "bool",
                  "name": "isDeprecated",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isDelisted",
                  "type": "bool"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "urOptimal",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "k0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "k1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "b0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "b1",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct IInterestRateStrategy.BarCalculationParams",
                  "name": "barCalcParams",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTotalDeposit",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.BucketMetaData",
              "name": "bucket",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata[2]",
              "name": "pair",
              "type": "tuple[2]"
            },
            {
              "internalType": "uint256",
              "name": "positionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stopLossPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takeProfitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrimexLens.OpenPositionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getOpenPositionsWithConditions",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "scaledDebtAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "contract IBucket",
                  "name": "bucket",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "soldAsset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "depositAmountInSoldAsset",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "positionAsset",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "positionAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "openBorrowIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "createdAt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedConditionsAt",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraParams",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PositionLibrary.Position",
              "name": "positionData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "managerType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LimitOrderLibrary.Condition[]",
              "name": "conditionsData",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IPrimexLens.OpenPositionWithConditions[]",
          "name": "openPositionsWithConditions",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "newCursor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPositionManager",
          "name": "_pm",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getPositionMaxDecrease",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dexName",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "encodedPath",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.SwapPath[]",
              "name": "paths",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.Route[]",
          "name": "_routes",
          "type": "tuple[]"
        }
      ],
      "name": "getPositionStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "liquidationThreshold",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "takeProfitReached",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "stopLossReached",
              "type": "bool"
            }
          ],
          "internalType": "struct IPrimexLens.PositionStatus",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bucket",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getSupportedAsset",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "asset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isSupported",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "pairPriceDrop",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxLeverage",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.BucketTokenMetadata",
              "name": "properties",
              "type": "tuple"
            }
          ],
          "internalType": "struct IPrimexLens.SupportedAsset",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bucket",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getSupportedAssetArray",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.TokenMetadata",
              "name": "asset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isSupported",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "pairPriceDrop",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxLeverage",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPrimexLens.BucketTokenMetadata",
              "name": "properties",
              "type": "tuple"
            }
          ],
          "internalType": "struct IPrimexLens.SupportedAsset[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getTokenArrayMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrimexLens.TokenMetadata[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getTokenMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrimexLens.TokenMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isStopLossReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dexName",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "encodedPath",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.SwapPath[]",
              "name": "paths",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.Route[]",
          "name": "_routes",
          "type": "tuple[]"
        }
      ],
      "name": "isTakeProfitReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "takeProfitStopLossCCM",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ccf1113657675db50605432fc0cd5eb509973f8e6cc98e88b7245d6fe294f2d",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0xCbaEc4b0683Ed6F2C2C318500962857768Fc1366",
    "transactionIndex": 15,
    "gasUsed": "4992495",
    "logsBloom": "0x
    "blockHash": "0xfce104fe3e200c3262f6c60af8acdaf35271f77f3679eee1742246180a774a7d",
    "transactionHash": "0x9ccf1113657675db50605432fc0cd5eb509973f8e6cc98e88b7245d6fe294f2d",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 49784896,
        "transactionHash": "0x9ccf1113657675db50605432fc0cd5eb509973f8e6cc98e88b7245d6fe294f2d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c110b6e93a51acf1f3ded19c754789e7a2304f07",
          "0x0000000000000000000000001d25c827abd466387bda00b429fe728627d6eee6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000005aef203a3c624c70000000000000000000000000000000000000000000000007248fe2a9036400200000000000000000000000000000000000000000000002bd26abd8ba1ca8def0000000000000000000000000000000000000000000000006c9a0c26ec701b3b00000000000000000000000000000000000000000000002bd819af8f4590b2b6",
        "logIndex": 70,
        "blockHash": "0xfce104fe3e200c3262f6c60af8acdaf35271f77f3679eee1742246180a774a7d"
      }
    ],
    "blockNumber": 49784896,
    "cumulativeGasUsed": "7179623",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8Aa7671b49758b27Efa8b961BB143367f973b2bc"
  ],
  "numDeployments": 2,
  "solcInputHash": "e5e8e3dbdc56cc98b4c9491244421c19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_takeProfitStopLossCCM\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bucketFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_showDeprecated\",\"type\":\"bool\"}],\"name\":\"getAllBucketsFactory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bucketAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"bar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lar\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"demand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRatio\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketTokenMetadata\",\"name\":\"properties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.SupportedAsset[]\",\"name\":\"supportedAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"pToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"debtToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"feeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILiquidityMiningRewardDistributor\",\"name\":\"liquidityMiningRewardDistributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBucketLaunched\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStabilizationEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IBucketStorage.LiquidityMiningParams\",\"name\":\"miningParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountInMining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMiningRewardDistributor.RewardsInPMX\",\"name\":\"rewardsInPMX\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.LenderInfo\",\"name\":\"lenderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pmxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.LiquidityMiningBucketInfo\",\"name\":\"lmBucketInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"estimatedBar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"estimatedLar\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelisted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"urOptimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b0\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"b1\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateStrategy.BarCalculationParams\",\"name\":\"barCalcParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalDeposit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketMetaData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bucket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getArrayOpenPositionDataByBucket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bucketAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"bar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lar\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"demand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRatio\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketTokenMetadata\",\"name\":\"properties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.SupportedAsset[]\",\"name\":\"supportedAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"pToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"debtToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"feeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILiquidityMiningRewardDistributor\",\"name\":\"liquidityMiningRewardDistributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBucketLaunched\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStabilizationEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IBucketStorage.LiquidityMiningParams\",\"name\":\"miningParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountInMining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMiningRewardDistributor.RewardsInPMX\",\"name\":\"rewardsInPMX\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.LenderInfo\",\"name\":\"lenderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pmxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.LiquidityMiningBucketInfo\",\"name\":\"lmBucketInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"estimatedBar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"estimatedLar\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelisted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"urOptimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b0\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"b1\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateStrategy.BarCalculationParams\",\"name\":\"barCalcParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalDeposit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketMetaData\",\"name\":\"bucket\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata[2]\",\"name\":\"pair\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopLossPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeProfitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.OpenPositionData[]\",\"name\":\"positionsData\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"newCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getArrayOpenPositionDataByTrader\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bucketAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"bar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lar\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"demand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRatio\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketTokenMetadata\",\"name\":\"properties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.SupportedAsset[]\",\"name\":\"supportedAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"pToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"debtToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"feeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILiquidityMiningRewardDistributor\",\"name\":\"liquidityMiningRewardDistributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBucketLaunched\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStabilizationEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IBucketStorage.LiquidityMiningParams\",\"name\":\"miningParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountInMining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMiningRewardDistributor.RewardsInPMX\",\"name\":\"rewardsInPMX\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.LenderInfo\",\"name\":\"lenderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pmxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.LiquidityMiningBucketInfo\",\"name\":\"lmBucketInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"estimatedBar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"estimatedLar\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelisted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"urOptimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b0\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"b1\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateStrategy.BarCalculationParams\",\"name\":\"barCalcParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalDeposit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketMetaData\",\"name\":\"bucket\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata[2]\",\"name\":\"pair\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopLossPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeProfitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.OpenPositionData[]\",\"name\":\"positionsData\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"newCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAssetMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBucket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bucketAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"bar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lar\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"demand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRatio\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketTokenMetadata\",\"name\":\"properties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.SupportedAsset[]\",\"name\":\"supportedAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"pToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"debtToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"feeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILiquidityMiningRewardDistributor\",\"name\":\"liquidityMiningRewardDistributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBucketLaunched\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStabilizationEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IBucketStorage.LiquidityMiningParams\",\"name\":\"miningParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountInMining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMiningRewardDistributor.RewardsInPMX\",\"name\":\"rewardsInPMX\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.LenderInfo\",\"name\":\"lenderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pmxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.LiquidityMiningBucketInfo\",\"name\":\"lmBucketInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"estimatedBar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"estimatedLar\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelisted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"urOptimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b0\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"b1\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateStrategy.BarCalculationParams\",\"name\":\"barCalcParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalDeposit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketMetaData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buckets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_showDeprecated\",\"type\":\"bool\"}],\"name\":\"getBucketsArray\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bucketAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"bar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lar\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"demand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRatio\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketTokenMetadata\",\"name\":\"properties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.SupportedAsset[]\",\"name\":\"supportedAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"pToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"debtToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"feeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILiquidityMiningRewardDistributor\",\"name\":\"liquidityMiningRewardDistributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBucketLaunched\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStabilizationEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IBucketStorage.LiquidityMiningParams\",\"name\":\"miningParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountInMining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMiningRewardDistributor.RewardsInPMX\",\"name\":\"rewardsInPMX\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.LenderInfo\",\"name\":\"lenderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pmxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.LiquidityMiningBucketInfo\",\"name\":\"lmBucketInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"estimatedBar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"estimatedLar\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelisted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"urOptimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b0\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"b1\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateStrategy.BarCalculationParams\",\"name\":\"barCalcParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalDeposit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketMetaData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_feeds\",\"type\":\"address[]\"}],\"name\":\"getChainlinkLatestRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"internalType\":\"struct IPrimexLens.RoundData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityMiningRewardDistributor\",\"name\":\"liquidityMiningRewardDistributor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bucketName\",\"type\":\"string\"}],\"name\":\"getLMBucketInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pmxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.LiquidityMiningBucketInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityMiningRewardDistributor\",\"name\":\"liquidityMiningRewardDistributor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bucketName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLenderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountInMining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMiningRewardDistributor.RewardsInPMX\",\"name\":\"rewardsInPMX\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.LenderInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_limitOrderManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getLimitOrdersWithConditions\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IBucket\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldOpenPosition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.LimitOrder\",\"name\":\"limitOrderData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"openConditionsData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPrimexLens.LimitOrderWithConditions[]\",\"name\":\"limitOrdersWithConditions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"newCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_bucket\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_positionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_positionAmount\",\"type\":\"uint256\"}],\"name\":\"getLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOpenPositionData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bucketAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"bar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lar\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"demand\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRatio\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketTokenMetadata\",\"name\":\"properties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.SupportedAsset[]\",\"name\":\"supportedAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"pToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"debtToken\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"feeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalFeeRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract ILiquidityMiningRewardDistributor\",\"name\":\"liquidityMiningRewardDistributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBucketLaunched\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stabilizationEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStabilizationEndTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IBucketStorage.LiquidityMiningParams\",\"name\":\"miningParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountInMining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPercent\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMiningRewardDistributor.RewardsInPMX\",\"name\":\"rewardsInPMX\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.LenderInfo\",\"name\":\"lenderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pmxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.LiquidityMiningBucketInfo\",\"name\":\"lmBucketInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"estimatedBar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"estimatedLar\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDelisted\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"urOptimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"k1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b0\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"b1\",\"type\":\"int256\"}],\"internalType\":\"struct IInterestRateStrategy.BarCalculationParams\",\"name\":\"barCalcParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalDeposit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketMetaData\",\"name\":\"bucket\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata[2]\",\"name\":\"pair\",\"type\":\"tuple[2]\"},{\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopLossPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeProfitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.OpenPositionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getOpenPositionsWithConditions\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledDebtAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IBucket\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"soldAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmountInSoldAsset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openBorrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct PositionLibrary.Position\",\"name\":\"positionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"conditionsData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPrimexLens.OpenPositionWithConditions[]\",\"name\":\"openPositionsWithConditions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"newCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPositionManager\",\"name\":\"_pm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPositionMaxDecrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedPath\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.SwapPath[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"_routes\",\"type\":\"tuple[]\"}],\"name\":\"getPositionStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"liquidationThreshold\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"takeProfitReached\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stopLossReached\",\"type\":\"bool\"}],\"internalType\":\"struct IPrimexLens.PositionStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getSupportedAsset\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketTokenMetadata\",\"name\":\"properties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.SupportedAsset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bucket\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getSupportedAssetArray\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pairPriceDrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.BucketTokenMetadata\",\"name\":\"properties\",\"type\":\"tuple\"}],\"internalType\":\"struct IPrimexLens.SupportedAsset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getTokenArrayMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getTokenMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrimexLens.TokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isStopLossReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedPath\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.SwapPath[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"_routes\",\"type\":\"tuple[]\"}],\"name\":\"isTakeProfitReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeProfitStopLossCCM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All functions in this contract are intended to be called off-chain. Do not call functions from other contracts to avoid an out-of-gas error.\",\"kind\":\"dev\",\"methods\":{\"getAllBucketsFactory(address,address,address,bool)\":{\"params\":{\"_bucketFactory\":\"The address of the BucketFactory contract.\",\"_positionManager\":\"The address of the PositionManager contract.\",\"_showDeprecated\":\"A boolean flag indicating whether to include deprecated buckets in the result.\",\"_trader\":\"The address of the trader for whom the buckets are retrieved.\"},\"returns\":{\"_0\":\"An array of BucketMetaData structs representing the bucket metadata.\"}},\"getArrayOpenPositionDataByBucket(address,address,uint256,uint256)\":{\"params\":{\"_bucket\":\"The address of the bucket positions are related to\",\"_count\":\"The number of positions to retrieve.\",\"_cursor\":\"The cursor value for pagination.\",\"_positionManager\":\"The address of the PositionManager where the positions is stored\"}},\"getArrayOpenPositionDataByTrader(address,address,uint256,uint256)\":{\"params\":{\"_count\":\"The number of positions to retrieve.\",\"_cursor\":\"The cursor value for pagination.\",\"_positionManager\":\"The address of the PositionManager where the positions is stored\",\"_trader\":\"The address, information about all positions of which will be displayed\"}},\"getAssetMetadata(address,address)\":{\"params\":{\"_asset\":\"The address of the asset to retrieve metadata for.\",\"_bucket\":\"The address of the Bucket contract.\"},\"returns\":{\"_0\":\"metadata The metadata of the asset within the bucket.\"}},\"getBucket(address,address)\":{\"params\":{\"_bucket\":\"The address of the Bucket contract.\",\"_trader\":\"The address of the trader.\"},\"returns\":{\"_0\":\"The metadata of the bucket.\"}},\"getBucketsArray(address[],address,address,bool)\":{\"params\":{\"_buckets\":\"The array of bucket addresses.\",\"_positionManager\":\"The address of the PositionManager contract.\",\"_showDeprecated\":\"Flag to determine whether deprecated buckets should be included.\",\"_trader\":\"The address of the trader.\"},\"returns\":{\"_0\":\"An array of `BucketMetaData` objects.\"}},\"getChainlinkLatestRoundData(address[])\":{\"params\":{\"_feeds\":\"An array of feed addresses.\"},\"returns\":{\"_0\":\"res An array of RoundData structs containing the latest round data for each feed.\"}},\"getLMBucketInfo(address,string)\":{\"params\":{\"_bucketName\":\"The name of the liquidity mining bucket.\",\"liquidityMiningRewardDistributor\":\"The instance of the LiquidityMiningRewardDistributor contract.\"},\"returns\":{\"_0\":\"info The liquidity mining bucket information.\"}},\"getLenderInfo(address,string,address)\":{\"params\":{\"bucketName\":\"The name of the lending bucket.\",\"liquidityMiningRewardDistributor\":\"The instance of the LiquidityMiningRewardDistributor contract.\",\"user\":\"The address of the lender.\"},\"returns\":{\"_0\":\"info The lender information.\"}},\"getLimitOrdersWithConditions(address,uint256,uint256)\":{\"params\":{\"_count\":\"The number of positions to retrieve.\",\"_cursor\":\"The cursor value for pagination.\",\"_limitOrderManager\":\"The address of the LimitOrderManager where the order is stored.\"},\"returns\":{\"limitOrdersWithConditions\":\"limitOrderWithConditions An array of LimitOrderWithConditions structs representing open positions with conditions.\",\"newCursor\":\"The new cursor value for pagination.\"}},\"getLiquidationPrice(address,string,uint256,address,uint256)\":{\"details\":\"The liquidation price is the price at which a position can be liquidated (i.e., its collateral can cover the borrowed amount).\",\"params\":{\"_borrowedAmount\":\"The amount borrowed in the position.\",\"_bucket\":\"The name of the bucket associated with the position.\",\"_positionAmount\":\"The amount of the asset held in the position.\",\"_positionAsset\":\"The address of the asset held in the position.\",\"_positionManager\":\"The address of the PositionManager contract.\"},\"returns\":{\"_0\":\"The liquidation price in borrowed asset for the position.\"}},\"getLiquidationPrice(address,uint256)\":{\"params\":{\"_id\":\"The ID of the position.\",\"_positionManager\":\"The address of the PositionManager contract.\"},\"returns\":{\"_0\":\"The liquidation price in borrowed asset of the position.\"}},\"getOpenPositionData(address,uint256)\":{\"params\":{\"_id\":\"Position id to show the parameters position\",\"_positionManager\":\"The address of the PositionManager where the position is stored\"},\"returns\":{\"_0\":\"openPositionData The open position data including various details.\"}},\"getOpenPositionsWithConditions(address,uint256,uint256)\":{\"params\":{\"_count\":\"The number of positions to retrieve.\",\"_cursor\":\"The cursor value for pagination.\",\"_positionManager\":\"The address of the PositionManager where the position is stored.\"},\"returns\":{\"newCursor\":\"The new cursor value for pagination.\",\"openPositionsWithConditions\":\"openPositionsWithConditionsArray An array of OpenPositionWithConditions structs representing open positions with conditions.\"}},\"getPositionMaxDecrease(address,uint256)\":{\"details\":\"maxDecrease = (1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - pricedrop) * borrowedAssetAmountOut / (feeBuffer * (1 + maintenanceBuffer)) - position.bucket.getNormalizedVariableDebt() * position.scaledDebtAmount\",\"params\":{\"_id\":\"The ID of the position.\",\"_pm\":\"The instance of the PositionManager contract.\"},\"returns\":{\"_0\":\"The maximum decrease in position value.\"}},\"getPositionStatus(address,uint256,(uint256,(string,bytes)[])[])\":{\"params\":{\"_id\":\"Position id to show the parameters position\",\"_positionManager\":\"The address of the PositionManager where the position is stored\",\"_routes\":\"An array of route objects representing the pricing routes.\"},\"returns\":{\"_0\":\"positionStatus The status of the position.\"}},\"getSupportedAsset(address,address,address)\":{\"params\":{\"_asset\":\"The address of the asset for which information is requested.\",\"_bucket\":\"The address of the Bucket where the asset is supported.\",\"_trader\":\"The address of the Trader requesting the information.\"},\"returns\":{\"_0\":\"supportedAsset The SupportedAsset struct containing the asset and its properties.\"}},\"getSupportedAssetArray(address,address[],address)\":{\"params\":{\"_assets\":\"An array of asset addresses.\",\"_bucket\":\"The address of the Bucket.\",\"_trader\":\"The address of the trader.\"},\"returns\":{\"_0\":\"res An array of SupportedAsset structs representing the supported assets.\"}},\"getTokenArrayMetadata(address[],address)\":{\"params\":{\"_tokens\":\"The array of token addresses.\",\"_trader\":\"The address of the trader.\"},\"returns\":{\"_0\":\"res The array of token metadata.\"}},\"getTokenMetadata(address,address)\":{\"params\":{\"_token\":\"The address of the token.\",\"_trader\":\"The address of the trader.\"},\"returns\":{\"_0\":\"metadata The metadata of the token.\"}},\"isStopLossReached(address,uint256)\":{\"params\":{\"_id\":\"The ID of the position to check.\",\"_positionManager\":\"The address of the PositionManager contract.\"},\"returns\":{\"_0\":\"A boolean indicating whether the stop loss condition is reached.\"}},\"isTakeProfitReached(address,uint256,(uint256,(string,bytes)[])[])\":{\"params\":{\"_id\":\"The ID of the position to check.\",\"_positionManager\":\"The address of the PositionManager contract.\",\"_routes\":\"The routes for pricing the position.\"},\"returns\":{\"_0\":\"A boolean indicating whether the take profit condition is reached.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interface id to check\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAllBucketsFactory(address,address,address,bool)\":{\"notice\":\"Retrieves all bucket metadata from a bucket factory contract.\"},\"getArrayOpenPositionDataByBucket(address,address,uint256,uint256)\":{\"notice\":\"The function shows the parameters for all open positions of the `_trader` with the best dex for each position\"},\"getArrayOpenPositionDataByTrader(address,address,uint256,uint256)\":{\"notice\":\"The function shows the parameters for all open positions of the `_trader` with the best dex for each position\"},\"getAssetMetadata(address,address)\":{\"notice\":\"Retrieves the metadata of an asset within a bucket.\"},\"getBucket(address,address)\":{\"notice\":\"Retrieves the metadata of a bucket.\"},\"getBucketsArray(address[],address,address,bool)\":{\"notice\":\"Retrieves an array of `BucketMetaData` for the given `_user`.\"},\"getChainlinkLatestRoundData(address[])\":{\"notice\":\"Retrieves the latest round data for multiple Chainlink feeds.\"},\"getLMBucketInfo(address,string)\":{\"notice\":\"Retrieves information about a liquidity mining bucket.\"},\"getLenderInfo(address,string,address)\":{\"notice\":\"Retrieves information about a lender from the LiquidityMiningRewardDistributor contract.\"},\"getLimitOrdersWithConditions(address,uint256,uint256)\":{\"notice\":\"The function returns the limit orders with corresponding conditions\"},\"getLiquidationPrice(address,string,uint256,address,uint256)\":{\"notice\":\"Calculates the liquidation price for a given position.\"},\"getLiquidationPrice(address,uint256)\":{\"notice\":\"Retrieves the liquidation price of a position.\"},\"getOpenPositionData(address,uint256)\":{\"notice\":\"Retrieves open position data based on the provided position manager and id.\"},\"getOpenPositionsWithConditions(address,uint256,uint256)\":{\"notice\":\"The function returns the positions with corresponding conditions.\"},\"getPositionMaxDecrease(address,uint256)\":{\"notice\":\"Retrieves the maximum decrease in position value for a given position ID.\"},\"getPositionStatus(address,uint256,(uint256,(string,bytes)[])[])\":{\"notice\":\"Retrieves the status of a position.\"},\"getSupportedAsset(address,address,address)\":{\"notice\":\"Retrieves information about a supported asset.\"},\"getSupportedAssetArray(address,address[],address)\":{\"notice\":\"Retrieves an array of SupportedAsset structs for the given bucket, assets, and trader.\"},\"getTokenArrayMetadata(address[],address)\":{\"notice\":\"Retrieves the metadata of an array of tokens for a given trader.\"},\"getTokenMetadata(address,address)\":{\"notice\":\"Retrieves the metadata of a token for a given trader.\"},\"isStopLossReached(address,uint256)\":{\"notice\":\"Checks if the stop loss condition of a position is reached.\"},\"isTakeProfitReached(address,uint256,(uint256,(string,bytes)[])[])\":{\"notice\":\"Checks if the take profit condition is reached for a given position.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lens/PrimexLens.sol\":\"PrimexLens\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IActivityRewardDistributorStorage, IERC20, IPrimexDNS, ITraderBalanceVault} from \\\"./IActivityRewardDistributorStorage.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IActivityRewardDistributor is IActivityRewardDistributorStorage, IPausable {\\n    enum Role {\\n        LENDER,\\n        TRADER\\n    }\\n\\n    struct BucketWithRole {\\n        address bucketAddress;\\n        Role role;\\n    }\\n\\n    /**\\n     * @notice Emitted on claimReward()\\n     * @param user The address of the user who claimed reward\\n     * @param bucket The address of the bucket this reward is related to\\n     * @param role User role - TRADER or LENDER\\n     * @param amount Claimed amount\\n     */\\n    event ClaimReward(address indexed user, address indexed bucket, Role indexed role, uint256 amount);\\n\\n    /**\\n     * @notice  Initializes the ActivityRewardDistributor contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _pmx The address of the PMXToken contract.\\n     * @param _dns The address of the PrimexDNS contract.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _treasury The address of the treasury where fees will be collected.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IERC20 _pmx,\\n        IPrimexDNS _dns,\\n        address _registry,\\n        address _treasury,\\n        ITraderBalanceVault _traderBalanceVault,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice  Saves user activity in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   user  User address\\n     * @param   newBalance  User balance after action\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUserActivity(IBucket bucket, address user, uint256 newBalance, Role role) external;\\n\\n    /**\\n     * @notice  Saves activity of multiple users in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   users  Array of user addresses\\n     * @param   newBalances  Array of users balances after action\\n     * @param   length  The length of the users and oldBalances arrays\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUsersActivities(\\n        IBucket bucket,\\n        address[] calldata users,\\n        uint256[] calldata newBalances,\\n        uint256 length,\\n        Role role\\n    ) external;\\n\\n    /**\\n     * @notice Allows the caller to claim their accumulated reward from the specified buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets from which to claim the rewards.\\n     */\\n    function claimReward(BucketWithRole[] calldata bucketsArray) external;\\n\\n    /**\\n     * @notice Sets up activity rewards distribution in bucket with the specified role and reward parameters.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket to set up.\\n     * @param role The role associated with the bucket.\\n     * @param increaseAmount The amount by which to increase the total reward for the bucket (in PMX).\\n     * Adds specified amount to totalReward of the bucket. Initial value of totalReward is 0.\\n     * @param rewardPerDay The reward amount per day for the bucket.\\n     */\\n    function setupBucket(address bucket, Role role, uint256 increaseAmount, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Allows the caller to withdraw PMX tokens from a specific bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket from which to withdraw PMX tokens.\\n     * @param role The role associated with the bucket.\\n     * @param amount The amount of PMX tokens to withdraw.\\n     */\\n    function withdrawPmx(address bucket, Role role, uint256 amount) external;\\n\\n    /**\\n     * @notice Decreases the reward per day for a bucket and role.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param bucket The address of the bucket for which to decrease the reward per day.\\n     * @param role The role associated with the bucket.\\n     * @param rewardPerDay The amount by which to decrease the reward per day.\\n     */\\n    function decreaseRewardPerDay(address bucket, Role role, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Returns the accumulated reward for a specific bucket and role.\\n     * @param bucket The address of the bucket for which to retrieve the accumulated reward.\\n     * @param role The role associated with the bucket.\\n     * @return The accumulated reward for the specified bucket and role.\\n     */\\n    function getBucketAccumulatedReward(address bucket, Role role) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable reward for a user across multiple buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets to check for claimable rewards.\\n     * @param user The address of the user for whom to calculate the claimable reward.\\n     * @return The total claimable reward for the specified user across all provided buckets.\\n     */\\n    function getClaimableReward(BucketWithRole[] calldata bucketsArray, address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the user information from a specific bucket and role.\\n     * @param bucket The address of the bucket from which to retrieve the user information.\\n     * @param role The role associated with the bucket.\\n     * @param user The address of the user for whom to retrieve the information.\\n     * @return A UserInfo struct containing the user information.\\n     */\\n    function getUserInfoFromBucket(address bucket, Role role, address user) external view returns (UserInfo memory);\\n}\\n\",\"keccak256\":\"0x92e646c799437ad1e02850a871701b0d1a4fcf0d9b88062720d85aca99bd2152\",\"license\":\"BUSL-1.1\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface IActivityRewardDistributorStorage {\\n    /*\\n     * @param oldBalance last updated balance for user\\n     * @param fixedReward the accumulated value of the reward at the time lastUpdatedRewardIndex\\n     * @param lastUpdatedRewardIndex last index with which the user's reward was accumulated\\n     */\\n    struct UserInfo {\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardIndex;\\n        uint256 oldBalance;\\n    }\\n\\n    /*\\n     * @param users data to calculate users rewards in this bucket\\n     * @param rewardIndex an index that accumulates user rewards\\n     * @param lastUpdatedTimestamp timestamp of the last update of user activity\\n     * @param rewardPerToken current reward for one token(PToken or DebtToken of bucket)\\n     * @param isFinished Shows that the bucket has distributed all the rewards\\n     * @param fixedReward reward distributed by a bucket over the past period\\n     * with a certain reward per day or with the entire reward fully distributed\\n     * @param lastUpdatedRewardTimestamp timestamp of last fixed reward update\\n     * @param rewardPerDay current reward distributed for 1 day\\n     * @param totalReward Full distributable reward\\n     * @param endTimestamp end time of the distribution of rewards, which is calculated relative to the rewardPerDay and totalReward\\n     */\\n    struct BucketInfo {\\n        mapping(address => UserInfo) users;\\n        //accumulated reward per token\\n        uint256 rewardIndex;\\n        uint256 lastUpdatedTimestamp;\\n        uint256 rewardPerToken;\\n        uint256 scaledTotalSupply;\\n        bool isFinished;\\n        // setted by admin's actions\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardTimestamp;\\n        uint256 rewardPerDay;\\n        uint256 totalReward;\\n        uint256 endTimestamp;\\n    }\\n\\n    function pmx() external returns (IERC20);\\n\\n    function dns() external returns (IPrimexDNS);\\n\\n    function registry() external returns (address);\\n\\n    function traderBalanceVault() external returns (ITraderBalanceVault);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc4e25952cf7dd9eade5559b4c78a2e857381b67d4554e2afa2dfd2edc48af950\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IFeeExecutorStorage} from \\\"./IFeeExecutorStorage.sol\\\";\\n\\ninterface IFeeExecutor is IFeeExecutorStorage {\\n    /**\\n     * @dev Sets tier bonuses for a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @param _tiers The array of tier values.\\n     * @param _bonuses The array of NFT bonus parameters.\\n     */\\n    function setTierBonus(address _bucket, uint256[] calldata _tiers, NFTBonusParams[] calldata _bonuses) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the Debt-Token\\n     * @param _user User for which the bonus will be updated. If user doesn't have the bonus for paused\\n     * @param _oldScaledBalance Balance of the user before the operation at which the updateBonus function was called (e.g mint/burn)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonus(address _user, uint256 _oldScaledBalance, address _bucket, uint256 _currentIndex) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called directly by the user\\n     * @param _nftId Id of activated token\\n     **/\\n    function updateBonus(uint256 _nftId) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the P-Token or Debt-Token\\n     * @param _users Array of the users for whom the bonus will be updated.\\n     * @param _oldBalances Array of the balances before the operation at which the updateBonus function was called (e.g mint/transfer)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonuses(\\n        address[] memory _users,\\n        uint256[] memory _oldBalances,\\n        address _bucket,\\n        uint256 _currentIndex\\n    ) external;\\n\\n    /**\\n     * @dev Returns accumulated amount of p-tokens at the moment\\n     * @param _user The user for which the accumatedAmount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     * @return The accumulated amount.\\n     */\\n    function getAccumulatedAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the available amount (accumulated - claimedAmount) of p-tokens at the moment.\\n     * @param _user The user for which the available amount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     **/\\n    function getAvailableAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the bonus information for a user and NFT.\\n     * @param _user The address of the user.\\n     * @param _nftId The ID of the NFT.\\n     * @return bonus The activated bonus information.\\n     */\\n    function getBonus(address _user, uint256 _nftId) external view returns (ActivatedBonus memory);\\n}\\n\",\"keccak256\":\"0x4e89772ddb2daeefc1f970ce15d03bc6de8c284e126498bfd9f39d8646f2325a\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\n\\ninterface IFeeExecutorStorage {\\n    struct ActivatedBonus {\\n        uint256 nftId;\\n        IBucket bucket;\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 accumulatedAmount;\\n        uint256 lastUpdatedIndex;\\n        uint256 deadline;\\n        //if we allow to claim funds before the end of the bonus\\n        uint256 claimedAmount;\\n    }\\n\\n    struct NFTBonusParams {\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 duration;\\n    }\\n}\\n\",\"keccak256\":\"0x1a966b20c524d3f40b1f3afcc425d37502efde4d043e022de4078af4c334fb54\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucket.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\nimport {ISwapManager} from \\\"../interfaces/ISwapManager.sol\\\";\\nimport {IBucketStorage} from \\\"./IBucketStorage.sol\\\";\\n\\ninterface IBucket is IBucketStorage {\\n    struct ConstructorParams {\\n        string name;\\n        IPToken pToken;\\n        IDebtToken debtToken;\\n        IPositionManager positionManager;\\n        IPriceOracle priceOracle;\\n        IPrimexDNS dns;\\n        IReserve reserve;\\n        IWhiteBlackList whiteBlackList;\\n        address[] assets;\\n        IERC20Metadata borrowedAsset;\\n        uint256 feeBuffer;\\n        uint256 withdrawalFeeRate;\\n        uint256 reserveRate;\\n        // liquidityMining params\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        uint256 liquidityMiningAmount;\\n        uint256 liquidityMiningDeadline;\\n        uint256 stabilizationDuration;\\n        IInterestRateStrategy interestRateStrategy;\\n        uint128 estimatedBar;\\n        uint128 estimatedLar;\\n        uint256 maxAmountPerUser;\\n        bool isReinvestToAaveEnabled;\\n        bytes barCalcParams;\\n        uint256 maxTotalDeposit;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed pTokenReceiver, uint256 amount);\\n\\n    event Withdraw(address indexed withdrawer, address indexed borrowAssetReceiver, uint256 amount);\\n\\n    event DepositToAave(address indexed pool, uint256 amount);\\n\\n    event WithdrawFromAave(address indexed pool, uint256 amount);\\n\\n    event TopUpTreasury(address indexed sender, uint256 amount);\\n\\n    event FeeBufferChanged(uint256 feeBuffer);\\n\\n    event ReserveRateChanged(uint256 reserveRate);\\n\\n    event RatesIndexesUpdated(\\n        uint128 bar,\\n        uint128 lar,\\n        uint128 variableBorrowIndex,\\n        uint128 liquidityIndex,\\n        uint256 timestamp\\n    );\\n\\n    event WithdrawalFeeChanged(uint256 withdrawalFeeRate);\\n\\n    event InterestRateStrategyChanged(address interestRateStrategy);\\n\\n    event AddAsset(address addedAsset);\\n\\n    event RemoveAsset(address deletedAsset);\\n\\n    event MaxTotalDepositChanged(uint256 maxTotalDeposit);\\n\\n    event BarCalculationParamsChanged(bytes params);\\n\\n    event BucketLaunched();\\n\\n    /**\\n     * @dev Initializes the contract with the given parameters.\\n     * @param _params The ConstructorParams struct containing initialization parameters.\\n     * @param _registry The address of the registry contract.\\n     */\\n    function initialize(ConstructorParams memory _params, address _registry) external;\\n\\n    /**\\n     * @dev Function to add new trading asset for this bucket\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _newAsset The address of trading asset\\n     */\\n    function addAsset(address _newAsset) external;\\n\\n    /**\\n     * @notice Removes a trading asset from this bucket.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _assetToDelete The address of the asset to be removed.\\n     */\\n    function removeAsset(address _assetToDelete) external;\\n\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Sets the reserve rate.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _reserveRate The new reserve rate value.\\n     */\\n    function setReserveRate(uint256 _reserveRate) external;\\n\\n    /**\\n     * @dev Sets the new fee buffer.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _feeBuffer The new fee buffer value.\\n     */\\n    function setFeeBuffer(uint256 _feeBuffer) external;\\n\\n    /**\\n     * @dev Sets the withdrawal fee.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _withdrawalFee The new withdrawal fee value.\\n     */\\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\\n\\n    /**\\n     * @dev Sets the interest rate strategy contract address.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _interestRateStrategy The address of the interest rate strategy contract.\\n     */\\n    function setInterestRateStrategy(address _interestRateStrategy) external;\\n\\n    /**\\n     * @notice The function sets the max total deposit for the particular bucket\\n     * @param _maxTotalDeposit The amount of max total deposit for the bucket\\n     */\\n    function setMaxTotalDeposit(uint256 _maxTotalDeposit) external;\\n\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraws the 'amount' of underlying asset from the bucket. The 'amount' of overlying pTokens will be burned.\\n     * @param _borrowAssetReceiver The address of receiver of the borrowed asset.\\n     * @param amount The amount of underlying tokens to be withdrawn.\\n     */\\n    function withdraw(address _borrowAssetReceiver, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the BIG_TIMELOCK_ADMIN role to withdraw a specified amount of tokens after delisting.\\n     * @param _amount The amount of tokens to withdraw.\\n     */\\n    function withdrawAfterDelisting(uint256 _amount) external;\\n\\n    /**\\n     * @dev Receives a deposit and distributes it to the specified pToken receiver.\\n     * @dev Can be called only by another bucket.\\n     * @param _pTokenReceiver The address of the recipient of the pToken.\\n     * @param _amount The amount of tokens being deposited.\\n     * @param _duration The blocking time for a fixed-term deposit (if it's 0, then it will be a usual deposit)\\n     * @param _bucketFrom The name of the bucket from which the deposit is being made.\\n     */\\n    function receiveDeposit(\\n        address _pTokenReceiver,\\n        uint256 _amount,\\n        uint256 _duration,\\n        string memory _bucketFrom\\n    ) external;\\n\\n    /**\\n     * @notice Deposits (reinvests) funds from a bucket to another bucket.\\n     * Used only in the case of failed liquidity mining in the bucket from where the transfer happens.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _swapManager The address of the swap manager.\\n     * @param routes The array of routes for swapping tokens.\\n     * @param _amountOutMin The minimum amount of tokens to receive from the swap.\\n     */\\n    function depositFromBucket(\\n        string calldata _bucketTo,\\n        ISwapManager _swapManager,\\n        PrimexPricingLibrary.Route[] calldata routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @dev Allows the SMALL_TIMELOCK_ADMIN to withdraw all liquidity from Aave to Bucket.\\n     */\\n    function returnLiquidityFromAaveToBucket() external;\\n\\n    /**\\n     * @dev Function to update rates and indexes when a trader opens a trading position.\\n     * Mints debt tokens to trader. Calls only by positionManager contract.\\n     * @param _trader The address of the trader, who opens position.\\n     * @param _amount The 'amount' for which the deal is open, and 'amount' of debtTokens will be minted to the trader.\\n     * @param _to The address to transfer the borrowed asset to.\\n     */\\n\\n    function increaseDebt(address _trader, uint256 _amount, address _to) external;\\n\\n    /**\\n     * @dev Function to update rates and indexes.\\n     * Burns debt tokens of trader. Called only by positionManager contract.\\n     * @param _trader The address of the trader, who opened position.\\n     * @param _debtToBurn The 'amount' of trader's debtTokens will be burned by the trader.\\n     * @param _receiverOfAmountToReturn Treasury in case of liquidation. TraderBalanceVault in other cases\\n     * @param _amountToReturn Amount to transfer from bucket\\n     * @param _permanentLossAmount The amount of the protocol's debt to creditors accrued for this position\\n     */\\n    function decreaseTraderDebt(\\n        address _trader,\\n        uint256 _debtToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount\\n    ) external;\\n\\n    /**\\n     * @notice Batch decreases the debt of multiple traders.\\n     * @dev This function can only be called by the BATCH_MANAGER_ROLE.\\n     * @param _traders An array of addresses representing the traders.\\n     * @param _debtsToBurn An array of uint256 values representing the debts to burn for each trader.\\n     * @param _receiverOfAmountToReturn The address that will receive the amount to be returned.\\n     * @param _amountToReturn The amount to be returned.\\n     * @param _permanentLossAmount The amount of permanent loss.\\n     * @param _length The length of the traders array.\\n     */\\n    function batchDecreaseTradersDebt(\\n        address[] memory _traders,\\n        uint256[] memory _debtsToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount,\\n        uint256 _length\\n    ) external;\\n\\n    /**\\n     * @notice This function allows a user to pay back a permanent loss by burning his pTokens.\\n     * @param amount The amount of pTokens to be burned to pay back the permanent loss.\\n     */\\n    function paybackPermanentLoss(uint256 amount) external;\\n\\n    /**\\n     * @dev Calculates the permanent loss based on the scaled permanent loss and the normalized income.\\n     * @return The amount of permanent loss.\\n     */\\n    function permanentLoss() external view returns (uint256);\\n\\n    /**\\n     * @dev Checks if the bucket is deprecated in the protocol.\\n     * @return Whether the bucket is deprecated or not.\\n     */\\n    function isDeprecated() external view returns (bool);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is delisted.\\n     * @return True if the bucket is delisted, otherwise false.\\n     */\\n    function isDelisted() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if an admin can withdraw from the bucket after delisting.\\n     * @return A boolean indicating whether withdrawal is available.\\n     */\\n    function isWithdrawAfterDelistingAvailable() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if this bucket is active in the protocol.\\n     * @return bool True if the bucket is active, false otherwise.\\n     */\\n    function isActive() external view returns (bool);\\n\\n    /**\\n     * @dev Returns the parameters for liquidity mining.\\n     * @return LMparams The liquidity mining parameters.\\n     */\\n    function getLiquidityMiningParams() external view returns (LiquidityMiningParams memory);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is stable in the liquidity mining event.\\n     * @return A boolean value representing the stability of the bucket.\\n     */\\n    function isBucketStable() external view returns (bool);\\n\\n    /**\\n     * @dev Calculates the max leverage according to the following formula:\\n     * ((1 + maintenanceBuffer) * feeBuffer) / ((1 + maintenanceBuffer) * feeBuffer - (1 - securityBuffer) *\\n     * (1 - pairPriceDropBA) * (1 - oracleTolerableLimitAB) * (1 - oracleTolerableLimitBA))\\n     * @param _asset The address of trading asset\\n     * @return The maximum leverage as a uint256 value.\\n     */\\n    function maxAssetLeverage(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized income per unit of underlying asset, expressed in ray\\n     * @return The normalized income per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedIncome() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedVariableDebt() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns allowed trading assets for current bucket\\n     * @return List of addresses of allowed assets\\n     */\\n    function getAllowedAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns current avalable liquidity of borrowedAsset for trading.\\n     * @return The amount of available borrowedAsset\\n     */\\n    function availableLiquidity() external view returns (uint256);\\n}\\n\\ninterface IBucketV2 is IBucket {\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit from user wallet\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount, bool _takeDepositFromWallet) external;\\n}\\n\",\"keccak256\":\"0xcb6d018cd67323ea8891193d1dfcd8f19d23e8aae921797c39244aa30c33e0f2\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucketStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\n\\ninterface IBucketStorage {\\n    /**\\n     * @dev Parameters of liquidity mining\\n     */\\n    struct LiquidityMiningParams {\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        bool isBucketLaunched;\\n        uint256 accumulatingAmount;\\n        uint256 deadlineTimestamp;\\n        uint256 stabilizationDuration;\\n        uint256 stabilizationEndTimestamp;\\n        uint256 maxAmountPerUser; // if maxAmountPerUser is >= accumulatingAmount then check on maxAmountPerUser is off\\n        // Constant max variables are used for calculating users' points.\\n        // These intervals are used for fair distribution of points among Lenders.\\n        // Lenders who brought liquidity earlier receive more than the ones who deposited later.\\n        // To get maximum points per token, a Lender should deposit immediately after the Bucket deployment.\\n        uint256 maxDuration;\\n        uint256 maxStabilizationEndTimestamp;\\n    }\\n    //                                        1. Corner case of bucket launch\\n    //\\n    //                                              maxDuration\\n    //       ------------------------------------------------------------------------------------------------\\n    //      |                                                                                               |\\n    //      |                                                                        stabilizationDuration  |\\n    //      |                                                                      -------------------------|\\n    //      |                                                                     | bucket launch           |\\n    //   +--+---------------------------------------------------------------------+-------------------------+------> time\\n    //      bucket deploy                                                         deadlineTimestamp         maxStabilizationEndTimestamp\\n    //                                                                                                       (=stabilizationEndTimestamp here)\\n    //                                  (corner case of bucket launch)\\n\\n    //                                        2. One of cases of bucket launch\\n    //\\n    //      |                     stabilizationDuration\\n    //      |                   -------------------------\\n    //      |                  |                         |\\n    //   +--+------------------+-------------------------+------------------------+-------------------------+------> time\\n    //      bucket deploy      bucket launch            stabilizationEndTimestamp  deadlineTimestamp        maxStabilizationEndTimestamp\\n    //                                                                            (after deadline bucket can't be launched)\\n\\n    struct Asset {\\n        uint256 index;\\n        bool isSupported;\\n    }\\n\\n    function liquidityIndex() external returns (uint128);\\n\\n    function variableBorrowIndex() external returns (uint128);\\n\\n    function name() external view returns (string memory);\\n\\n    function registry() external view returns (address);\\n\\n    function positionManager() external view returns (IPositionManager);\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function permanentLossScaled() external view returns (uint256);\\n\\n    function pToken() external view returns (IPToken);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowedAsset() external view returns (IERC20Metadata);\\n\\n    function feeBuffer() external view returns (uint256);\\n\\n    function withdrawalFeeRate() external view returns (uint256);\\n\\n    /**\\n     * @notice bar = borrowing annual rate (originally APR)\\n     */\\n    function bar() external view returns (uint128);\\n\\n    /**\\n     * @notice lar = lending annual rate (originally APY)\\n     */\\n    function lar() external view returns (uint128);\\n\\n    function interestRateStrategy() external view returns (IInterestRateStrategy);\\n\\n    function estimatedBar() external view returns (uint128);\\n\\n    function estimatedLar() external view returns (uint128);\\n\\n    function allowedAssets(address _asset) external view returns (uint256, bool);\\n\\n    function whiteBlackList() external view returns (IWhiteBlackList);\\n\\n    function maxTotalDeposit() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x21ab63957721b0662c50fdff4b13ed53dfad864fc24220517e98a54ce12250f8\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucketsFactory.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPTokensFactory} from \\\"../PToken/IPTokensFactory.sol\\\";\\nimport {IDebtTokensFactory} from \\\"../DebtToken/IDebtTokensFactory.sol\\\";\\n\\ninterface IBucketsFactory {\\n    /**\\n     * @param nameBucket The name of the new Bucket\\n     * @param positionManager The address of PositionManager\\n     * @param assets The list of active assets in bucket\\n     * @param pairPriceDrops The list of pairPriceDrops for active assets\\n     * @param underlyingAsset The underlying asset for bucket operations\\n     * @param feeBuffer The fee buffer of the bucket\\n     * @param reserveRate The reserve portion of the interest that goes to the Primex reserve\\n     */\\n    struct CreateBucketParams {\\n        string nameBucket;\\n        address positionManager;\\n        address priceOracle;\\n        address dns;\\n        address reserve;\\n        address whiteBlackList;\\n        address[] assets;\\n        IERC20Metadata underlyingAsset;\\n        uint256 feeBuffer;\\n        uint256 withdrawalFeeRate;\\n        uint256 reserveRate;\\n        // liquidityMining params\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        uint256 liquidityMiningAmount; // if 0 liquidityMining is off\\n        uint256 liquidityMiningDeadline;\\n        uint256 stabilizationDuration;\\n        IInterestRateStrategy interestRateStrategy;\\n        uint256 maxAmountPerUser;\\n        bool isReinvestToAaveEnabled;\\n        uint128 estimatedBar;\\n        uint128 estimatedLar;\\n        bytes barCalcParams;\\n        uint256 maxTotalDeposit;\\n    }\\n\\n    event BucketCreated(address bucketAddress);\\n    event PTokensFactoryChanged(address pTokensFactory);\\n    event DebtTokensFactoryChanged(address debtTokensFactory);\\n\\n    function registry() external returns (address);\\n\\n    /**\\n     * @notice Creates a new Bucket. Deploys bucket, pToken, debtToken contracts.\\n     * @dev Only the MEDIUM_TIMELOCK_ADMIN role can call this function.\\n     * @param _params The parameters for creating the bucket.\\n     */\\n    function createBucket(CreateBucketParams memory _params) external;\\n\\n    /**\\n     * @notice Set a new pTokens factory contract address.\\n     * @dev This function can only be called by the DEFAULT_ADMIN_ROLE.\\n     * @param _pTokensFactory The address of a new pTokens factory contract to set.\\n     */\\n    function setPTokensFactory(IPTokensFactory _pTokensFactory) external;\\n\\n    /**\\n     * @notice Set a new debtTokens factory contract address.\\n     * @dev This function can only be called by the DEFAULT_ADMIN_ROLE.\\n     * @param _debtTokensFactory The address of a new debtTokens factory contract to set.\\n     */\\n    function setDebtTokensFactory(IDebtTokensFactory _debtTokensFactory) external;\\n\\n    /**\\n     * @dev Returns an array of all deployed bucket addresses.\\n     * @return list of all deployed buckets\\n     */\\n    function allBuckets() external view returns (address[] memory);\\n\\n    function buckets(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa3c65f8a97a31205b2a1501d6b5d93dc3d7ff6b415894989bbc2751769a7acea\",\"license\":\"BUSL-1.1\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\",\"keccak256\":\"0xdfd1623c3bf46ff9a6fbbdff42a7d9a1b5e76c4252dd394db1b7811989dcaba3\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtToken.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IDebtTokenStorage, IBucket, IFeeExecutor, IERC20Upgradeable, IActivityRewardDistributor} from \\\"./IDebtTokenStorage.sol\\\";\\n\\ninterface IDebtToken is IDebtTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     **/\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after DebtTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     **/\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the FeeDecreaser for current DebtToken.\\n     * @param _feeDecreaser The interest increaser address.\\n     */\\n    function setFeeDecreaser(IFeeExecutor _feeDecreaser) external;\\n\\n    /**\\n     * @dev Sets the trader reward distributor contract address.\\n     * @param _traderRewardDistributor The address of the trader reward distributor contract.\\n     * Only the BIG_TIMELOCK_ADMIN role can call this function.\\n     */\\n    function setTraderRewardDistributor(IActivityRewardDistributor _traderRewardDistributor) external;\\n\\n    /**\\n     * @dev Mints `amount` DebtTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current variableBorrowIndex\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns DebtTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the DebtTokens, getting them burned\\n     * @param _amount The amount being burned\\n     * @param _index The current variableBorrowIndex\\n     **/\\n    function burn(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns a batch of tokens from multiple users.\\n     * @param _users An array of user addresses whose tokens will be burned.\\n     * @param _amounts An array of token amounts to be burned for each user.\\n     * @param _index The index used to calculate the scaled amounts.\\n     * @param _length The length of the user and amounts arrays.\\n     */\\n    function batchBurn(address[] memory _users, uint256[] memory _amounts, uint256 _index, uint256 _length) external;\\n\\n    /**\\n     * @dev Returns the principal debt balance of the user\\n     * @param _user The address of the user.\\n     * @return The scaled balance of the user.\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of debtToken.\\n     * @return The scaled total supply of the debtToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x181f52e402dfafa461a15a25983c2c6b13e8d7688accee410987cb8e27f38bdd\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtTokenStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IDebtTokenStorage is IERC20Upgradeable {\\n    function bucket() external view returns (IBucket);\\n\\n    function feeDecreaser() external view returns (IFeeExecutor);\\n\\n    function traderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0x22ecd3fd35265d62e8ee590e1d0fd3fd7df07347e7ed20c4b5745d2aba49f2df\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtTokensFactory.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IDebtToken} from \\\"./IDebtToken.sol\\\";\\n\\ninterface IDebtTokensFactory {\\n    /**\\n     * @dev Deploying a new DebtToken contract. Can be called by BucketsFactory only.\\n     * @param _name The name of the new DebtToken.\\n     * @param _symbol The symbol of the new DebtToken.\\n     */\\n    function createDebtToken(string memory _name, string memory _symbol, uint8 _decimals) external returns (IDebtToken);\\n\\n    /**\\n     * @dev Sets the BucketsFactory address. Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param bucketsFactory The BucketsFactory address.\\n     */\\n    function setBucketsFactory(address bucketsFactory) external;\\n\\n    /**\\n     * @dev Gets a BucketsFactory contract address.\\n     */\\n    function bucketsFactory() external view returns (address);\\n\\n    /**\\n     * @dev Gets a Registry contract address.\\n     */\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9a1e4e0fd4343296a744bdf5827bc2dc4695983c57c491bb60ff31deda39280c\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IKeeperRewardDistributorStorage} from \\\"./IKeeperRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IKeeperRewardDistributor is IKeeperRewardDistributorStorage, IPausable {\\n    struct DecreasingGasByReasonParams {\\n        DecreasingReason reason;\\n        uint256 amount;\\n    }\\n    struct MaxGasPerPositionParams {\\n        KeeperActionType actionType;\\n        KeeperActionRewardConfig config;\\n    }\\n\\n    /**\\n     * @dev     Params for initialize() function\\n     * @param   priceOracle  Address of the PriceOracle contract\\n     * @param   registry  Address of the Registry contract\\n     * @param   pmx  Address of PMXToken\\n     * @param   treasury  Address of the Treasury contract\\n     * @param   pmxPartInReward  Percentage of PMX in reward (in WAD)\\n     * @param   nativePartInReward  Percentage of native token in reward (in WAD)\\n     * @param   positionSizeCoefficientA  CoefficientA in the formula positionSize * CoefficientA + CoefficientB\\n     * @param   positionSizeCoefficientB  CoefficientB in the formula positionSize * CoefficientA + CoefficientB\\n     * @param   additionalGas  Additional gas added to actual gas spent\\n     * @param   defaultMaxGasPrice  Max gas price allowed during reward calculation (used when no oracle price found)\\n     * @param   oracleGasPriceTolerance  Percentage by which oracle gas price can be exceeded (in WAD)\\n     * @param   paymentModel  The model of payment for gas in the network\\n     * @param   maxGasPerPositionParams  Parameters for the setMaxGasPerPosition function\\n     * @param   decreasingGasByReasonParams  Parameters for the setDecreasingGasByReason function\\n     */\\n    struct InitParams {\\n        address priceOracle;\\n        address registry;\\n        address pmx;\\n        address treasury;\\n        address whiteBlackList;\\n        uint256 pmxPartInReward;\\n        uint256 nativePartInReward;\\n        uint256 positionSizeCoefficientA;\\n        int256 positionSizeCoefficientB;\\n        uint256 additionalGas;\\n        uint256 defaultMaxGasPrice;\\n        uint256 oracleGasPriceTolerance;\\n        PaymentModel paymentModel;\\n        MaxGasPerPositionParams[] maxGasPerPositionParams;\\n        DecreasingGasByReasonParams[] decreasingGasByReasonParams;\\n    }\\n\\n    event ClaimFees(address indexed keeper, address indexed asset, uint256 amount);\\n    event DefaultMaxGasPriceChanged(uint256 indexed defaultMaxGasPrice);\\n    event OracleGasPriceToleranceChanged(uint256 indexed oracleGasPriceTolerance);\\n    event MaxGasPerPositionChanged(KeeperActionType indexed actionType, KeeperActionRewardConfig config);\\n    event DataLengthRestrictionsChanged(KeeperCallingMethod callingMethod, uint256 maxRoutesLength, uint256 baseLength);\\n    event DecreasingGasByReasonChanged(DecreasingReason indexed reason, uint256 amount);\\n    event PmxPartInRewardChanged(uint256 indexed pmxPartInReward);\\n    event NativePartInRewardChanged(uint256 indexed nativePartInReward);\\n    event PositionSizeCoefficientsChanged(\\n        uint256 indexed positionSizeCoefficientA,\\n        int256 indexed positionSizeCoefficientB\\n    );\\n    event AdditionalGasChanged(uint256 indexed additionalGas);\\n    event KeeperRewardUpdated(address indexed keeper, uint256 rewardInPmx, uint256 rewardInNativeCurrency);\\n\\n    /**\\n     * @notice Initializes the KeeperRewardDistributor contract.\\n     * @param _params  Parameters for initialization\\n     */\\n    function initialize(InitParams calldata _params) external;\\n\\n    /**\\n     * @dev Params for the updateReward function\\n     * @param keeper  Address of the keeper\\n     * @param positionAsset  Address of the position asset\\n     * @param positionSize  Size of the position\\n     * @param action  The action that was performed by the keeper\\n     * @param numberOfActions  Number of actions performed by the keeper\\n     * @param gasSpent Gas spent on executing transaction\\n     * @param decreasingCounter An array where each index contains the number of decreasing reasons according to the DecreasingReason enum\\n     * @param routesLength  The length of routes provided as input to the protocol function,\\n     * subject to an additional commission in the ARBITRUM payment model.\\n     */\\n\\n    struct UpdateRewardParams {\\n        address keeper;\\n        address positionAsset;\\n        uint256 positionSize;\\n        KeeperActionType action;\\n        uint256 numberOfActions;\\n        uint256 gasSpent;\\n        uint256[] decreasingCounter;\\n        uint256 routesLength;\\n    }\\n\\n    /**\\n     * @notice Updates reward for keeper for closing position or executing order\\n     * @dev Only callable by the PM_ROLE, LOM_ROLE, BATCH_MANAGER_ROLE roles.\\n     * @param _params The UpdateRewardParams params\\n     */\\n    function updateReward(UpdateRewardParams calldata _params) external;\\n\\n    /**\\n     * @notice Claims earned reward of the keeper\\n     * @param _pmxAmount  Amount of PMX token to claim\\n     * @param _nativeAmount  Amount of native token to claim\\n     */\\n    function claim(uint256 _pmxAmount, uint256 _nativeAmount) external;\\n\\n    /**\\n     * @notice Sets the default maximum gas price allowed.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _defaultMaxGasPrice The new default maximum gas price value.\\n     */\\n    function setDefaultMaxGasPrice(uint256 _defaultMaxGasPrice) external;\\n\\n    /**\\n     * @notice Sets the amount of gas to be removed for the specified reason\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _reason The reason for which an amount is set\\n     * @param _amount Gas amount.\\n     */\\n    function setDecreasingGasByReason(DecreasingReason _reason, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the KeeperActionRewardConfig for the specified action type\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _actionType The action type for which the config is set\\n     * @param _config The KeeperActionRewardConfig struct\\n     */\\n\\n    function setMaxGasPerPosition(KeeperActionType _actionType, KeeperActionRewardConfig calldata _config) external;\\n\\n    /**\\n     * @notice Sets the dataLengthRestrictions for the specified KeeperCallingMethod.\\n     * @param _callingMethod The calling method for which dataLengthRestrictions is set\\n     * @param _maxRoutesLength The maximum routes length for which an additional fee will be paid in the ARBITRUM payment model, in bytes\\n     * @param _baseLength The length of the data entering the protocol function including method signature\\n     * and excluding dynamic types(e.g, routesLength), in bytes\\n     */\\n    function setDataLengthRestrictions(\\n        KeeperCallingMethod _callingMethod,\\n        uint256 _maxRoutesLength,\\n        uint256 _baseLength\\n    ) external;\\n\\n    /**\\n     * @notice Sets the tolerance for gas price fluctuations from the oracle price.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _oracleGasPriceTolerance The new oracle gas price tolerance value (percent expressed as WAD).\\n     */\\n    function setOracleGasPriceTolerance(uint256 _oracleGasPriceTolerance) external;\\n\\n    /**\\n     * @notice Sets the PMX token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _pmxPartInReward The new PMX token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setPmxPartInReward(uint256 _pmxPartInReward) external;\\n\\n    /**\\n     * @notice Sets the native token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _nativePartInReward The new native token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setNativePartInReward(uint256 _nativePartInReward) external;\\n\\n    /**\\n     * @notice Sets the position size coefficients for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _positionSizeCoefficientA The new positionSizeCoefficientA value (in WAD).\\n     * @param _positionSizeCoefficientB The new positionSizeCoefficientB value (in WAD).\\n     */\\n    function setPositionSizeCoefficients(uint256 _positionSizeCoefficientA, int256 _positionSizeCoefficientB) external;\\n\\n    /**\\n     * @notice Sets the additional gas value for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _additionalGas The new additionalGas value.\\n     */\\n    function setAdditionalGas(uint256 _additionalGas) external;\\n}\\n\",\"keccak256\":\"0xbcf9e1242db4c820b5e2551fe85ae76e8e20e3a1ea158bd4a1da356999975349\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IKeeperRewardDistributorStorage {\\n    enum DecreasingReason {\\n        NonExistentIdForLiquidation,\\n        NonExistentIdForSLOrTP,\\n        IncorrectConditionForLiquidation,\\n        IncorrectConditionForSL,\\n        ClosePostionInTheSameBlock\\n    }\\n\\n    enum KeeperActionType {\\n        OpenByOrder,\\n        StopLoss,\\n        TakeProfit,\\n        Liquidation,\\n        BucketDelisted\\n    }\\n\\n    enum KeeperCallingMethod {\\n        ClosePositionByCondition,\\n        OpenPositionByOrder,\\n        CloseBatchPositions\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of keeper rewards in the ARBITRUM payment model\\n     * @param maxRoutesLength The maximum length of routes for which will be paid keeper rewards, depending on KeeperCallingMethod\\n     * @param baseLength The static length of the data entering the protocol function, depending on KeeperCallingMethod\\n     */\\n    struct DataLengthRestrictions {\\n        uint256 maxRoutesLength;\\n        uint256 baseLength;\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of maximum gas per position\\n     * @param baseMaxGas1 Base gas amount that used to calculate max gas amount\\n     * @param baseMaxGas2 Base gas amount that used to calculate max gas amount when number of keeper actions > inflectionPoint\\n     * @param multiplier2 The multiplier which is multiplied by the number of keeper actions when number of keeper actions > inflectionPoint\\n     * @param inflectionPoint Number of actions after which the multiplier2 takes effect\\n     */\\n    struct KeeperActionRewardConfig {\\n        uint256 baseMaxGas1;\\n        uint256 baseMaxGas2;\\n        uint256 multiplier1;\\n        uint256 multiplier2;\\n        uint256 inflectionPoint;\\n    }\\n\\n    struct KeeperBalance {\\n        uint256 pmxBalance;\\n        uint256 nativeBalance;\\n    }\\n    enum PaymentModel {\\n        DEFAULT,\\n        ARBITRUM\\n    }\\n\\n    function priceOracle() external view returns (address);\\n\\n    function registry() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address payable);\\n\\n    function pmxPartInReward() external view returns (uint256);\\n\\n    function nativePartInReward() external view returns (uint256);\\n\\n    function positionSizeCoefficientA() external view returns (uint256);\\n\\n    function positionSizeCoefficientB() external view returns (int256);\\n\\n    function additionalGas() external view returns (uint256);\\n\\n    function defaultMaxGasPrice() external view returns (uint256);\\n\\n    function oracleGasPriceTolerance() external view returns (uint256);\\n\\n    function paymentModel() external view returns (PaymentModel);\\n\\n    function keeperBalance(address) external view returns (uint256, uint256);\\n\\n    function maxGasPerPosition(KeeperActionType) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function dataLengthRestrictions(KeeperCallingMethod) external view returns (uint256, uint256);\\n\\n    function decreasingGasByReason(DecreasingReason) external view returns (uint256);\\n\\n    function totalBalance() external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x16e68d1044f47523bac66714a6659f1b2c6a3196b6e8a8b2e91643dc9abdfaf0\",\"license\":\"BUSL-1.1\"},\"contracts/LimitOrderManager/ILimitOrderManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {ILimitOrderManagerStorage} from \\\"./ILimitOrderManagerStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ILimitOrderManager is ILimitOrderManagerStorage, IPausable {\\n    enum LimitOrderType {\\n        Margin,\\n        Spot,\\n        Swap\\n    }\\n\\n    struct UpdateOrderConditionsParams {\\n        uint256 orderId;\\n        LimitOrderLibrary.Condition[] openConditions;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n    }\\n\\n    event CreateLimitOrder(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        LimitOrderLibrary.LimitOrder order,\\n        LimitOrderLibrary.Condition[] openConditions,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event CloseLimitOrder(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        address indexed closedBy,\\n        LimitOrderLibrary.CloseReason reason,\\n        uint256 positionId,\\n        // TODO: can delete args below when front be ready for it\\n        string bucket,\\n        address borrowedAsset,\\n        address positionAsset,\\n        uint256 leverage,\\n        address depositAsset,\\n        uint256 depositAmount\\n    );\\n\\n    event UpdateOrder(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        uint256 depositAmount,\\n        uint256 leverage,\\n        address feeToken,\\n        uint256 protocolFee\\n    );\\n\\n    event UpdateOrderConditions(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] openConditions,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    /**\\n     * @notice Initializes the LimitOrderManager contract.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _pm The address of the PositionManager contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _swapManager The address of the SwapManager contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address _pm,\\n        address payable _traderBalanceVault,\\n        address _swapManager,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Creates a limit order.\\n     * @dev This function allows users to create a limit order and locks the deposit asset in the traderBalanceVault\\n     * @param _params The parameters necessary to create limit order\\n     */\\n    function createLimitOrder(LimitOrderLibrary.CreateLimitOrderParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Cancels the order. Can only be called by the trader\\n     * @param _orderId order id\\n     */\\n    function cancelLimitOrder(uint256 _orderId) external;\\n\\n    /**\\n     * @notice Removes expired limit orders\\n     * @param _orderIds The array of order IDs to remove.\\n     */\\n    function cancelExpiredLimitOrders(uint256[] calldata _orderIds) external;\\n\\n    /**\\n     * @notice Opens a position by an existing order.\\n     * @dev This function is called to open a position based on the given order parameters.\\n     * @param _params The OpenPositionParams struct containing the necessary parameters for opening the position.\\n     */\\n    function openPositionByOrder(LimitOrderLibrary.OpenPositionParams calldata _params) external;\\n\\n    /**\\n     * @notice Updates an existing limit order.\\n     * @dev Edits prices on an existing order\\n     * @param _params The parameters for updating the limit order.\\n     */\\n    function updateOrder(LimitOrderLibrary.UpdateLimitOrderParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Updates the open and close conditions of an order.\\n     * @dev Only the trader of the order can update the conditions.\\n     * @param _params The parameters for updating the order conditions.\\n     */\\n    function updateOrderConditions(UpdateOrderConditionsParams memory _params) external;\\n\\n    /**\\n     * @notice Returns true if current price >= limit price and block.timestamp <= deadline\\n     * @param _orderId order id\\n     * @param _conditionIndex index of condition in openConditions\\n     * @param _additionalParams parameters needed for dex\\n     */\\n    function canBeFilled(\\n        uint256 _orderId,\\n        uint256 _conditionIndex,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Function to set new swapManager.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _swapManager Address of the new swapManager.\\n     */\\n    function setSwapManager(address _swapManager) external;\\n\\n    /**\\n     * @notice Retrieves the details of a limit order based on its ID.\\n     * @param _id The ID of the limit order to retrieve.\\n     * @return The LimitOrder struct representing the limit order.\\n     */\\n    function getOrder(uint256 _id) external view returns (LimitOrderLibrary.LimitOrder memory);\\n\\n    /**\\n     * @notice Retrieves the limit order at the specified index.\\n     * @param _index The index of the limit order to retrieve.\\n     * @return The limit order at the specified index.\\n     */\\n    function getOrderByIndex(uint256 _index) external view returns (LimitOrderLibrary.LimitOrder memory);\\n\\n    /**\\n     * @notice Retrieves the close conditions associated with the given order ID.\\n     * @param _orderId The ID of the order.\\n     * @return An array of Condition representing the close conditions.\\n     */\\n    function getCloseConditions(uint256 _orderId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the open conditions associated with a given order ID.\\n     * @param _orderId The ID of the order.\\n     * @return An array of Condition structs representing the open conditions.\\n     */\\n    function getOpenConditions(uint256 _orderId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Returns the length of the orders array.\\n     * @return The number of orders in the array.\\n     */\\n    function getOrdersLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the order array for a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The length of the order array.\\n     */\\n    function getTraderOrdersLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns an array of LimitOrder structures representing the orders placed by a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return traderOrders An array of LimitOrder structures representing the orders placed by the trader.\\n     */\\n    function getTraderOrders(address _trader) external view returns (LimitOrderLibrary.LimitOrder[] memory);\\n\\n    /**\\n     * @notice Returns the length of orders in a bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of orders in the bucket.\\n     */\\n    function getBucketOrdersLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves all limit orders associated with a given bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return An array of LimitOrder structs representing the bucket's orders.\\n     */\\n    function getBucketOrders(address _bucket) external view returns (LimitOrderLibrary.LimitOrder[] memory);\\n}\\n\",\"keccak256\":\"0x952988568f4ae44d93a14f7b2b1ca9ddacfb8a6f0f0a8009c944ade73cb61c1e\",\"license\":\"BUSL-1.1\"},\"contracts/LimitOrderManager/ILimitOrderManagerStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ISwapManager} from \\\"../interfaces/ISwapManager.sol\\\";\\n\\ninterface ILimitOrderManagerStorage {\\n    function ordersId() external view returns (uint256);\\n\\n    function orderIndexes(uint256) external view returns (uint256);\\n\\n    function traderOrderIndexes(uint256) external view returns (uint256);\\n\\n    function traderOrderIds(address _trader, uint256 _index) external view returns (uint256);\\n\\n    function bucketOrderIndexes(uint256) external view returns (uint256);\\n\\n    function bucketOrderIds(address _bucket, uint256 _index) external view returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    function pm() external view returns (IPositionManager);\\n\\n    function swapManager() external view returns (ISwapManager);\\n}\\n\",\"keccak256\":\"0x52942ab60b5680933fac6a481a1d44bc6a4d013531c247ddd1439d90d8a98934\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {ILiquidityMiningRewardDistributorStorage} from \\\"./ILiquidityMiningRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributor is ILiquidityMiningRewardDistributorStorage, IPausable {\\n    struct RewardsInPMX {\\n        uint256 minReward;\\n        uint256 maxReward;\\n        uint256 extraReward;\\n    }\\n\\n    /**\\n     * @notice Emitted when a reward is claimed by a receiver from a specific bucket.\\n     * @param receiver The address of the receiver.\\n     * @param bucket The address of the bucket from which the reward is claimed.\\n     * @param amount The amount of the claimed reward.\\n     */\\n    event ClaimedReward(address indexed receiver, address indexed bucket, uint256 amount);\\n    /**\\n     * @notice Emitted when PMX tokens are withdrawn by an admin.\\n     * @param amount The amount of PMX tokens withdrawn.\\n     */\\n    event WithdrawPmxByAdmin(uint256 indexed amount);\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _primexDNS The address of the IPrimexDNS contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _registry The address of the registry contract.\\n     * @param _treasury The address of the treasury contract.\\n     * @param _reinvestmentRate The rate at which rewards are reinvested.\\n     * @param _reinvestmentDuration The duration for which rewards are reinvested.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IPrimexDNS _primexDNS,\\n        IERC20 _pmx,\\n        ITraderBalanceVault _traderBalanceVault,\\n        address _registry,\\n        address _treasury,\\n        uint256 _reinvestmentRate,\\n        uint256 _reinvestmentDuration,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Updates the reward amount for a specific bucket.\\n     * @dev Only callable by the PrimexDNS contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _pmxRewardsAmount The amount of PMX rewards to be allocated to the bucket.\\n     */\\n    function updateBucketReward(string memory _bucketName, uint256 _pmxRewardsAmount) external;\\n\\n    /**\\n     * @notice Adds points for a user for future reward distribution.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _miningAmount The amount of mining points to be added.\\n     * @param _maxStabilizationPeriodEnd The maximum end timestamp of the stabilization period.\\n     * @param _maxPeriodTime The maximum period time.\\n     * @param _currentTimestamp The current timestamp.\\n     */\\n    function addPoints(\\n        string memory _bucketName,\\n        address _user,\\n        uint256 _miningAmount,\\n        uint256 _maxStabilizationPeriodEnd,\\n        uint256 _maxPeriodTime,\\n        uint256 _currentTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes points for a user.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _name The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _amount The amount of mining points to be removed.\\n     */\\n    function removePoints(string memory _name, address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Claims the accumulated rewards for a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     */\\n    function claimReward(string memory _bucketName) external;\\n\\n    /**\\n     * @notice Moves rewards from one bucket to another.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketFrom The name of the source bucket.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _user The address of the user.\\n     * @param _isBucketLaunched A flag indicating if the destination bucket is launched.\\n     * @param _liquidityMiningDeadline The deadline for liquidity mining\\n     */\\n    function reinvest(\\n        string memory _bucketFrom,\\n        string memory _bucketTo,\\n        address _user,\\n        bool _isBucketLaunched,\\n        uint256 _liquidityMiningDeadline\\n    ) external;\\n\\n    /**\\n     * @dev The function to withdraw PMX from a delisted bucket or a bucket where liquidity mining failed (after reinvesting period).\\n     * Emits WithdrawPmxByAdmin event.\\n     * @param _bucketFrom Name of the bucket with failed liquidity mining event.\\n     */\\n    function withdrawPmxByAdmin(string memory _bucketFrom) external;\\n\\n    /**\\n     * @notice Retrieves information about a lender in a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @param _timestamp The timestamp for which the information is queried.\\n     * @return amountInMining The amount of tokens the lender has in mining for the given bucket.\\n     * @return currentPercent The current percentage of rewards the lender is eligible to receive for the given bucket.\\n     * Measured in WAD (1 WAD = 100%).\\n     * @return rewardsInPMX An object containing information about the lender's rewards in PMX for the given bucket.\\n     */\\n    function getLenderInfo(\\n        string calldata _bucketName,\\n        address _lender,\\n        uint256 _timestamp\\n    ) external view returns (uint256 amountInMining, uint256 currentPercent, RewardsInPMX memory rewardsInPMX);\\n\\n    /**\\n     * @notice Retrieves rewards information about a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @return totalPmxReward The total amount of PMX reward in the bucket.\\n     * @return withdrawnRewards The total amount of withdrawn rewards from the bucket.\\n     * @return totalPoints The total number of mining points in the bucket.\\n     */\\n    function getBucketInfo(\\n        string calldata _bucketName\\n    ) external view returns (uint256 totalPmxReward, uint256 withdrawnRewards, uint256 totalPoints);\\n\\n    /**\\n     * @notice Retrieves the amount of tokens a lender has in mining for a specific bucket.\\n     * @param _bucket The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @return The amount of tokens the lender has in mining for the given bucket.\\n     */\\n    function getLenderAmountInMining(string calldata _bucket, address _lender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc7af5cea0bdc1399a660a5d861d17af7933cd5665e2016239bc3656f262b40d4\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributorStorage {\\n    struct LenderInfo {\\n        uint256 points;\\n        uint256 depositedAmount;\\n    }\\n\\n    struct BucketInfo {\\n        uint256 totalPoints;\\n        uint256 totalPmxReward;\\n        uint256 withdrawnRewards;\\n        mapping(address => LenderInfo) lendersInfo;\\n    }\\n\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    function pmx() external view returns (IERC20);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function registry() external view returns (address);\\n\\n    function reinvestmentRate() external view returns (uint256);\\n\\n    function reinvestmentDuration() external view returns (uint256);\\n\\n    function extraRewards(address, string calldata) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x57beb8b607e842d2c04494b6cd351101acde829388c9b2c68b7ac0c4a37bdc0d\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPToken.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IPTokenStorage, IBucket, IFeeExecutor, IERC20MetadataUpgradeable, IActivityRewardDistributor} from \\\"./IPTokenStorage.sol\\\";\\n\\ninterface IPToken is IPTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     */\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after pTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     */\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param amount The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     */\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 amount, uint256 index);\\n\\n    event LockDeposit(address indexed user, uint256 indexed id, uint256 deadline, uint256 amount);\\n    event UnlockDeposit(address indexed user, uint256 indexed id);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the InterestIncreaser for current PToken.\\n     * @param _interestIncreaser The interest increaser address.\\n     */\\n    function setInterestIncreaser(IFeeExecutor _interestIncreaser) external;\\n\\n    /**\\n     * @dev Sets the lender reward distributor contract address.\\n     * @param _lenderRewardDistributor The address of the lender reward distributor contract.\\n     */\\n    function setLenderRewardDistributor(IActivityRewardDistributor _lenderRewardDistributor) external;\\n\\n    /**\\n     * @notice Locks a deposit for a specified user.\\n     * @param _user The address of the user for whom the deposit is being locked.\\n     * @param _amount The amount to be locked as a deposit.\\n     * @param _duration The duration for which the deposit will be locked.\\n     * @dev This function can only be called externally and overrides the corresponding function in the parent contract.\\n     * @dev The user must not be blacklisted.\\n     */\\n    function lockDeposit(address _user, uint256 _amount, uint256 _duration) external;\\n\\n    /**\\n     * @dev Unlocks a specific deposit.\\n     * @param _depositId The ID of the deposit to be unlocked.\\n     */\\n    function unlockDeposit(uint256 _depositId) external;\\n\\n    /**\\n     * @dev Mints `amount` pTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     * @return Minted amount of PTokens\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Mints pTokens to the reserve address\\n     * Compared to the normal mint, we don't revert when the amountScaled is equal to the zero. Additional checks were also removed\\n     * Only callable by the Bucket\\n     * @param _reserve The address of the reserve\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     */\\n    function mintToReserve(address _reserve, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns pTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the pTokens, getting them burned\\n     * @param _amount The amount of underlying token being returned to receiver\\n     * @param _index The current liquidityIndex\\n     * @return Burned amount of PTokens\\n     */\\n    function burn(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The scaled balances of the user\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns available balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The available balance of the user\\n     */\\n    function availableBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns locked deposits and balance of user\\n     * @param _user The owner of locked deposits\\n     * @return Structure with deposits and total locked balance of user\\n     */\\n    function getUserLockedBalance(address _user) external view returns (LockedBalance memory);\\n\\n    /**\\n     * @dev Returns the scaled total supply of pToken.\\n     * @return The scaled total supply of the pToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Function to get a deposit index in user's deposit array.\\n     * @param id Deposit id.\\n     * @return index Deposit index in user's 'deposit' array.\\n     */\\n    function getDepositIndexById(uint256 id) external returns (uint256 index);\\n}\\n\",\"keccak256\":\"0x2dc39fe1abee0110b63e93b78a647bfb11e00bed853dd4008efe9847d1028b1f\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPTokenStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IPTokenStorage is IERC20MetadataUpgradeable {\\n    struct Deposit {\\n        uint256 lockedBalance;\\n        uint256 deadline;\\n        uint256 id;\\n    }\\n\\n    struct LockedBalance {\\n        uint256 totalLockedBalance;\\n        Deposit[] deposits;\\n    }\\n\\n    function bucket() external view returns (IBucket);\\n\\n    function interestIncreaser() external view returns (IFeeExecutor);\\n\\n    function lenderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0x7be5f1ceda782aa7ce44588cf3b1f16af3e48d1fda0368f3dc801e84a67e0097\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPTokensFactory.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPToken} from \\\"./IPToken.sol\\\";\\n\\ninterface IPTokensFactory {\\n    /**\\n     * @dev Deploying a new PToken contract. Can be called by BucketsFactory only.\\n     * @param _name The name of the new PToken.\\n     * @param _symbol The symbol of the new PToken.\\n     */\\n    function createPToken(string memory _name, string memory _symbol, uint8 _decimals) external returns (IPToken);\\n\\n    /**\\n     * @dev Sets the BucketsFactory address. Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param bucketsFactory The BucketsFactory address.\\n     */\\n    function setBucketsFactory(address bucketsFactory) external;\\n\\n    /**\\n     * @dev Gets a BucketsFactory contract address.\\n     */\\n    function bucketsFactory() external view returns (address);\\n\\n    /**\\n     * @dev Gets a Registry contract address.\\n     */\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5a3532b4acd016aec428cfdd7881bb84263cbab2b720ebba1ba43908ae45fe87\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\n\\nimport {IPositionManagerStorage} from \\\"./IPositionManagerStorage.sol\\\";\\nimport {IKeeperRewardDistributor} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IPositionManager is IPositionManagerStorage, IPausable {\\n    struct ClosePositionVars {\\n        PositionLibrary.Position position;\\n        bool borrowedAmountIsNotZero;\\n        uint256 oracleTolerableLimit;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    event SetMaxPositionSize(address token0, address token1, uint256 amountInToken0, uint256 amountInToken1);\\n    event SetDefaultOracleTolerableLimit(uint256 indexed oracleTolerableLimit);\\n    event SecurityBufferChanged(uint256 indexed securityBuffer);\\n    event MaintenanceBufferChanged(uint256 indexed maintenanceBuffer);\\n    event SetOracleTolerableLimit(address indexed assetA, address indexed assetB, uint256 oracleTolerableLimit);\\n    event KeeperRewardDistributorChanged(address indexed _keeperRewardDistributor);\\n    event MinPositionSizeAndAssetChanged(uint256 indexed _minPositionSize, address indexed _minPositionAsset);\\n    event OracleTolerableLimitMultiplierChanged(uint256 indexed newMultiplier);\\n\\n    event OpenPosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed openedBy,\\n        PositionLibrary.Position position,\\n        address feeToken,\\n        uint256 protocolFee,\\n        uint256 entryPrice,\\n        uint256 leverage,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event PartialClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        uint256 depositedAmount,\\n        uint256 scaledDebtAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut\\n    );\\n\\n    event IncreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event DecreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event UpdatePositionConditions(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    /**\\n     * @notice Initializes the contract with the specified addresses and initializes inherited contracts.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _keeperRewardDistributor,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Sets the maximum position size for a pair of tokens.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _token0 The address of the first token in the pair.\\n     * @param _token1 The address of the second token in the pair.\\n     * @param _amountInToken0 The maximum amount of token0 allowed in the position.\\n     * @param _amountInToken1 The maximum amount of token1 allowed in the position.\\n     */\\n    function setMaxPositionSize(\\n        address _token0,\\n        address _token1,\\n        uint256 _amountInToken0,\\n        uint256 _amountInToken1\\n    ) external;\\n\\n    /**\\n     * @notice Sets the default oracle tolerable limit for the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _percent The new value for the default oracle tolerable limit. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setDefaultOracleTolerableLimit(uint256 _percent) external;\\n\\n    /**\\n     * @notice Sets the oracle tolerable limit between two assets.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _assetA The address of the first asset.\\n     * @param _assetB The address of the second asset.\\n     * @param _percent The new value for the oracle tolerable limit between two assets. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(address _assetA, address _assetB, uint256 _percent) external;\\n\\n    /**\\n     * @notice Function to set oracleTolerableLimitMultiplier.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param newMultiplier New multiplier in WAD format.\\n     */\\n    function setOracleTolerableLimitMultiplier(uint256 newMultiplier) external;\\n\\n    /**\\n     * @notice Sets the security buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * 0 <= newSecurityBuffer < 1.\\n     * Buffer security parameter is used in calculating the liquidation conditions\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.i9v508hvrv42\\n     * @param newSecurityBuffer The new value of the security buffer in WAD format.\\n     */\\n    function setSecurityBuffer(uint256 newSecurityBuffer) external;\\n\\n    /**\\n     * @notice Sets the maintenance buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * The new maintenance buffer value should be greater than zero and less than one.\\n     * Maintenance buffer is used in calculating the maximum leverage\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.87oc1j1s9z21\\n     * @param newMaintenanceBuffer The new value of the maintenance buffer in WAD format.\\n     */\\n    function setMaintenanceBuffer(uint256 newMaintenanceBuffer) external;\\n\\n    /**\\n     * @notice Sets the address of the SpotTradingRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _spotTradingRewardDistributor The address of the SpotTradingRewardDistributor contract.\\n     */\\n    function setSpotTradingRewardDistributor(address _spotTradingRewardDistributor) external;\\n\\n    /**\\n     * @notice Sets the KeeperRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     */\\n    function setKeeperRewardDistributor(IKeeperRewardDistributor _keeperRewardDistributor) external;\\n\\n    /**\\n     * @notice Opens a position based on the provided order parameters.\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param _params The parameters for opening a position.\\n     * @return The total borrowed amount, position amount, position ID, and entry price of the new position.\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Opens margin position.\\n     * @dev Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal.\\n     * Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'.\\n     * Mints debtToken for trader (msg.sender)\\n     * @param _params The parameters required to open a position.\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Close trader's active position or liquidate risky position.\\n     * @dev Protocol will fall down (revert) if two conditions occur both:\\n     * 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1,\\n     * so position will make loss for Protocol.\\n     * 2. Not enough liquidity in bucket to pay that loss.\\n     * @param _id Position id for `msg.sender`.\\n     * @param _dealReceiver The receiver of the rest of trader's deposit.\\n     * @param _routes swap routes on dexes\\n     * @param _amountOutMin minimum allowed amount out for position\\n     */\\n    function closePosition(\\n        uint256 _id,\\n        address _dealReceiver,\\n        PrimexPricingLibrary.Route[] memory _routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Closes trader's active position by closing condition\\n     * @param _id Position id.\\n     * @param _keeper The address of the keeper or the recipient of the reward.\\n     * @param _routes An array of routes for executing trades, swap routes on dexes.\\n     * @param _conditionIndex The index of the condition to be used for closing the position.\\n     * @param _ccmAdditionalParams Additional params needed for canBeClosed() of the ConditionalClosingManager.\\n     * @param _closeReason The reason for closing the position.\\n     */\\n    function closePositionByCondition(\\n        uint256 _id,\\n        address _keeper,\\n        PrimexPricingLibrary.Route[] calldata _routes,\\n        uint256 _conditionIndex,\\n        bytes calldata _ccmAdditionalParams,\\n        PositionLibrary.CloseReason _closeReason\\n    ) external;\\n\\n    /**\\n     * @notice Allows the trader to partially close a position.\\n     * @param _positionId The ID of the position to be partially closed.\\n     * @param _amount The amount of the position asset to be closed from the position.\\n     * @param _depositReceiver The address where the remaining deposit will be sent.\\n     * @param _routes The routing information for swapping assets.\\n     * @param _amountOutMin The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.Route[] calldata _routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Updates the position with the given position ID by setting new close conditions.\\n     * @param _positionId The ID of the position to update.\\n     * @param _closeConditions An array of close conditions for the position.\\n     * @dev The caller of this function must be the trader who owns the position.\\n     * @dev Emits an `UpdatePositionConditions` event upon successful update.\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external;\\n\\n    /**\\n     * @notice Increases the deposit amount for a given position.\\n     * @param _positionId The ID of the position to increase the deposit for.\\n     * @param _amount The amount to increase the deposit by.\\n     * @param _asset The address of the asset to deposit.\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit immediately.\\n     * @param _routes An array of routes to use for trading.\\n     * @param _amountOutMin The minimum amount of the output asset to receive from trading.\\n     */\\n    function increaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _asset,\\n        bool _takeDepositFromWallet,\\n        PrimexPricingLibrary.Route[] calldata _routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Decreases the deposit amount for a given position.\\n     * @param _positionId The ID of the position.\\n     * @param _amount The amount to decrease the deposit by.\\n     */\\n    function decreaseDeposit(uint256 _positionId, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the minimum position size and the corresponding asset for positions.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _minPositionSize The new minimum position size.\\n     * @param _minPositionAsset The address of the asset associated with the minimum position size.\\n     */\\n    function setMinPositionSize(uint256 _minPositionSize, address _minPositionAsset) external;\\n\\n    /**\\n     * @notice Checks if a position can be closed based on a specific condition.\\n     * @param _positionId The ID of the position.\\n     * @param _conditionIndex The index of the condition within the position's close conditions.\\n     * @param _additionalParams Additional parameters required for the condition check.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosed(\\n        uint256 _positionId,\\n        uint256 _conditionIndex,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Deletes a positions by their IDs from a specific bucket for a given traders.\\n     * @param _ids The IDs of the positions to be deleted.\\n     * @param _traders The addresses of the traders who owns the position.\\n     * @param _length The length of the traders array.\\n     * @param _bucket The address of the bucket from which the position is to be deleted.\\n     */\\n    function deletePositions(\\n        uint256[] calldata _ids,\\n        address[] calldata _traders,\\n        uint256 _length,\\n        address _bucket\\n    ) external;\\n\\n    /**\\n     * @notice Transfers a specified amount of tokens from the contract to a specified address.\\n     * @dev Only callable by the BATCH_MANAGER_ROLE role.\\n     * @param _token The address of the token to be transferred.\\n     * @param _to The address to which the tokens will be transferred.\\n     * @param _amount The amount of tokens to be transferred.\\n     */\\n    function doTransferOut(address _token, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Returns the oracle tolerable limit for the given asset pair.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the position information for a given ID.\\n     * @param _id The ID of the position to retrieve.\\n     * @return position The position information associated with the given ID.\\n     */\\n    function getPosition(uint256 _id) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Retrieves the position at the specified index.\\n     * @param _index The index of the position to retrieve.\\n     * @return The Position struct at the specified index.\\n     */\\n    function getPositionByIndex(uint256 _index) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Returns the length of the positions array.\\n     * @return The length of the positions array.\\n     */\\n    function getAllPositionsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The number of positions the trader has.\\n     */\\n    function getTraderPositionsLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of positions the bucket has.\\n     */\\n    function getBucketPositionsLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt of a position with the given ID.\\n     * @param _id The ID of the position.\\n     * @return The debt of the position, measured in the same decimal format as debtTokens.\\n     */\\n    function getPositionDebt(uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the close conditions for a specific position.\\n     * @param _positionId The ID of the position.\\n     * @return An array of close conditions associated with the position.\\n     */\\n    function getCloseConditions(uint256 _positionId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the close condition for a given position and index.\\n     * @param _positionId The identifier of the position.\\n     * @param _index The index of the close condition.\\n     * @return The close condition at the specified position and index.\\n     */\\n    function getCloseCondition(\\n        uint256 _positionId,\\n        uint256 _index\\n    ) external view returns (LimitOrderLibrary.Condition memory);\\n\\n    /**\\n     * @notice \\u0421hecks if the position is risky.\\n     * @param _id the id of the position\\n     * @return (1) True if position is risky\\n     */\\n    function isPositionRisky(uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if a position with the given ID is delisted.\\n     * @param _id The ID of the position.\\n     * @return A boolean indicating whether the position is delisted or not.\\n     */\\n    function isDelistedPosition(uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the health value of a position.\\n     * @param _id The ID of the position.\\n     * @return The health value of the position in WAD format.\\n     */\\n    function healthPosition(uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x980be3b8ebfcd45983fa826a4875e9d5762bed30c3f067d6839c76b0f19c78a1\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManagerStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IKeeperRewardDistributor} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {ISpotTradingRewardDistributor} from \\\"../SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\\\";\\n\\ninterface IPositionManagerStorage {\\n    function maxPositionSize(address, address) external returns (uint256);\\n\\n    function defaultOracleTolerableLimit() external returns (uint256);\\n\\n    function securityBuffer() external view returns (uint256);\\n\\n    function maintenanceBuffer() external view returns (uint256);\\n\\n    function positionsId() external view returns (uint256);\\n\\n    function traderPositionIds(address _trader, uint256 _index) external view returns (uint256);\\n\\n    function bucketPositionIds(address _bucket, uint256 _index) external view returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    function priceOracle() external view returns (IPriceOracle);\\n\\n    function keeperRewardDistributor() external view returns (IKeeperRewardDistributor);\\n\\n    function spotTradingRewardDistributor() external view returns (ISpotTradingRewardDistributor);\\n\\n    function minPositionSize() external view returns (uint256);\\n\\n    function minPositionAsset() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7527f93ae59e40d28aeffed2a17eda5cef1d5caf8cc2c3efcd7ae6388e776f42\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracle.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPriceOracleStorage} from \\\"./IPriceOracleStorage.sol\\\";\\n\\ninterface IPriceOracle is IPriceOracleStorage {\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     */\\n    function initialize(address _registry, address _eth) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Add or update price feed for assets pair. For only the admin role.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @param priceFeed The chain link price feed address for the pair assetA/assetB\\n     */\\n    function updatePriceFeed(address assetA, address assetB, address priceFeed) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Requests two priceFeeds - assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * @dev If there is no price feed found, the code will return a message that no price feed found.\\n     * @param baseAsset The first currency within the currency pair quotation (the base currency).\\n     * @param quoteAsset The second currency within the currency pair quotation (the quote currency).\\n     * @return A tuple of basePriceFeed and quotePriceFeed. The addresses of the price feed for the base asset and quote asset respectively.\\n     */\\n    function getPriceFeedsPair(address baseAsset, address quoteAsset) external view returns (address, address);\\n\\n    /**\\n     * @notice Requests priceFeed for the actual exchange rate for an assetA/assetB pair.\\n     * @dev If no price feed for the pair found, USD and ETH are used as intermediate tokens.\\n     * A price for assetA/assetB can be derived if two data feeds exist:\\n     * assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * If there is no price feed found, the code will return a message that no price feed found.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality which will be recalucaled in PrimexPricingLibrary.\\n     * @return direction of a pair as it stored in chainLinkPriceFeeds (i.e. returns 'true' for assetA/assetB, and 'false' for assetB/assetA).\\n     * Throws if priceFeed wasn't found or priceFeed hasn't answer is 0.\\n     */\\n    function getExchangeRate(address assetA, address assetB) external view returns (uint256, bool);\\n\\n    /**\\n     * @notice Retrieves the direct price feed for the given asset pair.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return priceFeed The address of the direct price feed.\\n     */\\n    function getDirectPriceFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfbf719814c5ec263c449b7bc715594323e892de4b1bf463fe27dd1f6883e52c2\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracleStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IPriceOracleStorage {\\n    function registry() external view returns (address);\\n\\n    function eth() external view returns (address);\\n\\n    function gasPriceFeed() external view returns (address);\\n\\n    function pairPriceDrops(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9231195e9d884dc5fa4b2d772a2a6d6cdd62b9bf321899102983e88e62af8dc\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNS.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPrimexDNSStorage, IPrimexDNSStorageV2} from \\\"./IPrimexDNSStorage.sol\\\";\\n\\ninterface IPrimexDNS is IPrimexDNSStorage {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ChangeFeeRate(OrderType orderType, address token, uint256 rate);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    /**\\n     * @param orderType The order type for which the rate is set\\n     * @param feeToken The token address for which the rate is set\\n     * @param rate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        OrderType orderType;\\n        address feeToken;\\n        uint256 rate;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _treasury The address of the Treasury contract.\\n     * @param _delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param _adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param _feeRateParams Initial fee params\\n     */\\n    function initialize(\\n        address _registry,\\n        address _pmx,\\n        address _treasury,\\n        uint256 _delistingDelay,\\n        uint256 _adminWithdrawalDelay,\\n        FeeRateParams[] calldata _feeRateParams\\n    ) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the protocol rate in PMX.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setFeeRate(FeeRateParams calldata _feeRateParams) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * 3 => TrailingStopCCM\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n}\\n\\ninterface IPrimexDNSV2 is IPrimexDNS, IPrimexDNSStorageV2 {\\n    event ChangeFeeRestrictions(OrderType indexed orderType, FeeRestrictions feeRestrictions);\\n\\n    /**\\n     * @notice Set the protocol fee restriction for one type of order.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setFeeRestrictions(OrderType _orderType, FeeRestrictions calldata _feeRestrictions) external;\\n}\\n\",\"keccak256\":\"0x2d3ab17ad1ba1e1f205695e6f49b6cd91d7e1821762837b8fea1d91c6722ecff\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNSStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IPrimexDNSStorage {\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Deprecated\\n    }\\n\\n    enum OrderType {\\n        MARKET_ORDER,\\n        LIMIT_ORDER,\\n        SWAP_MARKET_ORDER,\\n        SWAP_LIMIT_ORDER\\n    }\\n\\n    struct BucketData {\\n        address bucketAddress;\\n        Status currentStatus;\\n        uint256 delistingDeadline;\\n        // The deadline is for the admin to call Bucket.withdrawAfterDelisting().\\n        uint256 adminDeadline;\\n    }\\n    struct DexData {\\n        address routerAddress;\\n        bool isActive;\\n    }\\n\\n    struct AdapterData {\\n        string[] dexes;\\n        bool isAdded;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function delistingDelay() external view returns (uint256);\\n\\n    function adminWithdrawalDelay() external view returns (uint256);\\n\\n    function buckets(string memory) external view returns (address, Status, uint256, uint256);\\n\\n    function dexes(string memory) external view returns (address, bool);\\n\\n    function cmTypeToAddress(uint256 cmType) external view returns (address);\\n\\n    function dexAdapter() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function aavePool() external view returns (address);\\n\\n    function feeRates(OrderType _orderType, address _token) external view returns (uint256);\\n}\\n\\ninterface IPrimexDNSStorageV2 is IPrimexDNSStorage {\\n    struct FeeRestrictions {\\n        uint256 minProtocolFee;\\n        uint256 maxProtocolFee;\\n    }\\n\\n    function feeRestrictions(\\n        OrderType _orderType\\n    ) external view returns (uint256 minProtocolFee, uint256 maxProtocolFee);\\n}\\n\",\"keccak256\":\"0x4fc48b90b62725d15a9208bdd65e19730512bfb71dc6b5fddda3df188a3ede68\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserve.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserveStorage} from \\\"./IReserveStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IReserve is IReserveStorage, IPausable {\\n    event BurnAmountCalculated(uint256 burnAmount);\\n    event TransferRestrictionsChanged(address indexed pToken, TransferRestrictions newTransferRestrictions);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param dns The address of PrimexDNS contract\\n     * @param registry The address of Registry contract\\n     */\\n    function initialize(IPrimexDNS dns, address registry) external;\\n\\n    /**\\n     * @dev Burns the permanent loss amount (presented in pTokens) from the Reserve for a particular bucket\\n     * @param bucket The address of a bucket\\n     * Emits BurnAmountCalculated(burnAmount) event\\n     */\\n    function paybackPermanentLoss(IBucket bucket) external;\\n\\n    /**\\n     * @dev Transfers some bonus in pTokens to receiver from Reserve\\n     * Can be called by executor only\\n     * @param _bucketName The bucket where the msg.sender should be a fee decreaser (for debtToken) or\\n     * interest increaser (for pToken)\\n     * @param _to The receiver of bonus pTokens\\n     * @param _amount The amount of bonus pTokens to transfer\\n     */\\n    function payBonus(string memory _bucketName, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @dev Function to transfer tokens to the Treasury. Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param bucket The bucket from which to transfer pTokens\\n     * @param amount The amount of pTokens to transfer\\n     */\\n    function transferToTreasury(address bucket, uint256 amount) external;\\n\\n    /**\\n     * @dev Function to set transfer restrictions for a token.\\n     * @notice Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param pToken pToken to set restrictions for\\n     * @param transferRestrictions Min amount to be left in the Reserve\\n     */\\n    function setTransferRestrictions(address pToken, TransferRestrictions calldata transferRestrictions) external;\\n}\\n\",\"keccak256\":\"0x2c2145f1905eca14e254a417095b4999ec8b15a6686446871a9442bc8fd0a44f\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserveStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IReserveStorage {\\n    struct TransferRestrictions {\\n        uint256 minAmountToBeLeft;\\n        uint256 minPercentOfTotalSupplyToBeLeft;\\n    }\\n\\n    event TransferFromReserve(address pToken, address to, uint256 amount);\\n\\n    function transferRestrictions(address pToken) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x427d460adc8ddd1c2b4692baaec00af9b39742647d3bb1ab15b6be456c17289f\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ISpotTradingRewardDistributorStorage} from \\\"./ISpotTradingRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISpotTradingRewardDistributor is ISpotTradingRewardDistributorStorage, IPausable {\\n    event SpotTradingClaimReward(address indexed trader, uint256 amount);\\n    event RewardPerPeriodDecreased(uint256 indexed rewardPerPeriod);\\n    event TopUpUndistributedPmxBalance(uint256 indexed amount);\\n    event RewardPerPeriodChanged(uint256 indexed rewardPerPeriod);\\n    event PmxWithdrawn(uint256 indexed amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param registry The address of Registry contract\\n     * @param periodDuration The duration of a reward period\\n     * @param priceOracle The address of PriceOracle contract\\n     * @param pmx The address of PMX token\\n     * @param traderBalanceVault The address of TraderBalanceVault contract\\n     * @param treasury The address of Treasury contract\\n     */\\n    function initialize(\\n        address registry,\\n        uint256 periodDuration,\\n        address priceOracle,\\n        address pmx,\\n        address payable traderBalanceVault,\\n        address treasury\\n    ) external;\\n\\n    /**\\n     * @dev Function to update spot trader activity. Only PM_ROLE can call it.\\n     * @param trader Address of a trader\\n     * @param positionAsset Address of a position asset\\n     * @param positionAmount Amount of a position asset\\n     */\\n    function updateTraderActivity(address trader, address positionAsset, uint256 positionAmount) external;\\n\\n    /**\\n     * @dev Function to claim reward for spot trading activity.\\n     * Transfer rewards on the balance in traderBalanceVault\\n     * Emits SpotTradingClaimReward(address trader, uint256 amount)\\n     */\\n    function claimReward() external;\\n\\n    /**\\n     * @dev Function to set new reward per period. Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param rewardPerPeriod New value for reward per period\\n     */\\n    function setRewardPerPeriod(uint256 rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to decrease reward per period. Only EMERGENCY_ADMIN can call it.\\n     * @param _rewardPerPeriod New value for reward per period, must be less than the current value\\n     */\\n    function decreaseRewardPerPeriod(uint256 _rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to topUp the contract PMX balance\\n     * @param amount PMX amount to add to the contract balance\\n     */\\n    function topUpUndistributedPmxBalance(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to withdraw PMX from the contract to treasury\\n     * @param amount Amount of PMX to withdraw from the contract\\n     */\\n    function withdrawPmx(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to get SpotTraderActivity\\n     * @param periodNumber Period number\\n     * @param traderAddress Address of a trader\\n     * @return A struct with activity and hasClaimed members\\n     */\\n    function getSpotTraderActivity(uint256 periodNumber, address traderAddress) external view returns (uint256);\\n\\n    /**\\n     * @dev Get information for the period corresponding to the given timestamp\\n     * @param timestamp The timestamp to get information about\\n     * @return totalReward Total reward for the corresponding period\\n     * @return totalActivity Total activity for the corresponding period\\n     */\\n    function getPeriodInfo(uint256 timestamp) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Function to get an array of period numbers when trader had any activity\\n     * @param trader Address of a trader\\n     * @return An array of period numbers with trader activity\\n     */\\n    function getPeriodsWithTraderActivity(address trader) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Function to calculate trader's reward for her activities during periods\\n     * @param trader Address of a trader\\n     * @return reward Amount of reward\\n     * @return currentPeriod The current period\\n     */\\n    function calculateReward(address trader) external view returns (uint256 reward, uint256 currentPeriod);\\n}\\n\",\"keccak256\":\"0xbc25e92e6decf4beb8369378f389ed513371d8ff2deb61d0561699a6f5c39633\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ISpotTradingRewardDistributorStorage {\\n    struct PeriodInfo {\\n        uint256 totalReward;\\n        // map trader address to her activity\\n        mapping(address => uint256) traderActivity;\\n        uint256 totalActivity;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function dns() external view returns (address);\\n\\n    function periodDuration() external view returns (uint256);\\n\\n    function initialPeriodTimestamp() external view returns (uint256);\\n\\n    function rewardPerPeriod() external view returns (uint256);\\n\\n    function pmx() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function traderBalanceVault() external view returns (address payable);\\n\\n    function undistributedPMX() external view returns (uint256);\\n\\n    function periods(uint256 periodNumber) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x23c8112548009d3d70825d16e9850ebacf0fc4f015aa6ab8649bfeec7bf72ea5\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVault.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITraderBalanceVaultStorage} from \\\"./ITraderBalanceVaultStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITraderBalanceVault is ITraderBalanceVaultStorage, IPausable {\\n    /**\\n     * Types of way to open a position or order\\n     */\\n    enum OpenType {\\n        OPEN_BY_ORDER,\\n        OPEN,\\n        CREATE_LIMIT_ORDER\\n    }\\n\\n    /**\\n     * @param trader The trader, who opens margin deal\\n     * @param depositReceiver the address to which the deposit is transferred when blocked.\\n     * This happens because the trader's deposit is involved in the position\\n     * @param borrowedAsset The token to lock for deal in a borrowed asset\\n     * @param depositAsset The token is a deposit asset\\n     * (it is blocked when creating a limit order\\n     * For others, the operations is transferred to the account of the receiver of the deposit and is swapped )\\n     * @param depositAmount Amount of tokens in a deposit asset\\n     * @param depositInBorrowedAmount Amount of tokens to lock for deal in a borrowed asset\\n     * @param openType Corresponds to the purpose of locking\\n     */\\n    struct LockAssetParams {\\n        address trader;\\n        address depositReceiver;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        OpenType openType;\\n    }\\n\\n    /**\\n     * @param trader The trader who opened the position\\n     * @param receiver The receiver of the rest of trader deposit.\\n     * @param asset Borrowed asset of the position being closed (the need for accrual of profit).\\n     * @param unlockAmount The amount of unlocked collateral for deal\\n     * @param returnToTrader The returned to trader amount when position was closed.\\n     */\\n    struct UnlockAssetParams {\\n        address trader;\\n        address receiver;\\n        address asset;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @param traders An array of traders for which available balance should be increased\\n     * @param amounts An array of amounts corresponding to traders' addresses that should be added to their available balances\\n     * @param asset Asset address which amount will be increased\\n     * @param length The amount of traders in an array\\n     */\\n    struct BatchTopUpAvailableBalanceParams {\\n        address[] traders;\\n        uint256[] amounts;\\n        address asset;\\n        uint256 length;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed asset, uint256 amount);\\n    event Withdraw(address indexed withdrawer, address asset, uint256 amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _registry The address of Registry contract\\n     * @param _whiteBlackList The address of WhiteBlackList contract\\n     */\\n    function initialize(address _registry, address _whiteBlackList) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @dev Deposits trader collateral for margin deal\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Withdraws the rest of trader's deposit after closing deal\\n     * @param _asset The collateral asset for withdraw\\n     * @param _amount The amount of '_asset' to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Traders lock their collateral for the limit order.\\n     * @param _trader The owner of collateral\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function increaseLockedBalance(address _trader, address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Locks deposited trader's assets as collateral for orders.\\n     * Decreases the available balance when opening position.\\n     * Transfers deposited amount to the deposit receiver.\\n     * @param _params parameters necessary to lock asset\\n     */\\n    function useTraderAssets(LockAssetParams calldata _params) external;\\n\\n    /**\\n     * @dev Unlocks trader's collateral when open position by order or update deposit.\\n     * @param _params parameters necessary to unlock asset\\n     */\\n    function unlockAsset(UnlockAssetParams calldata _params) external;\\n\\n    /**\\n     * The function to increase available balance for several traders\\n     * @param _params A struct containing BatchTopUpAvailableBalanceParams\\n     */\\n    function batchTopUpAvailableBalance(BatchTopUpAvailableBalanceParams calldata _params) external;\\n\\n    /**\\n     * Withdraws an asset amount from an asset holder to a receiver\\n     * @param _from Withdraw from address\\n     * @param _to Withdraw to address\\n     * @param _asset Address of an asset\\n     * @param _amount Amount of an asset\\n     * @param fromLocked True if withdraw from locked balance\\n     */\\n    function withdrawFrom(address _from, address _to, address _asset, uint256 _amount, bool fromLocked) external;\\n\\n    /**\\n     * Increases available balance of a receiver in the protocol\\n     * @param receiver The address of an asset receiver\\n     * @param asset The asset address for which available balance will be increased\\n     * @param amount The amount of an asset\\n     */\\n    function topUpAvailableBalance(address receiver, address asset, uint256 amount) external payable;\\n}\\n\",\"keccak256\":\"0x7d7021be769ab6a7c4086eb6dfec873f22ae75e84d72b66492fa23d7a9b4f329\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVaultStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ITraderBalanceVaultStorage {\\n    struct TraderBalance {\\n        uint256 availableBalance;\\n        uint256 lockedBalance;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    /**\\n     *\\n     * @param trader Trader's address\\n     * @param asset Asset address\\n     * @return availableBalance availableBalance\\n     * @return lockedBalance lockedBalance\\n     */\\n    function balances(\\n        address trader,\\n        address asset\\n    ) external view returns (uint256 availableBalance, uint256 lockedBalance);\\n}\\n\",\"keccak256\":\"0xd103723047a828ac9dcd2434ac3e8c4f57435faaeb310ae62f1cd67065dc2e80\",\"license\":\"BUSL-1.1\"},\"contracts/WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IWhiteBlackList {\\n    enum AccessType {\\n        UNLISTED,\\n        WHITELISTED,\\n        BLACKLISTED\\n    }\\n    event WhitelistedAddressAdded(address indexed addr);\\n    event WhitelistedAddressRemoved(address indexed addr);\\n    event BlacklistedAddressAdded(address indexed addr);\\n    event BlacklistedAddressRemoved(address indexed addr);\\n\\n    function addAddressToWhitelist(address _address) external;\\n\\n    function addAddressesToWhitelist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromWhitelist(address _address) external;\\n\\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external;\\n\\n    function addAddressToBlacklist(address _address) external;\\n\\n    function addAddressesToBlacklist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromBlacklist(address _address) external;\\n\\n    function removeAddressesFromBlacklist(address[] calldata _addresses) external;\\n\\n    function getAccessType(address _address) external view returns (AccessType);\\n\\n    function isBlackListed(address _address) external view returns (bool);\\n\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa02e0237ab68d21bb3005cac9d945da1eaab863d2321202295d72a1164d9f0ed\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x4b53df7e37eeb7c34aaed6ed236909444a40d5edf62e944f55cf78cbe43948d6\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/IConditionalClosingManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalClosingManager {\\n    /**\\n     * @notice Checks if a position can be closed.\\n     * @param _position The position details.\\n     * @param _params The encoded parameters for closing the position.\\n     * @param _additionalParams Additional encoded parameters.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosedBeforeSwap(\\n        PositionLibrary.Position calldata _position,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if a position can be closed.\\n     * @param _position The position details.\\n     * @param _params The encoded parameters for closing the position.\\n     * @param _additionalParams Additional encoded parameters (not used).\\n     * @param _closeAmount The amount of the position to be closed, measured in the same decimal format as the position's asset.\\n     * @param _borowedAssetAmount The amount of borrowed asset.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosedAfterSwap(\\n        PositionLibrary.Position calldata _position,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _closeAmount,\\n        uint256 _borowedAssetAmount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x18137eb0c4fb8b753c3bd6e9f5dc44aad884c13ed8249351d0e1d59fdb2e5295\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IConditionalOpeningManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalOpeningManager {\\n    /**\\n     * @notice Checks if a limit order can be filled.\\n     * Is used as a view function outside transactions and allows to check whether a specific order can be executed imitating the swap.\\n     * @param _order The limit order details.\\n     * @param _params Open condition parameters for the order.\\n     * @param _additionalParams Additional parameters for the order.\\n     * @return A boolean value indicating if the limit order can be filled.\\n     */\\n    function canBeFilledBeforeSwap(\\n        LimitOrderLibrary.LimitOrder calldata _order,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if a limit order can be filled based on the exchange rate.\\n     * @dev This function compares the exchange rate with the limit price.\\n     * @param _order The limit order details.\\n     * @param _params Open condition parameters for the order.\\n     * @param _additionalParams Additional parameters for the order.\\n     * @param _exchangeRate The exchange rate in WAD format to compare with the limit price.\\n     * @return A boolean value indicating if the limit order can be filled based on the exchange rate.\\n     */\\n    function canBeFilledAfterSwap(\\n        LimitOrderLibrary.LimitOrder calldata _order,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _exchangeRate\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xf5bf329b09f2a53e59e60e7faa30e1df63f474ad8d0359c931277f623f120c54\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDexAdapter.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\n\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ICurveCalc} from \\\"./routers/ICurveCalc.sol\\\";\\nimport {ICurveRegistry} from \\\"./routers/ICurveRegistry.sol\\\";\\n\\ninterface IDexAdapter {\\n    /**\\n     * @notice Possible dex types\\n     */\\n    enum DexType {\\n        none, // 0\\n        UniswapV2, // 1  \\\"uniswap\\\", \\\"sushiswap\\\", \\\"quickswap\\\" (v2)\\n        UniswapV3, // 2\\n        Curve, // 3\\n        Balancer, // 4\\n        AlgebraV3, // 5\\n        Meshswap // 6\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * Encoded differently for different dexes:\\n     * Uniswap v2 - just encoded array of asset addresses\\n     * Uniswap v3 - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes3(uint24(pool1Fee)), bytes20(address(usdc)), bytes3(uint24(pool2Fee)) ...)\\n     * Quickswap - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes20(address(usdc)), bytes20(address(usdt) ...)\\n     * Curve - encoded array of asset addresses and pool addresses\\n     * Balancer - encoded array of asset addresses, pool ids and asset limits\\n     * @param _amountIn TokenA amount in\\n     * @param _amountOutMin Min tokenB amount out\\n     * @param _to Destination address for swap\\n     * @param _deadline Timestamp deadline for swap\\n     * @param _dexRouter Dex router address\\n     */\\n    struct SwapParams {\\n        bytes encodedPath;\\n        uint256 amountIn;\\n        uint256 amountOutMin;\\n        address to;\\n        uint256 deadline;\\n        address dexRouter;\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * @param _amountIn TokenA amount in\\n     * @param _dexRouter Dex router address\\n     */\\n    struct GetAmountsParams {\\n        bytes encodedPath;\\n        uint256 amount; // amountIn or amountOut\\n        address dexRouter;\\n    }\\n\\n    event QuoterChanged(address indexed dexRouter, address indexed quoter);\\n    event DexTypeChanged(address indexed dexRouter, uint256 indexed dexType);\\n\\n    /**\\n     * @param _dexRouter The router address for which the quoter is set\\n     * @param _quoter The quoter address to set\\n     */\\n    function setQuoter(address _dexRouter, address _quoter) external;\\n\\n    /**\\n     * @notice Set a dex type for a dex router\\n     * @param _dexRouter The dex router address\\n     * @param _dexType The dex type from enum DexType\\n     */\\n    function setDexType(address _dexRouter, uint256 _dexType) external;\\n\\n    /**\\n     * @notice Swap ERC20 tokens\\n     * @param _params SwapParams struct\\n     */\\n    function swapExactTokensForTokens(SwapParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountOut calculations\\n     * @notice given an input amount of an asset, returns the maximum output amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsOut(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountIn calculations\\n     * @notice given an output amount of an asset, returns the maximum input amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsIn(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Dex type mapping dexRouter => dex type\\n     */\\n    function dexType(address) external view returns (DexType);\\n\\n    /**\\n     * @notice Mapping from the dexRouter to its quoter\\n     */\\n    function quoters(address) external view returns (address);\\n\\n    /**\\n     * @return The address of the Registry contract\\n     */\\n    function registry() external view returns (address);\\n\\n    /**\\n     * @notice Gets the average amount of gas that is required for the swap on some dex\\n     * @param dexRouter The address of a router\\n     */\\n    function getGas(address dexRouter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20c68407aaf893618f2c1993ab0cef250ecb8c94e82e1801706bf26fbcc8b4f5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateStrategy.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IInterestRateStrategy {\\n    /**\\n     * @dev parameters for BAR calculation - they differ depending on bucket's underlying asset\\n     */\\n    struct BarCalculationParams {\\n        uint256 urOptimal;\\n        uint256 k0;\\n        uint256 k1;\\n        uint256 b0;\\n        int256 b1;\\n    }\\n\\n    event BarCalculationParamsChanged(\\n        address indexed bucket,\\n        uint256 urOptimal,\\n        uint256 k0,\\n        uint256 k1,\\n        uint256 b0,\\n        int256 b1\\n    );\\n\\n    /**\\n     * @dev Updates bucket's BAR and LAR.\\n     * Calculates using utilization ratio (UR):\\n     * BAR = UR <= URoptimal ? (k0 * UR + b0) : (k1 * UR + b1), where 'b1' may be < 0,\\n     * LAR = BAR * UR,\\n     * if reserveRate != 0, then LAR = LAR * (1 - reserveRate)\\n     * @param ur Utilization ratio\\n     * @param reserveRate The reserve portion of the interest that goes to the Primex reserve\\n     * @return tuple containing BAR and LAR\\n     */\\n\\n    function calculateInterestRates(uint256 ur, uint256 reserveRate) external returns (uint128, uint128);\\n\\n    /**\\n     * @dev Set parameters for BAR calculation.\\n     * @param _params parameters are represented in byte string\\n     */\\n\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Retrieves the calculation parameters for the Bar calculation.\\n     * @param _address an address of the bucket\\n     * @return BarCalculationParams struct containing the parameters.\\n     */\\n    function getBarCalculationParams(address _address) external view returns (BarCalculationParams memory);\\n}\\n\",\"keccak256\":\"0x3474a7be6c42ddf5faf12304d1978f0268b7d80c6d1c04880f00832151b280d8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// Copyright (c) 2016-2023 zOS Global Limited and contributors\\n// SPDX-License-Identifier: MIT\\n\\n// Interface for OpenZeppelin's Pausable contract from https://github.com/OpenZeppelin/openzeppelin-contracts/\\npragma solidity ^0.8.18;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Triggers stopped state.\\n     * This function can only be called by an address with the EMERGENCY_ADMIN role.\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract.\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x12e1f74846ecd309150da9ae8d3e119f39ea1ed32ee0d9db5a7509c6baac94e3\",\"license\":\"MIT\"},\"contracts/interfaces/IPrimexLens.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\n\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IInterestRateStrategy} from \\\"./IInterestRateStrategy.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\n\\ninterface IPrimexLens {\\n    /**\\n     * @dev A struct to store metadata information of a token.\\n     * @param tokenAddress The address of the token contract.\\n     * @param symbol The symbol of the token.\\n     * @param name The name of the token.\\n     * @param decimals  The decimal places of the token.\\n     * @param balance The balance of the token.\\n     */\\n    struct TokenMetadata {\\n        address tokenAddress;\\n        string symbol;\\n        string name;\\n        uint256 decimals;\\n        uint256 balance;\\n    }\\n\\n    /**\\n     * @param id Id of the asset.\\n     * @param isSupported Flag indicating if the asset supported in the bucket.\\n     * @param pairPriceDrop PriceDrop of the trading asset relative to borrowed asset, in WAD format.\\n     * @param maxLeverage maxAssetLeverage allowed for the trading asset in the bucket, in WAD format.\\n     */\\n    struct BucketTokenMetadata {\\n        uint256 id;\\n        bool isSupported;\\n        uint256 pairPriceDrop;\\n        uint256 maxLeverage;\\n    }\\n\\n    /**\\n     * @param asset Metadata of the asset token as a struct TokenMetadata\\n     * @param properties Metadata of the bucket token properties as a struct BucketTokenMetadata\\n     */\\n    struct SupportedAsset {\\n        TokenMetadata asset;\\n        BucketTokenMetadata properties;\\n    }\\n\\n    /**\\n     * @param amountInMining The amount of tokens provided by the lender for mining.\\n     * @param currentPercent The current percentage of rewards allocated to the lender, in WAD format (1 WAD = 100%)\\n     * @param rewardsInPMX The expected rewards for the lender in PMX tokens.\\n     */\\n    struct LenderInfo {\\n        uint256 amountInMining;\\n        uint256 currentPercent;\\n        ILiquidityMiningRewardDistributor.RewardsInPMX rewardsInPMX;\\n    }\\n\\n    /**\\n     * @dev Struct representing info about a liquidity mining in the bucket.\\n     * @param pmxAmount Total reward of PMX for liquidity mining in the bucket.\\n     * @param withdrawnRewards Total reward of PMX amount already withdrawn from the bucket.\\n     * @param totalPoints Total points accumulated by users in the bucket.\\n     */\\n    struct LiquidityMiningBucketInfo {\\n        uint256 pmxAmount;\\n        uint256 withdrawnRewards;\\n        uint256 totalPoints;\\n    }\\n\\n    /**\\n     * @dev Struct representing info about bucket.\\n     * @param bucketAddress The bucket address.\\n     * @param name The bucket name.\\n     * @param asset TokenMetadata of borrowed asset of the bucket.\\n     * @param bar Borrowing annual rate of the bucket, expressed in RAY.\\n     * @param lar Lending annual rate of the bucket, expressed in RAY.\\n     * @param supply Sum of availableLiquidity and demand, in borrowed asset.\\n     * @param demand Total supply of the debtToken, in borrowed asset.\\n     * @param availableLiquidity Balance of borrowed asset on the bucket, in borrowed asset.\\n     * @param utilizationRatio Percentage of the bucket funds used in the loan, in in RAY format (1 RAY = 100%).\\n     * @param supportedAssets Assets with which you can open a position in the bucket.\\n     * @param pToken TokenMetadata of pToken of the bucket.\\n     * @param debtToken TokenMetadata of debtToken of the bucket.\\n     * @param feeBuffer The fee buffer of the bucket, in WAD format.\\n     * @param withdrawalFeeRate Percentage of withdrawal that is redirected to the treasury, in WAD format (1 WAD = 100%)\\n     * @param miningParams Parameters of the bucket liquidity mining.\\n     * @param lenderInfo Liquidity mining lender information.\\n     * @param lmBucketInfo Liquidity mining the bucket information.\\n     * @param estimatedBar Expected value of bar, expressed in RAY\\n     * @param estimatedLar Expected value of lar., expressed in RAY\\n     * @param isDeprecated Indicates whether the bucket is outdated and deprecated.\\n     * @param isDelisted Indicates whether the bucket is delisted.\\n     * @param barCalcParams The BarCalculationParams struct containing the parameters for calculating bar and lar.\\n     * @param maxTotalDeposit Max amount of borrowed asset that can be deposited in bucket, in borrowed asset.\\n     */\\n    struct BucketMetaData {\\n        address bucketAddress;\\n        string name;\\n        TokenMetadata asset;\\n        uint128 bar;\\n        uint128 lar;\\n        uint256 supply;\\n        uint256 demand;\\n        uint256 availableLiquidity;\\n        uint256 utilizationRatio;\\n        SupportedAsset[] supportedAssets;\\n        TokenMetadata pToken;\\n        TokenMetadata debtToken;\\n        uint256 feeBuffer;\\n        uint256 withdrawalFeeRate;\\n        IBucket.LiquidityMiningParams miningParams;\\n        LenderInfo lenderInfo;\\n        LiquidityMiningBucketInfo lmBucketInfo;\\n        uint128 estimatedBar;\\n        uint128 estimatedLar;\\n        bool isDeprecated;\\n        bool isDelisted;\\n        IInterestRateStrategy.BarCalculationParams barCalcParams;\\n        uint256 maxTotalDeposit;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a round in an chainlink oracle contract.\\n     * @param roundId Id of the round.\\n     * @param answer The answer provided for the round.\\n     * @param startedAt The timestamp when the round started.\\n     * @param updatedAt The timestamp when the round was last updated.\\n     * @param answeredInRound The round in which the answer was provided.\\n     */\\n    struct RoundData {\\n        uint80 roundId;\\n        int256 answer;\\n        uint256 startedAt;\\n        uint256 updatedAt;\\n        uint80 answeredInRound;\\n    }\\n\\n    /**\\n     * @dev Structure of open position parameters\\n     * @param bucket The domain name of the bucket where the position was opened\\n     * @param borrowedAsset The address of the borrowed asset of this `bucket`\\n     * @param positionAsset the address of the bought asset of open position\\n     * @param borrowedAmount the amount of borrowed token in this position\\n     * @param debt the debt on an open position consists of the loan body and accumulated interest\\n     * @param depositAmount The amount of deposit trader funds of open position\\n     * @param healthPosition The parameter determining the riskiness of the position (is averaged to 1).\\n     * If it is greater than 1, then the position is not risky, if it is less than 1 risky.\\n     * The decimals of this parameter is determined by the decimals `borrowedAsset`.\\n     * @param profit An integer showing the profit/loss for open position.\\n     */\\n    struct OpenPositionData {\\n        uint256 id;\\n        BucketMetaData bucket;\\n        TokenMetadata[2] pair;\\n        uint256 positionSize;\\n        uint256 liquidationPrice;\\n        uint256 stopLossPrice;\\n        uint256 takeProfitPrice;\\n        uint256 debt;\\n        uint256 depositAmount;\\n        uint256 createdAt;\\n    }\\n\\n    /**\\n     * @dev Structure for the getPositionStatus function with parameters that show the current status of the position\\n     * @param liquidationThreshold True if the position is risky\\n     * @param takeProfitReached True if the position has reached takeProfitAmount\\n     * @param stopLossReached True if the position has reached stopLossAmount\\n     */\\n    struct PositionStatus {\\n        bool liquidationThreshold;\\n        bool takeProfitReached;\\n        bool stopLossReached;\\n    }\\n\\n    /**\\n     * @dev Structure for the getOpenPositionsWithConditions function\\n     * @param positionData Open position data\\n     * @param conditionsData Conditions data for corresponding position\\n     */\\n    struct OpenPositionWithConditions {\\n        PositionLibrary.Position positionData;\\n        LimitOrderLibrary.Condition[] conditionsData;\\n    }\\n\\n    /**\\n     * @dev Structure for the getLimitOrdersWithConditions function\\n     * @param limitOrderData Limit order data\\n     * @param openConditionsData Open conditions data for corresponding order\\n     */\\n    struct LimitOrderWithConditions {\\n        LimitOrderLibrary.LimitOrder limitOrderData;\\n        LimitOrderLibrary.Condition[] openConditionsData;\\n    }\\n\\n    /**\\n     * @notice Retrieves open position data based on the provided position manager and id.\\n     * @param _positionManager The address of the PositionManager where the position is stored\\n     * @param _id Position id to show the parameters position\\n     * @return openPositionData The open position data including various details.\\n     */\\n    function getOpenPositionData(address _positionManager, uint256 _id) external returns (OpenPositionData memory);\\n\\n    /**\\n     * @notice The function shows the parameters for all open positions of the `_trader` with the best dex for each position\\n     * @param _positionManager The address of the PositionManager where the positions is stored\\n     * @param _trader The address, information about all positions of which will be displayed\\n     * @param _cursor The cursor value for pagination.\\n     * @param _count The number of positions to retrieve.\\n     */\\n    function getArrayOpenPositionDataByTrader(\\n        address _positionManager,\\n        address _trader,\\n        uint256 _cursor,\\n        uint256 _count\\n    ) external returns (OpenPositionData[] memory, uint256);\\n\\n    /**\\n     * @notice The function shows the parameters for all open positions of the `_trader` with the best dex for each position\\n     * @param _positionManager The address of the PositionManager where the positions is stored\\n     * @param _bucket The address of the bucket positions are related to\\n     * @param _cursor The cursor value for pagination.\\n     * @param _count The number of positions to retrieve.\\n     */\\n    function getArrayOpenPositionDataByBucket(\\n        address _positionManager,\\n        address _bucket,\\n        uint256 _cursor,\\n        uint256 _count\\n    ) external returns (OpenPositionData[] memory, uint256);\\n\\n    /**\\n     * @notice Retrieves the status of a position.\\n     * @param _positionManager The address of the PositionManager where the position is stored\\n     * @param _id Position id to show the parameters position\\n     * @param _routes An array of route objects representing the pricing routes.\\n     * @return positionStatus The status of the position.\\n     */\\n    function getPositionStatus(\\n        address _positionManager,\\n        uint256 _id,\\n        PrimexPricingLibrary.Route[] calldata _routes\\n    ) external returns (PositionStatus memory);\\n\\n    /**\\n     * @notice Checks if the take profit condition is reached for a given position.\\n     * @param _positionManager The address of the PositionManager contract.\\n     * @param _id The ID of the position to check.\\n     * @param _routes The routes for pricing the position.\\n     * @return A boolean indicating whether the take profit condition is reached.\\n     */\\n    function isTakeProfitReached(\\n        address _positionManager,\\n        uint256 _id,\\n        PrimexPricingLibrary.Route[] calldata _routes\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice The function returns the limit orders with corresponding conditions\\n     * @param _limitOrderManager The address of the LimitOrderManager where the order is stored.\\n     * @param _cursor The cursor value for pagination.\\n     * @param _count The number of positions to retrieve.\\n     * @return limitOrderWithConditions An array of LimitOrderWithConditions structs representing open positions with conditions.\\n     * @return newCursor The new cursor value for pagination.\\n     */\\n    function getLimitOrdersWithConditions(\\n        address _limitOrderManager,\\n        uint256 _cursor,\\n        uint256 _count\\n    ) external view returns (LimitOrderWithConditions[] memory, uint256 newCursor);\\n\\n    /**\\n     * @notice The function returns the positions with corresponding conditions.\\n     * @param _positionManager The address of the PositionManager where the position is stored.\\n     * @param _cursor The cursor value for pagination.\\n     * @param _count The number of positions to retrieve.\\n     * @return openPositionsWithConditionsArray An array of OpenPositionWithConditions structs representing open positions with conditions.\\n     * @return newCursor The new cursor value for pagination.\\n     */\\n    function getOpenPositionsWithConditions(\\n        address _positionManager,\\n        uint256 _cursor,\\n        uint256 _count\\n    ) external view returns (OpenPositionWithConditions[] memory, uint256 newCursor);\\n\\n    /**\\n     * @notice Retrieves the metadata of a token for a given trader.\\n     * @param _token The address of the token.\\n     * @param _trader The address of the trader.\\n     * @return metadata The metadata of the token.\\n     */\\n    function getTokenMetadata(address _token, address _trader) external view returns (TokenMetadata memory);\\n\\n    /**\\n     * @notice Retrieves the metadata of an array of tokens for a given trader.\\n     * @param _tokens The array of token addresses.\\n     * @param _trader The address of the trader.\\n     * @return res The array of token metadata.\\n     */\\n    function getTokenArrayMetadata(\\n        address[] calldata _tokens,\\n        address _trader\\n    ) external view returns (TokenMetadata[] memory);\\n\\n    /**\\n     * @notice Retrieves the metadata of an asset within a bucket.\\n     * @param _bucket The address of the Bucket contract.\\n     * @param _asset The address of the asset to retrieve metadata for.\\n     * @return metadata The metadata of the asset within the bucket.\\n     */\\n    function getAssetMetadata(address _bucket, address _asset) external view returns (BucketTokenMetadata memory);\\n\\n    /**\\n     * @notice Retrieves information about a supported asset.\\n     * @param _bucket The address of the Bucket where the asset is supported.\\n     * @param _asset The address of the asset for which information is requested.\\n     * @param _trader The address of the Trader requesting the information.\\n     * @return supportedAsset The SupportedAsset struct containing the asset and its properties.\\n     */\\n    function getSupportedAsset(\\n        address _bucket,\\n        address _asset,\\n        address _trader\\n    ) external view returns (SupportedAsset memory);\\n\\n    /**\\n     * @notice Retrieves an array of SupportedAsset structs for the given bucket, assets, and trader.\\n     * @param _bucket The address of the Bucket.\\n     * @param _assets An array of asset addresses.\\n     * @param _trader The address of the trader.\\n     * @return res An array of SupportedAsset structs representing the supported assets.\\n     */\\n    function getSupportedAssetArray(\\n        address _bucket,\\n        address[] memory _assets,\\n        address _trader\\n    ) external view returns (SupportedAsset[] memory);\\n\\n    /**\\n     * @notice Retrieves the metadata of a bucket.\\n     * @param _bucket The address of the Bucket contract.\\n     * @param _trader The address of the trader.\\n     * @return The metadata of the bucket.\\n     */\\n    function getBucket(address _bucket, address _trader) external view returns (BucketMetaData memory);\\n\\n    /**\\n     * @notice Retrieves an array of `BucketMetaData` for the given `_user`.\\n     * @param _buckets The array of bucket addresses.\\n     * @param _trader The address of the trader.\\n     * @param _positionManager The address of the PositionManager contract.\\n     * @param _showDeprecated Flag to determine whether deprecated buckets should be included.\\n     * @return An array of `BucketMetaData` objects.\\n     */\\n    function getBucketsArray(\\n        address[] memory _buckets,\\n        address _trader,\\n        address _positionManager,\\n        bool _showDeprecated\\n    ) external view returns (BucketMetaData[] memory);\\n\\n    /**\\n     * @notice Retrieves all bucket metadata from a bucket factory contract.\\n     * @param _bucketFactory The address of the BucketFactory contract.\\n     * @param _trader The address of the trader for whom the buckets are retrieved.\\n     * @param _positionManager The address of the PositionManager contract.\\n     * @param _showDeprecated A boolean flag indicating whether to include deprecated buckets in the result.\\n     * @return An array of BucketMetaData structs representing the bucket metadata.\\n     */\\n    function getAllBucketsFactory(\\n        address _bucketFactory,\\n        address _trader,\\n        address _positionManager,\\n        bool _showDeprecated\\n    ) external view returns (BucketMetaData[] memory);\\n\\n    /**\\n     * @notice Retrieves the latest round data for multiple Chainlink feeds.\\n     * @param _feeds An array of feed addresses.\\n     * @return res An array of RoundData structs containing the latest round data for each feed.\\n     */\\n    function getChainlinkLatestRoundData(address[] calldata _feeds) external view returns (RoundData[] memory);\\n\\n    /**\\n     * @notice Calculates the liquidation price for a given position.\\n     * @dev The liquidation price is the price at which a position can be liquidated (i.e., its collateral can cover the borrowed amount).\\n     * @param _positionManager The address of the PositionManager contract.\\n     * @param _bucket The name of the bucket associated with the position.\\n     * @param _borrowedAmount The amount borrowed in the position.\\n     * @param _positionAsset The address of the asset held in the position.\\n     * @param _positionAmount The amount of the asset held in the position.\\n     * @return The liquidation price in borrowed asset for the position.\\n     */\\n    function getLiquidationPrice(\\n        address _positionManager,\\n        string memory _bucket,\\n        uint256 _borrowedAmount,\\n        address _positionAsset,\\n        uint256 _positionAmount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the liquidation price of a position.\\n     * @param _positionManager The address of the PositionManager contract.\\n     * @param _id The ID of the position.\\n     * @return The liquidation price in borrowed asset of the position.\\n     */\\n    function getLiquidationPrice(address _positionManager, uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if the stop loss condition of a position is reached.\\n     * @param _positionManager The address of the PositionManager contract.\\n     * @param _id The ID of the position to check.\\n     * @return A boolean indicating whether the stop loss condition is reached.\\n     */\\n    function isStopLossReached(address _positionManager, uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the maximum decrease in position value for a given position ID.\\n     * @dev maxDecrease = (1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - pricedrop) * borrowedAssetAmountOut /\\n     * (feeBuffer * (1 + maintenanceBuffer)) - position.bucket.getNormalizedVariableDebt() * position.scaledDebtAmount\\n     * @param _pm The instance of the PositionManager contract.\\n     * @param _id The ID of the position.\\n     * @return The maximum decrease in position value.\\n     */\\n    function getPositionMaxDecrease(IPositionManager _pm, uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves information about a lender from the LiquidityMiningRewardDistributor contract.\\n     * @param liquidityMiningRewardDistributor The instance of the LiquidityMiningRewardDistributor contract.\\n     * @param bucketName The name of the lending bucket.\\n     * @param user The address of the lender.\\n     * @return info The lender information.\\n     */\\n    function getLenderInfo(\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor,\\n        string memory bucketName,\\n        address user\\n    ) external view returns (LenderInfo memory);\\n\\n    /**\\n     * @notice Retrieves information about a liquidity mining bucket.\\n     * @param liquidityMiningRewardDistributor The instance of the LiquidityMiningRewardDistributor contract.\\n     * @param _bucketName The name of the liquidity mining bucket.\\n     * @return info The liquidity mining bucket information.\\n     */\\n    function getLMBucketInfo(\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor,\\n        string memory _bucketName\\n    ) external view returns (LiquidityMiningBucketInfo memory);\\n}\\n\",\"keccak256\":\"0x73ad70a6a9d476b9a1532ec2e139ebb8a1fc29b797f9413720440b26c6a27d03\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISwapManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISwapManager is IPausable {\\n    event SpotSwap(\\n        address indexed trader,\\n        address indexed receiver,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountSold,\\n        uint256 amountBought\\n    );\\n\\n    /**\\n     * @param tokenA The address of the asset to be swapped from.\\n     * @param tokenB The address of the asset to be received in the swap.\\n     * @param amountTokenA The amount of tokenA to be swapped.\\n     * @param amountOutMin The minimum amount of tokenB expected to receive.\\n     * @param routes An array of PrimexPricingLibrary.Route structs representing the routes for the swap.\\n     * @param receiver The address where the swapped tokens will be received.\\n     * @param deadline The deadline for the swap transaction.\\n     * @param isSwapFromWallet A flag indicating whether the swap is perfomed from a wallet or a protocol balance.\\n     * @param isSwapToWallet A flag indicating whether the swapped tokens will be sent to a wallet or a protocol balance.\\n     * @param isSwapFeeInPmx A flag indicating whether the swap fee is paid in PMX or in native token.\\n     * @param payFeeFromWallet A flag indicating whether the swap fee is perfomed from a wallet or a protocol balance.\\n     */\\n    struct SwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        uint256 amountOutMin;\\n        PrimexPricingLibrary.Route[] routes;\\n        address receiver;\\n        uint256 deadline;\\n        bool isSwapFromWallet;\\n        bool isSwapToWallet;\\n        bool isSwapFeeInPmx;\\n        bool payFeeFromWallet;\\n    }\\n\\n    /**\\n     * @notice Executes a swap on dexes defined in routes\\n     * @param params The SwapParams struct containing the details of the swap transaction.\\n     * @param maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * @param needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The resulting amount after the swap.\\n     */\\n    function swap(\\n        SwapParams calldata params,\\n        uint256 maximumOracleTolerableLimit,\\n        bool needOracleTolerableLimitCheck\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the instance of PrimexRegistry contract.\\n     */\\n    function registry() external view returns (IAccessControl);\\n\\n    /**\\n     * @notice Retrieves the instance of TraderBalanceVault contract.\\n     */\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    /**\\n     * @notice Retrieves the instance of PrimexDNS contract.\\n     */\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    /**\\n     * @notice Retrieves the instance of PriceOracle contract.\\n     */\\n    function priceOracle() external view returns (IPriceOracle);\\n}\\n\",\"keccak256\":\"0xf91a251dbe30ce2840eb804f09dfa6569723900052bc10f559162774d3124b2d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITakeProfitStopLossCCM.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface ITakeProfitStopLossCCM {\\n    struct CanBeClosedParams {\\n        uint256 takeProfitPrice;\\n        uint256 stopLossPrice;\\n    }\\n\\n    struct AdditionalParams {\\n        PrimexPricingLibrary.Route[] routes;\\n    }\\n\\n    /**\\n     * @notice Checks if the take profit has been reached for a given position.\\n     * @param _position The position details.\\n     * @param takeProfitPrice The take profit price in WAD format.\\n     * @param routes The array of routes for asset swapping.\\n     * @return A boolean indicating whether the take profit has been reached.\\n     */\\n    function isTakeProfitReached(\\n        PositionLibrary.Position calldata _position,\\n        uint256 takeProfitPrice,\\n        PrimexPricingLibrary.Route[] memory routes\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if the take profit has been reached based on the given parameters.\\n     * @dev Used in closeBatchPositions() function.\\n     * @param _params The encoded parameters.\\n     * @param exchangeRate The exchange rate in WAD format.\\n     * @return A boolean indicating whether the take profit has been reached.\\n     */\\n    function isTakeProfitReached(bytes calldata _params, uint256 exchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached for a given position.\\n     * @param _position The position details.\\n     * @param stopLossPrice The stop loss price in WAD format to compare against.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(\\n        PositionLibrary.Position calldata _position,\\n        uint256 stopLossPrice\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached on the given parameters.\\n     * @dev The takeProfitPrice and stopLossPrice values can be obtained from the encoded data via CanBeClosedParams struct.\\n     * @param _params The encoded closing condition parameters containing stop loss price.\\n     * @param oracleExchangeRate The current exchange rate from the oracle in WAD format.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(bytes calldata _params, uint256 oracleExchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the take profit and stop loss prices from the given parameters.\\n     * @param _params The encoded parameters for closing a position.\\n     * @return takeProfitPrice The take profit price.\\n     * @return stopLossPrice The stop loss price.\\n     */\\n    function getTakeProfitStopLossPrices(bytes calldata _params) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x5f5df8c88208778ad4387a39f6cc343199c8df8870f21158a48562e81275c8d7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveCalc.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveCalc {\\n    // solhint-disable func-name-mixedcase\\n    function get_dx(\\n        // solhint-disable-next-line var-name-mixedcase\\n        int128 n_coins,\\n        uint256[8] memory balances,\\n        uint256 amp,\\n        uint256 fee,\\n        uint256[8] memory rates,\\n        uint256[8] memory precisions,\\n        bool underlying,\\n        int128 i,\\n        int128 j,\\n        uint256 dy\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x5fa9879e97a93a46480f230b02f7e8518d2ad482390b3224359dce1c075e4d12\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveRegistry.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveRegistry {\\n    // solhint-disable func-name-mixedcase\\n    function get_n_coins(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[8] memory);\\n\\n    function get_coin_indices(address _pool, address _from, address _to) external view returns (int128, int128, bool);\\n}\\n\",\"keccak256\":\"0xaa6bf52698d973d56d123347ceac0e41bd58d4ceb29f489d74a36ca516b52798\",\"license\":\"BUSL-1.1\"},\"contracts/lens/PrimexLens.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport \\\"./../libraries/Errors.sol\\\";\\n\\nimport {IPrimexLens} from \\\"../interfaces/IPrimexLens.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IBucketsFactory} from \\\"../Bucket/IBucketsFactory.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ILimitOrderManager} from \\\"../LimitOrderManager/ILimitOrderManager.sol\\\";\\nimport {ITakeProfitStopLossCCM} from \\\"../interfaces/ITakeProfitStopLossCCM.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\nimport {IPrimexDNSStorage} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\n\\n/**\\n * @dev  All functions in this contract are intended to be called off-chain. Do not call functions from other contracts to avoid an out-of-gas error.\\n */\\n\\ncontract PrimexLens is IPrimexLens, ERC165 {\\n    using WadRayMath for uint256;\\n    using PositionLibrary for PositionLibrary.Position;\\n\\n    address public immutable takeProfitStopLossCCM;\\n\\n    constructor(address _takeProfitStopLossCCM) {\\n        _require(\\n            IERC165(_takeProfitStopLossCCM).supportsInterface(type(ITakeProfitStopLossCCM).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        takeProfitStopLossCCM = _takeProfitStopLossCCM;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getPositionStatus(\\n        address _positionManager,\\n        uint256 _id,\\n        PrimexPricingLibrary.Route[] calldata _routes\\n    ) external override returns (PositionStatus memory) {\\n        _require(\\n            IERC165(_positionManager).supportsInterface(type(IPositionManager).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        PositionLibrary.Position memory position = IPositionManager(_positionManager).getPosition(_id);\\n        LimitOrderLibrary.Condition[] memory closeConditions = IPositionManager(_positionManager).getCloseConditions(\\n            _id\\n        );\\n        bool _isTakeProfitReached;\\n        bool _isStopLossReached;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            if (\\n                IERC165(IPositionManager(_positionManager).primexDNS().cmTypeToAddress(closeConditions[i].managerType))\\n                    .supportsInterface(type(ITakeProfitStopLossCCM).interfaceId)\\n            ) {\\n                ITakeProfitStopLossCCM.CanBeClosedParams memory params = abi.decode(\\n                    closeConditions[i].params,\\n                    (ITakeProfitStopLossCCM.CanBeClosedParams)\\n                );\\n                _isTakeProfitReached = ITakeProfitStopLossCCM(takeProfitStopLossCCM).isTakeProfitReached(\\n                    position,\\n                    params.takeProfitPrice,\\n                    _routes\\n                );\\n                _isStopLossReached = ITakeProfitStopLossCCM(takeProfitStopLossCCM).isStopLossReached(\\n                    position,\\n                    params.stopLossPrice\\n                );\\n                break;\\n            }\\n        }\\n        return\\n            PositionStatus({\\n                liquidationThreshold: IPositionManager(_positionManager).isPositionRisky(_id),\\n                takeProfitReached: _isTakeProfitReached,\\n                stopLossReached: _isStopLossReached\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getOpenPositionsWithConditions(\\n        address _positionManager,\\n        uint256 _cursor,\\n        uint256 _count\\n    )\\n        external\\n        view\\n        override\\n        returns (OpenPositionWithConditions[] memory openPositionsWithConditions, uint256 newCursor)\\n    {\\n        _require(\\n            IERC165(_positionManager).supportsInterface(type(IPositionManager).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        uint256 positionsLength = IPositionManager(_positionManager).getAllPositionsLength();\\n        if (_cursor >= positionsLength) {\\n            return (openPositionsWithConditions, 0);\\n        }\\n        if (_cursor + _count >= positionsLength) {\\n            _count = positionsLength - _cursor;\\n        } else {\\n            newCursor = _cursor + _count;\\n        }\\n\\n        openPositionsWithConditions = new OpenPositionWithConditions[](_count);\\n        for (uint256 i; i < _count; i++) {\\n            openPositionsWithConditions[i].positionData = IPositionManager(_positionManager).getPositionByIndex(\\n                _cursor + i\\n            );\\n            openPositionsWithConditions[i].conditionsData = IPositionManager(_positionManager).getCloseConditions(\\n                openPositionsWithConditions[i].positionData.id\\n            );\\n        }\\n        return (openPositionsWithConditions, newCursor);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getArrayOpenPositionDataByTrader(\\n        address _positionManager,\\n        address _trader,\\n        uint256 _cursor,\\n        uint256 _count\\n    ) external view override returns (OpenPositionData[] memory positionsData, uint256 newCursor) {\\n        _require(\\n            IERC165(_positionManager).supportsInterface(type(IPositionManager).interfaceId) && _trader != address(0),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        uint256 positionsLength = IPositionManager(_positionManager).getTraderPositionsLength(_trader);\\n        if (_cursor >= positionsLength) {\\n            return (positionsData, 0);\\n        }\\n        if (_cursor + _count >= positionsLength) {\\n            _count = positionsLength - _cursor;\\n        } else {\\n            newCursor = _cursor + _count;\\n        }\\n\\n        positionsData = new OpenPositionData[](_count);\\n        for (uint256 i; i < _count; i++) {\\n            uint256 positionId = IPositionManager(_positionManager).traderPositionIds(_trader, _cursor + i);\\n            positionsData[i] = getOpenPositionData(_positionManager, positionId);\\n        }\\n        return (positionsData, newCursor);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getArrayOpenPositionDataByBucket(\\n        address _positionManager,\\n        address _bucket,\\n        uint256 _cursor,\\n        uint256 _count\\n    ) external view override returns (OpenPositionData[] memory positionsData, uint256 newCursor) {\\n        _require(\\n            IERC165(_positionManager).supportsInterface(type(IPositionManager).interfaceId) && _bucket != address(0),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        uint256 positionsLength = IPositionManager(_positionManager).getBucketPositionsLength(_bucket);\\n        if (_cursor >= positionsLength) {\\n            return (positionsData, 0);\\n        }\\n        if (_cursor + _count >= positionsLength) {\\n            _count = positionsLength - _cursor;\\n        } else {\\n            newCursor = _cursor + _count;\\n        }\\n\\n        positionsData = new OpenPositionData[](_count);\\n        for (uint256 i; i < _count; i++) {\\n            uint256 positionId = IPositionManager(_positionManager).bucketPositionIds(_bucket, _cursor + i);\\n            positionsData[i] = getOpenPositionData(_positionManager, positionId);\\n        }\\n        return (positionsData, newCursor);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getAllBucketsFactory(\\n        address _bucketFactory,\\n        address _user,\\n        address _positionManager,\\n        bool _showDeprecated\\n    ) external view override returns (BucketMetaData[] memory) {\\n        _require(\\n            IERC165(_bucketFactory).supportsInterface(type(IBucketsFactory).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        address[] memory buckets = IBucketsFactory(_bucketFactory).allBuckets();\\n        return getBucketsArray(buckets, _user, _positionManager, _showDeprecated);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getChainlinkLatestRoundData(\\n        address[] calldata _feeds\\n    ) external view override returns (RoundData[] memory) {\\n        uint256 feedCount = _feeds.length;\\n        RoundData[] memory res = new RoundData[](feedCount);\\n\\n        uint80 roundId;\\n        int256 answer;\\n        uint256 startedAt;\\n        uint256 updatedAt;\\n        uint80 answeredInRound;\\n\\n        for (uint256 i; i < feedCount; i++) {\\n            _require(_feeds[i] != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n            (roundId, answer, startedAt, updatedAt, answeredInRound) = AggregatorV3Interface(_feeds[i])\\n                .latestRoundData();\\n            res[i].roundId = roundId;\\n            res[i].answer = answer;\\n            res[i].startedAt = startedAt;\\n            res[i].updatedAt = updatedAt;\\n            res[i].answeredInRound = answeredInRound;\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    // getLiquidationPrice for openable positions\\n    // in an ideal situation this liquidationPrice is equal getLiquidationPrice for opened positions\\n    function getLiquidationPrice(\\n        address _positionManager,\\n        string memory _bucket,\\n        uint256 _borrowedAmount,\\n        address _positionAsset,\\n        uint256 _positionAmount\\n    ) external view override returns (uint256) {\\n        _require(\\n            IERC165(address(_positionManager)).supportsInterface(type(IPositionManager).interfaceId) &&\\n                _positionAsset != address(0),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        address bucket = IPositionManager(_positionManager).primexDNS().getBucketAddress(_bucket);\\n\\n        return PrimexPricingLibrary.getLiquidationPrice(bucket, _positionAsset, _positionAmount, _borrowedAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getLimitOrdersWithConditions(\\n        address _limitOrderManager,\\n        uint256 _cursor,\\n        uint256 _count\\n    ) external view override returns (LimitOrderWithConditions[] memory limitOrdersWithConditions, uint256 newCursor) {\\n        _require(\\n            IERC165(_limitOrderManager).supportsInterface(type(ILimitOrderManager).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        uint256 ordersLength = ILimitOrderManager(_limitOrderManager).getOrdersLength();\\n        if (_cursor >= ordersLength) {\\n            return (limitOrdersWithConditions, 0);\\n        }\\n        if (_cursor + _count >= ordersLength) {\\n            _count = ordersLength - _cursor;\\n        } else {\\n            newCursor = _cursor + _count;\\n        }\\n\\n        limitOrdersWithConditions = new LimitOrderWithConditions[](_count);\\n        for (uint256 i; i < _count; i++) {\\n            limitOrdersWithConditions[i].limitOrderData = ILimitOrderManager(_limitOrderManager).getOrderByIndex(\\n                _cursor + i\\n            );\\n            limitOrdersWithConditions[i].openConditionsData = ILimitOrderManager(_limitOrderManager).getOpenConditions(\\n                limitOrdersWithConditions[i].limitOrderData.id\\n            );\\n        }\\n        return (limitOrdersWithConditions, newCursor);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getTokenArrayMetadata(\\n        address[] calldata _tokens,\\n        address _trader\\n    ) external view override returns (TokenMetadata[] memory) {\\n        uint256 tokenCount = _tokens.length;\\n        TokenMetadata[] memory res = new TokenMetadata[](tokenCount);\\n\\n        for (uint256 i; i < tokenCount; i++) {\\n            res[i] = getTokenMetadata(_tokens[i], _trader);\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function isTakeProfitReached(\\n        address _positionManager,\\n        uint256 _id,\\n        PrimexPricingLibrary.Route[] calldata _routes\\n    ) public override returns (bool) {\\n        _require(\\n            IERC165(_positionManager).supportsInterface(type(IPositionManager).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        PositionLibrary.Position memory position = IPositionManager(_positionManager).getPosition(_id);\\n        LimitOrderLibrary.Condition[] memory closeConditions = IPositionManager(_positionManager).getCloseConditions(\\n            _id\\n        );\\n        if (closeConditions.length == 0) return false;\\n        ITakeProfitStopLossCCM.CanBeClosedParams memory params;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            if (\\n                IERC165(IPositionManager(_positionManager).primexDNS().cmTypeToAddress(closeConditions[i].managerType))\\n                    .supportsInterface(type(ITakeProfitStopLossCCM).interfaceId)\\n            ) {\\n                params = abi.decode(closeConditions[i].params, (ITakeProfitStopLossCCM.CanBeClosedParams));\\n                break;\\n            }\\n        }\\n        return\\n            ITakeProfitStopLossCCM(takeProfitStopLossCCM).isTakeProfitReached(\\n                position,\\n                params.takeProfitPrice,\\n                _routes\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getOpenPositionData(\\n        address _positionManager,\\n        uint256 _id\\n    ) public view override returns (OpenPositionData memory) {\\n        _require(\\n            IERC165(_positionManager).supportsInterface(type(IPositionManager).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        PositionLibrary.Position memory position = IPositionManager(_positionManager).getPosition(_id);\\n\\n        bool isSpot = address(position.bucket) == address(0);\\n        uint256 debt = IPositionManager(_positionManager).getPositionDebt(_id);\\n        BucketMetaData memory bucket;\\n        if (!isSpot) bucket = getBucket(address(position.bucket), position.trader);\\n\\n        LimitOrderLibrary.Condition[] memory closeConditions = IPositionManager(_positionManager).getCloseConditions(\\n            _id\\n        );\\n        ITakeProfitStopLossCCM.CanBeClosedParams memory params;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            if (\\n                IERC165(IPositionManager(_positionManager).primexDNS().cmTypeToAddress(closeConditions[i].managerType))\\n                    .supportsInterface(type(ITakeProfitStopLossCCM).interfaceId) &&\\n                closeConditions[i].params.length != 0\\n            ) {\\n                params = abi.decode(closeConditions[i].params, (ITakeProfitStopLossCCM.CanBeClosedParams));\\n                break;\\n            }\\n        }\\n        return\\n            OpenPositionData({\\n                id: position.id,\\n                bucket: bucket,\\n                pair: [\\n                    isSpot ? getTokenMetadata(position.soldAsset, position.trader) : bucket.asset,\\n                    getTokenMetadata(position.positionAsset, position.trader)\\n                ],\\n                positionSize: position.positionAmount,\\n                liquidationPrice: getLiquidationPrice(_positionManager, _id),\\n                stopLossPrice: params.stopLossPrice,\\n                takeProfitPrice: params.takeProfitPrice,\\n                debt: debt,\\n                depositAmount: position.depositAmountInSoldAsset,\\n                createdAt: position.createdAt\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function isStopLossReached(address _positionManager, uint256 _id) public view override returns (bool) {\\n        _require(\\n            IERC165(_positionManager).supportsInterface(type(IPositionManager).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        PositionLibrary.Position memory position = IPositionManager(_positionManager).getPosition(_id);\\n        LimitOrderLibrary.Condition[] memory closeConditions = IPositionManager(_positionManager).getCloseConditions(\\n            _id\\n        );\\n        if (closeConditions.length == 0) return false;\\n        ITakeProfitStopLossCCM.CanBeClosedParams memory params;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            if (\\n                IERC165(IPositionManager(_positionManager).primexDNS().cmTypeToAddress(closeConditions[i].managerType))\\n                    .supportsInterface(type(ITakeProfitStopLossCCM).interfaceId)\\n            ) {\\n                params = abi.decode(closeConditions[i].params, (ITakeProfitStopLossCCM.CanBeClosedParams));\\n                break;\\n            }\\n        }\\n        return ITakeProfitStopLossCCM(takeProfitStopLossCCM).isStopLossReached(position, params.stopLossPrice);\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getTokenMetadata(address _token, address _trader) public view override returns (TokenMetadata memory) {\\n        _require(_token != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        return\\n            TokenMetadata({\\n                tokenAddress: _token,\\n                symbol: IERC20Metadata(_token).symbol(),\\n                name: IERC20Metadata(_token).name(),\\n                decimals: IERC20Metadata(_token).decimals(),\\n                balance: _trader != address(0) ? IERC20Metadata(_token).balanceOf(_trader) : 0\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getAssetMetadata(\\n        address _bucket,\\n        address _asset\\n    ) public view override returns (BucketTokenMetadata memory) {\\n        _require(\\n            IERC165(_bucket).supportsInterface(type(IBucket).interfaceId) && _asset != address(0),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        uint256 pairPriceDrop = IBucket(_bucket).positionManager().priceOracle().pairPriceDrops(\\n            _asset,\\n            address(IBucket(_bucket).borrowedAsset())\\n        );\\n\\n        (uint256 id, bool isSupported) = IBucket(_bucket).allowedAssets(_asset);\\n        return\\n            BucketTokenMetadata({\\n                id: id,\\n                isSupported: isSupported,\\n                pairPriceDrop: pairPriceDrop,\\n                maxLeverage: IBucket(_bucket).maxAssetLeverage(_asset)\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getSupportedAsset(\\n        address _bucket,\\n        address _asset,\\n        address _trader\\n    ) public view override returns (SupportedAsset memory) {\\n        return\\n            SupportedAsset({asset: getTokenMetadata(_asset, _trader), properties: getAssetMetadata(_bucket, _asset)});\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getSupportedAssetArray(\\n        address _bucket,\\n        address[] memory _assets,\\n        address _trader\\n    ) public view override returns (SupportedAsset[] memory) {\\n        uint256 assetCount = _assets.length;\\n        SupportedAsset[] memory res = new SupportedAsset[](assetCount);\\n\\n        for (uint256 i; i < assetCount; i++) {\\n            res[i] = getSupportedAsset(_bucket, _assets[i], _trader);\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getBucket(address _bucket, address _user) public view override returns (BucketMetaData memory) {\\n        _require(IERC165(_bucket).supportsInterface(type(IBucket).interfaceId), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        uint256 availableLiquidity = IBucket(_bucket).availableLiquidity();\\n        uint256 demand = IBucket(_bucket).debtToken().totalSupply();\\n        uint256 supply = demand + availableLiquidity;\\n        uint256 ur = supply > 0 ? demand.rdiv(supply) : 0;\\n\\n        address[] memory allowedAssets = IBucket(_bucket).getAllowedAssets();\\n        SupportedAsset[] memory supportedAssets = getSupportedAssetArray(_bucket, allowedAssets, _user);\\n        // solhint-disable-next-line var-name-mixedcase\\n        IBucket.LiquidityMiningParams memory LMparams = IBucket(_bucket).getLiquidityMiningParams();\\n        IInterestRateStrategy.BarCalculationParams memory barCalcParams = IBucket(_bucket)\\n            .interestRateStrategy()\\n            .getBarCalculationParams(_bucket);\\n        return\\n            BucketMetaData({\\n                bucketAddress: _bucket,\\n                name: IBucket(_bucket).name(),\\n                asset: getTokenMetadata(address(IBucket(_bucket).borrowedAsset()), _user),\\n                bar: IBucket(_bucket).bar(),\\n                lar: IBucket(_bucket).lar(),\\n                supply: supply,\\n                demand: demand,\\n                availableLiquidity: availableLiquidity,\\n                utilizationRatio: ur,\\n                supportedAssets: supportedAssets,\\n                pToken: getTokenMetadata(address(IBucket(_bucket).pToken()), _user),\\n                debtToken: getTokenMetadata(address(IBucket(_bucket).debtToken()), _user),\\n                feeBuffer: IBucket(_bucket).feeBuffer(),\\n                withdrawalFeeRate: IBucket(_bucket).withdrawalFeeRate(),\\n                miningParams: LMparams,\\n                lenderInfo: getLenderInfo(LMparams.liquidityMiningRewardDistributor, IBucket(_bucket).name(), _user),\\n                lmBucketInfo: getLMBucketInfo(LMparams.liquidityMiningRewardDistributor, IBucket(_bucket).name()),\\n                estimatedBar: IBucket(_bucket).estimatedBar(),\\n                estimatedLar: IBucket(_bucket).estimatedLar(),\\n                isDeprecated: IBucket(_bucket).isDeprecated(),\\n                isDelisted: IBucket(_bucket).isDelisted(),\\n                barCalcParams: barCalcParams,\\n                maxTotalDeposit: IBucket(_bucket).maxTotalDeposit()\\n            });\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getLenderInfo(\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor,\\n        string memory bucketName,\\n        address user\\n    ) public view override returns (LenderInfo memory) {\\n        LenderInfo memory info;\\n        if (address(liquidityMiningRewardDistributor) == address(0)) return info;\\n        (info.amountInMining, info.currentPercent, info.rewardsInPMX) = liquidityMiningRewardDistributor.getLenderInfo(\\n            bucketName,\\n            user,\\n            block.timestamp\\n        );\\n        return info;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getLMBucketInfo(\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor,\\n        string memory bucketName\\n    ) public view override returns (LiquidityMiningBucketInfo memory) {\\n        LiquidityMiningBucketInfo memory info;\\n        if (address(liquidityMiningRewardDistributor) == address(0)) return info;\\n        (info.pmxAmount, info.withdrawnRewards, info.totalPoints) = liquidityMiningRewardDistributor.getBucketInfo(\\n            bucketName\\n        );\\n        return info;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getBucketsArray(\\n        address[] memory _buckets,\\n        address _user,\\n        address _positionManager,\\n        bool _showDeprecated\\n    ) public view override returns (BucketMetaData[] memory) {\\n        _require(\\n            IERC165(_positionManager).supportsInterface(type(IPositionManager).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        uint256 bucketCount;\\n        for (uint256 i; i < _buckets.length; i++) {\\n            IBucket bucket = IBucket(_buckets[i]);\\n            (address bucketAddress, IPrimexDNSStorage.Status currentStatus, , ) = IPositionManager(_positionManager)\\n                .primexDNS()\\n                .buckets(bucket.name());\\n            if (\\n                (_showDeprecated ||\\n                    !(currentStatus == IPrimexDNSStorage.Status.Deprecated && bucket.pToken().balanceOf(_user) == 0)) &&\\n                bucketAddress == _buckets[i]\\n            ) {\\n                _buckets[bucketCount] = _buckets[i];\\n                bucketCount++;\\n            }\\n        }\\n        BucketMetaData[] memory res = new BucketMetaData[](bucketCount);\\n        for (uint256 i; i < bucketCount; i++) {\\n            res[i] = getBucket(_buckets[i], _user);\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IPrimexLens).interfaceId || interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getLiquidationPrice(address _positionManager, uint256 _id) public view override returns (uint256) {\\n        _require(\\n            IERC165(_positionManager).supportsInterface(type(IPositionManager).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        PositionLibrary.Position memory position = IPositionManager(_positionManager).getPosition(_id);\\n        if (position.scaledDebtAmount == 0) return 0;\\n\\n        uint256 positionDebt = IPositionManager(_positionManager).getPositionDebt(_id);\\n        return\\n            PrimexPricingLibrary.getLiquidationPrice(\\n                address(position.bucket),\\n                position.positionAsset,\\n                position.positionAmount,\\n                positionDebt\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IPrimexLens\\n     */\\n    function getPositionMaxDecrease(IPositionManager _pm, uint256 _id) public view override returns (uint256) {\\n        PositionLibrary.Position memory position = _pm.getPosition(_id);\\n        uint256 pairPriceDrop = _pm.priceOracle().getPairPriceDrop(position.positionAsset, address(position.soldAsset));\\n        uint256 securityBuffer = _pm.securityBuffer();\\n        uint256 maintenanceBuffer = _pm.maintenanceBuffer();\\n\\n        uint256 oracleTolerableLimit = _pm.getOracleTolerableLimit(position.positionAsset, address(position.soldAsset));\\n\\n        uint256 feeBuffer = position.bucket.feeBuffer();\\n        uint256 borrowedAssetAmountOut = PrimexPricingLibrary.getOracleAmountsOut(\\n            position.positionAsset,\\n            position.soldAsset,\\n            position.positionAmount,\\n            address(_pm.priceOracle())\\n        );\\n        uint256 maxDecrease = (WadRayMath.WAD - securityBuffer)\\n            .wmul(WadRayMath.WAD - oracleTolerableLimit)\\n            .wmul(WadRayMath.WAD - pairPriceDrop)\\n            .wmul(borrowedAssetAmountOut)\\n            .wdiv(feeBuffer.wmul(WadRayMath.WAD + maintenanceBuffer)) -\\n            position.bucket.getNormalizedVariableDebt().rmul(position.scaledDebtAmount);\\n\\n        return maxDecrease <= position.depositAmountInSoldAsset ? maxDecrease : position.depositAmountInSoldAsset;\\n    }\\n}\\n\",\"keccak256\":\"0xf06d37b200390a77038c242774985be9c8c23a07da674a1456564f07562e444e\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error DISABLED_TRANSFER_NATIVE_CURRENCY();\\n    error INVALID_AMOUNT();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error DEX_NOT_ACTIVE();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n    error SWAP_DEADLINE_PASSED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n}\\n\",\"keccak256\":\"0x0719b8e36490eb6c14abe73120d196a9457172f114e568886a1759db05685137\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/LimitOrderLibrary.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorage} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalOpeningManager} from \\\"../interfaces/IConditionalOpeningManager.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ISwapManager} from \\\"../interfaces/ISwapManager.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary LimitOrderLibrary {\\n    using WadRayMath for uint256;\\n\\n    enum CloseReason {\\n        FilledMargin,\\n        FilledSpot,\\n        FilledSwap,\\n        Cancelled\\n    }\\n\\n    struct Condition {\\n        uint256 managerType;\\n        bytes params;\\n    }\\n\\n    /**\\n     * @dev Creates a limit order and locks the deposit asset in the traderBalanceVault\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param positionAsset The address of output token for exchange\\n     * @param depositAsset The address of the deposit token\\n     * @param depositAmount The amount of deposit trader funds for deal\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a native currency\\n     * @param trader The trader, who has created the order\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param id The unique id of the order\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition The flag to indicate whether position should be opened\\n     * @param createdAt The timeStamp when the order was created\\n     * @param updatedConditionsAt The timestamp when the open condition was updated\\n     */\\n    struct LimitOrder {\\n        IBucket bucket;\\n        address positionAsset;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address feeToken;\\n        uint256 protocolFee;\\n        address trader;\\n        uint256 deadline;\\n        uint256 id;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        // The byte-encoded params, can be used for future updates\\n        bytes extraParams;\\n    }\\n\\n    /**\\n     * @dev Structure for the \\u0441reateLimitOrder with parameters necessary to create limit order\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition Bool, indicate whether position should be opened\\n     * @param openingManagerAddresses Array of contract addresses that will be called in canBeFilled\\n     * @param openingManagerParams Array of bytes representing params for contracts in openingManagerAddresses\\n     * @param closingManagerAddresses Array of contract addresses that will be called in canBeClosed\\n     * @param closingManagerParams Array of bytes representing params for contracts in closingManagerAddresses\\n     */\\n    struct CreateLimitOrderParams {\\n        string bucket;\\n        uint256 depositAmount;\\n        address depositAsset;\\n        address positionAsset;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        Condition[] openConditions;\\n        Condition[] closeConditions;\\n        bool isProtocolFeeInPmx;\\n    }\\n\\n    struct CreateLimitOrderVars {\\n        bool isSpot;\\n        IBucket bucket;\\n        uint256 positionSize;\\n        address priceOracle;\\n        uint256 rate;\\n        address feeToken;\\n    }\\n\\n    /**\\n     * @dev Opens a position on an existing order\\n     * @param orderId order id\\n     * @param com address of ConditionalOpeningManager\\n     * @param comAdditionalParams  params needed for ConditionalOpeningManager to calc canBeFilled\\n     * @param firstAssetRoutes routes to swap first asset\\n     * @param depositInThirdAssetRoutes routes to swap deposit asset\\n     */\\n    struct OpenPositionParams {\\n        uint256 orderId;\\n        uint256 conditionIndex;\\n        bytes comAdditionalParams;\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n        address keeper;\\n    }\\n\\n    struct OpenPositionByOrderVars {\\n        address assetIn;\\n        address assetOut;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        CloseReason closeReason;\\n        uint256 newPositionId;\\n        uint256 exchangeRate;\\n    }\\n\\n    /**\\n     * @dev Params for PositionManager to open position\\n     * @param order order\\n     * @param firstAssetRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositInThirdAssetRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionByOrderParams {\\n        address sender;\\n        LimitOrder order;\\n        Condition[] closeConditions;\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n    }\\n\\n    /**\\n     * @dev Structure for the updateOrder with parameters necessary to update limit order\\n     * @param orderId order id to update\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param makeDeposit Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     * @param payFeeFromWallet A flag indicating whether the Limit Order fee is perfomed from a wallet or a protocol balance.\\n     */\\n    struct UpdateLimitOrderParams {\\n        uint256 orderId;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n        bool isProtocolFeeInPmx;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n    }\\n\\n    /**\\n     * @notice Updates the protocol fee for a LimitOrder.\\n     * @param _order The LimitOrder storage object to update.\\n     * @param _params The new parameters for the LimitOrder.\\n     * @param _traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param _primexDNS The PrimexDNS contract for accessing PMX-related information.\\n     * @param _priceOracle The address of the price oracle contract.\\n     */\\n    function updateProtocolFee(\\n        LimitOrder storage _order,\\n        UpdateLimitOrderParams calldata _params,\\n        ITraderBalanceVault _traderBalanceVault,\\n        IPrimexDNS _primexDNS,\\n        address _priceOracle\\n    ) public {\\n        address feeToken;\\n        if (_params.isProtocolFeeInPmx) {\\n            feeToken = _primexDNS.pmx();\\n            _require(msg.value == 0, Errors.DISABLED_TRANSFER_NATIVE_CURRENCY.selector);\\n        } else {\\n            feeToken = NATIVE_CURRENCY;\\n        }\\n        if (\\n            _params.leverage != _order.leverage ||\\n            _params.depositAmount != _order.depositAmount ||\\n            feeToken != _order.feeToken\\n        ) {\\n            uint256 newProtocolFee = PrimexPricingLibrary.calculateProtocolFee(\\n                PrimexPricingLibrary.DepositData({\\n                    protocolFee: 0,\\n                    depositAsset: _order.depositAsset,\\n                    depositAmount: _params.depositAmount,\\n                    leverage: _params.leverage\\n                }),\\n                _primexDNS,\\n                _priceOracle,\\n                _order.shouldOpenPosition\\n                    ? IPrimexDNSStorage.OrderType.LIMIT_ORDER\\n                    : IPrimexDNSStorage.OrderType.SWAP_LIMIT_ORDER,\\n                feeToken\\n            );\\n            if (feeToken == _order.feeToken) {\\n                uint256 amount;\\n                unchecked {\\n                    if (newProtocolFee > _order.protocolFee) amount = newProtocolFee - _order.protocolFee;\\n                    else amount = _order.protocolFee - newProtocolFee;\\n                }\\n                depositLockOrUnlock(\\n                    _traderBalanceVault,\\n                    feeToken,\\n                    amount,\\n                    _params.payFeeFromWallet,\\n                    newProtocolFee > _order.protocolFee\\n                );\\n            } else {\\n                if (newProtocolFee > 0) {\\n                    //lock the new fee token\\n                    depositLockOrUnlock(_traderBalanceVault, feeToken, newProtocolFee, _params.payFeeFromWallet, true);\\n                }\\n                //unlock the old fee token\\n                depositLockOrUnlock(\\n                    _traderBalanceVault,\\n                    _order.feeToken,\\n                    _order.protocolFee,\\n                    _params.payFeeFromWallet,\\n                    false\\n                );\\n                _order.feeToken = feeToken;\\n            }\\n            _order.protocolFee = newProtocolFee;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the leverage of a limit order.\\n     * @param _order The limit order to update.\\n     * @param _leverage The new leverage value in WAD format for the order.\\n     */\\n    function updateLeverage(LimitOrder storage _order, uint256 _leverage) public {\\n        _require(_leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n        _require(_order.leverage != WadRayMath.WAD, Errors.CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN.selector);\\n\\n        _require(\\n            _leverage < _order.bucket.maxAssetLeverage(_order.positionAsset),\\n            Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n        );\\n        _order.leverage = _leverage;\\n    }\\n\\n    /**\\n     * @notice Updates the deposit details of a LimitOrder.\\n     * @param _order The LimitOrder to update.\\n     * @param _amount The amount of the asset being deposited.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or unlock the deposited asset.\\n     * @param traderBalanceVault The instance of ITraderBalanceVault used for deposit and unlock operations.\\n     */\\n    function updateDeposit(\\n        LimitOrderLibrary.LimitOrder storage _order,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        ITraderBalanceVault traderBalanceVault\\n    ) public {\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            _order.depositAsset,\\n            (_amount > _order.depositAmount) ? _amount - _order.depositAmount : _order.depositAmount - _amount,\\n            _takeDepositFromWallet,\\n            _amount > _order.depositAmount\\n        );\\n        _order.depositAmount = _amount;\\n    }\\n\\n    /**\\n     * @notice Sets the open conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param openConditionsMap The mapping of order IDs to open conditions.\\n     * @param openConditions The array of open conditions.\\n     * @param primexDNS The instance of the Primex DNS contract.\\n     */\\n    function setOpenConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage openConditionsMap,\\n        Condition[] memory openConditions,\\n        IPrimexDNS primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(openConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(openConditions.length > 0, Errors.SHOULD_HAVE_OPEN_CONDITIONS.selector);\\n        if (openConditionsMap[_order.id].length > 0) {\\n            delete openConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < openConditions.length; i++) {\\n            condition = openConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalOpeningManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_COM.selector\\n            );\\n            openConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the close conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param closeConditionsMap The mapping of order IDs to close conditions.\\n     * @param closeConditions The array of close conditions to set.\\n     * @param primexDNS The Primex DNS contract address.\\n     */\\n    function setCloseConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage closeConditionsMap,\\n        Condition[] memory closeConditions,\\n        IPrimexDNS primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(closeConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(\\n            _order.shouldOpenPosition || closeConditions.length == 0,\\n            Errors.SHOULD_NOT_HAVE_CLOSE_CONDITIONS.selector\\n        );\\n\\n        if (closeConditionsMap[_order.id].length > 0) {\\n            delete closeConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n            closeConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a limit order.\\n     * @param _params The struct containing the order parameters.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param primexDNS The instance of the PrimexDNS contract.\\n     * @return The created limit order.\\n     */\\n    function createLimitOrder(\\n        CreateLimitOrderParams calldata _params,\\n        IPositionManager pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        IPrimexDNS primexDNS\\n    ) public returns (LimitOrder memory) {\\n        _require(_params.leverage >= WadRayMath.WAD, Errors.INCORRECT_LEVERAGE.selector);\\n        _require(_params.deadline > block.timestamp, Errors.INCORRECT_DEADLINE.selector);\\n\\n        CreateLimitOrderVars memory vars;\\n        vars.isSpot = bytes(_params.bucket).length == 0;\\n        vars.positionSize = _params.depositAmount.wmul(_params.leverage);\\n        vars.priceOracle = address(pm.priceOracle());\\n        if (vars.isSpot) {\\n            _require(_params.leverage == WadRayMath.WAD, Errors.LEVERAGE_SHOULD_BE_1.selector);\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            IPriceOracle(vars.priceOracle).getPriceFeedsPair(_params.positionAsset, _params.depositAsset);\\n        } else {\\n            _require(_params.shouldOpenPosition, Errors.SHOULD_OPEN_POSITION.selector);\\n            _require(_params.leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n            vars.bucket = IBucket(primexDNS.getBucketAddress(_params.bucket));\\n            _require(vars.bucket.getLiquidityMiningParams().isBucketLaunched, Errors.BUCKET_IS_NOT_LAUNCHED.selector);\\n\\n            (, bool tokenAllowed) = vars.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n            _require(\\n                _params.leverage < vars.bucket.maxAssetLeverage(_params.positionAsset),\\n                Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n            );\\n        }\\n        LimitOrder memory order = LimitOrder({\\n            bucket: IBucket(address(0)),\\n            positionAsset: _params.positionAsset,\\n            depositAsset: _params.depositAsset,\\n            depositAmount: _params.depositAmount,\\n            feeToken: _params.isProtocolFeeInPmx ? primexDNS.pmx() : NATIVE_CURRENCY,\\n            protocolFee: 0,\\n            trader: msg.sender,\\n            deadline: _params.deadline,\\n            id: 0,\\n            leverage: _params.leverage,\\n            shouldOpenPosition: _params.shouldOpenPosition,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n        order.bucket = vars.bucket;\\n\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            pm.minPositionSize(),\\n            pm.minPositionAsset(),\\n            vars.positionSize,\\n            order.depositAsset,\\n            vars.priceOracle\\n        );\\n        if (_params.isProtocolFeeInPmx) {\\n            vars.feeToken = primexDNS.pmx();\\n            _require(msg.value == 0, Errors.DISABLED_TRANSFER_NATIVE_CURRENCY.selector);\\n        } else {\\n            vars.feeToken = NATIVE_CURRENCY;\\n        }\\n\\n        order.protocolFee = PrimexPricingLibrary.calculateProtocolFee(\\n            PrimexPricingLibrary.DepositData({\\n                protocolFee: 0,\\n                depositAsset: _params.depositAsset,\\n                depositAmount: _params.depositAmount,\\n                leverage: _params.leverage\\n            }),\\n            primexDNS,\\n            vars.priceOracle,\\n            order.shouldOpenPosition\\n                ? IPrimexDNSStorage.OrderType.LIMIT_ORDER\\n                : IPrimexDNSStorage.OrderType.SWAP_LIMIT_ORDER,\\n            vars.feeToken\\n        );\\n\\n        if (order.protocolFee > 0) {\\n            // fee locking\\n            depositLockOrUnlock(traderBalanceVault, vars.feeToken, order.protocolFee, _params.payFeeFromWallet, true);\\n        }\\n        // deposit locking\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            order.depositAsset,\\n            order.depositAmount,\\n            _params.takeDepositFromWallet,\\n            true\\n        );\\n\\n        return order;\\n    }\\n\\n    /**\\n     * @notice Opens a position by order.\\n     * @param order The LimitOrder storage containing order details.\\n     * @param _params The OpenPositionParams calldata containing additional position parameters.\\n     * @param _closeConditions The Condition array containing close conditions for the position.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param primexDNS The instance of the PrimexDNS contract.\\n     * @param swapManager The instance of the SwapManager contract.\\n     * @return vars The OpenPositionByOrderVars struct containing the result of the open position operation.\\n     */\\n    function openPositionByOrder(\\n        LimitOrder storage order,\\n        OpenPositionParams calldata _params,\\n        Condition[] memory _closeConditions,\\n        IPositionManager pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        IPrimexDNS primexDNS,\\n        ISwapManager swapManager\\n    ) public returns (OpenPositionByOrderVars memory) {\\n        OpenPositionByOrderVars memory vars;\\n        bool isSpot = address(order.bucket) == address(0);\\n\\n        if (order.shouldOpenPosition) {\\n            vars.closeReason = isSpot ? CloseReason.FilledSpot : CloseReason.FilledMargin;\\n            (vars.amountIn, vars.amountOut, vars.newPositionId, vars.exchangeRate) = pm.openPositionByOrder(\\n                OpenPositionByOrderParams({\\n                    sender: msg.sender,\\n                    order: order,\\n                    closeConditions: _closeConditions,\\n                    firstAssetRoutes: _params.firstAssetRoutes,\\n                    depositInThirdAssetRoutes: _params.depositInThirdAssetRoutes\\n                })\\n            );\\n        } else {\\n            _require(\\n                _params.depositInThirdAssetRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n            vars.closeReason = CloseReason.FilledSwap;\\n            vars.amountIn = order.depositAmount;\\n\\n            // calculateFee is false so 'depositData' and 'priceOracle' are default values except 'protocolFee'\\n            PrimexPricingLibrary.payProtocolFee(\\n                PrimexPricingLibrary.ProtocolFeeParams({\\n                    depositData: PrimexPricingLibrary.DepositData({\\n                        protocolFee: order.protocolFee,\\n                        depositAsset: address(0),\\n                        depositAmount: 0,\\n                        leverage: 0\\n                    }),\\n                    feeToken: order.feeToken,\\n                    isSwapFromWallet: false,\\n                    calculateFee: false,\\n                    orderType: IPrimexDNSStorage.OrderType.SWAP_LIMIT_ORDER,\\n                    trader: order.trader,\\n                    priceOracle: address(0),\\n                    traderBalanceVault: traderBalanceVault,\\n                    primexDNS: primexDNS\\n                })\\n            );\\n\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams({\\n                    trader: order.trader,\\n                    receiver: address(this),\\n                    asset: order.depositAsset,\\n                    amount: order.depositAmount\\n                })\\n            );\\n\\n            vars.amountOut = swapManager.swap(\\n                ISwapManager.SwapParams({\\n                    tokenA: order.depositAsset,\\n                    tokenB: order.positionAsset,\\n                    amountTokenA: order.depositAmount,\\n                    amountOutMin: 0,\\n                    routes: _params.firstAssetRoutes,\\n                    receiver: order.trader,\\n                    deadline: order.deadline,\\n                    isSwapFromWallet: false,\\n                    isSwapToWallet: false,\\n                    isSwapFeeInPmx: false,\\n                    payFeeFromWallet: false\\n                }),\\n                pm.getOracleTolerableLimit(order.depositAsset, order.positionAsset),\\n                true\\n            );\\n            uint256 multiplierDepositAsset = 10 ** (18 - IERC20Metadata(order.depositAsset).decimals());\\n            uint256 multiplierPositionAsset = 10 ** (18 - IERC20Metadata(order.positionAsset).decimals());\\n            vars.exchangeRate =\\n                (vars.amountIn * multiplierDepositAsset).wdiv(vars.amountOut * multiplierPositionAsset) /\\n                multiplierDepositAsset;\\n        }\\n\\n        vars.assetIn = isSpot ? order.depositAsset : address(order.bucket.borrowedAsset());\\n        vars.assetOut = order.positionAsset;\\n        return vars;\\n    }\\n\\n    /**\\n     * @notice Checks if an array of Condition structs has no duplicate manager types.\\n     * @param conditions The array of Condition structs to be checked.\\n     * @return bool Boolean value indicating whether the array has no duplicate manager types.\\n     */\\n    function hasNoConditionManagerTypeDuplicates(Condition[] memory conditions) public pure returns (bool) {\\n        if (conditions.length == 0) {\\n            return true;\\n        }\\n        for (uint256 i; i < conditions.length - 1; i++) {\\n            for (uint256 j = i + 1; j < conditions.length; j++) {\\n                if (conditions[i].managerType == conditions[j].managerType) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This function is used to either deposit or unlock assets in the trader balance vault.\\n     * @param traderBalanceVault The instance of the trader balance vault.\\n     * @param _depositAsset The address of the asset to be deposited or unlocked.\\n     * @param _amount The amount of the asset to be deposited or unlocked.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or not.\\n     * @param _isAdd Boolean indicating whether to lock or unlock asset. Should lock asset, if true.\\n     */\\n    function depositLockOrUnlock(\\n        ITraderBalanceVault traderBalanceVault,\\n        address _depositAsset,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        bool _isAdd\\n    ) internal {\\n        if (!_isAdd) {\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams(msg.sender, msg.sender, _depositAsset, _amount)\\n            );\\n            return;\\n        }\\n        if (_takeDepositFromWallet) {\\n            if (_depositAsset == NATIVE_CURRENCY) {\\n                _require(msg.value >= _amount, Errors.INSUFFICIENT_DEPOSIT.selector);\\n                traderBalanceVault.increaseLockedBalance{value: _amount}(msg.sender, _depositAsset, _amount);\\n                if (msg.value > _amount) {\\n                    uint256 rest = msg.value - _amount;\\n                    traderBalanceVault.topUpAvailableBalance{value: rest}(msg.sender, NATIVE_CURRENCY, rest);\\n                }\\n                return;\\n            }\\n            TokenTransfersLibrary.doTransferFromTo(_depositAsset, msg.sender, address(traderBalanceVault), _amount);\\n            traderBalanceVault.increaseLockedBalance(msg.sender, _depositAsset, _amount);\\n            return;\\n        }\\n        traderBalanceVault.useTraderAssets(\\n            ITraderBalanceVault.LockAssetParams(\\n                msg.sender,\\n                address(0),\\n                _depositAsset,\\n                _amount,\\n                ITraderBalanceVault.OpenType.CREATE_LIMIT_ORDER\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x809b1633cb9f2bee008b2cdcab6900a977ce546b7bcb8c4d3cc3db73ee8ae681\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PositionLibrary.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"./LimitOrderLibrary.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorage} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {ITakeProfitStopLossCCM} from \\\"../interfaces/ITakeProfitStopLossCCM.sol\\\";\\nimport {IKeeperRewardDistributorStorage} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\\\";\\n\\nlibrary PositionLibrary {\\n    using WadRayMath for uint256;\\n\\n    event ClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed closedBy,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut,\\n        PositionLibrary.CloseReason reason\\n    );\\n\\n    /**\\n     * @notice This struct represents a trading position\\n     * @param id unique identifier for the position\\n     * @param scaledDebtAmount scaled debt amount associated with the position\\n     * @param bucket instance of the Bucket associated for trading\\n     * @param soldAsset bucket asset in the case of margin trading or deposit asset in the case of spot trading\\n     * @param depositAmountInSoldAsset equivalent of trader deposit size (this deposit can be in any asset) in the sold asset\\n     * or just deposit amount for spot trading\\n     * @param positionAsset asset of the trading position\\n     * @param positionAmount amount of the trading position\\n     * @param trader address of the trader holding the position\\n     * @param openBorrowIndex variable borrow index when position was opened\\n     * @param createdAt timestamp when the position was created\\n     * @param updatedConditionsAt timestamp when the close condition was updated\\n     * @param extraParams byte-encoded params, can be used for future updates\\n     */\\n    struct Position {\\n        uint256 id;\\n        uint256 scaledDebtAmount;\\n        IBucket bucket;\\n        address soldAsset;\\n        uint256 depositAmountInSoldAsset;\\n        address positionAsset;\\n        uint256 positionAmount;\\n        address trader;\\n        uint256 openBorrowIndex;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        bytes extraParams;\\n    }\\n\\n    struct IncreaseDepositParams {\\n        uint256 amount;\\n        address asset;\\n        bool takeDepositFromWallet;\\n        PrimexPricingLibrary.Route[] routes;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 amountOutMin;\\n    }\\n\\n    struct DecreaseDepositParams {\\n        uint256 amount;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        uint256 oracleTolerableLimit;\\n        uint256 maintenanceBuffer;\\n    }\\n\\n    struct MultiSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        PrimexPricingLibrary.Route[] routes;\\n        address receiver;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n    }\\n\\n    struct ClosePositionParams {\\n        uint256 closeAmount;\\n        uint256 depositDecrease;\\n        uint256 scaledDebtAmount;\\n        address depositReceiver;\\n        PrimexPricingLibrary.Route[] routes;\\n        uint256 amountOutMin;\\n        uint256 oracleTolerableLimit;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        LimitOrderLibrary.Condition closeCondition;\\n        bytes ccmAdditionalParams;\\n        bool borrowedAmountIsNotZero;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    struct ClosePositionVars {\\n        address dexAdapter;\\n        uint256 borowedAssetAmount;\\n        uint256 amountToReturn;\\n        uint256 permanentLoss;\\n        uint256 fee;\\n    }\\n\\n    struct ClosePositionEventData {\\n        int256 profit;\\n        uint256 debtAmount;\\n        uint256 amountOut;\\n        IKeeperRewardDistributorStorage.KeeperActionType actionType;\\n    }\\n\\n    struct OpenPositionVars {\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n        PrimexPricingLibrary.DepositData depositData;\\n        address feeToken;\\n        uint256 borrowedAmount;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool isSpot;\\n        bool isThirdAsset;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n        bool byOrder;\\n        address sender;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    struct OpenPositionEventData {\\n        uint256 protocolFee;\\n        uint256 entryPrice;\\n        uint256 leverage;\\n    }\\n\\n    /**\\n     * The struct for openPosition function local vars\\n     */\\n    struct OpenPositionLocalData {\\n        uint256 amountToTransfer;\\n        address dexAdapter;\\n        address depositReceiver;\\n        uint256 depositInPositionAsset;\\n        bool isSpot;\\n    }\\n\\n    /**\\n     * @dev Structure for the OpenPositionParams when margin trading is activated\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param borrowedAmount The amount of tokens borrowed to be exchanged\\n     * @param depositInThirdAssetRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionMarginParams {\\n        string bucket;\\n        uint256 borrowedAmount;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n    }\\n\\n    /**\\n     * @dev Structure for the openPosition with parameters necessary to open a position\\n     * @param marginParams margin trading related params\\n     * @param firstAssetRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param amountOutMin The minimum amount of output tokens\\n     * that must be received for the transaction not to revert.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @param takeDepositFromWallet Bool, add a deposit within the current transaction\\n     * @param payFeeFromWallet Bool, add a fee  within the current transaction\\n     * @param closeConditions Array of conditions that position can be closed by\\n     */\\n    struct OpenPositionParams {\\n        OpenPositionMarginParams marginParams;\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address positionAsset;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n        bool isProtocolFeeInPmx;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n    }\\n    struct PositionManagerParams {\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 oracleTolerableLimit;\\n        uint256 oracleTolerableLimitForThirdAsset;\\n        uint256 minPositionSize;\\n        address minPositionAsset;\\n        uint256 maxPositionSize;\\n    }\\n\\n    struct ScaledParams {\\n        uint256 decreasePercent;\\n        uint256 scaledDebtAmount;\\n        uint256 depositDecrease;\\n        bool borrowedAmountIsNotZero;\\n    }\\n\\n    enum CloseReason {\\n        CLOSE_BY_TRADER,\\n        RISKY_POSITION,\\n        BUCKET_DELISTED,\\n        LIMIT_CONDITION,\\n        BATCH_LIQUIDATION,\\n        BATCH_STOP_LOSS,\\n        BATCH_TAKE_PROFIT\\n    }\\n\\n    /**\\n     * @dev Increases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for increasing the deposit.\\n     * @return The amount of trader debtTokens burned.\\n     */\\n    function increaseDeposit(Position storage position, IncreaseDepositParams memory params) public returns (uint256) {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.scaledDebtAmount != 0, Errors.BORROWED_AMOUNT_IS_ZERO.selector);\\n        address borrowedAsset = position.soldAsset;\\n\\n        uint256 depositAmountInBorrowed;\\n        address depositReceiver = params.primexDNS.dexAdapter();\\n        if (params.asset == borrowedAsset) {\\n            depositReceiver = address(position.bucket);\\n            depositAmountInBorrowed = params.amount;\\n        }\\n\\n        if (params.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(params.asset, msg.sender, depositReceiver, params.amount);\\n        } else {\\n            params.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams(\\n                    msg.sender,\\n                    depositReceiver,\\n                    params.asset,\\n                    params.amount,\\n                    ITraderBalanceVault.OpenType.OPEN\\n                )\\n            );\\n        }\\n\\n        if (params.asset != borrowedAsset) {\\n            depositAmountInBorrowed = PrimexPricingLibrary.multiSwap(\\n                PrimexPricingLibrary.MultiSwapParams({\\n                    tokenA: params.asset,\\n                    tokenB: borrowedAsset,\\n                    amountTokenA: params.amount,\\n                    routes: params.routes,\\n                    dexAdapter: params.primexDNS.dexAdapter(),\\n                    receiver: address(position.bucket),\\n                    deadline: block.timestamp\\n                }),\\n                0,\\n                address(params.primexDNS),\\n                address(params.priceOracle),\\n                false // don't need oracle check. add amountOutMin?\\n            );\\n            _require(depositAmountInBorrowed >= params.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n        }\\n\\n        uint256 debt = getDebt(position);\\n        uint256 amountToTrader;\\n        uint256 debtToBurn = depositAmountInBorrowed;\\n\\n        if (depositAmountInBorrowed >= debt) {\\n            amountToTrader = depositAmountInBorrowed - debt;\\n            debtToBurn = debt;\\n            position.scaledDebtAmount = 0;\\n            if (amountToTrader > 0)\\n                params.traderBalanceVault.topUpAvailableBalance(position.trader, borrowedAsset, amountToTrader);\\n        } else {\\n            position.scaledDebtAmount =\\n                position.scaledDebtAmount -\\n                debtToBurn.rdiv(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        position.depositAmountInSoldAsset += debtToBurn;\\n\\n        position.bucket.decreaseTraderDebt(\\n            position.trader,\\n            debtToBurn,\\n            address(params.traderBalanceVault),\\n            amountToTrader,\\n            0\\n        );\\n        return debtToBurn;\\n    }\\n\\n    /**\\n     * @dev Decreases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for the decrease deposit operation.\\n     */\\n    function decreaseDeposit(Position storage position, DecreaseDepositParams memory params) public {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.bucket != IBucket(address(0)), Errors.IS_SPOT_POSITION.selector);\\n        _require(position.bucket.isActive(), Errors.BUCKET_IS_NOT_ACTIVE.selector);\\n        _require(params.amount > 0, Errors.DECREASE_AMOUNT_IS_ZERO.selector);\\n        _require(params.amount <= position.depositAmountInSoldAsset, Errors.AMOUNT_IS_MORE_THAN_DEPOSIT.selector);\\n        position.depositAmountInSoldAsset -= params.amount;\\n        position.scaledDebtAmount =\\n            position.scaledDebtAmount +\\n            params.amount.rdiv(position.bucket.getNormalizedVariableDebt());\\n\\n        params.traderBalanceVault.topUpAvailableBalance(position.trader, position.soldAsset, params.amount);\\n\\n        _require(\\n            health(\\n                position,\\n                params.priceOracle,\\n                params.pairPriceDrop,\\n                params.securityBuffer,\\n                params.oracleTolerableLimit\\n            ) >= WadRayMath.WAD + params.maintenanceBuffer,\\n            Errors.INSUFFICIENT_DEPOSIT_SIZE.selector\\n        );\\n        position.bucket.increaseDebt(position.trader, params.amount, address(params.traderBalanceVault));\\n    }\\n\\n    /**\\n     * @notice Closes a position.\\n     * @param position The position to be closed.\\n     * @param params The parameters for closing the position.\\n     * @param reason The reason for closing the position.\\n     * @return posEventData The event data for the closed position.\\n     */\\n    function closePosition(\\n        Position memory position,\\n        ClosePositionParams memory params,\\n        CloseReason reason\\n    ) public returns (ClosePositionEventData memory) {\\n        ClosePositionEventData memory posEventData;\\n        ClosePositionVars memory vars;\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            posEventData.debtAmount = params.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        vars.dexAdapter = params.primexDNS.dexAdapter();\\n        TokenTransfersLibrary.doTransferOut(position.positionAsset, vars.dexAdapter, params.closeAmount);\\n        posEventData.amountOut = PrimexPricingLibrary.multiSwap(\\n            PrimexPricingLibrary.MultiSwapParams({\\n                tokenA: position.positionAsset,\\n                tokenB: position.soldAsset,\\n                amountTokenA: params.closeAmount,\\n                routes: params.routes,\\n                dexAdapter: vars.dexAdapter,\\n                receiver: params.borrowedAmountIsNotZero\\n                    ? address(position.bucket)\\n                    : address(params.traderBalanceVault),\\n                deadline: block.timestamp\\n            }),\\n            params.oracleTolerableLimit,\\n            address(params.primexDNS),\\n            address(params.priceOracle),\\n            params.needOracleTolerableLimitCheck\\n        );\\n\\n        _require(\\n            posEventData.amountOut >= params.amountOutMin && posEventData.amountOut > 0,\\n            Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector\\n        );\\n\\n        bool canBeClosed;\\n        if (reason == CloseReason.CLOSE_BY_TRADER) {\\n            canBeClosed = position.trader == msg.sender;\\n        } else if (reason == CloseReason.RISKY_POSITION) {\\n            canBeClosed =\\n                health(\\n                    position,\\n                    params.priceOracle,\\n                    params.pairPriceDrop,\\n                    params.securityBuffer,\\n                    params.oracleTolerableLimit\\n                ) <\\n                WadRayMath.WAD;\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.Liquidation;\\n        } else if (reason == CloseReason.LIMIT_CONDITION) {\\n            address cm = params.primexDNS.cmTypeToAddress(params.closeCondition.managerType);\\n            _require(cm != address(0), Errors.INCORRECT_CM_TYPE.selector);\\n\\n            canBeClosed = IConditionalClosingManager(cm).canBeClosedAfterSwap(\\n                position,\\n                params.closeCondition.params,\\n                params.ccmAdditionalParams,\\n                params.closeAmount,\\n                posEventData.amountOut\\n            );\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.StopLoss;\\n        } else if (reason == CloseReason.BUCKET_DELISTED) {\\n            canBeClosed = position.bucket != IBucket(address(0)) && position.bucket.isDelisted();\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.BucketDelisted;\\n        }\\n        _require(canBeClosed, Errors.POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON.selector);\\n\\n        uint256 permanentLoss;\\n        if (posEventData.amountOut > posEventData.debtAmount) {\\n            unchecked {\\n                vars.amountToReturn = posEventData.amountOut - posEventData.debtAmount;\\n            }\\n        } else {\\n            unchecked {\\n                permanentLoss = posEventData.debtAmount - posEventData.amountOut;\\n            }\\n        }\\n\\n        posEventData.profit = -int256(params.depositDecrease);\\n\\n        if (reason != CloseReason.RISKY_POSITION) {\\n            if (vars.amountToReturn > 0) {\\n                posEventData.profit += int256(vars.amountToReturn);\\n                params.traderBalanceVault.topUpAvailableBalance(\\n                    reason == CloseReason.CLOSE_BY_TRADER ? params.depositReceiver : position.trader,\\n                    position.soldAsset,\\n                    vars.amountToReturn\\n                );\\n            }\\n        }\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            position.bucket.decreaseTraderDebt(\\n                position.trader,\\n                posEventData.debtAmount,\\n                reason == CloseReason.RISKY_POSITION ? params.primexDNS.treasury() : address(params.traderBalanceVault),\\n                vars.amountToReturn,\\n                permanentLoss\\n            );\\n        }\\n\\n        // to avoid stack to deep\\n        CloseReason _reason = reason;\\n        if (params.closeAmount == position.positionAmount) {\\n            emit ClosePosition({\\n                positionId: position.id,\\n                trader: position.trader,\\n                closedBy: msg.sender,\\n                bucketAddress: address(position.bucket),\\n                soldAsset: position.soldAsset,\\n                positionAsset: position.positionAsset,\\n                decreasePositionAmount: position.positionAmount,\\n                profit: posEventData.profit,\\n                positionDebt: posEventData.debtAmount,\\n                amountOut: posEventData.amountOut,\\n                reason: _reason\\n            });\\n        }\\n        return posEventData;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum position size between two tokens.\\n     * @param maxPositionSize The storage mapping for maximum position sizes.\\n     * @param token0 The address of token0.\\n     * @param token1 The address of token1.\\n     * @param amountInToken0 The maximum position size in token0.\\n     * @param amountInToken1 The maximum position size in token1.\\n     */\\n    function setMaxPositionSize(\\n        mapping(address => mapping(address => uint256)) storage maxPositionSize,\\n        address token0,\\n        address token1,\\n        uint256 amountInToken0,\\n        uint256 amountInToken1\\n    ) public {\\n        _require(token0 != address(0) && token1 != address(0), Errors.TOKEN_ADDRESS_IS_ZERO.selector);\\n        _require(token0 != token1, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n\\n        maxPositionSize[token1][token0] = amountInToken0;\\n        maxPositionSize[token0][token1] = amountInToken1;\\n    }\\n\\n    /**\\n     * @dev Sets the tolerable limit for an oracle between two assets.\\n     * @param oracleTolerableLimits The mapping to store oracle tolerable limits.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @param percent The percentage tolerable limit for the oracle in WAD format (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(\\n        mapping(address => mapping(address => uint256)) storage oracleTolerableLimits,\\n        address assetA,\\n        address assetB,\\n        uint256 percent\\n    ) public {\\n        _require(assetA != address(0) && assetB != address(0), Errors.ASSET_ADDRESS_NOT_SUPPORTED.selector);\\n        _require(assetA != assetB, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n        _require(percent <= WadRayMath.WAD && percent > 0, Errors.INVALID_PERCENT_NUMBER.selector);\\n        oracleTolerableLimits[assetA][assetB] = percent;\\n        oracleTolerableLimits[assetB][assetA] = percent;\\n    }\\n\\n    /**\\n     * @dev Sets the close conditions for a given position.\\n     * @param position The position for which to set the close conditions.\\n     * @param closeConditionsMap The storage mapping of close conditions for each position ID.\\n     * @param closeConditions The array of close conditions to be set.\\n     * @param primexDNS The address of the IPrimexDNS contract.\\n     */\\n    function setCloseConditions(\\n        Position memory position,\\n        mapping(uint256 => LimitOrderLibrary.Condition[]) storage closeConditionsMap,\\n        LimitOrderLibrary.Condition[] memory closeConditions,\\n        IPrimexDNS primexDNS\\n    ) public {\\n        _require(\\n            LimitOrderLibrary.hasNoConditionManagerTypeDuplicates(closeConditions),\\n            Errors.SHOULD_NOT_HAVE_DUPLICATES.selector\\n        );\\n        if (closeConditionsMap[position.id].length > 0) {\\n            delete closeConditionsMap[position.id];\\n        }\\n        LimitOrderLibrary.Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n\\n            closeConditionsMap[position.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Opens a position by depositing assets and borrowing funds (except when the position is spot)\\n     * @param _position The position to be opened\\n     * @param _vars Variables related to the position opening\\n     * @param _pmParams Parameters for the PositionManager contract\\n     * @return The updated position and event data\\n     */\\n    function openPosition(\\n        Position memory _position,\\n        OpenPositionVars memory _vars,\\n        PositionManagerParams memory _pmParams\\n    ) public returns (Position memory, OpenPositionEventData memory) {\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            _pmParams.minPositionSize,\\n            _pmParams.minPositionAsset,\\n            _vars.borrowedAmount + _position.depositAmountInSoldAsset,\\n            _position.soldAsset,\\n            address(_pmParams.priceOracle)\\n        );\\n        OpenPositionLocalData memory data;\\n        data.amountToTransfer = _vars.borrowedAmount;\\n        data.dexAdapter = _pmParams.primexDNS.dexAdapter();\\n        data.depositReceiver = data.dexAdapter;\\n        if (_vars.depositData.depositAsset == _position.positionAsset) {\\n            _position.positionAmount = _vars.depositData.depositAmount;\\n            data.depositInPositionAsset = _vars.depositData.depositAmount;\\n            data.depositReceiver = address(this);\\n        } else if (_vars.depositData.depositAsset == _position.soldAsset) {\\n            data.amountToTransfer += _vars.depositData.depositAmount;\\n        }\\n\\n        data.isSpot = _vars.borrowedAmount == 0;\\n        if (data.isSpot) _vars.depositData.depositAsset = _position.soldAsset;\\n\\n        if (_vars.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(\\n                _vars.depositData.depositAsset,\\n                msg.sender,\\n                data.depositReceiver,\\n                _vars.depositData.depositAmount\\n            );\\n        } else {\\n            _pmParams.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams({\\n                    trader: _position.trader,\\n                    depositReceiver: data.depositReceiver,\\n                    depositAsset: _vars.depositData.depositAsset,\\n                    depositAmount: _vars.depositData.depositAmount,\\n                    openType: _vars.byOrder\\n                        ? ITraderBalanceVault.OpenType.OPEN_BY_ORDER\\n                        : ITraderBalanceVault.OpenType.OPEN\\n                })\\n            );\\n        }\\n\\n        if (!data.isSpot) {\\n            _position.bucket.increaseDebt(_position.trader, _vars.borrowedAmount, data.dexAdapter);\\n            // @note You need to write index only after opening a position in bucket.\\n            // Since when opening position in the bucket, index becomes relevant (containing accumulated profit)\\n            _position.openBorrowIndex = _position.bucket.variableBorrowIndex();\\n            _position.scaledDebtAmount = _vars.borrowedAmount.rdiv(_position.openBorrowIndex);\\n        }\\n        if (_vars.isThirdAsset) {\\n            data.depositInPositionAsset = PrimexPricingLibrary.multiSwap(\\n                PrimexPricingLibrary.MultiSwapParams({\\n                    tokenA: _vars.depositData.depositAsset,\\n                    tokenB: _position.positionAsset,\\n                    amountTokenA: _vars.depositData.depositAmount,\\n                    routes: _vars.depositInThirdAssetRoutes,\\n                    dexAdapter: data.dexAdapter,\\n                    receiver: address(this),\\n                    deadline: _vars.deadline\\n                }),\\n                _pmParams.oracleTolerableLimitForThirdAsset,\\n                address(_pmParams.primexDNS),\\n                address(_pmParams.priceOracle),\\n                true\\n            );\\n            _position.positionAmount += data.depositInPositionAsset;\\n        } else {\\n            _require(\\n                _vars.depositInThirdAssetRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n        }\\n\\n        uint256 borrowedAmountInPositionAsset = PrimexPricingLibrary.multiSwap(\\n            PrimexPricingLibrary.MultiSwapParams({\\n                tokenA: _position.soldAsset,\\n                tokenB: _position.positionAsset,\\n                amountTokenA: data.isSpot ? _vars.depositData.depositAmount : data.amountToTransfer,\\n                routes: _vars.firstAssetRoutes,\\n                dexAdapter: data.dexAdapter,\\n                receiver: address(this),\\n                deadline: _vars.deadline\\n            }),\\n            _pmParams.oracleTolerableLimit,\\n            address(_pmParams.primexDNS),\\n            address(_pmParams.priceOracle),\\n            _vars.needOracleTolerableLimitCheck\\n        );\\n        _position.positionAmount += borrowedAmountInPositionAsset;\\n        _require(_pmParams.maxPositionSize >= _position.positionAmount, Errors.POSITION_SIZE_EXCEEDED.selector);\\n        uint256 leverage = WadRayMath.WAD;\\n        if (!data.isSpot) {\\n            if (_vars.depositData.depositAsset == _position.soldAsset) {\\n                leverage = (_vars.borrowedAmount + _position.depositAmountInSoldAsset).wdiv(\\n                    _position.depositAmountInSoldAsset\\n                );\\n            } else {\\n                leverage = (borrowedAmountInPositionAsset + data.depositInPositionAsset).wdiv(\\n                    data.depositInPositionAsset\\n                );\\n            }\\n            _require(\\n                leverage <= _position.bucket.maxAssetLeverage(_position.positionAsset),\\n                Errors.INSUFFICIENT_DEPOSIT.selector\\n            );\\n        }\\n\\n        if (!_vars.byOrder) {\\n            _vars.depositData.leverage = leverage;\\n        }\\n\\n        _require(_position.positionAmount >= _vars.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n\\n        OpenPositionEventData memory posEventData;\\n\\n        posEventData.protocolFee = PrimexPricingLibrary.payProtocolFee(\\n            PrimexPricingLibrary.ProtocolFeeParams({\\n                depositData: _vars.depositData,\\n                feeToken: _vars.feeToken,\\n                isSwapFromWallet: _vars.payFeeFromWallet,\\n                calculateFee: !_vars.byOrder,\\n                orderType: _vars.byOrder\\n                    ? IPrimexDNSStorage.OrderType.LIMIT_ORDER\\n                    : IPrimexDNSStorage.OrderType.MARKET_ORDER,\\n                trader: _position.trader,\\n                priceOracle: address(_pmParams.priceOracle),\\n                traderBalanceVault: _pmParams.traderBalanceVault,\\n                primexDNS: _pmParams.primexDNS\\n            })\\n        );\\n\\n        uint256 multiplierBorrowedAsset = 10 ** (18 - IERC20Metadata(_position.soldAsset).decimals());\\n        uint256 multiplierPositionAsset = 10 ** (18 - IERC20Metadata(_position.positionAsset).decimals());\\n        posEventData.entryPrice =\\n            ((_vars.borrowedAmount + _position.depositAmountInSoldAsset) * multiplierBorrowedAsset).wdiv(\\n                _position.positionAmount * multiplierPositionAsset\\n            ) /\\n            multiplierBorrowedAsset;\\n        posEventData.leverage = _vars.depositData.leverage;\\n        return (_position, posEventData);\\n    }\\n\\n    /**\\n     * @dev Retrieves the debt amount for a given position.\\n     * @param position The Position struct representing the position to get the debt amount for.\\n     * @return The debt amount in debtTokens.\\n     */\\n    function getDebt(Position memory position) public view returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return 0;\\n        return position.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n    }\\n\\n    /**\\n     * @dev Calculates the health of a position.\\n     * @dev health = ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * borrowedAssetAmountOut) /\\n     (feeBuffer * debt)\\n     * @param position The position object containing relevant information.\\n     * @param priceOracle The price oracle contract used for obtaining asset prices.\\n     * @param pairPriceDrop The priceDrop in WAD format of the asset pair.\\n     * @param securityBuffer The security buffer in WAD format for the position.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the price oracle.\\n     * @return The health value in WAD format of the position.\\n     */\\n    function health(\\n        Position memory position,\\n        IPriceOracle priceOracle,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit\\n    ) public view returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return WadRayMath.WAD;\\n        return\\n            health(\\n                PrimexPricingLibrary.getOracleAmountsOut(\\n                    position.positionAsset,\\n                    position.soldAsset,\\n                    position.positionAmount,\\n                    address(priceOracle)\\n                ),\\n                pairPriceDrop,\\n                securityBuffer,\\n                oracleTolerableLimit,\\n                getDebt(position),\\n                position.bucket.feeBuffer()\\n            );\\n    }\\n\\n    /**\\n     * @dev Creates a new position based on the given parameters.\\n     * @param _params The input parameters for creating the position.\\n     * @param primexDNS The address of the PrimexDNS contract.\\n     * @param priceOracle The address of the PriceOracle contract.\\n     * @return position The created Position struct.\\n     * @return vars The OpenPositionVars struct.\\n     */\\n    function createPosition(\\n        OpenPositionParams calldata _params,\\n        IPrimexDNS primexDNS,\\n        IPriceOracle priceOracle\\n    ) public view returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetRoutes: _params.firstAssetRoutes,\\n            depositInThirdAssetRoutes: _params.marginParams.depositInThirdAssetRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                protocolFee: 0,\\n                depositAsset: address(0),\\n                depositAmount: _params.depositAmount,\\n                leverage: 0\\n            }),\\n            feeToken: _params.isProtocolFeeInPmx ? primexDNS.pmx() : NATIVE_CURRENCY,\\n            borrowedAmount: _params.marginParams.borrowedAmount,\\n            amountOutMin: _params.amountOutMin,\\n            deadline: _params.deadline,\\n            isSpot: _params.marginParams.borrowedAmount == 0,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: _params.takeDepositFromWallet,\\n            payFeeFromWallet: _params.payFeeFromWallet,\\n            byOrder: false,\\n            sender: address(0),\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: _params.marginParams.borrowedAmount > 0\\n        });\\n        PositionLibrary.Position memory position = PositionLibrary.Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucket(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.positionAsset,\\n            positionAmount: 0,\\n            trader: msg.sender,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            _require(bytes(_params.marginParams.bucket).length == 0, Errors.BUCKET_SHOULD_BE_UNDEFINED.selector);\\n            priceOracle.getPriceFeedsPair(_params.positionAsset, _params.depositAsset);\\n            position.soldAsset = _params.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n            vars.depositData.leverage = WadRayMath.WAD;\\n        } else {\\n            position.bucket = IBucket(primexDNS.getBucketAddress(_params.marginParams.bucket));\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.depositAsset;\\n            (, bool tokenAllowed) = position.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n\\n            vars.isThirdAsset =\\n                _params.depositAsset != position.soldAsset &&\\n                _params.depositAsset != _params.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.depositAsset,\\n                position.soldAsset,\\n                _params.depositAmount,\\n                address(priceOracle)\\n            );\\n        }\\n\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Creates a position based on the provided order parameters.\\n     * @dev This function calculates and returns a Position and OpenPositionVars struct.\\n     * @param _params The OpenPositionByOrderParams struct containing the order parameters.\\n     * @param priceOracle The price oracle contract used for retrieving asset prices.\\n     * @return position The Position struct representing the created position.\\n     * @return vars The OpenPositionVars struct containing additional variables related to the position.\\n     */\\n    function createPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params,\\n        IPriceOracle priceOracle\\n    ) public view returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetRoutes: _params.firstAssetRoutes,\\n            depositInThirdAssetRoutes: _params.depositInThirdAssetRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                protocolFee: _params.order.protocolFee,\\n                depositAsset: address(0),\\n                depositAmount: _params.order.depositAmount,\\n                leverage: _params.order.leverage\\n            }),\\n            feeToken: _params.order.feeToken,\\n            borrowedAmount: 0,\\n            amountOutMin: 0,\\n            deadline: _params.order.deadline,\\n            isSpot: _params.order.leverage == WadRayMath.WAD,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: false,\\n            payFeeFromWallet: false,\\n            byOrder: true,\\n            sender: _params.sender,\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: true\\n        });\\n\\n        Position memory position = Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucket(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.order.positionAsset,\\n            positionAmount: 0,\\n            trader: _params.order.trader,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            position.soldAsset = _params.order.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n        } else {\\n            position.bucket = _params.order.bucket;\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.order.depositAsset;\\n            vars.isThirdAsset =\\n                _params.order.depositAsset != position.soldAsset &&\\n                _params.order.depositAsset != _params.order.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.order.depositAsset,\\n                position.soldAsset,\\n                _params.order.depositAmount,\\n                address(priceOracle)\\n            );\\n            vars.borrowedAmount = position.depositAmountInSoldAsset.wmul(_params.order.leverage - WadRayMath.WAD);\\n        }\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Calculates the health score for a position.\\n     * @param borrowedAssetAmountOut The amount of borrowed assets.\\n     * @param pairPriceDrop The priceDrop in WAD format of the pair.\\n     * @param securityBuffer The security buffer in WAD format.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the oracle.\\n     * @param positionDebt The debt of the position.\\n     * @param feeBuffer The buffer for fees.\\n     * @return The health score of the position.\\n     */\\n    function health(\\n        uint256 borrowedAssetAmountOut,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit,\\n        uint256 positionDebt,\\n        uint256 feeBuffer\\n    ) public pure returns (uint256) {\\n        return\\n            (\\n                (WadRayMath.WAD - securityBuffer)\\n                    .wmul(WadRayMath.WAD - oracleTolerableLimit)\\n                    .wmul(WadRayMath.WAD - pairPriceDrop)\\n                    .wmul(borrowedAssetAmountOut)\\n            ).wdiv(feeBuffer.wmul(positionDebt));\\n    }\\n}\\n\",\"keccak256\":\"0x054406e5e1391057b1a19ba965ca7c68a4ef7c99b98e7c4b339935e8d471eedf\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PrimexPricingLibrary.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {BytesLib} from \\\"./utils/BytesLib.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {NATIVE_CURRENCY, USD, USD_MULTIPLIER} from \\\"../Constants.sol\\\";\\nimport {IDexAdapter} from \\\"../interfaces/IDexAdapter.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS, IPrimexDNSV2, IPrimexDNSStorage} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary PrimexPricingLibrary {\\n    using WadRayMath for uint256;\\n    using BytesLib for bytes;\\n\\n    struct Route {\\n        uint256 shares;\\n        SwapPath[] paths;\\n    }\\n\\n    struct SwapPath {\\n        string dexName;\\n        bytes encodedPath;\\n    }\\n\\n    struct MultiSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        Route[] routes;\\n        address dexAdapter;\\n        address receiver;\\n        uint256 deadline;\\n    }\\n\\n    struct MultiSwapVars {\\n        uint256 sumOfShares;\\n        uint256 balance;\\n        uint256 amountOnDex;\\n        uint256 remainder;\\n        Route route;\\n    }\\n\\n    struct AmountParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amount;\\n        Route[] routes;\\n        address dexAdapter;\\n        address primexDNS;\\n    }\\n\\n    struct LiquidationPriceCalculationParams {\\n        address bucket;\\n        address positionAsset;\\n        uint256 limitPrice;\\n        uint256 leverage;\\n    }\\n\\n    struct DepositData {\\n        uint256 protocolFee;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n    }\\n\\n    /**\\n     * @param depositData the deposit data through which the protocol fee can be calculated\\n     * if the position is opened through an order using deposit asset\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a native currency\\n     * @param isSwapFromWallet bool, the protocol fee is taken from the user wallet or from the Vault\\n     * @param trader trader address\\n     * @param priceOracle PriceOracle contract address\\n     * @param orderType Type of possible order in Primex protocol\\n     * @param traderBalanceVault TraderBalanceVault contract address\\n     * @param primexDNS PrimexDNS contract address\\n     */\\n    struct ProtocolFeeParams {\\n        DepositData depositData;\\n        address feeToken;\\n        bool isSwapFromWallet;\\n        address trader;\\n        address priceOracle;\\n        IPrimexDNSStorage.OrderType orderType;\\n        bool calculateFee;\\n        ITraderBalanceVault traderBalanceVault;\\n        IPrimexDNS primexDNS;\\n    }\\n\\n    /**\\n     * The struct for payProtocolFee function\\n     */\\n    struct ProtocolFeeVars {\\n        bool fromLocked;\\n        address treasury;\\n    }\\n\\n    /**\\n     * The struct for getLiquidationPrice and getLiquidationPriceByOrder functions\\n     */\\n    struct LiquidationPriceData {\\n        IBucket bucket;\\n        IPositionManager positionManager;\\n        IPriceOracle priceOracle;\\n        IERC20Metadata borrowedAsset;\\n    }\\n\\n    event Withdraw(\\n        address indexed withdrawer,\\n        address borrowAssetReceiver,\\n        address borrowedAsset,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Encodes the given parameters into a bytes array based on the specified DEX type.\\n     * @param path The token path for the swap.\\n     * @param dexRouter The address of the DEX router.\\n     * @param ancillaryData Additional data required for certain DEX types.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @param isAmountToBuy A flag indicating whether it is the path for the swap with fixed amountIn or amountOut.\\n     * Swap with fixed amountIn, if true.\\n     * @return The encoded bytes array.\\n     */\\n    function encodePath(\\n        address[] memory path,\\n        address dexRouter,\\n        bytes32 ancillaryData,\\n        address dexAdapter,\\n        bool isAmountToBuy\\n    ) external view returns (bytes memory) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            return abi.encode(path);\\n        }\\n        if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            if (isAmountToBuy)\\n                return bytes.concat(bytes20(path[1]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            if (isAmountToBuy) return bytes.concat(bytes20(path[1]), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.Curve) {\\n            address[] memory pools = new address[](1);\\n            pools[0] = address(uint160(uint256(ancillaryData)));\\n            return abi.encode(path, pools);\\n        }\\n        if (type_ == IDexAdapter.DexType.Balancer) {\\n            int256[] memory limits = new int256[](2);\\n            limits[0] = type(int256).max;\\n            bytes32[] memory pools = new bytes32[](1);\\n            pools[0] = ancillaryData;\\n            return abi.encode(path, pools, limits);\\n        }\\n        _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n    }\\n\\n    /**\\n     * @notice Wrapped getAmountsOut to the dex\\n     * @param _params parameters necessary to get amount out\\n     * @return the amount of `tokenB` by the amount of 'tokenA' on dexes\\n     */\\n    function getAmountOut(AmountParams memory _params) public returns (uint256) {\\n        _require(_params.tokenA != _params.tokenB, Errors.IDENTICAL_ASSETS.selector);\\n        _require(\\n            IERC165(address(_params.primexDNS)).supportsInterface(type(IPrimexDNS).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        uint256 sumOfShares;\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            sumOfShares += _params.routes[i].shares;\\n        }\\n        _require(sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n\\n        uint256 remainder = _params.amount;\\n        uint256 sum;\\n        uint256 amountOnDex;\\n        Route memory route;\\n        IDexAdapter.GetAmountsParams memory getAmountsParams;\\n        address[] memory path;\\n\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            route = _params.routes[i];\\n            amountOnDex = i == _params.routes.length - 1 ? remainder : (_params.amount * route.shares) / sumOfShares;\\n            remainder -= amountOnDex;\\n\\n            for (uint256 j; j < route.paths.length; j++) {\\n                getAmountsParams.encodedPath = route.paths[j].encodedPath;\\n                getAmountsParams.amount = amountOnDex;\\n                getAmountsParams.dexRouter = IPrimexDNS(_params.primexDNS).getDexAddress(route.paths[j].dexName);\\n                path = decodePath(getAmountsParams.encodedPath, getAmountsParams.dexRouter, _params.dexAdapter);\\n                _require(path.length >= 2, Errors.INCORRECT_PATH.selector);\\n                amountOnDex = IDexAdapter(_params.dexAdapter).getAmountsOut(getAmountsParams)[1];\\n            }\\n            sum += amountOnDex;\\n        }\\n\\n        return sum;\\n    }\\n\\n    /**\\n     * @notice Wrapped getAmountIn to the dex\\n     * @param _params parameters necessary to get amount in\\n     * @return the amount of `tokenA` by the amount of 'tokenB' on dexes\\n     */\\n    function getAmountIn(AmountParams memory _params) public returns (uint256) {\\n        _require(_params.tokenA != _params.tokenB, Errors.IDENTICAL_ASSETS.selector);\\n        _require(\\n            IERC165(address(_params.primexDNS)).supportsInterface(type(IPrimexDNS).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        uint256 sumOfShares;\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            sumOfShares += _params.routes[i].shares;\\n        }\\n        _require(sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n\\n        uint256 remainder = _params.amount;\\n        uint256 sum;\\n        uint256 amountOnDex;\\n        Route memory route;\\n        IDexAdapter.GetAmountsParams memory getAmountsParams;\\n        address[] memory path;\\n\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            route = _params.routes[i];\\n            amountOnDex = i == _params.routes.length - 1 ? remainder : (_params.amount * route.shares) / sumOfShares;\\n            remainder -= amountOnDex;\\n            for (uint256 j; j < route.paths.length; j++) {\\n                getAmountsParams.encodedPath = route.paths[route.paths.length - 1 - j].encodedPath;\\n                getAmountsParams.amount = amountOnDex;\\n                getAmountsParams.dexRouter = IPrimexDNS(_params.primexDNS).getDexAddress(\\n                    route.paths[route.paths.length - 1 - j].dexName\\n                );\\n                path = decodePath(getAmountsParams.encodedPath, getAmountsParams.dexRouter, _params.dexAdapter);\\n                _require(path.length >= 2, Errors.INCORRECT_PATH.selector);\\n                amountOnDex = IDexAdapter(_params.dexAdapter).getAmountsIn(getAmountsParams)[0];\\n            }\\n            sum += amountOnDex;\\n        }\\n\\n        return sum;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of deposit assets in borrowed assets.\\n     * @param _params The parameters for the calculation.\\n     * @param _isThirdAsset A flag indicating if deposit is in a third asset.\\n     * @param _priceOracle The address of the price oracle.\\n     * @return The amount of deposit assets is measured in borrowed assets.\\n     */\\n    function getDepositAmountInBorrowed(\\n        AmountParams memory _params,\\n        bool _isThirdAsset,\\n        address _priceOracle\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_params.primexDNS).supportsInterface(type(IPrimexDNS).interfaceId) &&\\n                IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_params.tokenA == _params.tokenB) {\\n            _require(_params.routes.length == 0, Errors.DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0.selector);\\n            return _params.amount;\\n        }\\n\\n        uint256 depositAmountInBorrowed = getAmountOut(_params);\\n        if (_isThirdAsset) {\\n            uint256 oracleDepositAmountOut = getOracleAmountsOut(\\n                _params.tokenA,\\n                _params.tokenB,\\n                _params.amount,\\n                _priceOracle\\n            );\\n            if (depositAmountInBorrowed > oracleDepositAmountOut) depositAmountInBorrowed = oracleDepositAmountOut;\\n        }\\n\\n        return depositAmountInBorrowed;\\n    }\\n\\n    /**\\n     * @notice Performs a multi-hop swap transaction using the specified parameters.\\n     * @dev This function executes a series of token swaps on different DEXs based on the provided routes.\\n     * @param _params The struct containing all the necessary parameters for the multi-hop swap.\\n     * @param _maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * for the price difference between DEX and the oracle.\\n     * @param _primexDNS The address of the Primex DNS contract.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @param _needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The final balance of the _params.tokenB in the receiver's address after the multi-hop swap.\\n     */\\n    function multiSwap(\\n        MultiSwapParams memory _params,\\n        uint256 _maximumOracleTolerableLimit,\\n        address _primexDNS,\\n        address _priceOracle,\\n        bool _needOracleTolerableLimitCheck\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_primexDNS).supportsInterface(type(IPrimexDNS).interfaceId) &&\\n                IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        MultiSwapVars memory vars;\\n        vars.balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver);\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            vars.sumOfShares += _params.routes[i].shares;\\n        }\\n        _require(vars.sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n\\n        vars.remainder = _params.amountTokenA;\\n        IDexAdapter.SwapParams memory swapParams;\\n        swapParams.deadline = _params.deadline;\\n\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            vars.route = _params.routes[i];\\n            vars.amountOnDex = i == _params.routes.length - 1\\n                ? vars.remainder\\n                : (_params.amountTokenA * vars.route.shares) / vars.sumOfShares;\\n            vars.remainder -= vars.amountOnDex;\\n            swapParams.to = _params.dexAdapter;\\n\\n            for (uint256 j; j < vars.route.paths.length; j++) {\\n                swapParams.encodedPath = vars.route.paths[j].encodedPath;\\n                swapParams.amountIn = vars.amountOnDex;\\n                swapParams.dexRouter = IPrimexDNS(_primexDNS).getDexAddress(vars.route.paths[j].dexName);\\n                if (j == vars.route.paths.length - 1) {\\n                    swapParams.to = _params.receiver;\\n                }\\n                vars.amountOnDex = IDexAdapter(_params.dexAdapter).swapExactTokensForTokens(swapParams)[1];\\n            }\\n        }\\n\\n        vars.balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver) - vars.balance;\\n        if (_needOracleTolerableLimitCheck) {\\n            _require(\\n                vars.balance >=\\n                    getOracleAmountsOut(_params.tokenA, _params.tokenB, _params.amountTokenA, _priceOracle).wmul(\\n                        WadRayMath.WAD - _maximumOracleTolerableLimit\\n                    ),\\n                Errors.DIFFERENT_PRICE_DEX_AND_ORACLE.selector\\n            );\\n        }\\n\\n        return vars.balance;\\n    }\\n\\n    /**\\n     * @notice Pays the protocol fee.\\n     * @dev This function transfers the protocol fee from the trader to the protocol treasury.\\n     * @param params The parameters for paying the protocol fee.\\n     * @return protocolFee The amount of the protocol fee in PMX or NATIVE_CURRENCY paid.\\n     */\\n    function payProtocolFee(ProtocolFeeParams memory params) public returns (uint256 protocolFee) {\\n        if (!params.isSwapFromWallet || params.feeToken != NATIVE_CURRENCY) {\\n            _require(msg.value == 0, Errors.DISABLED_TRANSFER_NATIVE_CURRENCY.selector);\\n        }\\n        ProtocolFeeVars memory vars;\\n        vars.treasury = params.primexDNS.treasury();\\n        vars.fromLocked = true;\\n\\n        protocolFee = params.depositData.protocolFee;\\n        if (params.calculateFee) {\\n            protocolFee = calculateProtocolFee(\\n                params.depositData,\\n                params.primexDNS,\\n                params.priceOracle,\\n                params.orderType,\\n                params.feeToken\\n            );\\n            if (protocolFee == 0) return 0;\\n            vars.fromLocked = false;\\n            if (params.isSwapFromWallet) {\\n                if (params.feeToken == NATIVE_CURRENCY) {\\n                    _require(msg.value >= protocolFee, Errors.INSUFFICIENT_DEPOSIT.selector);\\n                    TokenTransfersLibrary.doTransferOutETH(vars.treasury, protocolFee);\\n                    if (msg.value > protocolFee) {\\n                        uint256 rest = msg.value - protocolFee;\\n                        params.traderBalanceVault.topUpAvailableBalance{value: rest}(msg.sender, NATIVE_CURRENCY, rest);\\n                    }\\n                } else {\\n                    TokenTransfersLibrary.doTransferFromTo(params.feeToken, params.trader, vars.treasury, protocolFee);\\n                }\\n                return protocolFee;\\n            }\\n        }\\n\\n        params.traderBalanceVault.withdrawFrom(\\n            params.trader,\\n            vars.treasury,\\n            params.feeToken,\\n            protocolFee,\\n            vars.fromLocked\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate and return protocol fee\\n     * @param _depositData The deposit data through which the protocol fee can be calculated.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _orderType Type of possible order in Primex protocol\\n     * @param _feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a native currency\\n     * @return The amount of the protocol fee in '_feeToken' which needs to be paid according to the specified deposit parameters.\\n     */\\n    function calculateProtocolFee(\\n        DepositData memory _depositData,\\n        IPrimexDNS _primexDNS,\\n        address _priceOracle,\\n        IPrimexDNSStorage.OrderType _orderType,\\n        address _feeToken\\n    ) public view returns (uint256) {\\n        uint256 feeRate = _primexDNS.feeRates(_orderType, _feeToken);\\n        if (feeRate == 0) return 0;\\n        uint256 nativeFeeRate = _feeToken == NATIVE_CURRENCY\\n            ? feeRate\\n            : _primexDNS.feeRates(_orderType, NATIVE_CURRENCY);\\n\\n        _depositData.protocolFee = getOracleAmountsOut(\\n            _depositData.depositAsset,\\n            NATIVE_CURRENCY,\\n            _depositData.depositAmount.wmul(_depositData.leverage).wmul(nativeFeeRate),\\n            _priceOracle\\n        );\\n\\n        (uint256 minFee, uint256 maxFee) = IPrimexDNSV2(address(_primexDNS)).feeRestrictions(_orderType);\\n        if (minFee > _depositData.protocolFee) {\\n            _depositData.protocolFee = minFee;\\n        } else if (maxFee < _depositData.protocolFee) {\\n            _depositData.protocolFee = maxFee;\\n        }\\n\\n        if (_feeToken != NATIVE_CURRENCY) {\\n            _require(nativeFeeRate != 0, Errors.FEE_RATE_IN_NATIVE_IS_ZERO.selector);\\n            uint256 discountMultiplier = feeRate.wdiv(nativeFeeRate);\\n            _depositData.protocolFee = getOracleAmountsOut(\\n                NATIVE_CURRENCY,\\n                _feeToken,\\n                _depositData.protocolFee.wmul(discountMultiplier),\\n                _priceOracle\\n            );\\n        }\\n\\n        return _depositData.protocolFee;\\n    }\\n\\n    /**\\n     * @param _tokenA asset for sell\\n     * @param _tokenB asset to buy\\n     * @param _amountAssetA Amount tokenA to sell\\n     * @param _priceOracle PriceOracle contract address\\n     * @return returns the amount of `tokenB` by the `amountAssetA` by the price of the oracle\\n     */\\n    function getOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountAssetA,\\n        address _priceOracle\\n    ) public view returns (uint256) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountAssetA;\\n        }\\n        (uint256 exchangeRate, bool isForward) = IPriceOracle(_priceOracle).getExchangeRate(_tokenA, _tokenB);\\n        uint256 amountAssetB;\\n        uint256 multiplier1 = _getAssetMultiplier(_tokenA);\\n        uint256 multiplier2 = _getAssetMultiplier(_tokenB);\\n\\n        if (isForward) {\\n            amountAssetB = (_amountAssetA * multiplier1).wmul(exchangeRate) / multiplier2;\\n        } else {\\n            amountAssetB = (_amountAssetA * multiplier1).wdiv(exchangeRate) / multiplier2;\\n        }\\n        return amountAssetB;\\n    }\\n\\n    /**\\n     * @param _tokenA asset for sell\\n     * @param _tokenB asset to buy\\n     * @param _amountsAssetA An array of amounts of tokenA to sell\\n     * @param _priceOracle PriceOracle contract address\\n     * @return returns an array of amounts of `tokenB` by the `amountsAssetA` by the price of the oracle\\n     */\\n    function getBatchOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256[] memory _amountsAssetA,\\n        address _priceOracle\\n    ) public view returns (uint256[] memory) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountsAssetA;\\n        }\\n        uint256[] memory amountsAssetB = new uint256[](_amountsAssetA.length);\\n        (uint256 exchangeRate, bool isForward) = IPriceOracle(_priceOracle).getExchangeRate(_tokenA, _tokenB);\\n        uint256 multiplier1 = 10 ** (18 - IERC20Metadata(_tokenA).decimals());\\n        uint256 multiplier2 = 10 ** (18 - IERC20Metadata(_tokenB).decimals());\\n\\n        if (isForward) {\\n            for (uint256 i; i < _amountsAssetA.length; i++) {\\n                amountsAssetB[i] = (_amountsAssetA[i] * multiplier1).wmul(exchangeRate) / multiplier2;\\n            }\\n        } else {\\n            for (uint256 i; i < _amountsAssetA.length; i++) {\\n                amountsAssetB[i] = (_amountsAssetA[i] * multiplier1).wdiv(exchangeRate) / multiplier2;\\n            }\\n        }\\n        return amountsAssetB;\\n    }\\n\\n    /**\\n     * @notice Calculates the liquidation price for a position.\\n     * @dev liquidationPrice = (feeBuffer * debt) /\\n     * ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * positionAmount))\\n     * @param _bucket The address of the related bucket.\\n     * @param _positionAsset The address of the position asset.\\n     * @param _positionAmount The size of the opened position.\\n     * @param _positionDebt The debt amount in debtTokens associated with the position.\\n     * @return The calculated liquidation price in borrowed asset.\\n     */\\n    function getLiquidationPrice(\\n        address _bucket,\\n        address _positionAsset,\\n        uint256 _positionAmount,\\n        uint256 _positionDebt\\n    ) public view returns (uint256) {\\n        _require(_positionAsset != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        LiquidationPriceData memory data;\\n        data.bucket = IBucket(_bucket);\\n\\n        (, bool tokenAllowed) = data.bucket.allowedAssets(_positionAsset);\\n        _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n\\n        data.positionManager = data.bucket.positionManager();\\n        data.borrowedAsset = data.bucket.borrowedAsset();\\n        data.priceOracle = data.positionManager.priceOracle();\\n\\n        uint256 multiplier1 = 10 ** (18 - data.borrowedAsset.decimals());\\n        uint256 denominator = (WadRayMath.WAD - data.positionManager.securityBuffer())\\n            .wmul(\\n                WadRayMath.WAD -\\n                    data.positionManager.getOracleTolerableLimit(_positionAsset, address(data.borrowedAsset))\\n            )\\n            .wmul(WadRayMath.WAD - data.priceOracle.getPairPriceDrop(_positionAsset, address(data.borrowedAsset)))\\n            .wmul(_positionAmount) * 10 ** (18 - IERC20Metadata(_positionAsset).decimals());\\n        // numerator = data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1;\\n        return (data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1).wdiv(denominator) / multiplier1;\\n    }\\n\\n    /**\\n     * @notice Validates if a position meets the minimum size requirement.\\n     * @param _minPositionSize The minimum position size.\\n     * @param _minPositionAsset The asset associated with the minimum position size.\\n     * @param _amount The amount of the asset in the position.\\n     * @param _asset The asset associated with the position.\\n     * @param _priceOracle The address of the price oracle contract.\\n     */\\n    function validateMinPositionSize(\\n        uint256 _minPositionSize,\\n        address _minPositionAsset,\\n        uint256 _amount,\\n        address _asset,\\n        address _priceOracle\\n    ) public view {\\n        _require(\\n            isCorrespondsMinPositionSize(_minPositionSize, _minPositionAsset, _asset, _amount, _priceOracle),\\n            Errors.INSUFFICIENT_POSITION_SIZE.selector\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks if the given amount of _asset corresponds to the minimum position size _minPositionSize,\\n     * based on the _minPositionAsset and the provided _priceOracle.\\n     * Returns true if the amount corresponds to or exceeds the minimum position size, otherwise returns false.\\n     * @param _minPositionSize The minimum position size required.\\n     * @param _minPositionAsset The address of the asset used for determining the minimum position size.\\n     * @param _asset The address of the asset being checked.\\n     * @param _amount The amount of _asset being checked.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @return A boolean value indicating whether the amount corresponds to or exceeds the minimum position size.\\n     */\\n    function isCorrespondsMinPositionSize(\\n        uint256 _minPositionSize,\\n        address _minPositionAsset,\\n        address _asset,\\n        uint256 _amount,\\n        address _priceOracle\\n    ) public view returns (bool) {\\n        if (_minPositionSize == 0) return true;\\n\\n        uint256 amountInMinPositionAsset = getOracleAmountsOut(_asset, _minPositionAsset, _amount, _priceOracle);\\n        return amountInMinPositionAsset >= _minPositionSize;\\n    }\\n\\n    /**\\n     * @notice Decodes an encoded path and returns an array of addresses.\\n     * @param encodedPath The encoded path to be decoded.\\n     * @param dexRouter The address of the DEX router.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @return path An array of addresses representing the decoded path.\\n     */\\n    function decodePath(\\n        bytes memory encodedPath,\\n        address dexRouter,\\n        address dexAdapter\\n    ) public view returns (address[] memory path) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            path = abi.decode(encodedPath, (address[]));\\n        } else if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 23; // address size(20) + fee size(3)\\n            uint256 pathLength = encodedPath.length / offsetSize + 1;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else if (type_ == IDexAdapter.DexType.Curve) {\\n            (path, ) = abi.decode(encodedPath, (address[], address[]));\\n        } else if (type_ == IDexAdapter.DexType.Balancer) {\\n            (path, , ) = abi.decode(encodedPath, (address[], bytes32[], int256[]));\\n        } else if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 20; // address size(20)\\n            uint256 pathLength = encodedPath.length / offsetSize;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else {\\n            _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the price from two price feeds.\\n     * @dev This function returns the price ratio between the base price and the quote price.\\n     * @param basePriceFeed The address of the base price feed (AggregatorV3Interface).\\n     * @param quotePriceFeed The address of the quote price feed (AggregatorV3Interface).\\n     * @param roundBaseFeed The round ID of the base price feed.\\n     * @param roundQuoteFeed The round ID of the quote price feed.\\n     * @param checkedTimestamp The timestamp used to filter relevant prices. Set to 0 to consider all prices.\\n     * @return The price ratio in WAD format between the base price and the quote price, and the timestamp of the latest price.\\n     */\\n    function getPriceFromFeeds(\\n        AggregatorV3Interface basePriceFeed,\\n        AggregatorV3Interface quotePriceFeed,\\n        uint80 roundBaseFeed,\\n        uint80 roundQuoteFeed,\\n        uint256 checkedTimestamp\\n    ) internal view returns (uint256, uint256) {\\n        (, int256 basePrice, , uint256 basePriceUpdatedAt, ) = basePriceFeed.getRoundData(roundBaseFeed);\\n        (, , , uint256 basePriceUpdatedAtNext, ) = basePriceFeed.getRoundData(roundBaseFeed + 1);\\n        // update to current timestamp if roundBaseFeed is last round\\n        if (basePriceUpdatedAtNext == 0) basePriceUpdatedAtNext = block.timestamp;\\n\\n        (, int256 quotePrice, , uint256 quotePriceUpdatedAt, ) = quotePriceFeed.getRoundData(roundQuoteFeed);\\n        (, , , uint256 quotePriceUpdatedAtNext, ) = quotePriceFeed.getRoundData(roundQuoteFeed + 1);\\n        // update to current timestamp if roundQuoteFeed is last round\\n        if (quotePriceUpdatedAtNext == 0) quotePriceUpdatedAtNext = block.timestamp;\\n\\n        _require(basePriceUpdatedAt > 0 && quotePriceUpdatedAt > 0, Errors.DATA_FOR_ROUND_DOES_NOT_EXIST.selector);\\n\\n        // we work only with prices that were relevant after position creation\\n        _require(\\n            checkedTimestamp == 0 ||\\n                (basePriceUpdatedAtNext > checkedTimestamp && quotePriceUpdatedAtNext > checkedTimestamp),\\n            Errors.HIGH_PRICE_TIMESTAMP_IS_INCORRECT.selector\\n        );\\n        // there should be an intersection between their duration\\n        _require(\\n            quotePriceUpdatedAt < basePriceUpdatedAtNext && basePriceUpdatedAt < quotePriceUpdatedAtNext,\\n            Errors.NO_PRICE_FEED_INTERSECTION.selector\\n        );\\n        //the return value will always be 18 decimals if the basePrice and quotePrice have the same decimals\\n        return (\\n            uint256(basePrice).wdiv(uint256(quotePrice)),\\n            quotePriceUpdatedAt < basePriceUpdatedAt ? quotePriceUpdatedAt : basePriceUpdatedAt\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the asset multiplier for a given asset.\\n     * @dev If the asset is the native currency, the function returns 1.\\n     * If the asset is USD, the function returns the value stored in the constant USD_MULTIPLIER.\\n     * For any other asset, the function calculates the multiplier based on the number of decimals of the token.\\n     * @param _asset The address of the asset.\\n     * @return The asset multiplier. It is a number with 10 raised to a power of decimals of a given asset.\\n     */\\n    function _getAssetMultiplier(address _asset) internal view returns (uint256) {\\n        if (_asset == NATIVE_CURRENCY) return 1;\\n        if (_asset == USD) return USD_MULTIPLIER;\\n\\n        return 10 ** (18 - IERC20Metadata(_asset).decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x809e37adba4a9add4c4586267bcee279140cf4a2d419ac81f33b5b929429b441\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TokenTransfersLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of token transfer logic that allows working with non-standart ERC-20 tokens, added method doTransferFromTo,\\n// modified doTransferIn\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenTransfersLibrary {\\n    function doTransferIn(address token, address from, uint256 amount) public returns (uint256) {\\n        return doTransferFromTo(token, from, address(this), amount);\\n    }\\n\\n    function doTransferFromTo(address token, address from, address to, uint256 amount) public returns (uint256) {\\n        uint256 balanceBefore = IERC20(token).balanceOf(to);\\n        // The returned value is checked in the assembly code below.\\n        // Arbitrary `from` should be checked at a higher level. The library function cannot be called by the user.\\n        // slither-disable-next-line unchecked-transfer arbitrary-send-erc20\\n        EIP20NonStandardInterface(token).transferFrom(from, to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_IN_FAILED.selector);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = IERC20(token).balanceOf(to);\\n        _require(balanceAfter >= balanceBefore, Errors.TOKEN_TRANSFER_IN_OVERFLOW.selector);\\n\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    function doTransferOut(address token, address to, uint256 amount) public {\\n        // The returned value is checked in the assembly code below.\\n        // slither-disable-next-line unchecked-transfer\\n        EIP20NonStandardInterface(token).transfer(to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_OUT_FAILED.selector);\\n    }\\n\\n    function doTransferOutETH(address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        _require(success, Errors.NATIVE_TOKEN_TRANSFER_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x055c6c72633f72ec523e7b74a58549f12e8c92320a6a06ae74503f637cb2ab97\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/utils/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// A modified version of BytesLib\\n// Origin: https://github.com/1inch/universal-router/blob/b972662f8d3f0ba55ef99411720f613f77c3fab5/contracts/modules/uniswap/v3/BytesLib.sol\\n// Unused methods and constants were removed\\npragma solidity 0.8.18;\\n\\nlibrary BytesLib {\\n    error ToAddressOverflow();\\n    error ToAddressOutOfBounds();\\n\\n    /// @notice Returns the address starting at byte `_start`\\n    /// @dev _bytesLength must equal _bytes.length for this to function correctly\\n    /// @param _bytes The input bytes string to slice\\n    /// @param _start The starting index of the address\\n    /// @param _bytesLength The length of _bytes\\n    /// @return tempAddress The address starting at _start\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _bytesLength\\n    ) internal pure returns (address tempAddress) {\\n        unchecked {\\n            if (_start + 20 < _start) revert ToAddressOverflow();\\n            if (_bytesLength < _start + 20) revert ToAddressOutOfBounds();\\n        }\\n\\n        assembly {\\n            tempAddress := mload(add(add(_bytes, 0x14), _start))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x15247d5d083082fd3ada31426c5c355a35606682f4587132c847c63c74d23315\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.18;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0xb0991b2c77df3496e4595618675a4279bd187aa4968bfbcf3be47f80c49280b3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a08060405234620001175760208162005a7d80380380916200002382856200011c565b8339810103126200011757516001600160a01b03811680820362000117576040516301ffc9a760e01b8152632b49a35560e11b600482015290602090829060249082905afa9081156200010b57600091620000c3575b5015620000b1576080526040516159269081620001578239608051818181610f8f01528181611299015281816136300152613e2c0152f35b60405163044aa57560e41b8152600490fd5b6020813d821162000102575b81620000de602093836200011c565b81010312620000fe5751908115158203620000fb57503862000079565b80fd5b5080fd5b3d9150620000cf565b6040513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200014057604052565b634e487b7160e01b600052604160045260246000fdfe61028080604052600436101561001457600080fd5b60e0600035811c91826301ffc9a7146118b657508163073f468c146117ac57816314fdc0731461176357816336ca926314611531578163429bd646146113f55750806344ec1614146113565780634acefed4146113155780634afdb64c146112f95780635927c358146112c8578063679bfb5b146112835780636a869ebb14610db75780636c5a9cd114610d7b5780638ddbcc6214610d615780639e09d40e14610ce6578063a8d028b514610ca5578063b23c434014610c40578063b29d57d814610be5578063b3e1d9f214610b84578063bdf4cd1814610ad9578063cd04eef414610506578063d030bb25146104d7578063debd310d146104a9578063e10a27a41461025b5763f107f8341461012a57600080fd5b34610256576040366003190112610256576004356001600160401b0381116102565761015a903690600401611fd6565b9061016361191f565b61016c8361219e565b9261017a6040519485611e2d565b808452601f196101898261219e565b0160005b81811061023f57505060005b8181106101ff576040805160208082528751818301819052600093600582901b8401810192808b01929185015b8287106101d35785850386f35b9091929382806101ef600193603f198a820301865288516119a2565b96019201960195929190926101c6565b8061021f8461021a61021561023a95878a61309f565b6130af565b613fd6565b6102298288612487565b526102348187612487565b50612459565b610199565b60209061024a612981565b8282890101520161018d565b600080fd5b3461025657602080600319360112610256576004356001600160401b0381116102565761028c903690600401611fd6565b906102968261219e565b916102a46040519384611e2d565b808352601f196102b38261219e565b0160005b81811061048c57505060005b81811061034157505050604051908282018383528151809152836040840192019360005b8281106102f45784840385f35b8551805169ffffffffffffffffffff90811686528184015186850152604080830151908701526060808301519087015260809182015116908501529481019460a0909301926001016102e7565b929391926001600160a01b038061035c61021584868961309f565b161561047a5761037061021583858861309f565b16906040518092633fabe5a360e21b825281600460a09384935afa90811561046e57600090600080600092600095610410575b5061040796506103b3868c612487565b5169ffffffffffffffffffff8095169052886103cf878d612487565b51015260406103de868c612487565b51015260606103ed858b612487565b51015260806103fc848a612487565b510191169052612459565b939291936102c3565b94505050505082813d8311610467575b61042a8183611e2d565b81010312610256578161043f610407936130c3565b858201519060408301519261045b6080606083015192016130c3565b9192939091938b6103a3565b503d610420565b6040513d6000823e3d90fd5b60405163044aa57560e41b8152600490fd5b94809394956104996129d6565b82828901015201949392946102b7565b34610256576104c36104ba36612102565b92919091612be4565b906104d36040519283928361213b565b0390f35b346102565760403660031901126102565760206104fe6104f5611909565b60243590615677565b604051908152f35b34610256576040366003190112610256576004356001600160a01b03811681036102565760405163eb02c30160e01b81526024803560048301529091906000908390816001600160a01b0385165afa91821561046e57600092610ab4575b50604051632630c12f60e01b81526020816004816001600160a01b0386165afa90811561046e576105d891602091600091610a97575b5060a08501516060860151604051631dae49b960e21b81526001600160a01b0392831660048201529116602482015292839190829081906044820190565b03916001600160a01b03165afa90811561046e57600091610a65575b506040516301ddf49360e61b8152916020836004816001600160a01b0385165afa92831561046e57600093610a31575b5060405163084b557b60e21b8152906020826004816001600160a01b0385165afa91821561046e576000926109fb575b5060a0850151606086015160405163a8905dab60e01b81526001600160a01b03928316600482015291166024820152919260208380604481015b03816001600160a01b0386165afa801561046e576000906109c8575b604087810151905163280188b760e21b81529450602090859060049082906001600160a01b03165afa93841561046e57600094610994575b5060a0870151606088015160c0890151604051632630c12f60e01b81526001600160a01b03938416969093919282169160209185916004918391165afa92831561046e57600093610963575b5060405163a3f092a760e01b81526004810196909652602486015260448501526001600160a01b031660648401526020836084817318f61d94ab3B2d8BCdc2cc70968503A447cc31cC5af492831561046e5760009361092f575b50670de0b6b3a7640000958603908682116108d35786038681116108d3576107b46107b99188936158b3565b615882565b049085038581116108d3578592836107da6107b46107b4946107e0966158b3565b046158b3565b049183018084116108d3576107b46107f99185936158b3565b0490828102928184048114821517156108d35783040361091d57610824610829928260011c9061589e565b615862565b906004602060018060a01b03604084015116604051928380926368d0612f60e01b82525afa801561046e576000906108e9575b61086c91506020830151906158b3565b916b019d971e4fe8401e740000008301928381116108d35783106108c1576108a76080916b033b2e3c9fd0803ce80000006020950490612698565b9101518082116108ba5750604051908152f35b90506104fe565b604051630a77254f60e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b506020813d602011610915575b8161090360209383611e2d565b810103126102565761086c905161085c565b3d91506108f6565b604051631550e8b760e01b8152600490fd5b9092506020813d60201161095b575b8161094b60209383611e2d565b8101031261025657519187610788565b3d915061093e565b61098691935060203d60201161098d575b61097e8183611e2d565b810190612468565b918a61072e565b503d610974565b9093506020813d6020116109c0575b816109b060209383611e2d565b81010312610256575192876106e2565b3d91506109a3565b506020833d6020116109f3575b816109e260209383611e2d565b8101031261025657600492516106aa565b3d91506109d5565b91506020823d602011610a29575b81610a1660209383611e2d565b810103126102565761068e915191610654565b3d9150610a09565b9092506020813d602011610a5d575b81610a4d60209383611e2d565b8101031261025657519184610624565b3d9150610a40565b90506020813d602011610a8f575b81610a8060209383611e2d565b810103126102565751836105f4565b3d9150610a73565b610aae9150823d841161098d5761097e8183611e2d565b8561059a565b610ad29192503d806000833e610aca8183611e2d565b8101906122b2565b9082610564565b3461025657606036600319011261025657610af2611909565b602435906001600160401b03821161025657610b15610b239236906004016121b5565b610b1d611935565b91614552565b60405160209182820192808352815180945260408301938160408260051b8601019301916000955b828710610b585785850386f35b909192938280610b74600193603f198a820301865288516119f3565b9601920196019592919092610b4b565b34610256576080366003190112610256576004356001600160401b03811161025657610bd9610bba6104d39236906004016121b5565b610bc261191f565b610bca611935565b90610bd361194b565b926152ca565b60405191829182611cbd565b34610256576040366003190112610256576080610c11610c03611909565b610c0b61191f565b906141d0565b610c3e60405180926060809180518452602081015115156020850152604081015160408501520151910152565bf35b3461025657604036600319011261025657610c59611909565b6024356001600160401b03811161025657606091610c7e610c84923690600401611e69565b90615210565b610c3e60405180926040809180518452602081015160208501520151910152565b34610256576040366003190112610256576104d3610cd2610cc4611909565b610ccc61191f565b9061460e565b604051918291602083526020830190611a3e565b3461025657606036600319011261025657610cff611909565b6024356001600160401b0381116102565760a091610d24610d32923690600401611e69565b610d2c611935565b9161510d565b604080518251815260208084015181830152928201518051828401529283015160608201529101516080820152f35b34610256576104c3610d7236612102565b92919091612e2d565b34610256576040366003190112610256576104d3610da3610d9a611909565b602435906137f2565b60405191829160208352602083019061204c565b3461025657610dc536612006565b9091610dcf612223565b506040516301ffc9a760e01b81526306cc15a560e11b60048201526020816024816001600160a01b0389165afa90811561046e57600091611249575b501561047a5760405163eb02c30160e01b8152600481018290526000816024816001600160a01b0389165afa90811561046e5760009161122e575b50604051631d40683560e31b815260048101839052936000856024816001600160a01b038a165afa94851561046e57600095611209575b5060009485805b82518110156111fa57604051633f4a2d2760e01b81526020816004816001600160a01b038e165afa90811561046e576000916111db575b506020610ec88386612487565b51516040516352ff146960e11b8152600481019190915291829060249082906001600160a01b03165afa90811561046e5760009161119c575b506040516301ffc9a760e01b8152632b49a35560e11b600482015290602090829060249082906001600160a01b03165afa90811561046e57600091611162575b50610f5457610f4f90612459565b610e84565b610f7c939495969750610f6a9150602092612487565b510151602080825183010191016124b1565b805160405163683b00d760e01b815291957f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169360209284928392610fcd92896004860161253f565b03816000865af190811561046e5760009161111e575b50602091826110149296015193604051809581948293631ade716160e31b8452604060048501526044840190611f41565b90602483015203915afa801561046e576000906110e4575b60209150915b60405163e56c926360e01b8152600481019190915293849060249082906001600160a01b03165afa91821561046e576000926110a8575b60609350604080519361107b85611d1f565b15159384815260208101921515835201911515825260405192835251151560208301525115156040820152f35b91506020833d6020116110dc575b816110c360209383611e2d565b81010312610256576110d6606093612242565b91611069565b3d91506110b6565b506020813d602011611116575b816110fe60209383611e2d565b8101031261025657611111602091612242565b61102c565b3d91506110f1565b90506020813d60201161115a575b8161113960209383611e2d565b81010312610256576020918261115161101493612242565b92505091610fe3565b3d915061112c565b90506020813d602011611194575b8161117d60209383611e2d565b810103126102565761118e90612242565b8a610f41565b3d9150611170565b90506020813d6020116111d3575b816111b760209383611e2d565b810103126102565760206111cc60249261224f565b9150610f01565b3d91506111aa565b6111f4915060203d60201161098d5761097e8183611e2d565b8a610ebb565b50959450505050602090611032565b6112279195503d806000833e61121f8183611e2d565b81019061238e565b9386610e7d565b61124391503d806000833e610aca8183611e2d565b85610e46565b90506020813d60201161127b575b8161126460209383611e2d565b810103126102565761127590612242565b85610e0b565b3d9150611257565b34610256576000366003190112610256576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102565760403660031901126102565760206112ef6112e6611909565b60243590613c66565b6040519015158152f35b346102565760206112ef61130c36612006565b9291909161346c565b34610256576040366003190112610256576104d3611342611334611909565b61133c61191f565b90613fd6565b6040519182916020835260208301906119a2565b346102565761136d61136736611eb0565b916126a5565b90604051906040820192604083528151809452606083019160608560051b850101926020809201906000905b8782106113ad575050508380955001520390f35b90919483806113e8600193605f198b8203018652895190836113d88351604084526040840190611f41565b9201519084818403910152611eda565b9701920192019091611399565b346102565761140c61140636611eb0565b916130da565b909160405191604083019360408452805180955260609283850193808760051b870101946020809401926000925b89841061144d5788808989898301520390f35b90919293968580611522600193605f198d82030188528b5190836113d8835160408452888060a01b038082511660408601528084830151168b8601528060408301511660809081870152818c8401519160a09283890152840151169060c091828801528301518d8701528201511661010090818601528b8201519061012091828701528201519061014091828701528201519061016091828701528201511515906101809182870152820151906101a09182870152820151916101c092838701520151906101e085015261020084019061197d565b9901940194019293919061143a565b346102565760a03660031901126102565761154a611909565b6024356001600160401b03811161025657611569903690600401611e69565b6001600160a01b0360643581811693909290848403610256576040516301ffc9a760e01b81526306cc15a560e11b6004820152602095918416918682602481865afa91821561046e5760009261172c575b5081611722575b501561047a578460049160405192838092633f4a2d2760e01b82525afa801561046e57859261161692600092611703575b5060405194858094819363af9a2aa760e01b8352876004840152602483019061197d565b0392165afa801561046e5783916000916116c8575b50604051630500ad0b60e41b81526001600160a01b03918216600482015292166024830152608480356044808501919091523560648401528290819081015b03817318f61d94ab3B2d8BCdc2cc70968503A447cc31cC5af490811561046e5760009161169b575b50604051908152f35b90508181813d83116116c1575b6116b28183611e2d565b81010312610256575182611692565b503d6116a8565b82819392503d83116116fc575b6116df8183611e2d565b810103126102565761166a916116f5849261224f565b909261162b565b503d6116d5565b61171b919250843d861161098d5761097e8183611e2d565b90876115f2565b90501515866115c1565b9091508681813d831161175c575b6117448183611e2d565b810103126102565761175590612242565b90876115ba565b503d61173a565b34610256576060366003190112610256576104d3611798611782611909565b61178a61191f565b611792611935565b9161451d565b6040519182916020835260208301906119f3565b34610256576080366003190112610256576117c5611909565b6117cd61191f565b906117d6611935565b906117df61194b565b6040516301ffc9a760e01b81526313e9760960e01b60048201526001600160a01b03909216929091602081602481875afa90811561046e5760009161187d575b501561047a5760006004936040519485809263f9776bcb60e01b82525afa93841561046e576104d394610bd99460009161185a575b506152ca565b61187791503d806000833e61186f8183611e2d565b81019061301e565b86611854565b90506020813d82116118ae575b8161189760209383611e2d565b81010312610256576118a890612242565b8561181f565b3d915061188a565b34610256576020366003190112610256576004359063ffffffff60e01b821680920361025657602091631a85d68360e01b81149081156118f8575b5015158152f35b6301ffc9a760e01b149050836118f1565b600435906001600160a01b038216820361025657565b602435906001600160a01b038216820361025657565b604435906001600160a01b038216820361025657565b60643590811515820361025657565b60005b83811061196d5750506000910152565b818101518382015260200161195d565b906020916119968151809281855285808601910161195a565b601f01601f1916010190565b9060018060a01b0382511681526080806119e06119ce602086015160a0602087015260a086019061197d565b6040860151858203604087015261197d565b9360608101516060850152015191015290565b90611a3990602080611a0e855160a0855260a08501906119a2565b9401519101906060809180518452602081015115156020850152604081015160408501520151910152565b90565b565b908060018060a01b03928381511682526020611a7c611a6a82840151610520808588015286019061197d565b604084015185820360408701526119a2565b946001600160801b039586606085015116606086015286608085015116608086015260a084015160a086015260c084015160c086015260e084015160e08601526101009081850151828701526101209081860151918782039088015281518082528582019186808360051b8301019401926000915b838310611c855750505050509085929161014090818701519185820390860152611b1a916119a2565b61016090818701519185820390860152611b33916119a2565b9761018080870151908501526101a080870151908501526101c08087015193845116908501528483015115156101e090818601528160408501516102009081880152606086015190610220918289015260808701519361024094858a015260a08801519661026097888b015260c089015198610280998a8c015260e08101516102a0809c015201516102c0809d01528a01516102e08d01611bfb9180518252602080820151818401526040918201518051838501529081015160608401520151608090910152565b89015180516103808d015260208101516103a08d0152604001516103c08c0152880151166103e08a0152860151166104008801528401511515610420870152830151151561044086015282015190815161046086015281015161048085015260408101516104a085015260608101516104c0850152608001516104e0840152015190610500015290565b919395969780809a9b50611ca76001939597601f1986820301875289516119f3565b97019301930190928a9998979695949293611af1565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310611cf15750505050505090565b9091929394958480611d0f600193603f198682030187528a51611a3e565b9801930193019194939290611ce1565b606081019081106001600160401b03821117611d3a57604052565b634e487b7160e01b600052604160045260246000fd5b61018081019081106001600160401b03821117611d3a57604052565b604081019081106001600160401b03821117611d3a57604052565b60a081019081106001600160401b03821117611d3a57604052565b6102e081019081106001600160401b03821117611d3a57604052565b61012081019081106001600160401b03821117611d3a57604052565b61014081019081106001600160401b03821117611d3a57604052565b6101c081019081106001600160401b03821117611d3a57604052565b608081019081106001600160401b03821117611d3a57604052565b90601f801991011681019081106001600160401b03821117611d3a57604052565b6001600160401b038111611d3a57601f01601f191660200190565b81601f8201121561025657803590611e8082611e4e565b92611e8e6040519485611e2d565b8284526020838301011161025657816000926020809301838601378301015290565b6060906003190112610256576004356001600160a01b038116810361025657906024359060443590565b90815180825260208092019182818360051b85019501936000915b848310611f055750505050505090565b9091929394958480611f318385600195038752828b51805183520151906040908185820152019061197d565b9801930193019194939290611ef5565b90611a3991805182526020810151602083015260018060a01b03806040830151166040840152806060830151166060840152608082015160808401528060a08301511660a084015260c082015160c084015260e08201511660e083015261010080820151908301526101208082015190830152610140808201519083015261016080910151916101808092820152019061197d565b9181601f84011215610256578235916001600160401b038311610256576020808501948460051b01011161025657565b6060600319820112610256576004356001600160a01b0381168103610256579160243591604435906001600160401b0382116102565761204891600401611fd6565b9091565b908151815260209161206b838201516101408086860152840190611a3e565b60408281015184830385830152908201949091906000825b600282106120da575050505050606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151908301526101208091015191015290565b909192939683806120f383886001950386528b516119a2565b99019201920190939291612083565b6080906003190112610256576001600160a01b039060043582811681036102565791602435908116810361025657906044359060643590565b929190604084016040855281518091526060850160608260051b870101916020809401916000905b85838310612175575050505050930152565b8061219060019394959697605f198d8203018652885161204c565b960192019201909291612163565b6001600160401b038111611d3a5760051b60200190565b81601f82011215610256578035916121cc8361219e565b926121da6040519485611e2d565b808452602092838086019260051b820101928311610256578301905b828210612204575050505090565b81356001600160a01b03811681036102565781529083019083016121f6565b6040519061223082611d1f565b60006040838281528260208201520152565b5190811515820361025657565b51906001600160a01b038216820361025657565b9092919261227081611e4e565b9161227e6040519384611e2d565b829482845282820111610256576020611a3c93019061195a565b9080601f83011215610256578151611a3992602001612263565b6020818303126102565780516001600160401b039182821161025657016101808184031261025657604051926122e784611d50565b81518452602082015160208501526123016040830161224f565b60408501526123126060830161224f565b60608501526080820151608085015261232d60a0830161224f565b60a085015260c082015160c085015261234860e0830161224f565b60e08501526101008083015190850152610120808301519085015261014080830151908501526101609283830151908111610256576123879201612298565b9082015290565b9060209081838203126102565782516001600160401b039384821161025657019080601f830112156102565781516123c58161219e565b946040906123d582519788611e2d565b828752858088019360051b8601019484861161025657868101935b86851061240257505050505050505090565b84518381116102565782019084601f1983890301126102565784519061242782611d6c565b89830151825285830151918583116102565761244a898c80969581960101612298565b838201528152019401936123f0565b60001981146108d35760010190565b9081602091031261025657516001600160a01b03811681036102565790565b805182101561249b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b90816040910312610256576020604051916124cb83611d6c565b805183520151602082015290565b9035601e19823603018112156102565701602081359101916001600160401b03821161025657813603831361025657565b908060209392818452848401376000828201840152601f01601f1916010190565b9035603e1982360301811215610256570190565b9061255590949294606083526060830190611f41565b9360208201526040818503910152808352602083019260208260051b82010193836000925b84841061258a5750505050505090565b909192939495601f198282030184526125a3878461252b565b6040820190803583526020810135601e19823603018112156102565701916001600160401b0383351161025657823560051b91823603602085011361025657604060208395949301528235905260608084019184010192602083019260005b81358110612625575050505050602080600192980194019401929493919061257a565b909192939460208061267e600193605f198882030189526126488a84890161252b565b9061267161266761265984806124d9565b60408552604085019161250a565b92858101906124d9565b918581850391015261250a565b9701950193929101612602565b919082018092116108d357565b919082039182116108d357565b604080516301ffc9a760e01b81526306cc15a560e11b600480830191909152600096958794602494936020936001600160a01b03909216929084818881875afa90811561293357889161294c575b501561293d578451630d96c0f960e21b81529084828481875afa918215612933578892612900575b50818910156128f0578161272f828b61268b565b106128db57508761273f91612698565b945b61274a8661219e565b976127578651998a611e2d565b868952601f196127668861219e565b0185895b8a8c8483106128685750925050505b87811061278d575050505050505050509190565b612797818361268b565b8751906344ff7dc360e01b82528582015289818581895afa908115612844578a9161284e575b506127c8828c612487565b51526127d4818b612487565b515151875190631d40683560e31b82528582015289818581895afa908115612844579087838d61281b95948e8095612820575b50509061281391612487565b510152612459565b612779565b612813939295509061283b913d8091833e61121f8183611e2d565b9390918e612807565b88513d8c823e3d90fd5b61286291503d808c833e610aca8183611e2d565b386127bd565b8284918c519361287785611d6c565b8d51818f61288483611d50565b818352818784015282015260609180838301528060808301528060a08301528060c08301528060e083015280610100830152806101208301526101408201528161016082015285528385015201015201869061276a565b80969a506128ea91508861268b565b98612741565b5050505050505092505060609190565b9091508481813d831161292c575b6129188183611e2d565b810103126129285751903861271b565b8780fd5b503d61290e565b86513d8a823e3d90fd5b50835163044aa57560e41b8152fd5b90508481813d831161297a575b6129638183611e2d565b810103126129285761297490612242565b386126f3565b503d612959565b6040519061298e82611d87565b600060808382815260606020820152606060408201528260608201520152565b604051906129bb82611d1f565b81600081526000602082015260406129d1612223565b910152565b604051906129e382611d87565b60006080838281528260208201528260408201528260608201520152565b60405190612a0e82611da2565b6000808352606060208401526102c083612a26612981565b60408201528260608201528260808201528260a08201528260c08201528260e082015261010083818301526060610120830152612a61612981565b610140830152612a6f612981565b61016083015283610180830152836101a08301528360405191612a9183611dbe565b8183528160208401528160408401528160608401528160808401528160a08401528160c08401528160e08401528201526101c0820152612acf6129ae565b6101e0820152612add612223565b61020082015282610220820152826102408201528261026082015282610280820152612b076129d6565b6102a08201520152565b604090815191612b2083611dda565b82600091828252612b2f612a01565b9060209182840152805191612b4383611d6c565b845b828110612b805750509082916101209301528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b8190612b8a612981565b8186015201612b45565b90612b9e8261219e565b612bab6040519182611e2d565b8281528092612bbc601f199161219e565b019060005b828110612bcd57505050565b602090612bd8612b11565b82828501015201612bc1565b604080516301ffc9a760e01b81526306cc15a560e11b600480830191909152600097969293928892602092916001600160a01b03808716929091908581602481875afa908115612e23578791612dea575b5080612ddf575b15612dcf57875163183ea23960e21b8152918916848301528482602481865afa918215612dc5578692612d92575b50818a1015612d815781612c7e828c61268b565b10612d6c575088612c8e91612698565b965b612c9988612b94565b98855b898110612cb157505050505050505050509190565b8086612cc0612cf1938561268b565b8b5163d64470e960e01b81526001600160a01b03871689820190815260208101929092529384918291604090910190565b0381885afa918215612d62578c908993612d2e575b50612d1e82612d18612d29958d6137f2565b92612487565b52610234818d612487565b612c9c565b80929350888092503d8311612d5b575b612d488183611e2d565b810103126129285751908b612d1e612d06565b503d612d3e565b8a513d8a823e3d90fd5b80989b50612d7b91508961268b565b99612c90565b505050505095505050505060609190565b9091508481813d8311612dbe575b612daa8183611e2d565b81010312612dba57519038612c6a565b8580fd5b503d612da0565b88513d88823e3d90fd5b875163044aa57560e41b81528490fd5b508189161515612c3c565b90508581813d8311612e1c575b612e018183611e2d565b81010312612e1857612e1290612242565b38612c35565b8680fd5b503d612df7565b89513d89823e3d90fd5b604080516301ffc9a760e01b81526306cc15a560e11b600480830191909152600097969293928892602092916001600160a01b03808716929091908581602481875afa908115612e23578791612fe9575b5080612fde575b15612dcf578751636bb1c52360e11b8152918916848301528482602481865afa918215612dc5578692612faf575b50818a1015612d815781612ec7828c61268b565b10612f9a575088612ed791612698565b965b612ee288612b94565b98855b898110612efa57505050505050505050509190565b8086612f09612f3a938561268b565b8b51632906d3a960e21b81526001600160a01b03871689820190815260208101929092529384918291604090910190565b0381885afa918215612d62578c908993612f66575b50612d1e82612d18612f61958d6137f2565b612ee5565b80929350888092503d8311612f93575b612f808183611e2d565b810103126129285751908b612d1e612f4f565b503d612f76565b80989b50612fa991508961268b565b99612ed9565b9091508481813d8311612fd7575b612fc78183611e2d565b81010312612dba57519038612eb3565b503d612fbd565b508189161515612e85565b90508581813d8311613017575b6130008183611e2d565b81010312612e185761301190612242565b38612e7e565b503d612ff6565b6020908181840312610256578051906001600160401b03821161025657019180601f840112156102565782516130538161219e565b936130616040519586611e2d565b818552838086019260051b820101928311610256578301905b828210613088575050505090565b8380916130948461224f565b81520191019061307a565b919081101561249b5760051b0190565b356001600160a01b03811681036102565790565b519069ffffffffffffffffffff8216820361025657565b604080516301ffc9a760e01b81526332ed0a6160e11b600480830191909152600096958794602494936020936001600160a01b03909216929084818881875afa908115612933578891613437575b501561293d5784516301f0b85b60e21b81529084828481875afa918215612933578892613408575b50818910156128f05781613164828b61268b565b106133f357508761317491612698565b945b61317f8661219e565b9761318c8651998a611e2d565b868952601f1961319b8861219e565b0185895b8a8c8483106133725750925050505b8781106131c2575050505050505050509190565b6131cc818361268b565b87519063dabe8a7160e01b82528582015289818581895afa908115612844578a91613250575b506131fd828c612487565b515261010061320c828c612487565b51510151875190635973af3960e01b82528582015289818581895afa908115612844579087838d61324b95948e80956128205750509061281391612487565b6131ae565b90503d808b833e6132618183611e2d565b8101878282031261336e5781516001600160401b039283821161336a5701906101c0828203126133665789519261329784611df6565b6132a08361224f565b84526132ad8a840161224f565b8a8501526132bc8b840161224f565b8b8501526060808401519085015260806132d781850161224f565b9085015260a0808401519085015260c06132f281850161224f565b9085015260e0808401519085015261010080840151908501526101208084015190850152610140613324818501612242565b90850152610160808401519085015261018080840151908501526101a0928381015191821161336257613358929101612298565b90820152386131f2565b8d80fd5b8b80fd5b8c80fd5b8a80fd5b8284918c519361338185611d6c565b8d51818f61338e83611df6565b818352818784015282015260609180838301528060808301528060a08301528060c08301528060e083015280610100830152806101208301528061014083015280610160830152610180820152816101a082015285528385015201015201869061319f565b80969a5061340291508861268b565b98613176565b9091508481813d8311613430575b6134208183611e2d565b8101031261292857519038613150565b503d613416565b90508481813d8311613465575b61344e8183611e2d565b810103126129285761345f90612242565b38613128565b503d613444565b604080516301ffc9a760e01b8082526306cc15a560e11b6004808401919091526001600160a01b03948516979395602095936024939190878186818e5afa908115613784576000916137bd575b50156137ad57875163eb02c30160e01b815283810182905293919060008584818e5afa94851561378457908b93929160009661378f575b50600090838b5180968193631d40683560e31b8352898301525afa92831561378457600093613769575b50825115613759578851600061352f82611d6c565b808252898201529a60005b8451811015613745578a51633f4a2d2760e01b81528a818881865afa9081156136de578991868e8e93600093613726575b50613576868b612487565b5151905194859384926352ff146960e11b84528d840152165afa9081156136de578991868e8e936000936136e9575b5051878152632b49a35560e11b8b8201529384928391165afa9081156136de576000916136a9575b506135e0576135db90612459565b61353a565b899a9b9c5061362c935061361092508991506135ff9060009695612487565b5101518880825183010191016124b1565b519589519a8b978896879563683b00d760e01b8752860161253f565b03927f0000000000000000000000000000000000000000000000000000000000000000165af191821561369f5750600091613668575b50905090565b82813d8311613698575b61367c8183611e2d565b81010312613695575061368e90612242565b8038613662565b80fd5b503d613672565b513d6000823e3d90fd5b908b82813d83116136d7575b6136bf8183611e2d565b8101031261369557506136d190612242565b386135cd565b503d6136b5565b8c513d6000823e3d90fd5b945050509082813d831161371f575b6137028183611e2d565b8101031261369557508a8c866137188c9461224f565b91386135a5565b503d6136f8565b61373e919350843d861161098d5761097e8183611e2d565b913861356b565b505050505060009061362c86979899613610565b5050505050505050505050600090565b61377d91933d8091833e61121f8183611e2d565b913861351a565b89513d6000823e3d90fd5b6137a690600092973d8091833e610aca8183611e2d565b95906134f0565b875163044aa57560e41b81528390fd5b908882813d83116137eb575b6137d38183611e2d565b8101031261369557506137e590612242565b386134b9565b503d6137c9565b906137fb612b11565b506040516301ffc9a760e01b81526306cc15a560e11b60048083019190915292906020816024816001600160a01b0386165afa90811561046e57600091613c2c575b5015613c1b5760405163eb02c30160e01b81528381018390526000816024816001600160a01b0386165afa90811561046e57600091613c02575b50604081810180519151632f60fad360e21b815286810186905290936001600160a01b0392831615926020908390602490829085165afa91821561046e57600092613bce575b506138c6612a01565b948315613ba8575b50604051631d40683560e31b81528781018790526000816024816001600160a01b0386165afa90811561046e57600091613b8f575b50604051600061391282611d6c565b80825260208201529760005b8251811015613b8157604051633f4a2d2760e01b815260208184816001600160a01b0389165afa90811561046e57600091613b62575b5060206139618386612487565b51516040516352ff146960e11b81528581019190915291829060249082906001600160a01b03165afa90811561046e57600091613b23575b506040516301ffc9a760e01b8152632b49a35560e11b8482015290602090829060249082906001600160a01b03165afa90811561046e57600091613ae9575b5080613ad1575b6139f1576139ec90612459565b61391e565b613a099394959697989950610f6a9150602092612487565b613a7385519760405195613a1c87611d6c565b15613ac757606087015160e0880151613a41916001600160a01b039182169116613fd6565b865260a087015160e0880151613a63916001600160a01b039182169116613fd6565b602087015260c087015193615677565b602082015191519260808701519561012080980151986040519a613a968c611dda565b8b5260208b015260408a01526060890152608088015260a087015260c086015260e085015261010084015282015290565b6040880151613a41565b506020613ade8285612487565b5101515115156139df565b906020823d602011613b1b575b81613b0360209383611e2d565b810103126136955750613b1590612242565b386139d8565b3d9150613af6565b906020823d602011613b5a575b81613b3d60209383611e2d565b8101031261369557506020613b5360249261224f565b9150613999565b3d9150613b30565b613b7b915060203d60201161098d5761097e8183611e2d565b38613954565b505050909192939495613a09565b613ba2913d8091833e61121f8183611e2d565b38613903565b5160e0850151919550613bc7916001600160a01b03908116911661460e565b93386138ce565b90916020823d602011613bfa575b81613be960209383611e2d565b8101031261369557505190386138bd565b3d9150613bdc565b613c15913d8091833e610aca8183611e2d565b38613877565b60405163044aa57560e41b81528390fd5b906020823d602011613c5e575b81613c4660209383611e2d565b810103126136955750613c5890612242565b3861383d565b3d9150613c39565b604080516301ffc9a760e01b8082526306cc15a560e11b6004808401919091526001600160a01b0394851695939460209492939092602491868184818c5afa908115613f3557600091613f6b575b5015613f5b57865163eb02c30160e01b81528381018290529460008684818c5afa958615613f3557600096613f40575b50875191631d40683560e31b83528483015260008284818c5afa918215613f3557600092613f1a575b50815115613f0c5787516000613d2282611d6c565b808252888201529860005b8351811015613ef8578951633f4a2d2760e01b815289818881865afa908115613e985788918b91600091613edb575b50878d613d69868a612487565b5151905194859384926352ff146960e11b84528d840152165afa908115613e985788918b91600091613ea3575b50878d5180948193898352632b49a35560e11b8d840152165afa908115613e9857600091613e63575b50613dd257613dcd90612459565b613d2d565b613e249a5089949250888098979694819350613e0292613df191612487565b5101518280825183010191016124b1565b01518351998a9687958695631ade716160e31b87528601526044850190611f41565b9183015203917f0000000000000000000000000000000000000000000000000000000000000000165afa91821561369f57506000916136685750905090565b908a82813d8311613e91575b613e798183611e2d565b810103126136955750613e8b90612242565b38613dbf565b503d613e6f565b8b513d6000823e3d90fd5b92509082813d8111613ed4575b613eba8183611e2d565b81010312613695575089613ece899261224f565b38613d96565b503d613eb0565b613ef29150823d841161098d5761097e8183611e2d565b38613d5c565b5050505084939291869185613e2499613e02565b505050505050505050600090565b613f2e91923d8091833e61121f8183611e2d565b9038613d0d565b88513d6000823e3d90fd5b613f5491963d8091833e610aca8183611e2d565b9438613ce4565b865163044aa57560e41b81528390fd5b908782813d8311613f99575b613f818183611e2d565b810103126136955750613f9390612242565b38613cb4565b503d613f77565b602081830312610256578051906001600160401b03821161025657019080601f83011215610256578151611a3992602001612263565b9190613fe0612981565b506001600160a01b0392831690811561047a57604080516395d89b4160e01b8152600095918682600481885afa9182156141a1578792614185575b5080516306fdde0360e01b8152918783600481895afa92831561417b578893614157575b5081519363313ce56760e01b855260209586866004818b5afa95861561414d578a96614110575b50168015614103578251906370a0823160e01b8252600482015285816024818a5afa9081156140f95789916140c2575b5060ff9596979850955b8251976140ac89611d87565b8852870152850152166060830152608082015290565b90508581813d83116140f2575b6140d98183611e2d565b810103126140ee5751969750879660ff614096565b8880fd5b503d6140cf565b83513d8b823e3d90fd5b5060ff94959697956140a0565b9095508681813d8311614146575b6141288183611e2d565b81010312614142575160ff81168103614142579438614066565b8980fd5b503d61411e565b84513d8c823e3d90fd5b6141749193503d808a833e61416c8183611e2d565b810190613fa0565b913861403f565b82513d8a823e3d90fd5b61419a9192503d8089833e61416c8183611e2d565b903861401b565b81513d89823e3d90fd5b604051906141b882611e12565b60006060838281528260208201528260408201520152565b91906141da6141ab565b50604080516301ffc9a760e01b815263cad9e0d360e01b6004808301919091526001600160a01b039586169291602091908281602481885afa9081156143ec576000916144c6575b50806144bb575b156144ad578251631e46e62f60e21b815282818381885afa9081156143ec578891849160009161446d575b50838651809b8193632630c12f60e01b8352165afa9788156143ec5760009861444e575b50835163011ddaef60e71b815283818481895afa9081156144435796809899838087946142e29a9b600091614426575b508951634858138f60e01b81526001600160a01b039586168982019081529190931694909416602085015290988993849291839160400190565b0392165afa9485156143ec576000956143f7575b50835163a4c1cccb60e01b815296168187018190528387602481895afa9182156143ec5760009788936143a9575b5090602484928651988993849263235f17f560e01b84528301525afa94851561439e5760009561436f575b5082519561435c87611e12565b8652151590850152830152606082015290565b90948282813d8311614397575b6143868183611e2d565b81010312613695575051933861434f565b503d61437c565b83513d6000823e3d90fd5b979092508488813d83116143e5575b6143c28183611e2d565b810103126136955750829060246143dc838a519a01612242565b93919250614324565b503d6143b8565b84513d6000823e3d90fd5b90948382813d831161441f575b61440e8183611e2d565b8101031261369557505193386142f6565b503d614404565b61443d9150863d881161098d5761097e8183611e2d565b386142a8565b85513d6000823e3d90fd5b614466919850833d851161098d5761097e8183611e2d565b9638614278565b8281939294503d83116144a6575b6144858183611e2d565b810103126144a25751908882168203613695575082889138614254565b5080fd5b503d61447b565b825163044aa57560e41b8152fd5b508685161515614229565b908382813d83116144f4575b6144dc8183611e2d565b8101031261369557506144ee90612242565b38614222565b503d6144d2565b6040519061450882611d6c565b81614511612981565b815260206129d16141ab565b919061453561453b9261452e6144fb565b5082613fd6565b926141d0565b6040519161454883611d6c565b8252602082015290565b90918251916145608361219e565b9361456e6040519586611e2d565b838552601f1961457d8561219e565b0160005b8181106145d857505060005b84811061459c57505050505090565b6145d3906145be856001600160a01b036145b68487612487565b51168661451d565b6145c88289612487565b526102348188612487565b61458d565b6020906145e36144fb565b82828a01015201614581565b9081602091031261025657516001600160801b03811681036102565790565b614616612a01565b506040516301ffc9a760e01b815263cad9e0d360e01b60048201526020816024816001600160a01b0386165afa90811561046e576000916150d3575b501561047a57604051637437535960e01b8152916020836004816001600160a01b0386165afa92831561046e5760009361509f575b50604051631f1b131360e31b8152916020836004816001600160a01b0385165afa92831561046e57600493602091600091615082575b506040516318160ddd60e01b815294859182906001600160a01b03165afa92831561046e5760009361504e575b506146f5848461268b565b6000811561504857506b033b2e3c9fd0803ce8000000808502908582048114861517156108d357859082040361091d5781610824614737928260011c9061589e565b935b604051630783377560e51b81526000816004816001600160a01b0388165afa90811561046e5761477491869160009161502f575b5085614552565b604051634c66358f60e11b815295610120876004816001600160a01b0389165afa96871561046e57600097614f7e575b506040516307c0e8c160e31b81526020816004816001600160a01b038a165afa90811561046e57600091614f3b575b5060405163ddce491760e01b81526001600160a01b038781166004830152909160a09183916024918391165afa801561046e576000608052614ecb575b506040516306fdde0360e01b81526000816004816001600160a01b038a165afa801561046e57600061010052614ead575b5060405163011ddaef60e71b81526020816004816001600160a01b038a165afa90811561046e57614885918891600091614e4b575b506001600160a01b0316613fd6565b60a052604051637f5d87bf60e11b81526020816004816001600160a01b038a165afa801561046e5760006101c052614e8b575b5060405163905e383760e01b8152976020896004816001600160a01b038a165afa98891561046e57600099614e6a575b506040516358a06f0760e01b81526020816004816001600160a01b038b165afa90811561046e5761492b918991600091614e4b57506001600160a01b0316613fd6565b604051631f1b131360e31b81529094906020816004816001600160a01b038c165afa90811561046e57614970918a91600091614e4b57506001600160a01b0316613fd6565b60405163280188b760e21b8152979096906020896004816001600160a01b0385165afa98891561046e57600099614e17575b5060405163a223f82160e01b81529960208b6004816001600160a01b0386165afa9a8b1561046e5760009b614de3575b508b516040516306fdde0360e01b815291906001600160a01b03908116906000908490600490829088165afa90811561046e57614a1793600092614dc8575b5061510d565b8b516040516306fdde0360e01b8152919d91906001600160a01b03908116906000908390600490829088165afa90811561046e57614a5d92600092614dad575b50615210565b60c052604051635ea24eef60e11b81526020816004816001600160a01b0387165afa801561046e5760006101e052614d8b575b506040516327c37b2560e01b81526020816004816001600160a01b0387165afa801561046e57600061022052614d59575b50604051630c71782360e41b81526020816004816001600160a01b0387165afa806101a0521561046e576000610200526101a051614d16575b50604051610160818152634ad09aa560e01b909152516020906004816001600160a01b0386165afa80610140521561046e5760006102405261014051614cce575b6040516101808181526371a6cab760e01b909152516020906004816001600160a01b0386165afa80610120521561046e5760006102605261012051614c8b575b6001600160801b0391614b936040518060e052611da2565b60018060a01b031660e0515261010051602060e051015260a051604060e0510152816101c05116606060e051015216608060e051015260a060e051015260c060e051015260e08051015261010060e051015261012060e051015261014060e051015261016060e051015261018060e05101526101a060e05101526101c060e05101526101e060e051015260c05161020060e05101526001600160801b036101e0511661022060e05101526001600160801b03610220511661024060e051015261020051151561026060e051015261024051151561028060e05101526080516102a060e0510152610260516102c060e051015260e05190565b6020913d602011614cc6575b614ca48361018051611e2d565b602061018051809481010312614cbf57915161026052614b7b565b6102605180fd5b3d9250614c97565b60203d602011614d0f575b614ce68161016051611e2d565b602061016051809281010312614d0857614cff90612242565b61024052614b3b565b6102405180fd5b503d614cd9565b6020813d602011614d51575b81614d2f60209383611e2d565b81010312614d4a57614d4090612242565b6102005238614afa565b6102005180fd5b3d9150614d22565b614d7a9060203d602011614d84575b614d728183611e2d565b8101906145ef565b6102205238614ac1565b503d614d68565b614da39060203d602011614d8457614d728183611e2d565b6101e05238614a90565b614dc191923d8091833e61416c8183611e2d565b9038614a57565b614ddc91923d8091833e61416c8183611e2d565b9038614a11565b909a6020823d602011614e0f575b81614dfe60209383611e2d565b8101031261369557505199386149d2565b3d9150614df1565b90986020823d602011614e43575b81614e3260209383611e2d565b8101031261369557505197386149a2565b3d9150614e25565b614e64915060203d60201161098d5761097e8183611e2d565b38614876565b614e8491995060203d602011614d8457614d728183611e2d565b97386148e8565b614ea39060203d602011614d8457614d728183611e2d565b6101c052386148b8565b614ec1903d806000833e61416c8183611e2d565b6101005238614841565b60a0813d60a011614f33575b81614ee460a09383611e2d565b81010312614f2d57608060405191614efb83611d87565b805183526020810151602084015260408101516040840152606081015160608401520151608082015260805238614810565b60805180fd5b3d9150614ed7565b6020813d602011614f76575b81614f5460209383611e2d565b810103126144a25751906001600160a01b0382168203613695575060a06147d3565b3d9150614f47565b610120979197813d61012011615027575b81614f9d6101209383611e2d565b810103126144a25760405191614fb283611dbe565b8151906001600160a01b038216820361369557508252614fd460208201612242565b602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100809101519082015295386147a4565b3d9150614f8f565b615042913d8091833e61186f8183611e2d565b3861476d565b93614739565b90926020823d60201161507a575b8161506960209383611e2d565b8101031261369557505191386146ea565b3d915061505c565b6150999150823d841161098d5761097e8183611e2d565b386146bd565b90926020823d6020116150cb575b816150ba60209383611e2d565b810103126136955750519138614687565b3d91506150ad565b906020823d602011615105575b816150ed60209383611e2d565b8101031261369557506150ff90612242565b38614652565b3d91506150e0565b916151166129ae565b5061511f6129ae565b926001600160a01b039081169081156152095760a09161515f6040958651958694859384936311ddedf160e01b855260606004860152606485019061197d565b9116602483015242604483015203915afa80156151fe5760009283928492615190575b508401526020830152815290565b925090508160a03d81116151f7575b6151a98183611e2d565b8101039260a08412613695578251906060602085015195603f190112613695575060808251936151d885611d1f565b8381015185526060810151602086015201518284015292919038615182565b503d61519f565b82513d6000823e3d90fd5b5050505090565b90615219612223565b50615222612223565b916001600160a01b031680156152c55761525c91606091604051808095819463230fa49560e21b835260206004840152602483019061197d565b03915afa90811561046e5760009182918391615283575b5060408401526020830152815290565b929150506060823d82116152bd575b8161529f60609383611e2d565b81010312613695575080516040602083015192015190919038615273565b3d9150615292565b505090565b919060018060a01b03809216926040948551946301ffc9a760e01b865260046306cc15a560e11b81880152602060249781818a81875afa90811561566c57600091615637575b501561562857600095865b86518110156155a6578861532f8289612487565b518c51633f4a2d2760e01b81529116848287818a5afa9182156154db57600092615587575b508c516306fdde0360e01b8152906000828881845afa918215615561578c8f8f9260009561556c575b50519485809263481d98fb60e11b82528a8c830152816153a3608098899783019061197d565b0392165afa928315615561576000928394615519575b505088928915615426575b50508161540d575b506153e0575b6153db90612459565b61531b565b966154056153db918a6153f38b8b612487565b51166153ff828b612487565b52612459565b9790506153d2565b9050898061541b848b612487565b5116911614386153cc565b90919250600381101561550557858e926002899314938461544f575b50505050159038806153c4565b516358a06f0760e01b815293509091839182905afa9081156154db578b918d8f88936000936154e6575b50516370a0823160e01b81528785168a8201529384928391165afa9081156154db576000916154ae575b50158585388f615442565b908582813d83116154d4575b6154c48183611e2d565b81010312613695575051386154a3565b503d6154ba565b8d513d6000823e3d90fd5b6154fe919350843d861161098d5761097e8183611e2d565b9138615479565b8c602188634e487b7160e01b600052526000fd5b9080929450813d831161555a575b6155318183611e2d565b810103126144a257856155438261224f565b9101519160038310156136955750909138806153b9565b503d615527565b8e513d6000823e3d90fd5b61558091953d8091833e61416c8183611e2d565b933861537d565b61559f919250853d871161098d5761097e8183611e2d565b9038615354565b5096959750925050506155c46155bb8661219e565b96519687611e2d565b848652601f196155d38661219e565b0160005b8181106156125750505060005b8481106155f357505050505090565b806145be858561560661560d9587612487565b511661460e565b6155e4565b829061561c612a01565b82828b010152016155d7565b50875163044aa57560e41b8152fd5b908282813d8311615665575b61564d8183611e2d565b81010312613695575061565f90612242565b38615310565b503d615643565b8a513d6000823e3d90fd5b604080516301ffc9a760e01b81526306cc15a560e11b60048201526001600160a01b03928316939192602092918381602481895afa9081156144435760009161582d575b501561581c57835163eb02c30160e01b81526004810183905291600083602481895afa92831561444357600093615801575b5083830151156157f65783906024865180988193632f60fad360e21b835260048301525afa9485156143ec576000956157c7575b508382015160a083015160c0909301518551630500ad0b60e41b81526001600160a01b039284168316600482015293909216166024830152604482015260648101939093528083806084810103817318f61d94ab3B2d8BCdc2cc70968503A447cc31cC5af491821561369f575060009161579b5750905090565b82813d83116157c0575b6157af8183611e2d565b810103126136955750518038613662565b503d6157a5565b90948382813d83116157ef575b6157de8183611e2d565b810103126136955750519382615721565b503d6157d4565b505050505050600090565b61581591933d8091833e610aca8183611e2d565b91386156ed565b835163044aa57560e41b8152600490fd5b908482813d831161585b575b6158438183611e2d565b81010312613695575061585590612242565b386156bb565b503d615839565b811561586c570490565b634e487b7160e01b600052601260045260246000fd5b906706f05b59d3b200008201918281116108d35782106108c157565b91906158aa908361268b565b9182106108c157565b6000929180159182156158ca575b50501561091d57565b808202945091508115828504821417156108d3576158e89084615862565b1438806158c156fea264697066735822122065afa564969e5a9698e65677a4c96b77281bf453cc5341f295b054f2d93bd2b964736f6c63430008120033",
  "deployedBytecode": "0x61028080604052600436101561001457600080fd5b60e0600035811c91826301ffc9a7146118b657508163073f468c146117ac57816314fdc0731461176357816336ca926314611531578163429bd646146113f55750806344ec1614146113565780634acefed4146113155780634afdb64c146112f95780635927c358146112c8578063679bfb5b146112835780636a869ebb14610db75780636c5a9cd114610d7b5780638ddbcc6214610d615780639e09d40e14610ce6578063a8d028b514610ca5578063b23c434014610c40578063b29d57d814610be5578063b3e1d9f214610b84578063bdf4cd1814610ad9578063cd04eef414610506578063d030bb25146104d7578063debd310d146104a9578063e10a27a41461025b5763f107f8341461012a57600080fd5b34610256576040366003190112610256576004356001600160401b0381116102565761015a903690600401611fd6565b9061016361191f565b61016c8361219e565b9261017a6040519485611e2d565b808452601f196101898261219e565b0160005b81811061023f57505060005b8181106101ff576040805160208082528751818301819052600093600582901b8401810192808b01929185015b8287106101d35785850386f35b9091929382806101ef600193603f198a820301865288516119a2565b96019201960195929190926101c6565b8061021f8461021a61021561023a95878a61309f565b6130af565b613fd6565b6102298288612487565b526102348187612487565b50612459565b610199565b60209061024a612981565b8282890101520161018d565b600080fd5b3461025657602080600319360112610256576004356001600160401b0381116102565761028c903690600401611fd6565b906102968261219e565b916102a46040519384611e2d565b808352601f196102b38261219e565b0160005b81811061048c57505060005b81811061034157505050604051908282018383528151809152836040840192019360005b8281106102f45784840385f35b8551805169ffffffffffffffffffff90811686528184015186850152604080830151908701526060808301519087015260809182015116908501529481019460a0909301926001016102e7565b929391926001600160a01b038061035c61021584868961309f565b161561047a5761037061021583858861309f565b16906040518092633fabe5a360e21b825281600460a09384935afa90811561046e57600090600080600092600095610410575b5061040796506103b3868c612487565b5169ffffffffffffffffffff8095169052886103cf878d612487565b51015260406103de868c612487565b51015260606103ed858b612487565b51015260806103fc848a612487565b510191169052612459565b939291936102c3565b94505050505082813d8311610467575b61042a8183611e2d565b81010312610256578161043f610407936130c3565b858201519060408301519261045b6080606083015192016130c3565b9192939091938b6103a3565b503d610420565b6040513d6000823e3d90fd5b60405163044aa57560e41b8152600490fd5b94809394956104996129d6565b82828901015201949392946102b7565b34610256576104c36104ba36612102565b92919091612be4565b906104d36040519283928361213b565b0390f35b346102565760403660031901126102565760206104fe6104f5611909565b60243590615677565b604051908152f35b34610256576040366003190112610256576004356001600160a01b03811681036102565760405163eb02c30160e01b81526024803560048301529091906000908390816001600160a01b0385165afa91821561046e57600092610ab4575b50604051632630c12f60e01b81526020816004816001600160a01b0386165afa90811561046e576105d891602091600091610a97575b5060a08501516060860151604051631dae49b960e21b81526001600160a01b0392831660048201529116602482015292839190829081906044820190565b03916001600160a01b03165afa90811561046e57600091610a65575b506040516301ddf49360e61b8152916020836004816001600160a01b0385165afa92831561046e57600093610a31575b5060405163084b557b60e21b8152906020826004816001600160a01b0385165afa91821561046e576000926109fb575b5060a0850151606086015160405163a8905dab60e01b81526001600160a01b03928316600482015291166024820152919260208380604481015b03816001600160a01b0386165afa801561046e576000906109c8575b604087810151905163280188b760e21b81529450602090859060049082906001600160a01b03165afa93841561046e57600094610994575b5060a0870151606088015160c0890151604051632630c12f60e01b81526001600160a01b03938416969093919282169160209185916004918391165afa92831561046e57600093610963575b5060405163a3f092a760e01b81526004810196909652602486015260448501526001600160a01b0316606484015260208360848173__$75df3f6366b0557754cd3ba14359105414$__5af492831561046e5760009361092f575b50670de0b6b3a7640000958603908682116108d35786038681116108d3576107b46107b99188936158b3565b615882565b049085038581116108d3578592836107da6107b46107b4946107e0966158b3565b046158b3565b049183018084116108d3576107b46107f99185936158b3565b0490828102928184048114821517156108d35783040361091d57610824610829928260011c9061589e565b615862565b906004602060018060a01b03604084015116604051928380926368d0612f60e01b82525afa801561046e576000906108e9575b61086c91506020830151906158b3565b916b019d971e4fe8401e740000008301928381116108d35783106108c1576108a76080916b033b2e3c9fd0803ce80000006020950490612698565b9101518082116108ba5750604051908152f35b90506104fe565b604051630a77254f60e01b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b506020813d602011610915575b8161090360209383611e2d565b810103126102565761086c905161085c565b3d91506108f6565b604051631550e8b760e01b8152600490fd5b9092506020813d60201161095b575b8161094b60209383611e2d565b8101031261025657519187610788565b3d915061093e565b61098691935060203d60201161098d575b61097e8183611e2d565b810190612468565b918a61072e565b503d610974565b9093506020813d6020116109c0575b816109b060209383611e2d565b81010312610256575192876106e2565b3d91506109a3565b506020833d6020116109f3575b816109e260209383611e2d565b8101031261025657600492516106aa565b3d91506109d5565b91506020823d602011610a29575b81610a1660209383611e2d565b810103126102565761068e915191610654565b3d9150610a09565b9092506020813d602011610a5d575b81610a4d60209383611e2d565b8101031261025657519184610624565b3d9150610a40565b90506020813d602011610a8f575b81610a8060209383611e2d565b810103126102565751836105f4565b3d9150610a73565b610aae9150823d841161098d5761097e8183611e2d565b8561059a565b610ad29192503d806000833e610aca8183611e2d565b8101906122b2565b9082610564565b3461025657606036600319011261025657610af2611909565b602435906001600160401b03821161025657610b15610b239236906004016121b5565b610b1d611935565b91614552565b60405160209182820192808352815180945260408301938160408260051b8601019301916000955b828710610b585785850386f35b909192938280610b74600193603f198a820301865288516119f3565b9601920196019592919092610b4b565b34610256576080366003190112610256576004356001600160401b03811161025657610bd9610bba6104d39236906004016121b5565b610bc261191f565b610bca611935565b90610bd361194b565b926152ca565b60405191829182611cbd565b34610256576040366003190112610256576080610c11610c03611909565b610c0b61191f565b906141d0565b610c3e60405180926060809180518452602081015115156020850152604081015160408501520151910152565bf35b3461025657604036600319011261025657610c59611909565b6024356001600160401b03811161025657606091610c7e610c84923690600401611e69565b90615210565b610c3e60405180926040809180518452602081015160208501520151910152565b34610256576040366003190112610256576104d3610cd2610cc4611909565b610ccc61191f565b9061460e565b604051918291602083526020830190611a3e565b3461025657606036600319011261025657610cff611909565b6024356001600160401b0381116102565760a091610d24610d32923690600401611e69565b610d2c611935565b9161510d565b604080518251815260208084015181830152928201518051828401529283015160608201529101516080820152f35b34610256576104c3610d7236612102565b92919091612e2d565b34610256576040366003190112610256576104d3610da3610d9a611909565b602435906137f2565b60405191829160208352602083019061204c565b3461025657610dc536612006565b9091610dcf612223565b506040516301ffc9a760e01b81526306cc15a560e11b60048201526020816024816001600160a01b0389165afa90811561046e57600091611249575b501561047a5760405163eb02c30160e01b8152600481018290526000816024816001600160a01b0389165afa90811561046e5760009161122e575b50604051631d40683560e31b815260048101839052936000856024816001600160a01b038a165afa94851561046e57600095611209575b5060009485805b82518110156111fa57604051633f4a2d2760e01b81526020816004816001600160a01b038e165afa90811561046e576000916111db575b506020610ec88386612487565b51516040516352ff146960e11b8152600481019190915291829060249082906001600160a01b03165afa90811561046e5760009161119c575b506040516301ffc9a760e01b8152632b49a35560e11b600482015290602090829060249082906001600160a01b03165afa90811561046e57600091611162575b50610f5457610f4f90612459565b610e84565b610f7c939495969750610f6a9150602092612487565b510151602080825183010191016124b1565b805160405163683b00d760e01b815291957f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169360209284928392610fcd92896004860161253f565b03816000865af190811561046e5760009161111e575b50602091826110149296015193604051809581948293631ade716160e31b8452604060048501526044840190611f41565b90602483015203915afa801561046e576000906110e4575b60209150915b60405163e56c926360e01b8152600481019190915293849060249082906001600160a01b03165afa91821561046e576000926110a8575b60609350604080519361107b85611d1f565b15159384815260208101921515835201911515825260405192835251151560208301525115156040820152f35b91506020833d6020116110dc575b816110c360209383611e2d565b81010312610256576110d6606093612242565b91611069565b3d91506110b6565b506020813d602011611116575b816110fe60209383611e2d565b8101031261025657611111602091612242565b61102c565b3d91506110f1565b90506020813d60201161115a575b8161113960209383611e2d565b81010312610256576020918261115161101493612242565b92505091610fe3565b3d915061112c565b90506020813d602011611194575b8161117d60209383611e2d565b810103126102565761118e90612242565b8a610f41565b3d9150611170565b90506020813d6020116111d3575b816111b760209383611e2d565b810103126102565760206111cc60249261224f565b9150610f01565b3d91506111aa565b6111f4915060203d60201161098d5761097e8183611e2d565b8a610ebb565b50959450505050602090611032565b6112279195503d806000833e61121f8183611e2d565b81019061238e565b9386610e7d565b61124391503d806000833e610aca8183611e2d565b85610e46565b90506020813d60201161127b575b8161126460209383611e2d565b810103126102565761127590612242565b85610e0b565b3d9150611257565b34610256576000366003190112610256576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102565760403660031901126102565760206112ef6112e6611909565b60243590613c66565b6040519015158152f35b346102565760206112ef61130c36612006565b9291909161346c565b34610256576040366003190112610256576104d3611342611334611909565b61133c61191f565b90613fd6565b6040519182916020835260208301906119a2565b346102565761136d61136736611eb0565b916126a5565b90604051906040820192604083528151809452606083019160608560051b850101926020809201906000905b8782106113ad575050508380955001520390f35b90919483806113e8600193605f198b8203018652895190836113d88351604084526040840190611f41565b9201519084818403910152611eda565b9701920192019091611399565b346102565761140c61140636611eb0565b916130da565b909160405191604083019360408452805180955260609283850193808760051b870101946020809401926000925b89841061144d5788808989898301520390f35b90919293968580611522600193605f198d82030188528b5190836113d8835160408452888060a01b038082511660408601528084830151168b8601528060408301511660809081870152818c8401519160a09283890152840151169060c091828801528301518d8701528201511661010090818601528b8201519061012091828701528201519061014091828701528201519061016091828701528201511515906101809182870152820151906101a09182870152820151916101c092838701520151906101e085015261020084019061197d565b9901940194019293919061143a565b346102565760a03660031901126102565761154a611909565b6024356001600160401b03811161025657611569903690600401611e69565b6001600160a01b0360643581811693909290848403610256576040516301ffc9a760e01b81526306cc15a560e11b6004820152602095918416918682602481865afa91821561046e5760009261172c575b5081611722575b501561047a578460049160405192838092633f4a2d2760e01b82525afa801561046e57859261161692600092611703575b5060405194858094819363af9a2aa760e01b8352876004840152602483019061197d565b0392165afa801561046e5783916000916116c8575b50604051630500ad0b60e41b81526001600160a01b03918216600482015292166024830152608480356044808501919091523560648401528290819081015b038173__$75df3f6366b0557754cd3ba14359105414$$75df3f6366b0557754cd3ba14359105414$__5af491821561369f575060009161579b5750905090565b82813d83116157c0575b6157af8183611e2d565b810103126136955750518038613662565b503d6157a5565b90948382813d83116157ef575b6157de8183611e2d565b810103126136955750519382615721565b503d6157d4565b505050505050600090565b61581591933d8091833e610aca8183611e2d565b91386156ed565b835163044aa57560e41b8152600490fd5b908482813d831161585b575b6158438183611e2d565b81010312613695575061585590612242565b386156bb565b503d615839565b811561586c570490565b634e487b7160e01b600052601260045260246000fd5b906706f05b59d3b200008201918281116108d35782106108c157565b91906158aa908361268b565b9182106108c157565b6000929180159182156158ca575b50501561091d57565b808202945091508115828504821417156108d3576158e89084615862565b1438806158c156fea264697066735822122065afa564969e5a9698e65677a4c96b77281bf453cc5341f295b054f2d93bd2b964736f6c63430008120033",
  "libraries": {
    "PrimexPricingLibrary": "0x18f61d94ab3B2d8BCdc2cc70968503A447cc31cC",
    "PositionLibrary": "0x1E4c090B2b4B5b1fB9c3e361Cb4B18552148B58f",
    "LimitOrderLibrary": "0xe73e5076bf0145fC5e4dC2B35d87D181026Cb02c",
    "Errors": "0x988288925196F0725268378d0C7c8aA0E50EB423"
  },
  "devdoc": {
    "details": "All functions in this contract are intended to be called off-chain. Do not call functions from other contracts to avoid an out-of-gas error.",
    "kind": "dev",
    "methods": {
      "getAllBucketsFactory(address,address,address,bool)": {
        "params": {
          "_bucketFactory": "The address of the BucketFactory contract.",
          "_positionManager": "The address of the PositionManager contract.",
          "_showDeprecated": "A boolean flag indicating whether to include deprecated buckets in the result.",
          "_trader": "The address of the trader for whom the buckets are retrieved."
        },
        "returns": {
          "_0": "An array of BucketMetaData structs representing the bucket metadata."
        }
      },
      "getArrayOpenPositionDataByBucket(address,address,uint256,uint256)": {
        "params": {
          "_bucket": "The address of the bucket positions are related to",
          "_count": "The number of positions to retrieve.",
          "_cursor": "The cursor value for pagination.",
          "_positionManager": "The address of the PositionManager where the positions is stored"
        }
      },
      "getArrayOpenPositionDataByTrader(address,address,uint256,uint256)": {
        "params": {
          "_count": "The number of positions to retrieve.",
          "_cursor": "The cursor value for pagination.",
          "_positionManager": "The address of the PositionManager where the positions is stored",
          "_trader": "The address, information about all positions of which will be displayed"
        }
      },
      "getAssetMetadata(address,address)": {
        "params": {
          "_asset": "The address of the asset to retrieve metadata for.",
          "_bucket": "The address of the Bucket contract."
        },
        "returns": {
          "_0": "metadata The metadata of the asset within the bucket."
        }
      },
      "getBucket(address,address)": {
        "params": {
          "_bucket": "The address of the Bucket contract.",
          "_trader": "The address of the trader."
        },
        "returns": {
          "_0": "The metadata of the bucket."
        }
      },
      "getBucketsArray(address[],address,address,bool)": {
        "params": {
          "_buckets": "The array of bucket addresses.",
          "_positionManager": "The address of the PositionManager contract.",
          "_showDeprecated": "Flag to determine whether deprecated buckets should be included.",
          "_trader": "The address of the trader."
        },
        "returns": {
          "_0": "An array of `BucketMetaData` objects."
        }
      },
      "getChainlinkLatestRoundData(address[])": {
        "params": {
          "_feeds": "An array of feed addresses."
        },
        "returns": {
          "_0": "res An array of RoundData structs containing the latest round data for each feed."
        }
      },
      "getLMBucketInfo(address,string)": {
        "params": {
          "_bucketName": "The name of the liquidity mining bucket.",
          "liquidityMiningRewardDistributor": "The instance of the LiquidityMiningRewardDistributor contract."
        },
        "returns": {
          "_0": "info The liquidity mining bucket information."
        }
      },
      "getLenderInfo(address,string,address)": {
        "params": {
          "bucketName": "The name of the lending bucket.",
          "liquidityMiningRewardDistributor": "The instance of the LiquidityMiningRewardDistributor contract.",
          "user": "The address of the lender."
        },
        "returns": {
          "_0": "info The lender information."
        }
      },
      "getLimitOrdersWithConditions(address,uint256,uint256)": {
        "params": {
          "_count": "The number of positions to retrieve.",
          "_cursor": "The cursor value for pagination.",
          "_limitOrderManager": "The address of the LimitOrderManager where the order is stored."
        },
        "returns": {
          "limitOrdersWithConditions": "limitOrderWithConditions An array of LimitOrderWithConditions structs representing open positions with conditions.",
          "newCursor": "The new cursor value for pagination."
        }
      },
      "getLiquidationPrice(address,string,uint256,address,uint256)": {
        "details": "The liquidation price is the price at which a position can be liquidated (i.e., its collateral can cover the borrowed amount).",
        "params": {
          "_borrowedAmount": "The amount borrowed in the position.",
          "_bucket": "The name of the bucket associated with the position.",
          "_positionAmount": "The amount of the asset held in the position.",
          "_positionAsset": "The address of the asset held in the position.",
          "_positionManager": "The address of the PositionManager contract."
        },
        "returns": {
          "_0": "The liquidation price in borrowed asset for the position."
        }
      },
      "getLiquidationPrice(address,uint256)": {
        "params": {
          "_id": "The ID of the position.",
          "_positionManager": "The address of the PositionManager contract."
        },
        "returns": {
          "_0": "The liquidation price in borrowed asset of the position."
        }
      },
      "getOpenPositionData(address,uint256)": {
        "params": {
          "_id": "Position id to show the parameters position",
          "_positionManager": "The address of the PositionManager where the position is stored"
        },
        "returns": {
          "_0": "openPositionData The open position data including various details."
        }
      },
      "getOpenPositionsWithConditions(address,uint256,uint256)": {
        "params": {
          "_count": "The number of positions to retrieve.",
          "_cursor": "The cursor value for pagination.",
          "_positionManager": "The address of the PositionManager where the position is stored."
        },
        "returns": {
          "newCursor": "The new cursor value for pagination.",
          "openPositionsWithConditions": "openPositionsWithConditionsArray An array of OpenPositionWithConditions structs representing open positions with conditions."
        }
      },
      "getPositionMaxDecrease(address,uint256)": {
        "details": "maxDecrease = (1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - pricedrop) * borrowedAssetAmountOut / (feeBuffer * (1 + maintenanceBuffer)) - position.bucket.getNormalizedVariableDebt() * position.scaledDebtAmount",
        "params": {
          "_id": "The ID of the position.",
          "_pm": "The instance of the PositionManager contract."
        },
        "returns": {
          "_0": "The maximum decrease in position value."
        }
      },
      "getPositionStatus(address,uint256,(uint256,(string,bytes)[])[])": {
        "params": {
          "_id": "Position id to show the parameters position",
          "_positionManager": "The address of the PositionManager where the position is stored",
          "_routes": "An array of route objects representing the pricing routes."
        },
        "returns": {
          "_0": "positionStatus The status of the position."
        }
      },
      "getSupportedAsset(address,address,address)": {
        "params": {
          "_asset": "The address of the asset for which information is requested.",
          "_bucket": "The address of the Bucket where the asset is supported.",
          "_trader": "The address of the Trader requesting the information."
        },
        "returns": {
          "_0": "supportedAsset The SupportedAsset struct containing the asset and its properties."
        }
      },
      "getSupportedAssetArray(address,address[],address)": {
        "params": {
          "_assets": "An array of asset addresses.",
          "_bucket": "The address of the Bucket.",
          "_trader": "The address of the trader."
        },
        "returns": {
          "_0": "res An array of SupportedAsset structs representing the supported assets."
        }
      },
      "getTokenArrayMetadata(address[],address)": {
        "params": {
          "_tokens": "The array of token addresses.",
          "_trader": "The address of the trader."
        },
        "returns": {
          "_0": "res The array of token metadata."
        }
      },
      "getTokenMetadata(address,address)": {
        "params": {
          "_token": "The address of the token.",
          "_trader": "The address of the trader."
        },
        "returns": {
          "_0": "metadata The metadata of the token."
        }
      },
      "isStopLossReached(address,uint256)": {
        "params": {
          "_id": "The ID of the position to check.",
          "_positionManager": "The address of the PositionManager contract."
        },
        "returns": {
          "_0": "A boolean indicating whether the stop loss condition is reached."
        }
      },
      "isTakeProfitReached(address,uint256,(uint256,(string,bytes)[])[])": {
        "params": {
          "_id": "The ID of the position to check.",
          "_positionManager": "The address of the PositionManager contract.",
          "_routes": "The routes for pricing the position."
        },
        "returns": {
          "_0": "A boolean indicating whether the take profit condition is reached."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The interface id to check"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAllBucketsFactory(address,address,address,bool)": {
        "notice": "Retrieves all bucket metadata from a bucket factory contract."
      },
      "getArrayOpenPositionDataByBucket(address,address,uint256,uint256)": {
        "notice": "The function shows the parameters for all open positions of the `_trader` with the best dex for each position"
      },
      "getArrayOpenPositionDataByTrader(address,address,uint256,uint256)": {
        "notice": "The function shows the parameters for all open positions of the `_trader` with the best dex for each position"
      },
      "getAssetMetadata(address,address)": {
        "notice": "Retrieves the metadata of an asset within a bucket."
      },
      "getBucket(address,address)": {
        "notice": "Retrieves the metadata of a bucket."
      },
      "getBucketsArray(address[],address,address,bool)": {
        "notice": "Retrieves an array of `BucketMetaData` for the given `_user`."
      },
      "getChainlinkLatestRoundData(address[])": {
        "notice": "Retrieves the latest round data for multiple Chainlink feeds."
      },
      "getLMBucketInfo(address,string)": {
        "notice": "Retrieves information about a liquidity mining bucket."
      },
      "getLenderInfo(address,string,address)": {
        "notice": "Retrieves information about a lender from the LiquidityMiningRewardDistributor contract."
      },
      "getLimitOrdersWithConditions(address,uint256,uint256)": {
        "notice": "The function returns the limit orders with corresponding conditions"
      },
      "getLiquidationPrice(address,string,uint256,address,uint256)": {
        "notice": "Calculates the liquidation price for a given position."
      },
      "getLiquidationPrice(address,uint256)": {
        "notice": "Retrieves the liquidation price of a position."
      },
      "getOpenPositionData(address,uint256)": {
        "notice": "Retrieves open position data based on the provided position manager and id."
      },
      "getOpenPositionsWithConditions(address,uint256,uint256)": {
        "notice": "The function returns the positions with corresponding conditions."
      },
      "getPositionMaxDecrease(address,uint256)": {
        "notice": "Retrieves the maximum decrease in position value for a given position ID."
      },
      "getPositionStatus(address,uint256,(uint256,(string,bytes)[])[])": {
        "notice": "Retrieves the status of a position."
      },
      "getSupportedAsset(address,address,address)": {
        "notice": "Retrieves information about a supported asset."
      },
      "getSupportedAssetArray(address,address[],address)": {
        "notice": "Retrieves an array of SupportedAsset structs for the given bucket, assets, and trader."
      },
      "getTokenArrayMetadata(address[],address)": {
        "notice": "Retrieves the metadata of an array of tokens for a given trader."
      },
      "getTokenMetadata(address,address)": {
        "notice": "Retrieves the metadata of a token for a given trader."
      },
      "isStopLossReached(address,uint256)": {
        "notice": "Checks if the stop loss condition of a position is reached."
      },
      "isTakeProfitReached(address,uint256,(uint256,(string,bytes)[])[])": {
        "notice": "Checks if the take profit condition is reached for a given position."
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}