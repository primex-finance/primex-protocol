{
  "address": "0xdb72b9150F1785a9E362227B1fA86cEC11E8f1eB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "closedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum LimitOrderLibrary.CloseReason",
          "name": "reason",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "bucket",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowedAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "positionAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "CloseLimitOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IBucket",
              "name": "bucket",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "shouldOpenPosition",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedConditionsAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LimitOrderLibrary.LimitOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LimitOrderLibrary.Condition[]",
          "name": "openConditions",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LimitOrderLibrary.Condition[]",
          "name": "closeConditions",
          "type": "tuple[]"
        }
      ],
      "name": "CreateLimitOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "name": "UpdateOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LimitOrderLibrary.Condition[]",
          "name": "openConditions",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LimitOrderLibrary.Condition[]",
          "name": "closeConditions",
          "type": "tuple[]"
        }
      ],
      "name": "UpdateOrderConditions",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bucketOrderIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bucketOrderIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_conditionIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_additionalParams",
          "type": "bytes"
        }
      ],
      "name": "canBeFilled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_orderIds",
          "type": "uint256[]"
        }
      ],
      "name": "cancelExpiredLimitOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "closeConditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "managerType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "bucket",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "takeDepositFromWallet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "payFeeFromWallet",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "shouldOpenPosition",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "managerType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LimitOrderLibrary.Condition[]",
              "name": "openConditions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "managerType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LimitOrderLibrary.Condition[]",
              "name": "closeConditions",
              "type": "tuple[]"
            },
            {
              "internalType": "bool",
              "name": "isProtocolFeeInPmx",
              "type": "bool"
            }
          ],
          "internalType": "struct LimitOrderLibrary.CreateLimitOrderParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "createLimitOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bucket",
          "type": "address"
        }
      ],
      "name": "getBucketOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IBucket",
              "name": "bucket",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "shouldOpenPosition",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedConditionsAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct LimitOrderLibrary.LimitOrder[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bucket",
          "type": "address"
        }
      ],
      "name": "getBucketOrdersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "getCloseConditions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct LimitOrderLibrary.Condition[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "getOpenConditions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "managerType",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct LimitOrderLibrary.Condition[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IBucket",
              "name": "bucket",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "shouldOpenPosition",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedConditionsAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct LimitOrderLibrary.LimitOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOrderByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IBucket",
              "name": "bucket",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "shouldOpenPosition",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedConditionsAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct LimitOrderLibrary.LimitOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrdersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getTraderOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IBucket",
              "name": "bucket",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "shouldOpenPosition",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedConditionsAt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct LimitOrderLibrary.LimitOrder[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getTraderOrdersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_primexDNS",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pm",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_traderBalanceVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_whiteBlackList",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openConditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "managerType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "conditionIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "comAdditionalParams",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "dexName",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encodedPath",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.SwapPath[]",
                  "name": "paths",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.Route[]",
              "name": "firstAssetRoutes",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "dexName",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encodedPath",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.SwapPath[]",
                  "name": "paths",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.Route[]",
              "name": "depositInThirdAssetRoutes",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "keeper",
              "type": "address"
            }
          ],
          "internalType": "struct LimitOrderLibrary.OpenPositionParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "openPositionByOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orderIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ordersId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pm",
      "outputs": [
        {
          "internalType": "contract IPositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primexDNS",
      "outputs": [
        {
          "internalType": "contract IPrimexDNS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "setSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traderBalanceVault",
      "outputs": [
        {
          "internalType": "contract ITraderBalanceVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "traderOrderIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "traderOrderIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isProtocolFeeInPmx",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "takeDepositFromWallet",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "payFeeFromWallet",
              "type": "bool"
            }
          ],
          "internalType": "struct LimitOrderLibrary.UpdateLimitOrderParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "updateOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "managerType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LimitOrderLibrary.Condition[]",
              "name": "openConditions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "managerType",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LimitOrderLibrary.Condition[]",
              "name": "closeConditions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ILimitOrderManager.UpdateOrderConditionsParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "updateOrderConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa250528cd9145c91abd9d38e1c066b822d2d230a286c8b6afc42b402e15d71ff",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0xdb72b9150F1785a9E362227B1fA86cEC11E8f1eB",
    "transactionIndex": 71,
    "gasUsed": "4350689",
    "logsBloom": "0x
    "blockHash": "0xdd0eeec340c84a995e45e8ac2018ade0394c46710ab9ca1a5f961a2e9494a776",
    "transactionHash": "0xa250528cd9145c91abd9d38e1c066b822d2d230a286c8b6afc42b402e15d71ff",
    "logs": [
      {
        "transactionIndex": 71,
        "blockNumber": 48547805,
        "transactionHash": "0xa250528cd9145c91abd9d38e1c066b822d2d230a286c8b6afc42b402e15d71ff",
        "address": "0xdb72b9150F1785a9E362227B1fA86cEC11E8f1eB",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 131,
        "blockHash": "0xdd0eeec340c84a995e45e8ac2018ade0394c46710ab9ca1a5f961a2e9494a776"
      },
      {
        "transactionIndex": 71,
        "blockNumber": 48547805,
        "transactionHash": "0xa250528cd9145c91abd9d38e1c066b822d2d230a286c8b6afc42b402e15d71ff",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c110b6e93a51acf1f3ded19c754789e7a2304f07",
          "0x000000000000000000000000bdbd4347b082d9d6bdf2da4555a37ce52a2e2120"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002d8a8327e53e2ba0000000000000000000000000000000000000000000000019b2587f2a82c800000000000000000000000000000000000000000000000414c21b2fb47c08bbf4f000000000000000000000000000000000000000000000001984cdfc029d89d4600000000000000000000000000000000000000000000414c248ba37a3edfa209",
        "logIndex": 132,
        "blockHash": "0xdd0eeec340c84a995e45e8ac2018ade0394c46710ab9ca1a5f961a2e9494a776"
      }
    ],
    "blockNumber": 48547805,
    "cumulativeGasUsed": "9549041",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "77b92b6c993777e32b56dbda936965f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"closedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum LimitOrderLibrary.CloseReason\",\"name\":\"reason\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bucket\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowedAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"CloseLimitOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IBucket\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldOpenPosition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LimitOrderLibrary.LimitOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"openConditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"closeConditions\",\"type\":\"tuple[]\"}],\"name\":\"CreateLimitOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"UpdateOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"openConditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"closeConditions\",\"type\":\"tuple[]\"}],\"name\":\"UpdateOrderConditions\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bucketOrderIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bucketOrderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_conditionIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_additionalParams\",\"type\":\"bytes\"}],\"name\":\"canBeFilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_orderIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelExpiredLimitOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"cancelLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"closeConditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"bucket\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"takeDepositFromWallet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"payFeeFromWallet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldOpenPosition\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"openConditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"closeConditions\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isProtocolFeeInPmx\",\"type\":\"bool\"}],\"internalType\":\"struct LimitOrderLibrary.CreateLimitOrderParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createLimitOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bucket\",\"type\":\"address\"}],\"name\":\"getBucketOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IBucket\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldOpenPosition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.LimitOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bucket\",\"type\":\"address\"}],\"name\":\"getBucketOrdersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getCloseConditions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getOpenConditions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IBucket\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldOpenPosition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.LimitOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOrderByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IBucket\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldOpenPosition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.LimitOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrdersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getTraderOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IBucket\",\"name\":\"bucket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldOpenPosition\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedConditionsAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraParams\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.LimitOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getTraderOrdersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primexDNS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pm\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_traderBalanceVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whiteBlackList\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openConditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conditionIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"comAdditionalParams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedPath\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.SwapPath[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"firstAssetRoutes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedPath\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.SwapPath[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"depositInThirdAssetRoutes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"internalType\":\"struct LimitOrderLibrary.OpenPositionParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"openPositionByOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ordersId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pm\",\"outputs\":[{\"internalType\":\"contract IPositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primexDNS\",\"outputs\":[{\"internalType\":\"contract IPrimexDNS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"setSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traderBalanceVault\",\"outputs\":[{\"internalType\":\"contract ITraderBalanceVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traderOrderIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traderOrderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProtocolFeeInPmx\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"takeDepositFromWallet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"payFeeFromWallet\",\"type\":\"bool\"}],\"internalType\":\"struct LimitOrderLibrary.UpdateLimitOrderParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"updateOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"openConditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"managerType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct LimitOrderLibrary.Condition[]\",\"name\":\"closeConditions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ILimitOrderManager.UpdateOrderConditionsParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"updateOrderConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"canBeFilled(uint256,uint256,bytes)\":{\"params\":{\"_additionalParams\":\"parameters needed for dex\",\"_conditionIndex\":\"index of condition in openConditions\",\"_orderId\":\"order id\"}},\"cancelExpiredLimitOrders(uint256[])\":{\"params\":{\"_orderIds\":\"The array of order IDs to remove.\"}},\"cancelLimitOrder(uint256)\":{\"params\":{\"_orderId\":\"order id\"}},\"createLimitOrder((string,uint256,address,address,uint256,bool,bool,uint256,bool,(uint256,bytes)[],(uint256,bytes)[],bool))\":{\"details\":\"This function allows users to create a limit order and locks the deposit asset in the traderBalanceVault\",\"params\":{\"_params\":\"The parameters necessary to create limit order\"}},\"getBucketOrders(address)\":{\"params\":{\"_bucket\":\"The address of the bucket.\"},\"returns\":{\"_0\":\"An array of LimitOrder structs representing the bucket's orders.\"}},\"getBucketOrdersLength(address)\":{\"params\":{\"_bucket\":\"The address of the bucket.\"},\"returns\":{\"_0\":\"The number of orders in the bucket.\"}},\"getCloseConditions(uint256)\":{\"params\":{\"_orderId\":\"The ID of the order.\"},\"returns\":{\"_0\":\"An array of Condition representing the close conditions.\"}},\"getOpenConditions(uint256)\":{\"params\":{\"_orderId\":\"The ID of the order.\"},\"returns\":{\"_0\":\"An array of Condition structs representing the open conditions.\"}},\"getOrder(uint256)\":{\"params\":{\"_id\":\"The ID of the limit order to retrieve.\"},\"returns\":{\"_0\":\"The LimitOrder struct representing the limit order.\"}},\"getOrderByIndex(uint256)\":{\"params\":{\"_index\":\"The index of the limit order to retrieve.\"},\"returns\":{\"_0\":\"The limit order at the specified index.\"}},\"getTraderOrders(address)\":{\"params\":{\"_trader\":\"The address of the trader.\"},\"returns\":{\"_0\":\"traderOrders An array of LimitOrder structures representing the orders placed by the trader.\"}},\"getTraderOrdersLength(address)\":{\"params\":{\"_trader\":\"The address of the trader.\"},\"returns\":{\"_0\":\"The length of the order array.\"}},\"initialize(address,address,address,address,address,address)\":{\"params\":{\"_pm\":\"The address of the PositionManager contract.\",\"_primexDNS\":\"The address of the PrimexDNS contract.\",\"_registry\":\"The address of the Registry contract.\",\"_swapManager\":\"The address of the SwapManager contract.\",\"_traderBalanceVault\":\"The address of the TraderBalanceVault contract.\",\"_whiteBlackList\":\"The address of the WhiteBlacklist contract.\"}},\"openPositionByOrder((uint256,uint256,bytes,(uint256,(string,bytes)[])[],(uint256,(string,bytes)[])[],address))\":{\"details\":\"This function is called to open a position based on the given order parameters.\",\"params\":{\"_params\":\"The OpenPositionParams struct containing the necessary parameters for opening the position.\"}},\"pause()\":{\"details\":\"Triggers stopped state. This function can only be called by an address with the EMERGENCY_ADMIN role. Requirements: - The contract must not be paused.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setSwapManager(address)\":{\"details\":\"Only callable by the BIG_TIMELOCK_ADMIN role.\",\"params\":{\"_swapManager\":\"Address of the new swapManager.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The interface id to check\"}},\"unpause()\":{\"details\":\"Returns to normal state. This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract. Requirements: - The contract must be paused.\"},\"updateOrder((uint256,uint256,uint256,bool,bool,bool))\":{\"details\":\"Edits prices on an existing order\",\"params\":{\"_params\":\"The parameters for updating the limit order.\"}},\"updateOrderConditions((uint256,(uint256,bytes)[],(uint256,bytes)[]))\":{\"details\":\"Only the trader of the order can update the conditions.\",\"params\":{\"_params\":\"The parameters for updating the order conditions.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canBeFilled(uint256,uint256,bytes)\":{\"notice\":\"Returns true if current price >= limit price and block.timestamp <= deadline\"},\"cancelExpiredLimitOrders(uint256[])\":{\"notice\":\"Removes expired limit orders\"},\"cancelLimitOrder(uint256)\":{\"notice\":\"Cancels the order. Can only be called by the trader\"},\"createLimitOrder((string,uint256,address,address,uint256,bool,bool,uint256,bool,(uint256,bytes)[],(uint256,bytes)[],bool))\":{\"notice\":\"Creates a limit order.\"},\"getBucketOrders(address)\":{\"notice\":\"Retrieves all limit orders associated with a given bucket.\"},\"getBucketOrdersLength(address)\":{\"notice\":\"Returns the length of orders in a bucket.\"},\"getCloseConditions(uint256)\":{\"notice\":\"Retrieves the close conditions associated with the given order ID.\"},\"getOpenConditions(uint256)\":{\"notice\":\"Retrieves the open conditions associated with a given order ID.\"},\"getOrder(uint256)\":{\"notice\":\"Retrieves the details of a limit order based on its ID.\"},\"getOrderByIndex(uint256)\":{\"notice\":\"Retrieves the limit order at the specified index.\"},\"getOrdersLength()\":{\"notice\":\"Returns orders array length.\"},\"getTraderOrders(address)\":{\"notice\":\"Returns an array of LimitOrder structures representing the orders placed by a specific trader.\"},\"getTraderOrdersLength(address)\":{\"notice\":\"Returns the length of the order array for a specific trader.\"},\"initialize(address,address,address,address,address,address)\":{\"notice\":\"Initializes the LimitOrderManager contract.\"},\"openPositionByOrder((uint256,uint256,bytes,(uint256,(string,bytes)[])[],(uint256,(string,bytes)[])[],address))\":{\"notice\":\"Opens a position by an existing order.\"},\"setSwapManager(address)\":{\"notice\":\"Function to set new swapManager.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"},\"updateOrder((uint256,uint256,uint256,bool,bool,bool))\":{\"notice\":\"Updates an existing limit order.\"},\"updateOrderConditions((uint256,(uint256,bytes)[],(uint256,bytes)[]))\":{\"notice\":\"Updates the open and close conditions of an order.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LimitOrderManager/LimitOrderManager.sol\":\"LimitOrderManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IActivityRewardDistributorStorage, IERC20, IPrimexDNS, ITraderBalanceVault} from \\\"./IActivityRewardDistributorStorage.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IActivityRewardDistributor is IActivityRewardDistributorStorage, IPausable {\\n    enum Role {\\n        LENDER,\\n        TRADER\\n    }\\n\\n    struct BucketWithRole {\\n        address bucketAddress;\\n        Role role;\\n    }\\n\\n    /**\\n     * @notice Emitted on claimReward()\\n     * @param user The address of the user who claimed reward\\n     * @param bucket The address of the bucket this reward is related to\\n     * @param role User role - TRADER or LENDER\\n     * @param amount Claimed amount\\n     */\\n    event ClaimReward(address indexed user, address indexed bucket, Role indexed role, uint256 amount);\\n\\n    /**\\n     * @notice  Initializes the ActivityRewardDistributor contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _pmx The address of the PMXToken contract.\\n     * @param _dns The address of the PrimexDNS contract.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _treasury The address of the treasury where fees will be collected.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IERC20 _pmx,\\n        IPrimexDNS _dns,\\n        address _registry,\\n        address _treasury,\\n        ITraderBalanceVault _traderBalanceVault,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice  Saves user activity in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   user  User address\\n     * @param   newBalance  User balance after action\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUserActivity(IBucket bucket, address user, uint256 newBalance, Role role) external;\\n\\n    /**\\n     * @notice  Saves activity of multiple users in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   users  Array of user addresses\\n     * @param   newBalances  Array of users balances after action\\n     * @param   length  The length of the users and oldBalances arrays\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUsersActivities(\\n        IBucket bucket,\\n        address[] calldata users,\\n        uint256[] calldata newBalances,\\n        uint256 length,\\n        Role role\\n    ) external;\\n\\n    /**\\n     * @notice Allows the caller to claim their accumulated reward from the specified buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets from which to claim the rewards.\\n     */\\n    function claimReward(BucketWithRole[] calldata bucketsArray) external;\\n\\n    /**\\n     * @notice Sets up activity rewards distribution in bucket with the specified role and reward parameters.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket to set up.\\n     * @param role The role associated with the bucket.\\n     * @param increaseAmount The amount by which to increase the total reward for the bucket (in PMX).\\n     * Adds specified amount to totalReward of the bucket. Initial value of totalReward is 0.\\n     * @param rewardPerDay The reward amount per day for the bucket.\\n     */\\n    function setupBucket(address bucket, Role role, uint256 increaseAmount, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Allows the caller to withdraw PMX tokens from a specific bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket from which to withdraw PMX tokens.\\n     * @param role The role associated with the bucket.\\n     * @param amount The amount of PMX tokens to withdraw.\\n     */\\n    function withdrawPmx(address bucket, Role role, uint256 amount) external;\\n\\n    /**\\n     * @notice Decreases the reward per day for a bucket and role.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param bucket The address of the bucket for which to decrease the reward per day.\\n     * @param role The role associated with the bucket.\\n     * @param rewardPerDay The amount by which to decrease the reward per day.\\n     */\\n    function decreaseRewardPerDay(address bucket, Role role, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Returns the accumulated reward for a specific bucket and role.\\n     * @param bucket The address of the bucket for which to retrieve the accumulated reward.\\n     * @param role The role associated with the bucket.\\n     * @return The accumulated reward for the specified bucket and role.\\n     */\\n    function getBucketAccumulatedReward(address bucket, Role role) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable reward for a user across multiple buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets to check for claimable rewards.\\n     * @param user The address of the user for whom to calculate the claimable reward.\\n     * @return The total claimable reward for the specified user across all provided buckets.\\n     */\\n    function getClaimableReward(BucketWithRole[] calldata bucketsArray, address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the user information from a specific bucket and role.\\n     * @param bucket The address of the bucket from which to retrieve the user information.\\n     * @param role The role associated with the bucket.\\n     * @param user The address of the user for whom to retrieve the information.\\n     * @return A UserInfo struct containing the user information.\\n     */\\n    function getUserInfoFromBucket(address bucket, Role role, address user) external view returns (UserInfo memory);\\n}\\n\",\"keccak256\":\"0x92e646c799437ad1e02850a871701b0d1a4fcf0d9b88062720d85aca99bd2152\",\"license\":\"BUSL-1.1\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface IActivityRewardDistributorStorage {\\n    /*\\n     * @param oldBalance last updated balance for user\\n     * @param fixedReward the accumulated value of the reward at the time lastUpdatedRewardIndex\\n     * @param lastUpdatedRewardIndex last index with which the user's reward was accumulated\\n     */\\n    struct UserInfo {\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardIndex;\\n        uint256 oldBalance;\\n    }\\n\\n    /*\\n     * @param users data to calculate users rewards in this bucket\\n     * @param rewardIndex an index that accumulates user rewards\\n     * @param lastUpdatedTimestamp timestamp of the last update of user activity\\n     * @param rewardPerToken current reward for one token(PToken or DebtToken of bucket)\\n     * @param isFinished Shows that the bucket has distributed all the rewards\\n     * @param fixedReward reward distributed by a bucket over the past period\\n     * with a certain reward per day or with the entire reward fully distributed\\n     * @param lastUpdatedRewardTimestamp timestamp of last fixed reward update\\n     * @param rewardPerDay current reward distributed for 1 day\\n     * @param totalReward Full distributable reward\\n     * @param endTimestamp end time of the distribution of rewards, which is calculated relative to the rewardPerDay and totalReward\\n     */\\n    struct BucketInfo {\\n        mapping(address => UserInfo) users;\\n        //accumulated reward per token\\n        uint256 rewardIndex;\\n        uint256 lastUpdatedTimestamp;\\n        uint256 rewardPerToken;\\n        uint256 scaledTotalSupply;\\n        bool isFinished;\\n        // setted by admin's actions\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardTimestamp;\\n        uint256 rewardPerDay;\\n        uint256 totalReward;\\n        uint256 endTimestamp;\\n    }\\n\\n    function pmx() external returns (IERC20);\\n\\n    function dns() external returns (IPrimexDNS);\\n\\n    function registry() external returns (address);\\n\\n    function traderBalanceVault() external returns (ITraderBalanceVault);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc4e25952cf7dd9eade5559b4c78a2e857381b67d4554e2afa2dfd2edc48af950\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IFeeExecutorStorage} from \\\"./IFeeExecutorStorage.sol\\\";\\n\\ninterface IFeeExecutor is IFeeExecutorStorage {\\n    /**\\n     * @dev Sets tier bonuses for a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @param _tiers The array of tier values.\\n     * @param _bonuses The array of NFT bonus parameters.\\n     */\\n    function setTierBonus(address _bucket, uint256[] calldata _tiers, NFTBonusParams[] calldata _bonuses) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the Debt-Token\\n     * @param _user User for which the bonus will be updated. If user doesn't have the bonus for paused\\n     * @param _oldScaledBalance Balance of the user before the operation at which the updateBonus function was called (e.g mint/burn)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonus(address _user, uint256 _oldScaledBalance, address _bucket, uint256 _currentIndex) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called directly by the user\\n     * @param _nftId Id of activated token\\n     **/\\n    function updateBonus(uint256 _nftId) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the P-Token or Debt-Token\\n     * @param _users Array of the users for whom the bonus will be updated.\\n     * @param _oldBalances Array of the balances before the operation at which the updateBonus function was called (e.g mint/transfer)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonuses(\\n        address[] memory _users,\\n        uint256[] memory _oldBalances,\\n        address _bucket,\\n        uint256 _currentIndex\\n    ) external;\\n\\n    /**\\n     * @dev Returns accumulated amount of p-tokens at the moment\\n     * @param _user The user for which the accumatedAmount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     * @return The accumulated amount.\\n     */\\n    function getAccumulatedAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the available amount (accumulated - claimedAmount) of p-tokens at the moment.\\n     * @param _user The user for which the available amount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     **/\\n    function getAvailableAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the bonus information for a user and NFT.\\n     * @param _user The address of the user.\\n     * @param _nftId The ID of the NFT.\\n     * @return bonus The activated bonus information.\\n     */\\n    function getBonus(address _user, uint256 _nftId) external view returns (ActivatedBonus memory);\\n}\\n\",\"keccak256\":\"0x4e89772ddb2daeefc1f970ce15d03bc6de8c284e126498bfd9f39d8646f2325a\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\n\\ninterface IFeeExecutorStorage {\\n    struct ActivatedBonus {\\n        uint256 nftId;\\n        IBucket bucket;\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 accumulatedAmount;\\n        uint256 lastUpdatedIndex;\\n        uint256 deadline;\\n        //if we allow to claim funds before the end of the bonus\\n        uint256 claimedAmount;\\n    }\\n\\n    struct NFTBonusParams {\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 duration;\\n    }\\n}\\n\",\"keccak256\":\"0x1a966b20c524d3f40b1f3afcc425d37502efde4d043e022de4078af4c334fb54\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucket.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\nimport {ISwapManager} from \\\"../interfaces/ISwapManager.sol\\\";\\nimport {IBucketStorage} from \\\"./IBucketStorage.sol\\\";\\n\\ninterface IBucket is IBucketStorage {\\n    struct ConstructorParams {\\n        string name;\\n        IPToken pToken;\\n        IDebtToken debtToken;\\n        IPositionManager positionManager;\\n        IPriceOracle priceOracle;\\n        IPrimexDNS dns;\\n        IReserve reserve;\\n        IWhiteBlackList whiteBlackList;\\n        address[] assets;\\n        IERC20Metadata borrowedAsset;\\n        uint256 feeBuffer;\\n        uint256 withdrawalFeeRate;\\n        uint256 reserveRate;\\n        // liquidityMining params\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        uint256 liquidityMiningAmount;\\n        uint256 liquidityMiningDeadline;\\n        uint256 stabilizationDuration;\\n        IInterestRateStrategy interestRateStrategy;\\n        uint128 estimatedBar;\\n        uint128 estimatedLar;\\n        uint256 maxAmountPerUser;\\n        bool isReinvestToAaveEnabled;\\n        bytes barCalcParams;\\n        uint256 maxTotalDeposit;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed pTokenReceiver, uint256 amount);\\n\\n    event Withdraw(address indexed withdrawer, address indexed borrowAssetReceiver, uint256 amount);\\n\\n    event DepositToAave(address indexed pool, uint256 amount);\\n\\n    event WithdrawFromAave(address indexed pool, uint256 amount);\\n\\n    event TopUpTreasury(address indexed sender, uint256 amount);\\n\\n    event FeeBufferChanged(uint256 feeBuffer);\\n\\n    event ReserveRateChanged(uint256 reserveRate);\\n\\n    event RatesIndexesUpdated(\\n        uint128 bar,\\n        uint128 lar,\\n        uint128 variableBorrowIndex,\\n        uint128 liquidityIndex,\\n        uint256 timestamp\\n    );\\n\\n    event WithdrawalFeeChanged(uint256 withdrawalFeeRate);\\n\\n    event InterestRateStrategyChanged(address interestRateStrategy);\\n\\n    event AddAsset(address addedAsset);\\n\\n    event RemoveAsset(address deletedAsset);\\n\\n    event MaxTotalDepositChanged(uint256 maxTotalDeposit);\\n\\n    event BarCalculationParamsChanged(bytes params);\\n\\n    event BucketLaunched();\\n\\n    /**\\n     * @dev Initializes the contract with the given parameters.\\n     * @param _params The ConstructorParams struct containing initialization parameters.\\n     * @param _registry The address of the registry contract.\\n     */\\n    function initialize(ConstructorParams memory _params, address _registry) external;\\n\\n    /**\\n     * @dev Function to add new trading asset for this bucket\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _newAsset The address of trading asset\\n     */\\n    function addAsset(address _newAsset) external;\\n\\n    /**\\n     * @notice Removes a trading asset from this bucket.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _assetToDelete The address of the asset to be removed.\\n     */\\n    function removeAsset(address _assetToDelete) external;\\n\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Sets the reserve rate.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _reserveRate The new reserve rate value.\\n     */\\n    function setReserveRate(uint256 _reserveRate) external;\\n\\n    /**\\n     * @dev Sets the new fee buffer.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _feeBuffer The new fee buffer value.\\n     */\\n    function setFeeBuffer(uint256 _feeBuffer) external;\\n\\n    /**\\n     * @dev Sets the withdrawal fee.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _withdrawalFee The new withdrawal fee value.\\n     */\\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\\n\\n    /**\\n     * @dev Sets the interest rate strategy contract address.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _interestRateStrategy The address of the interest rate strategy contract.\\n     */\\n    function setInterestRateStrategy(address _interestRateStrategy) external;\\n\\n    /**\\n     * @notice The function sets the max total deposit for the particular bucket\\n     * @param _maxTotalDeposit The amount of max total deposit for the bucket\\n     */\\n    function setMaxTotalDeposit(uint256 _maxTotalDeposit) external;\\n\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraws the 'amount' of underlying asset from the bucket. The 'amount' of overlying pTokens will be burned.\\n     * @param _borrowAssetReceiver The address of receiver of the borrowed asset.\\n     * @param amount The amount of underlying tokens to be withdrawn.\\n     */\\n    function withdraw(address _borrowAssetReceiver, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the BIG_TIMELOCK_ADMIN role to withdraw a specified amount of tokens after delisting.\\n     * @param _amount The amount of tokens to withdraw.\\n     */\\n    function withdrawAfterDelisting(uint256 _amount) external;\\n\\n    /**\\n     * @dev Receives a deposit and distributes it to the specified pToken receiver.\\n     * @dev Can be called only by another bucket.\\n     * @param _pTokenReceiver The address of the recipient of the pToken.\\n     * @param _amount The amount of tokens being deposited.\\n     * @param _duration The blocking time for a fixed-term deposit (if it's 0, then it will be a usual deposit)\\n     * @param _bucketFrom The name of the bucket from which the deposit is being made.\\n     */\\n    function receiveDeposit(\\n        address _pTokenReceiver,\\n        uint256 _amount,\\n        uint256 _duration,\\n        string memory _bucketFrom\\n    ) external;\\n\\n    /**\\n     * @notice Deposits (reinvests) funds from a bucket to another bucket.\\n     * Used only in the case of failed liquidity mining in the bucket from where the transfer happens.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _swapManager The address of the swap manager.\\n     * @param routes The array of routes for swapping tokens.\\n     * @param _amountOutMin The minimum amount of tokens to receive from the swap.\\n     */\\n    function depositFromBucket(\\n        string calldata _bucketTo,\\n        ISwapManager _swapManager,\\n        PrimexPricingLibrary.Route[] calldata routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @dev Allows the SMALL_TIMELOCK_ADMIN to withdraw all liquidity from Aave to Bucket.\\n     */\\n    function returnLiquidityFromAaveToBucket() external;\\n\\n    /**\\n     * @dev Function to update rates and indexes when a trader opens a trading position.\\n     * Mints debt tokens to trader. Calls only by positionManager contract.\\n     * @param _trader The address of the trader, who opens position.\\n     * @param _amount The 'amount' for which the deal is open, and 'amount' of debtTokens will be minted to the trader.\\n     * @param _to The address to transfer the borrowed asset to.\\n     */\\n\\n    function increaseDebt(address _trader, uint256 _amount, address _to) external;\\n\\n    /**\\n     * @dev Function to update rates and indexes.\\n     * Burns debt tokens of trader. Called only by positionManager contract.\\n     * @param _trader The address of the trader, who opened position.\\n     * @param _debtToBurn The 'amount' of trader's debtTokens will be burned by the trader.\\n     * @param _receiverOfAmountToReturn Treasury in case of liquidation. TraderBalanceVault in other cases\\n     * @param _amountToReturn Amount to transfer from bucket\\n     * @param _permanentLossAmount The amount of the protocol's debt to creditors accrued for this position\\n     */\\n    function decreaseTraderDebt(\\n        address _trader,\\n        uint256 _debtToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount\\n    ) external;\\n\\n    /**\\n     * @notice Batch decreases the debt of multiple traders.\\n     * @dev This function can only be called by the BATCH_MANAGER_ROLE.\\n     * @param _traders An array of addresses representing the traders.\\n     * @param _debtsToBurn An array of uint256 values representing the debts to burn for each trader.\\n     * @param _receiverOfAmountToReturn The address that will receive the amount to be returned.\\n     * @param _amountToReturn The amount to be returned.\\n     * @param _permanentLossAmount The amount of permanent loss.\\n     * @param _length The length of the traders array.\\n     */\\n    function batchDecreaseTradersDebt(\\n        address[] memory _traders,\\n        uint256[] memory _debtsToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount,\\n        uint256 _length\\n    ) external;\\n\\n    /**\\n     * @notice This function allows a user to pay back a permanent loss by burning his pTokens.\\n     * @param amount The amount of pTokens to be burned to pay back the permanent loss.\\n     */\\n    function paybackPermanentLoss(uint256 amount) external;\\n\\n    /**\\n     * @dev Calculates the permanent loss based on the scaled permanent loss and the normalized income.\\n     * @return The amount of permanent loss.\\n     */\\n    function permanentLoss() external view returns (uint256);\\n\\n    /**\\n     * @dev Checks if the bucket is deprecated in the protocol.\\n     * @return Whether the bucket is deprecated or not.\\n     */\\n    function isDeprecated() external view returns (bool);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is delisted.\\n     * @return True if the bucket is delisted, otherwise false.\\n     */\\n    function isDelisted() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if an admin can withdraw from the bucket after delisting.\\n     * @return A boolean indicating whether withdrawal is available.\\n     */\\n    function isWithdrawAfterDelistingAvailable() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if this bucket is active in the protocol.\\n     * @return bool True if the bucket is active, false otherwise.\\n     */\\n    function isActive() external view returns (bool);\\n\\n    /**\\n     * @dev Returns the parameters for liquidity mining.\\n     * @return LMparams The liquidity mining parameters.\\n     */\\n    function getLiquidityMiningParams() external view returns (LiquidityMiningParams memory);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is stable in the liquidity mining event.\\n     * @return A boolean value representing the stability of the bucket.\\n     */\\n    function isBucketStable() external view returns (bool);\\n\\n    /**\\n     * @dev Calculates the max leverage according to the following formula:\\n     * ((1 + maintenanceBuffer) * feeBuffer) / ((1 + maintenanceBuffer) * feeBuffer - (1 - securityBuffer) *\\n     * (1 - pairPriceDropBA) * (1 - oracleTolerableLimitAB) * (1 - oracleTolerableLimitBA))\\n     * @param _asset The address of trading asset\\n     * @return The maximum leverage as a uint256 value.\\n     */\\n    function maxAssetLeverage(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized income per unit of underlying asset, expressed in ray\\n     * @return The normalized income per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedIncome() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedVariableDebt() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns allowed trading assets for current bucket\\n     * @return List of addresses of allowed assets\\n     */\\n    function getAllowedAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns current avalable liquidity of borrowedAsset for trading.\\n     * @return The amount of available borrowedAsset\\n     */\\n    function availableLiquidity() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1992b30d1515822adc56cc413099bb1893be77e1bde22d368fbf9e669ae0938a\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucketStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\n\\ninterface IBucketStorage {\\n    /**\\n     * @dev Parameters of liquidity mining\\n     */\\n    struct LiquidityMiningParams {\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        bool isBucketLaunched;\\n        uint256 accumulatingAmount;\\n        uint256 deadlineTimestamp;\\n        uint256 stabilizationDuration;\\n        uint256 stabilizationEndTimestamp;\\n        uint256 maxAmountPerUser; // if maxAmountPerUser is >= accumulatingAmount then check on maxAmountPerUser is off\\n        // Constant max variables are used for calculating users' points.\\n        // These intervals are used for fair distribution of points among Lenders.\\n        // Lenders who brought liquidity earlier receive more than the ones who deposited later.\\n        // To get maximum points per token, a Lender should deposit immediately after the Bucket deployment.\\n        uint256 maxDuration;\\n        uint256 maxStabilizationEndTimestamp;\\n    }\\n    //                                        1. Corner case of bucket launch\\n    //\\n    //                                              maxDuration\\n    //       ------------------------------------------------------------------------------------------------\\n    //      |                                                                                               |\\n    //      |                                                                        stabilizationDuration  |\\n    //      |                                                                      -------------------------|\\n    //      |                                                                     | bucket launch           |\\n    //   +--+---------------------------------------------------------------------+-------------------------+------> time\\n    //      bucket deploy                                                         deadlineTimestamp         maxStabilizationEndTimestamp\\n    //                                                                                                       (=stabilizationEndTimestamp here)\\n    //                                  (corner case of bucket launch)\\n\\n    //                                        2. One of cases of bucket launch\\n    //\\n    //      |                     stabilizationDuration\\n    //      |                   -------------------------\\n    //      |                  |                         |\\n    //   +--+------------------+-------------------------+------------------------+-------------------------+------> time\\n    //      bucket deploy      bucket launch            stabilizationEndTimestamp  deadlineTimestamp        maxStabilizationEndTimestamp\\n    //                                                                            (after deadline bucket can't be launched)\\n\\n    struct Asset {\\n        uint256 index;\\n        bool isSupported;\\n    }\\n\\n    function liquidityIndex() external returns (uint128);\\n\\n    function variableBorrowIndex() external returns (uint128);\\n\\n    function name() external view returns (string memory);\\n\\n    function registry() external view returns (address);\\n\\n    function positionManager() external view returns (IPositionManager);\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function permanentLossScaled() external view returns (uint256);\\n\\n    function pToken() external view returns (IPToken);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowedAsset() external view returns (IERC20Metadata);\\n\\n    function feeBuffer() external view returns (uint256);\\n\\n    function withdrawalFeeRate() external view returns (uint256);\\n\\n    /**\\n     * @notice bar = borrowing annual rate (originally APR)\\n     */\\n    function bar() external view returns (uint128);\\n\\n    /**\\n     * @notice lar = lending annual rate (originally APY)\\n     */\\n    function lar() external view returns (uint128);\\n\\n    function interestRateStrategy() external view returns (IInterestRateStrategy);\\n\\n    function estimatedBar() external view returns (uint128);\\n\\n    function estimatedLar() external view returns (uint128);\\n\\n    function allowedAssets(address _asset) external view returns (uint256, bool);\\n\\n    function whiteBlackList() external view returns (IWhiteBlackList);\\n\\n    function maxTotalDeposit() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x21ab63957721b0662c50fdff4b13ed53dfad864fc24220517e98a54ce12250f8\",\"license\":\"BUSL-1.1\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\",\"keccak256\":\"0xdfd1623c3bf46ff9a6fbbdff42a7d9a1b5e76c4252dd394db1b7811989dcaba3\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtToken.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IDebtTokenStorage, IBucket, IFeeExecutor, IERC20Upgradeable, IActivityRewardDistributor} from \\\"./IDebtTokenStorage.sol\\\";\\n\\ninterface IDebtToken is IDebtTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     **/\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after DebtTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     **/\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the FeeDecreaser for current DebtToken.\\n     * @param _feeDecreaser The interest increaser address.\\n     */\\n    function setFeeDecreaser(IFeeExecutor _feeDecreaser) external;\\n\\n    /**\\n     * @dev Sets the trader reward distributor contract address.\\n     * @param _traderRewardDistributor The address of the trader reward distributor contract.\\n     * Only the BIG_TIMELOCK_ADMIN role can call this function.\\n     */\\n    function setTraderRewardDistributor(IActivityRewardDistributor _traderRewardDistributor) external;\\n\\n    /**\\n     * @dev Mints `amount` DebtTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current variableBorrowIndex\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns DebtTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the DebtTokens, getting them burned\\n     * @param _amount The amount being burned\\n     * @param _index The current variableBorrowIndex\\n     **/\\n    function burn(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns a batch of tokens from multiple users.\\n     * @param _users An array of user addresses whose tokens will be burned.\\n     * @param _amounts An array of token amounts to be burned for each user.\\n     * @param _index The index used to calculate the scaled amounts.\\n     * @param _length The length of the user and amounts arrays.\\n     */\\n    function batchBurn(address[] memory _users, uint256[] memory _amounts, uint256 _index, uint256 _length) external;\\n\\n    /**\\n     * @dev Returns the principal debt balance of the user\\n     * @param _user The address of the user.\\n     * @return The scaled balance of the user.\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of debtToken.\\n     * @return The scaled total supply of the debtToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x181f52e402dfafa461a15a25983c2c6b13e8d7688accee410987cb8e27f38bdd\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtTokenStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IDebtTokenStorage is IERC20Upgradeable {\\n    function bucket() external view returns (IBucket);\\n\\n    function feeDecreaser() external view returns (IFeeExecutor);\\n\\n    function traderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0x22ecd3fd35265d62e8ee590e1d0fd3fd7df07347e7ed20c4b5745d2aba49f2df\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IKeeperRewardDistributorStorage} from \\\"./IKeeperRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IKeeperRewardDistributor is IKeeperRewardDistributorStorage, IPausable {\\n    struct DecreasingGasByReasonParams {\\n        DecreasingReason reason;\\n        uint256 amount;\\n    }\\n    struct MaxGasPerPositionParams {\\n        KeeperActionType actionType;\\n        KeeperActionRewardConfig config;\\n    }\\n\\n    /**\\n     * @dev     Params for initialize() function\\n     * @param   priceOracle  Address of the PriceOracle contract\\n     * @param   registry  Address of the Registry contract\\n     * @param   pmx  Address of PMXToken\\n     * @param   treasury  Address of the Treasury contract\\n     * @param   pmxPartInReward  Percentage of PMX in reward (in WAD)\\n     * @param   nativePartInReward  Percentage of native token in reward (in WAD)\\n     * @param   positionSizeCoefficientA  CoefficientA in the formula positionSize * CoefficientA + CoefficientB\\n     * @param   positionSizeCoefficientB  CoefficientB in the formula positionSize * CoefficientA + CoefficientB\\n     * @param   additionalGas  Additional gas added to actual gas spent\\n     * @param   defaultMaxGasPrice  Max gas price allowed during reward calculation (used when no oracle price found)\\n     * @param   oracleGasPriceTolerance  Percentage by which oracle gas price can be exceeded (in WAD)\\n     * @param   paymentModel  The model of payment for gas in the network\\n     * @param   maxGasPerPositionParams  Parameters for the setMaxGasPerPosition function\\n     * @param   decreasingGasByReasonParams  Parameters for the setDecreasingGasByReason function\\n     */\\n    struct InitParams {\\n        address priceOracle;\\n        address registry;\\n        address pmx;\\n        address treasury;\\n        address whiteBlackList;\\n        uint256 pmxPartInReward;\\n        uint256 nativePartInReward;\\n        uint256 positionSizeCoefficientA;\\n        int256 positionSizeCoefficientB;\\n        uint256 additionalGas;\\n        uint256 defaultMaxGasPrice;\\n        uint256 oracleGasPriceTolerance;\\n        PaymentModel paymentModel;\\n        MaxGasPerPositionParams[] maxGasPerPositionParams;\\n        DecreasingGasByReasonParams[] decreasingGasByReasonParams;\\n    }\\n\\n    event ClaimFees(address indexed keeper, address indexed asset, uint256 amount);\\n    event DefaultMaxGasPriceChanged(uint256 indexed defaultMaxGasPrice);\\n    event OracleGasPriceToleranceChanged(uint256 indexed oracleGasPriceTolerance);\\n    event MaxGasPerPositionChanged(KeeperActionType indexed actionType, KeeperActionRewardConfig config);\\n    event DataLengthRestrictionsChanged(KeeperCallingMethod callingMethod, uint256 maxRoutesLength, uint256 baseLength);\\n    event DecreasingGasByReasonChanged(DecreasingReason indexed reason, uint256 amount);\\n    event PmxPartInRewardChanged(uint256 indexed pmxPartInReward);\\n    event NativePartInRewardChanged(uint256 indexed nativePartInReward);\\n    event PositionSizeCoefficientsChanged(\\n        uint256 indexed positionSizeCoefficientA,\\n        int256 indexed positionSizeCoefficientB\\n    );\\n    event AdditionalGasChanged(uint256 indexed additionalGas);\\n    event KeeperRewardUpdated(address indexed keeper, uint256 rewardInPmx, uint256 rewardInNativeCurrency);\\n\\n    /**\\n     * @notice Initializes the KeeperRewardDistributor contract.\\n     * @param _params  Parameters for initialization\\n     */\\n    function initialize(InitParams calldata _params) external;\\n\\n    /**\\n     * @dev Params for the updateReward function\\n     * @param keeper  Address of the keeper\\n     * @param positionAsset  Address of the position asset\\n     * @param positionSize  Size of the position\\n     * @param action  The action that was performed by the keeper\\n     * @param numberOfActions  Number of actions performed by the keeper\\n     * @param gasSpent Gas spent on executing transaction\\n     * @param decreasingCounter An array where each index contains the number of decreasing reasons according to the DecreasingReason enum\\n     * @param routesLength  The length of routes provided as input to the protocol function,\\n     * subject to an additional commission in the ARBITRUM payment model.\\n     */\\n\\n    struct UpdateRewardParams {\\n        address keeper;\\n        address positionAsset;\\n        uint256 positionSize;\\n        KeeperActionType action;\\n        uint256 numberOfActions;\\n        uint256 gasSpent;\\n        uint256[] decreasingCounter;\\n        uint256 routesLength;\\n    }\\n\\n    /**\\n     * @notice Updates reward for keeper for closing position or executing order\\n     * @dev Only callable by the PM_ROLE, LOM_ROLE, BATCH_MANAGER_ROLE roles.\\n     * @param _params The UpdateRewardParams params\\n     */\\n    function updateReward(UpdateRewardParams calldata _params) external;\\n\\n    /**\\n     * @notice Claims earned reward of the keeper\\n     * @param _pmxAmount  Amount of PMX token to claim\\n     * @param _nativeAmount  Amount of native token to claim\\n     */\\n    function claim(uint256 _pmxAmount, uint256 _nativeAmount) external;\\n\\n    /**\\n     * @notice Sets the default maximum gas price allowed.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _defaultMaxGasPrice The new default maximum gas price value.\\n     */\\n    function setDefaultMaxGasPrice(uint256 _defaultMaxGasPrice) external;\\n\\n    /**\\n     * @notice Sets the amount of gas to be removed for the specified reason\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _reason The reason for which an amount is set\\n     * @param _amount Gas amount.\\n     */\\n    function setDecreasingGasByReason(DecreasingReason _reason, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the KeeperActionRewardConfig for the specified action type\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _actionType The action type for which the config is set\\n     * @param _config The KeeperActionRewardConfig struct\\n     */\\n\\n    function setMaxGasPerPosition(KeeperActionType _actionType, KeeperActionRewardConfig calldata _config) external;\\n\\n    /**\\n     * @notice Sets the dataLengthRestrictions for the specified KeeperCallingMethod.\\n     * @param _callingMethod The calling method for which dataLengthRestrictions is set\\n     * @param _maxRoutesLength The maximum routes length for which an additional fee will be paid in the ARBITRUM payment model, in bytes\\n     * @param _baseLength The length of the data entering the protocol function including method signature\\n     * and excluding dynamic types(e.g, routesLength), in bytes\\n     */\\n    function setDataLengthRestrictions(\\n        KeeperCallingMethod _callingMethod,\\n        uint256 _maxRoutesLength,\\n        uint256 _baseLength\\n    ) external;\\n\\n    /**\\n     * @notice Sets the tolerance for gas price fluctuations from the oracle price.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _oracleGasPriceTolerance The new oracle gas price tolerance value (percent expressed as WAD).\\n     */\\n    function setOracleGasPriceTolerance(uint256 _oracleGasPriceTolerance) external;\\n\\n    /**\\n     * @notice Sets the PMX token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _pmxPartInReward The new PMX token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setPmxPartInReward(uint256 _pmxPartInReward) external;\\n\\n    /**\\n     * @notice Sets the native token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _nativePartInReward The new native token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setNativePartInReward(uint256 _nativePartInReward) external;\\n\\n    /**\\n     * @notice Sets the position size coefficients for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _positionSizeCoefficientA The new positionSizeCoefficientA value (in WAD).\\n     * @param _positionSizeCoefficientB The new positionSizeCoefficientB value (in WAD).\\n     */\\n    function setPositionSizeCoefficients(uint256 _positionSizeCoefficientA, int256 _positionSizeCoefficientB) external;\\n\\n    /**\\n     * @notice Sets the additional gas value for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _additionalGas The new additionalGas value.\\n     */\\n    function setAdditionalGas(uint256 _additionalGas) external;\\n}\\n\",\"keccak256\":\"0xbcf9e1242db4c820b5e2551fe85ae76e8e20e3a1ea158bd4a1da356999975349\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IKeeperRewardDistributorStorage {\\n    enum DecreasingReason {\\n        NonExistentIdForLiquidation,\\n        NonExistentIdForSLOrTP,\\n        IncorrectConditionForLiquidation,\\n        IncorrectConditionForSL,\\n        ClosePostionInTheSameBlock\\n    }\\n\\n    enum KeeperActionType {\\n        OpenByOrder,\\n        StopLoss,\\n        TakeProfit,\\n        Liquidation,\\n        BucketDelisted\\n    }\\n\\n    enum KeeperCallingMethod {\\n        ClosePositionByCondition,\\n        OpenPositionByOrder,\\n        CloseBatchPositions\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of keeper rewards in the ARBITRUM payment model\\n     * @param maxRoutesLength The maximum length of routes for which will be paid keeper rewards, depending on KeeperCallingMethod\\n     * @param baseLength The static length of the data entering the protocol function, depending on KeeperCallingMethod\\n     */\\n    struct DataLengthRestrictions {\\n        uint256 maxRoutesLength;\\n        uint256 baseLength;\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of maximum gas per position\\n     * @param baseMaxGas1 Base gas amount that used to calculate max gas amount\\n     * @param baseMaxGas2 Base gas amount that used to calculate max gas amount when number of keeper actions > inflectionPoint\\n     * @param multiplier2 The multiplier which is multiplied by the number of keeper actions when number of keeper actions > inflectionPoint\\n     * @param inflectionPoint Number of actions after which the multiplier2 takes effect\\n     */\\n    struct KeeperActionRewardConfig {\\n        uint256 baseMaxGas1;\\n        uint256 baseMaxGas2;\\n        uint256 multiplier1;\\n        uint256 multiplier2;\\n        uint256 inflectionPoint;\\n    }\\n\\n    struct KeeperBalance {\\n        uint256 pmxBalance;\\n        uint256 nativeBalance;\\n    }\\n    enum PaymentModel {\\n        DEFAULT,\\n        ARBITRUM\\n    }\\n\\n    function priceOracle() external view returns (address);\\n\\n    function registry() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address payable);\\n\\n    function pmxPartInReward() external view returns (uint256);\\n\\n    function nativePartInReward() external view returns (uint256);\\n\\n    function positionSizeCoefficientA() external view returns (uint256);\\n\\n    function positionSizeCoefficientB() external view returns (int256);\\n\\n    function additionalGas() external view returns (uint256);\\n\\n    function defaultMaxGasPrice() external view returns (uint256);\\n\\n    function oracleGasPriceTolerance() external view returns (uint256);\\n\\n    function paymentModel() external view returns (PaymentModel);\\n\\n    function keeperBalance(address) external view returns (uint256, uint256);\\n\\n    function maxGasPerPosition(KeeperActionType) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function dataLengthRestrictions(KeeperCallingMethod) external view returns (uint256, uint256);\\n\\n    function decreasingGasByReason(DecreasingReason) external view returns (uint256);\\n\\n    function totalBalance() external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x16e68d1044f47523bac66714a6659f1b2c6a3196b6e8a8b2e91643dc9abdfaf0\",\"license\":\"BUSL-1.1\"},\"contracts/LimitOrderManager/ILimitOrderManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {ILimitOrderManagerStorage} from \\\"./ILimitOrderManagerStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ILimitOrderManager is ILimitOrderManagerStorage, IPausable {\\n    enum LimitOrderType {\\n        Margin,\\n        Spot,\\n        Swap\\n    }\\n\\n    struct UpdateOrderConditionsParams {\\n        uint256 orderId;\\n        LimitOrderLibrary.Condition[] openConditions;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n    }\\n\\n    event CreateLimitOrder(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        LimitOrderLibrary.LimitOrder order,\\n        LimitOrderLibrary.Condition[] openConditions,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event CloseLimitOrder(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        address indexed closedBy,\\n        LimitOrderLibrary.CloseReason reason,\\n        uint256 positionId,\\n        // TODO: can delete args below when front be ready for it\\n        string bucket,\\n        address borrowedAsset,\\n        address positionAsset,\\n        uint256 leverage,\\n        address depositAsset,\\n        uint256 depositAmount\\n    );\\n\\n    event UpdateOrder(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        uint256 depositAmount,\\n        uint256 leverage,\\n        address feeToken,\\n        uint256 protocolFee\\n    );\\n\\n    event UpdateOrderConditions(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] openConditions,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    /**\\n     * @notice Initializes the LimitOrderManager contract.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _pm The address of the PositionManager contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _swapManager The address of the SwapManager contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address _pm,\\n        address payable _traderBalanceVault,\\n        address _swapManager,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Creates a limit order.\\n     * @dev This function allows users to create a limit order and locks the deposit asset in the traderBalanceVault\\n     * @param _params The parameters necessary to create limit order\\n     */\\n    function createLimitOrder(LimitOrderLibrary.CreateLimitOrderParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Cancels the order. Can only be called by the trader\\n     * @param _orderId order id\\n     */\\n    function cancelLimitOrder(uint256 _orderId) external;\\n\\n    /**\\n     * @notice Removes expired limit orders\\n     * @param _orderIds The array of order IDs to remove.\\n     */\\n    function cancelExpiredLimitOrders(uint256[] calldata _orderIds) external;\\n\\n    /**\\n     * @notice Opens a position by an existing order.\\n     * @dev This function is called to open a position based on the given order parameters.\\n     * @param _params The OpenPositionParams struct containing the necessary parameters for opening the position.\\n     */\\n    function openPositionByOrder(LimitOrderLibrary.OpenPositionParams calldata _params) external;\\n\\n    /**\\n     * @notice Updates an existing limit order.\\n     * @dev Edits prices on an existing order\\n     * @param _params The parameters for updating the limit order.\\n     */\\n    function updateOrder(LimitOrderLibrary.UpdateLimitOrderParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Updates the open and close conditions of an order.\\n     * @dev Only the trader of the order can update the conditions.\\n     * @param _params The parameters for updating the order conditions.\\n     */\\n    function updateOrderConditions(UpdateOrderConditionsParams memory _params) external;\\n\\n    /**\\n     * @notice Returns true if current price >= limit price and block.timestamp <= deadline\\n     * @param _orderId order id\\n     * @param _conditionIndex index of condition in openConditions\\n     * @param _additionalParams parameters needed for dex\\n     */\\n    function canBeFilled(\\n        uint256 _orderId,\\n        uint256 _conditionIndex,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Function to set new swapManager.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _swapManager Address of the new swapManager.\\n     */\\n    function setSwapManager(address _swapManager) external;\\n\\n    /**\\n     * @notice Retrieves the details of a limit order based on its ID.\\n     * @param _id The ID of the limit order to retrieve.\\n     * @return The LimitOrder struct representing the limit order.\\n     */\\n    function getOrder(uint256 _id) external view returns (LimitOrderLibrary.LimitOrder memory);\\n\\n    /**\\n     * @notice Retrieves the limit order at the specified index.\\n     * @param _index The index of the limit order to retrieve.\\n     * @return The limit order at the specified index.\\n     */\\n    function getOrderByIndex(uint256 _index) external view returns (LimitOrderLibrary.LimitOrder memory);\\n\\n    /**\\n     * @notice Retrieves the close conditions associated with the given order ID.\\n     * @param _orderId The ID of the order.\\n     * @return An array of Condition representing the close conditions.\\n     */\\n    function getCloseConditions(uint256 _orderId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the open conditions associated with a given order ID.\\n     * @param _orderId The ID of the order.\\n     * @return An array of Condition structs representing the open conditions.\\n     */\\n    function getOpenConditions(uint256 _orderId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Returns the length of the orders array.\\n     * @return The number of orders in the array.\\n     */\\n    function getOrdersLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the order array for a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The length of the order array.\\n     */\\n    function getTraderOrdersLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns an array of LimitOrder structures representing the orders placed by a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return traderOrders An array of LimitOrder structures representing the orders placed by the trader.\\n     */\\n    function getTraderOrders(address _trader) external view returns (LimitOrderLibrary.LimitOrder[] memory);\\n\\n    /**\\n     * @notice Returns the length of orders in a bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of orders in the bucket.\\n     */\\n    function getBucketOrdersLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves all limit orders associated with a given bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return An array of LimitOrder structs representing the bucket's orders.\\n     */\\n    function getBucketOrders(address _bucket) external view returns (LimitOrderLibrary.LimitOrder[] memory);\\n}\\n\",\"keccak256\":\"0x952988568f4ae44d93a14f7b2b1ca9ddacfb8a6f0f0a8009c944ade73cb61c1e\",\"license\":\"BUSL-1.1\"},\"contracts/LimitOrderManager/ILimitOrderManagerStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ISwapManager} from \\\"../interfaces/ISwapManager.sol\\\";\\n\\ninterface ILimitOrderManagerStorage {\\n    function ordersId() external view returns (uint256);\\n\\n    function orderIndexes(uint256) external view returns (uint256);\\n\\n    function traderOrderIndexes(uint256) external view returns (uint256);\\n\\n    function traderOrderIds(address _trader, uint256 _index) external view returns (uint256);\\n\\n    function bucketOrderIndexes(uint256) external view returns (uint256);\\n\\n    function bucketOrderIds(address _bucket, uint256 _index) external view returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    function pm() external view returns (IPositionManager);\\n\\n    function swapManager() external view returns (ISwapManager);\\n}\\n\",\"keccak256\":\"0x52942ab60b5680933fac6a481a1d44bc6a4d013531c247ddd1439d90d8a98934\",\"license\":\"BUSL-1.1\"},\"contracts/LimitOrderManager/LimitOrderManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport \\\"./LimitOrderManagerStorage.sol\\\";\\nimport {BIG_TIMELOCK_ADMIN, SMALL_TIMELOCK_ADMIN, EMERGENCY_ADMIN, NATIVE_CURRENCY, BIG_TIMELOCK_ADMIN} from \\\"../Constants.sol\\\";\\nimport {ILimitOrderManager} from \\\"./ILimitOrderManager.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IKeeperRewardDistributorStorage} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\\\";\\nimport {IKeeperRewardDistributor} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ncontract LimitOrderManager is ILimitOrderManager, LimitOrderManagerStorage {\\n    using WadRayMath for uint256;\\n    using LimitOrderLibrary for LimitOrderLibrary.LimitOrder;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Throws if order doesn't exist\\n     * @param _orderId order id\\n     */\\n    modifier orderExists(uint256 _orderId) {\\n        uint256 index = orderIndexes[_orderId]; // is 0 if not explicitly set\\n        _require(orders.length > 0 && orders[index].id == _orderId, Errors.ORDER_DOES_NOT_EXIST.selector);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks if the caller has a specific role.\\n     * @param _role The role identifier to check.\\n     */\\n    modifier onlyRole(bytes32 _role) {\\n        _require(registry.hasRole(_role, msg.sender), Errors.FORBIDDEN.selector);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if the sender is not blacklisted.\\n     */\\n    modifier notBlackListed() {\\n        _require(!whiteBlackList.isBlackListed(msg.sender), Errors.SENDER_IS_BLACKLISTED.selector);\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address _pm,\\n        address payable _traderBalanceVault,\\n        address _swapManager,\\n        address _whiteBlackList\\n    ) external override initializer {\\n        _require(\\n            IERC165Upgradeable(_registry).supportsInterface(type(IAccessControl).interfaceId) &&\\n                IERC165Upgradeable(_primexDNS).supportsInterface(type(IPrimexDNS).interfaceId) &&\\n                IERC165Upgradeable(_pm).supportsInterface(type(IPositionManager).interfaceId) &&\\n                IERC165Upgradeable(_traderBalanceVault).supportsInterface(type(ITraderBalanceVault).interfaceId) &&\\n                IERC165Upgradeable(_swapManager).supportsInterface(type(ISwapManager).interfaceId) &&\\n                IERC165Upgradeable(_whiteBlackList).supportsInterface(type(IWhiteBlackList).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        registry = IAccessControl(_registry);\\n        whiteBlackList = IWhiteBlackList(_whiteBlackList);\\n        primexDNS = IPrimexDNS(_primexDNS);\\n        pm = IPositionManager(_pm);\\n        traderBalanceVault = ITraderBalanceVault(_traderBalanceVault);\\n        swapManager = ISwapManager(_swapManager);\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        __ERC165_init();\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function createLimitOrder(\\n        LimitOrderLibrary.CreateLimitOrderParams calldata _params\\n    ) external payable override nonReentrant notBlackListed whenNotPaused {\\n        LimitOrderLibrary.LimitOrder memory order = LimitOrderLibrary.createLimitOrder(\\n            _params,\\n            pm,\\n            traderBalanceVault,\\n            primexDNS\\n        );\\n        ordersId++;\\n        order.id = ordersId;\\n\\n        orders.push(order);\\n        orderIndexes[order.id] = orders.length - 1;\\n\\n        traderOrderIds[order.trader].push(order.id);\\n        traderOrderIndexes[order.id] = traderOrderIds[order.trader].length - 1;\\n\\n        bucketOrderIds[address(order.bucket)].push(order.id);\\n        bucketOrderIndexes[order.id] = bucketOrderIds[address(order.bucket)].length - 1;\\n\\n        order.setCloseConditions(closeConditions, _params.closeConditions, primexDNS);\\n        order.setOpenConditions(openConditions, _params.openConditions, primexDNS);\\n\\n        bool isSpot = bytes(_params.bucket).length == 0;\\n        LimitOrderType limitOrderType;\\n        if (isSpot) {\\n            limitOrderType = order.shouldOpenPosition ? LimitOrderType.Spot : LimitOrderType.Swap;\\n        }\\n\\n        emit CreateLimitOrder({\\n            orderId: order.id,\\n            trader: order.trader,\\n            order: order,\\n            openConditions: openConditions[ordersId],\\n            closeConditions: closeConditions[ordersId]\\n        });\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function cancelLimitOrder(uint256 _orderId) external override orderExists(_orderId) nonReentrant notBlackListed {\\n        LimitOrderLibrary.LimitOrder storage order = orders[orderIndexes[_orderId]];\\n        _require(msg.sender == order.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n\\n        bool isSpot = order.bucket == IBucket(address(0));\\n        emit CloseLimitOrder({\\n            orderId: _orderId,\\n            trader: order.trader,\\n            closedBy: msg.sender,\\n            reason: LimitOrderLibrary.CloseReason.Cancelled,\\n            positionId: 0,\\n            bucket: isSpot ? \\\"\\\" : order.bucket.name(),\\n            borrowedAsset: isSpot ? address(0) : address(order.bucket.borrowedAsset()),\\n            positionAsset: order.positionAsset,\\n            leverage: order.leverage,\\n            depositAsset: order.depositAsset,\\n            depositAmount: order.depositAmount\\n        });\\n        _unlockAssetsAndDeleteOrder(order);\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function cancelExpiredLimitOrders(uint256[] calldata _orderIds) external override {\\n        for (uint256 i; i < _orderIds.length; i++) {\\n            uint256 index = orderIndexes[_orderIds[i]];\\n            if (orders.length == 0) break;\\n            LimitOrderLibrary.LimitOrder storage order = orders[index];\\n            bool isSpot = order.bucket == IBucket(address(0));\\n            if (\\n                order.id == _orderIds[i] &&\\n                (order.deadline <= block.timestamp || (!isSpot && order.bucket.isWithdrawAfterDelistingAvailable()))\\n            ) {\\n                emit CloseLimitOrder({\\n                    orderId: order.id,\\n                    trader: order.trader,\\n                    closedBy: msg.sender,\\n                    reason: LimitOrderLibrary.CloseReason.Cancelled,\\n                    positionId: 0,\\n                    bucket: isSpot ? \\\"\\\" : order.bucket.name(),\\n                    borrowedAsset: isSpot ? address(0) : address(order.bucket.borrowedAsset()),\\n                    positionAsset: order.positionAsset,\\n                    leverage: order.leverage,\\n                    depositAsset: order.depositAsset,\\n                    depositAmount: order.depositAmount\\n                });\\n                _unlockAssetsAndDeleteOrder(order);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionParams calldata _params\\n    ) external override orderExists(_params.orderId) nonReentrant notBlackListed whenNotPaused {\\n        uint256 initialGasleft = gasleft();\\n        _require(\\n            _params.conditionIndex < openConditions[_params.orderId].length,\\n            Errors.CONDITION_INDEX_IS_OUT_OF_BOUNDS.selector\\n        );\\n\\n        LimitOrderLibrary.LimitOrder storage order = orders[orderIndexes[_params.orderId]];\\n\\n        _require(order.deadline > block.timestamp, Errors.ORDER_HAS_EXPIRED.selector);\\n\\n        if (address(order.bucket) != address(0)) {\\n            _require(order.bucket.isActive(), Errors.BUCKET_IS_NOT_ACTIVE.selector);\\n            (, bool isSupported) = order.bucket.allowedAssets(order.positionAsset);\\n            _require(isSupported, Errors.ASSET_IS_NOT_SUPPORTED.selector);\\n        }\\n        _require(_params.keeper != address(0), Errors.ADDRESS_IS_ZERO.selector);\\n\\n        LimitOrderLibrary.OpenPositionByOrderVars memory vars = LimitOrderLibrary.openPositionByOrder(\\n            order,\\n            _params,\\n            closeConditions[order.id],\\n            pm,\\n            traderBalanceVault,\\n            primexDNS,\\n            swapManager\\n        );\\n\\n        LimitOrderLibrary.Condition storage condition = openConditions[_params.orderId][_params.conditionIndex];\\n        _require(\\n            IConditionalOpeningManager(primexDNS.cmTypeToAddress(condition.managerType)).canBeFilledAfterSwap(\\n                orders[orderIndexes[_params.orderId]],\\n                condition.params,\\n                _params.comAdditionalParams,\\n                vars.exchangeRate\\n            ),\\n            Errors.ORDER_CAN_NOT_BE_FILLED.selector\\n        );\\n\\n        bool isSpot = order.bucket == IBucket(address(0));\\n        emit CloseLimitOrder({\\n            orderId: _params.orderId,\\n            trader: order.trader,\\n            closedBy: _params.keeper,\\n            reason: vars.closeReason,\\n            positionId: vars.newPositionId,\\n            bucket: isSpot ? \\\"\\\" : order.bucket.name(),\\n            borrowedAsset: isSpot ? address(0) : vars.assetIn,\\n            positionAsset: order.positionAsset,\\n            leverage: order.leverage,\\n            depositAsset: order.depositAsset,\\n            depositAmount: order.depositAmount\\n        });\\n        bool shouldUpdateReward = order.updatedConditionsAt != block.timestamp;\\n        _deleteOrder(order);\\n        if (shouldUpdateReward) {\\n            // to avoid abuse of the reward system, we will not pay the reward to\\n            // the keeper if the position open in the same block as the open conditions change\\n            pm.keeperRewardDistributor().updateReward(\\n                IKeeperRewardDistributor.UpdateRewardParams({\\n                    keeper: _params.keeper,\\n                    positionAsset: vars.assetOut,\\n                    positionSize: vars.amountOut,\\n                    action: IKeeperRewardDistributorStorage.KeeperActionType.OpenByOrder,\\n                    numberOfActions: 1,\\n                    gasSpent: initialGasleft - gasleft(),\\n                    decreasingCounter: new uint256[](0),\\n                    routesLength: abi.encode(_params.firstAssetRoutes, _params.depositInThirdAssetRoutes).length\\n                })\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function updateOrder(\\n        LimitOrderLibrary.UpdateLimitOrderParams calldata _params\\n    ) external payable override nonReentrant notBlackListed {\\n        LimitOrderLibrary.LimitOrder storage order = orders[orderIndexes[_params.orderId]];\\n        IBucket bucket = order.bucket;\\n\\n        _require(msg.sender == order.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n\\n        if (bucket != IBucket(address(0))) {\\n            _require(bucket.isActive(), Errors.BUCKET_IS_NOT_ACTIVE.selector);\\n        }\\n\\n        address priceOracle = address(pm.priceOracle());\\n\\n        order.updateProtocolFee(_params, traderBalanceVault, primexDNS, priceOracle);\\n\\n        if (_params.depositAmount != order.depositAmount) {\\n            order.updateDeposit(_params.depositAmount, _params.takeDepositFromWallet, traderBalanceVault);\\n        }\\n        if (_params.leverage != order.leverage) {\\n            order.updateLeverage(_params.leverage);\\n        }\\n\\n        uint256 positionSize = order.depositAmount.wmul(order.leverage);\\n\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            pm.minPositionSize(),\\n            pm.minPositionAsset(),\\n            positionSize,\\n            order.depositAsset,\\n            priceOracle\\n        );\\n        emit UpdateOrder({\\n            orderId: order.id,\\n            trader: order.trader,\\n            depositAmount: order.depositAmount,\\n            leverage: order.leverage,\\n            feeToken: order.feeToken,\\n            protocolFee: order.protocolFee\\n        });\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function updateOrderConditions(\\n        UpdateOrderConditionsParams memory _params\\n    ) external override nonReentrant notBlackListed {\\n        LimitOrderLibrary.LimitOrder storage order = orders[orderIndexes[_params.orderId]];\\n        _require(msg.sender == order.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        if (order.bucket != IBucket(address(0))) {\\n            _require(order.bucket.isActive(), Errors.BUCKET_IS_NOT_ACTIVE.selector);\\n        }\\n        if (keccak256(abi.encode(_params.closeConditions)) != keccak256(abi.encode(closeConditions[order.id]))) {\\n            order.setCloseConditions(closeConditions, _params.closeConditions, primexDNS);\\n        }\\n\\n        if (keccak256(abi.encode(_params.openConditions)) != keccak256(abi.encode(openConditions[order.id]))) {\\n            order.setOpenConditions(openConditions, _params.openConditions, primexDNS);\\n            order.updatedConditionsAt = block.timestamp;\\n        }\\n        emit UpdateOrderConditions({\\n            orderId: _params.orderId,\\n            trader: order.trader,\\n            openConditions: _params.openConditions,\\n            closeConditions: _params.closeConditions\\n        });\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function setSwapManager(address _swapManager) external override onlyRole(BIG_TIMELOCK_ADMIN) {\\n        _require(\\n            IERC165Upgradeable(_swapManager).supportsInterface(type(ISwapManager).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    /**\\n     * @inheritdoc IPausable\\n     */\\n    function pause() external override onlyRole(EMERGENCY_ADMIN) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @inheritdoc IPausable\\n     */\\n    function unpause() external override onlyRole(SMALL_TIMELOCK_ADMIN) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function getOrder(uint256 _id) external view override returns (LimitOrderLibrary.LimitOrder memory) {\\n        _require(orders[orderIndexes[_id]].id == _id, Errors.ORDER_DOES_NOT_EXIST.selector);\\n        return orders[orderIndexes[_id]];\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function getOrderByIndex(uint256 _index) external view override returns (LimitOrderLibrary.LimitOrder memory) {\\n        return orders[_index];\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function getTraderOrdersLength(address _trader) external view override returns (uint256) {\\n        return traderOrderIds[_trader].length;\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function getTraderOrders(address _trader) external view override returns (LimitOrderLibrary.LimitOrder[] memory) {\\n        uint256 ordersCount = traderOrderIds[_trader].length;\\n        LimitOrderLibrary.LimitOrder[] memory traderOrders = new LimitOrderLibrary.LimitOrder[](ordersCount);\\n        for (uint256 i; i < ordersCount; i++) {\\n            uint256 id = traderOrderIds[_trader][i];\\n            traderOrders[i] = orders[orderIndexes[id]];\\n        }\\n        return traderOrders;\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function getBucketOrdersLength(address _bucket) external view override returns (uint256) {\\n        return bucketOrderIds[_bucket].length;\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function getBucketOrders(address _bucket) external view override returns (LimitOrderLibrary.LimitOrder[] memory) {\\n        uint256 ordersCount = bucketOrderIds[_bucket].length;\\n        LimitOrderLibrary.LimitOrder[] memory bucketOrders = new LimitOrderLibrary.LimitOrder[](ordersCount);\\n        for (uint256 i; i < ordersCount; i++) {\\n            uint256 id = bucketOrderIds[_bucket][i];\\n            bucketOrders[i] = orders[orderIndexes[id]];\\n        }\\n        return bucketOrders;\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function canBeFilled(\\n        uint256 _orderId,\\n        uint256 _conditionIndex,\\n        bytes calldata _additionalParams\\n    ) public override returns (bool) {\\n        _require(_conditionIndex < openConditions[_orderId].length, Errors.CONDITION_INDEX_IS_OUT_OF_BOUNDS.selector);\\n        LimitOrderLibrary.Condition storage condition = openConditions[_orderId][_conditionIndex];\\n        LimitOrderLibrary.LimitOrder storage order = orders[orderIndexes[_orderId]];\\n\\n        if (order.deadline < block.timestamp) return false;\\n\\n        if (address(order.bucket) != address(0)) {\\n            (, bool isSupported) = order.bucket.allowedAssets(order.positionAsset);\\n            if (!order.bucket.isActive() || !isSupported) return false;\\n        }\\n\\n        return\\n            IConditionalOpeningManager(primexDNS.cmTypeToAddress(condition.managerType)).canBeFilledBeforeSwap(\\n                orders[orderIndexes[_orderId]],\\n                condition.params,\\n                _additionalParams\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns orders array length.\\n     */\\n    function getOrdersLength() public view override returns (uint256) {\\n        return orders.length;\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function getCloseConditions(uint256 _orderId) public view override returns (LimitOrderLibrary.Condition[] memory) {\\n        return closeConditions[_orderId];\\n    }\\n\\n    /**\\n     * @inheritdoc ILimitOrderManager\\n     */\\n    function getOpenConditions(uint256 _orderId) public view override returns (LimitOrderLibrary.Condition[] memory) {\\n        return openConditions[_orderId];\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param _interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(ILimitOrderManager).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice Unlocks a deposit amount and a fee amount in the TraderBalanceVault and deletes the order\\n     * @param _order order to delete\\n     */\\n    function _unlockAssetsAndDeleteOrder(LimitOrderLibrary.LimitOrder memory _order) internal {\\n        //unlock deposit\\n        traderBalanceVault.unlockAsset(\\n            ITraderBalanceVault.UnlockAssetParams(\\n                _order.trader,\\n                _order.trader,\\n                _order.depositAsset,\\n                _order.depositAmount\\n            )\\n        );\\n        //unlock fee\\n        traderBalanceVault.unlockAsset(\\n            ITraderBalanceVault.UnlockAssetParams(_order.trader, _order.trader, _order.feeToken, _order.protocolFee)\\n        );\\n        _deleteOrder(_order);\\n    }\\n\\n    /**\\n     * @notice Deletes the order from the orders array\\n     * @param _order order to delete\\n     */\\n    function _deleteOrder(LimitOrderLibrary.LimitOrder memory _order) internal {\\n        delete openConditions[_order.id];\\n        delete closeConditions[_order.id];\\n\\n        uint256 lastBucketOrderId = bucketOrderIds[address(_order.bucket)][\\n            bucketOrderIds[address(_order.bucket)].length - 1\\n        ];\\n        bucketOrderIds[address(_order.bucket)][bucketOrderIndexes[_order.id]] = lastBucketOrderId;\\n        bucketOrderIndexes[lastBucketOrderId] = bucketOrderIndexes[_order.id];\\n        bucketOrderIds[address(_order.bucket)].pop();\\n        delete bucketOrderIndexes[_order.id];\\n\\n        uint256 lastTraderOrderId = traderOrderIds[_order.trader][traderOrderIds[_order.trader].length - 1];\\n        traderOrderIds[_order.trader][traderOrderIndexes[_order.id]] = lastTraderOrderId;\\n        traderOrderIndexes[lastTraderOrderId] = traderOrderIndexes[_order.id];\\n        traderOrderIds[_order.trader].pop();\\n        delete traderOrderIndexes[_order.id];\\n\\n        orders[orderIndexes[_order.id]] = orders[orders.length - 1];\\n        orderIndexes[orders[orders.length - 1].id] = orderIndexes[_order.id];\\n        orders.pop();\\n        delete orderIndexes[_order.id];\\n    }\\n}\\n\",\"keccak256\":\"0x5f30462b682848e8c5d221adf39e6d3c1a497bba871ff36a2861dd59f5557a8d\",\"license\":\"BUSL-1.1\"},\"contracts/LimitOrderManager/LimitOrderManagerStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"../libraries/TokenTransfersLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ILimitOrderManagerStorage} from \\\"./ILimitOrderManagerStorage.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IConditionalOpeningManager} from \\\"../interfaces/IConditionalOpeningManager.sol\\\";\\nimport {ISwapManager} from \\\"../interfaces/ISwapManager.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\n\\nabstract contract LimitOrderManagerStorage is\\n    ILimitOrderManagerStorage,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    ERC165Upgradeable\\n{\\n    LimitOrderLibrary.LimitOrder[] internal orders;\\n    uint256 public override ordersId;\\n    mapping(uint256 => uint256) public override orderIndexes;\\n    // mapping from orderId to the index in the traderOrderIds[trader] array\\n    mapping(uint256 => uint256) public override traderOrderIndexes;\\n    // mapping from trader address to the order ids array\\n    mapping(address => uint256[]) public override traderOrderIds;\\n    // mapping from orderId to the index in the bucketOrderIds[bucket] array\\n    mapping(uint256 => uint256) public override bucketOrderIndexes;\\n    // mapping from bucket address to the order ids array\\n    mapping(address => uint256[]) public override bucketOrderIds;\\n    // mapping from order to open conditions\\n    mapping(uint256 => LimitOrderLibrary.Condition[]) public openConditions;\\n    // mapping from order to close conditions\\n    mapping(uint256 => LimitOrderLibrary.Condition[]) public closeConditions;\\n\\n    IAccessControl public override registry;\\n    ITraderBalanceVault public override traderBalanceVault;\\n    IPrimexDNS public override primexDNS;\\n    IPositionManager public override pm;\\n    ISwapManager public override swapManager;\\n    IWhiteBlackList internal whiteBlackList;\\n}\\n\",\"keccak256\":\"0xf9b5f40263846da866607c7e79d4a2ee887d44df6279687ad94fc66ec6d0ab65\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {ILiquidityMiningRewardDistributorStorage} from \\\"./ILiquidityMiningRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributor is ILiquidityMiningRewardDistributorStorage, IPausable {\\n    struct RewardsInPMX {\\n        uint256 minReward;\\n        uint256 maxReward;\\n        uint256 extraReward;\\n    }\\n\\n    /**\\n     * @notice Emitted when a reward is claimed by a receiver from a specific bucket.\\n     * @param receiver The address of the receiver.\\n     * @param bucket The address of the bucket from which the reward is claimed.\\n     * @param amount The amount of the claimed reward.\\n     */\\n    event ClaimedReward(address indexed receiver, address indexed bucket, uint256 amount);\\n    /**\\n     * @notice Emitted when PMX tokens are withdrawn by an admin.\\n     * @param amount The amount of PMX tokens withdrawn.\\n     */\\n    event WithdrawPmxByAdmin(uint256 indexed amount);\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _primexDNS The address of the IPrimexDNS contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _registry The address of the registry contract.\\n     * @param _treasury The address of the treasury contract.\\n     * @param _reinvestmentRate The rate at which rewards are reinvested.\\n     * @param _reinvestmentDuration The duration for which rewards are reinvested.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IPrimexDNS _primexDNS,\\n        IERC20 _pmx,\\n        ITraderBalanceVault _traderBalanceVault,\\n        address _registry,\\n        address _treasury,\\n        uint256 _reinvestmentRate,\\n        uint256 _reinvestmentDuration,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Updates the reward amount for a specific bucket.\\n     * @dev Only callable by the PrimexDNS contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _pmxRewardsAmount The amount of PMX rewards to be allocated to the bucket.\\n     */\\n    function updateBucketReward(string memory _bucketName, uint256 _pmxRewardsAmount) external;\\n\\n    /**\\n     * @notice Adds points for a user for future reward distribution.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _miningAmount The amount of mining points to be added.\\n     * @param _maxStabilizationPeriodEnd The maximum end timestamp of the stabilization period.\\n     * @param _maxPeriodTime The maximum period time.\\n     * @param _currentTimestamp The current timestamp.\\n     */\\n    function addPoints(\\n        string memory _bucketName,\\n        address _user,\\n        uint256 _miningAmount,\\n        uint256 _maxStabilizationPeriodEnd,\\n        uint256 _maxPeriodTime,\\n        uint256 _currentTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes points for a user.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _name The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _amount The amount of mining points to be removed.\\n     */\\n    function removePoints(string memory _name, address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Claims the accumulated rewards for a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     */\\n    function claimReward(string memory _bucketName) external;\\n\\n    /**\\n     * @notice Moves rewards from one bucket to another.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketFrom The name of the source bucket.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _user The address of the user.\\n     * @param _isBucketLaunched A flag indicating if the destination bucket is launched.\\n     * @param _liquidityMiningDeadline The deadline for liquidity mining\\n     */\\n    function reinvest(\\n        string memory _bucketFrom,\\n        string memory _bucketTo,\\n        address _user,\\n        bool _isBucketLaunched,\\n        uint256 _liquidityMiningDeadline\\n    ) external;\\n\\n    /**\\n     * @dev The function to withdraw PMX from a delisted bucket or a bucket where liquidity mining failed (after reinvesting period).\\n     * Emits WithdrawPmxByAdmin event.\\n     * @param _bucketFrom Name of the bucket with failed liquidity mining event.\\n     */\\n    function withdrawPmxByAdmin(string memory _bucketFrom) external;\\n\\n    /**\\n     * @notice Retrieves information about a lender in a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @param _timestamp The timestamp for which the information is queried.\\n     * @return amountInMining The amount of tokens the lender has in mining for the given bucket.\\n     * @return currentPercent The current percentage of rewards the lender is eligible to receive for the given bucket.\\n     * Measured in WAD (1 WAD = 100%).\\n     * @return rewardsInPMX An object containing information about the lender's rewards in PMX for the given bucket.\\n     */\\n    function getLenderInfo(\\n        string calldata _bucketName,\\n        address _lender,\\n        uint256 _timestamp\\n    ) external view returns (uint256 amountInMining, uint256 currentPercent, RewardsInPMX memory rewardsInPMX);\\n\\n    /**\\n     * @notice Retrieves rewards information about a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @return totalPmxReward The total amount of PMX reward in the bucket.\\n     * @return withdrawnRewards The total amount of withdrawn rewards from the bucket.\\n     * @return totalPoints The total number of mining points in the bucket.\\n     */\\n    function getBucketInfo(\\n        string calldata _bucketName\\n    ) external view returns (uint256 totalPmxReward, uint256 withdrawnRewards, uint256 totalPoints);\\n\\n    /**\\n     * @notice Retrieves the amount of tokens a lender has in mining for a specific bucket.\\n     * @param _bucket The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @return The amount of tokens the lender has in mining for the given bucket.\\n     */\\n    function getLenderAmountInMining(string calldata _bucket, address _lender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc7af5cea0bdc1399a660a5d861d17af7933cd5665e2016239bc3656f262b40d4\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributorStorage {\\n    struct LenderInfo {\\n        uint256 points;\\n        uint256 depositedAmount;\\n    }\\n\\n    struct BucketInfo {\\n        uint256 totalPoints;\\n        uint256 totalPmxReward;\\n        uint256 withdrawnRewards;\\n        mapping(address => LenderInfo) lendersInfo;\\n    }\\n\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    function pmx() external view returns (IERC20);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function registry() external view returns (address);\\n\\n    function reinvestmentRate() external view returns (uint256);\\n\\n    function reinvestmentDuration() external view returns (uint256);\\n\\n    function extraRewards(address, string calldata) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x57beb8b607e842d2c04494b6cd351101acde829388c9b2c68b7ac0c4a37bdc0d\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPToken.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IPTokenStorage, IBucket, IFeeExecutor, IERC20MetadataUpgradeable, IActivityRewardDistributor} from \\\"./IPTokenStorage.sol\\\";\\n\\ninterface IPToken is IPTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     */\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after pTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     */\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param amount The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     */\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 amount, uint256 index);\\n\\n    event LockDeposit(address indexed user, uint256 indexed id, uint256 deadline, uint256 amount);\\n    event UnlockDeposit(address indexed user, uint256 indexed id);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the InterestIncreaser for current PToken.\\n     * @param _interestIncreaser The interest increaser address.\\n     */\\n    function setInterestIncreaser(IFeeExecutor _interestIncreaser) external;\\n\\n    /**\\n     * @dev Sets the lender reward distributor contract address.\\n     * @param _lenderRewardDistributor The address of the lender reward distributor contract.\\n     */\\n    function setLenderRewardDistributor(IActivityRewardDistributor _lenderRewardDistributor) external;\\n\\n    /**\\n     * @notice Locks a deposit for a specified user.\\n     * @param _user The address of the user for whom the deposit is being locked.\\n     * @param _amount The amount to be locked as a deposit.\\n     * @param _duration The duration for which the deposit will be locked.\\n     * @dev This function can only be called externally and overrides the corresponding function in the parent contract.\\n     * @dev The user must not be blacklisted.\\n     */\\n    function lockDeposit(address _user, uint256 _amount, uint256 _duration) external;\\n\\n    /**\\n     * @dev Unlocks a specific deposit.\\n     * @param _depositId The ID of the deposit to be unlocked.\\n     */\\n    function unlockDeposit(uint256 _depositId) external;\\n\\n    /**\\n     * @dev Mints `amount` pTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     * @return Minted amount of PTokens\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Mints pTokens to the reserve address\\n     * Compared to the normal mint, we don't revert when the amountScaled is equal to the zero. Additional checks were also removed\\n     * Only callable by the Bucket\\n     * @param _reserve The address of the reserve\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     */\\n    function mintToReserve(address _reserve, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns pTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the pTokens, getting them burned\\n     * @param _amount The amount of underlying token being returned to receiver\\n     * @param _index The current liquidityIndex\\n     * @return Burned amount of PTokens\\n     */\\n    function burn(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The scaled balances of the user\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns available balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The available balance of the user\\n     */\\n    function availableBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns locked deposits and balance of user\\n     * @param _user The owner of locked deposits\\n     * @return Structure with deposits and total locked balance of user\\n     */\\n    function getUserLockedBalance(address _user) external view returns (LockedBalance memory);\\n\\n    /**\\n     * @dev Returns the scaled total supply of pToken.\\n     * @return The scaled total supply of the pToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Function to get a deposit index in user's deposit array.\\n     * @param id Deposit id.\\n     * @return index Deposit index in user's 'deposit' array.\\n     */\\n    function getDepositIndexById(uint256 id) external returns (uint256 index);\\n}\\n\",\"keccak256\":\"0x2dc39fe1abee0110b63e93b78a647bfb11e00bed853dd4008efe9847d1028b1f\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPTokenStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IPTokenStorage is IERC20MetadataUpgradeable {\\n    struct Deposit {\\n        uint256 lockedBalance;\\n        uint256 deadline;\\n        uint256 id;\\n    }\\n\\n    struct LockedBalance {\\n        uint256 totalLockedBalance;\\n        Deposit[] deposits;\\n    }\\n\\n    function bucket() external view returns (IBucket);\\n\\n    function interestIncreaser() external view returns (IFeeExecutor);\\n\\n    function lenderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0x7be5f1ceda782aa7ce44588cf3b1f16af3e48d1fda0368f3dc801e84a67e0097\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\n\\nimport {IPositionManagerStorage} from \\\"./IPositionManagerStorage.sol\\\";\\nimport {IKeeperRewardDistributor} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IPositionManager is IPositionManagerStorage, IPausable {\\n    struct ClosePositionVars {\\n        PositionLibrary.Position position;\\n        bool borrowedAmountIsNotZero;\\n        uint256 oracleTolerableLimit;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    event SetMaxPositionSize(address token0, address token1, uint256 amountInToken0, uint256 amountInToken1);\\n    event SetDefaultOracleTolerableLimit(uint256 indexed oracleTolerableLimit);\\n    event SecurityBufferChanged(uint256 indexed securityBuffer);\\n    event MaintenanceBufferChanged(uint256 indexed maintenanceBuffer);\\n    event SetOracleTolerableLimit(address indexed assetA, address indexed assetB, uint256 oracleTolerableLimit);\\n    event KeeperRewardDistributorChanged(address indexed _keeperRewardDistributor);\\n    event MinPositionSizeAndAssetChanged(uint256 indexed _minPositionSize, address indexed _minPositionAsset);\\n    event OracleTolerableLimitMultiplierChanged(uint256 indexed newMultiplier);\\n\\n    event OpenPosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed openedBy,\\n        PositionLibrary.Position position,\\n        address feeToken,\\n        uint256 protocolFee,\\n        uint256 entryPrice,\\n        uint256 leverage,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event PartialClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        uint256 depositedAmount,\\n        uint256 scaledDebtAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut\\n    );\\n\\n    event IncreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event DecreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event UpdatePositionConditions(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    /**\\n     * @notice Initializes the contract with the specified addresses and initializes inherited contracts.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _keeperRewardDistributor,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Sets the maximum position size for a pair of tokens.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _token0 The address of the first token in the pair.\\n     * @param _token1 The address of the second token in the pair.\\n     * @param _amountInToken0 The maximum amount of token0 allowed in the position.\\n     * @param _amountInToken1 The maximum amount of token1 allowed in the position.\\n     */\\n    function setMaxPositionSize(\\n        address _token0,\\n        address _token1,\\n        uint256 _amountInToken0,\\n        uint256 _amountInToken1\\n    ) external;\\n\\n    /**\\n     * @notice Sets the default oracle tolerable limit for the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _percent The new value for the default oracle tolerable limit. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setDefaultOracleTolerableLimit(uint256 _percent) external;\\n\\n    /**\\n     * @notice Sets the oracle tolerable limit between two assets.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _assetA The address of the first asset.\\n     * @param _assetB The address of the second asset.\\n     * @param _percent The new value for the oracle tolerable limit between two assets. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(address _assetA, address _assetB, uint256 _percent) external;\\n\\n    /**\\n     * @notice Function to set oracleTolerableLimitMultiplier.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param newMultiplier New multiplier in WAD format.\\n     */\\n    function setOracleTolerableLimitMultiplier(uint256 newMultiplier) external;\\n\\n    /**\\n     * @notice Sets the security buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * 0 <= newSecurityBuffer < 1.\\n     * Buffer security parameter is used in calculating the liquidation conditions\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.i9v508hvrv42\\n     * @param newSecurityBuffer The new value of the security buffer in WAD format.\\n     */\\n    function setSecurityBuffer(uint256 newSecurityBuffer) external;\\n\\n    /**\\n     * @notice Sets the maintenance buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * The new maintenance buffer value should be greater than zero and less than one.\\n     * Maintenance buffer is used in calculating the maximum leverage\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.87oc1j1s9z21\\n     * @param newMaintenanceBuffer The new value of the maintenance buffer in WAD format.\\n     */\\n    function setMaintenanceBuffer(uint256 newMaintenanceBuffer) external;\\n\\n    /**\\n     * @notice Sets the address of the SpotTradingRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _spotTradingRewardDistributor The address of the SpotTradingRewardDistributor contract.\\n     */\\n    function setSpotTradingRewardDistributor(address _spotTradingRewardDistributor) external;\\n\\n    /**\\n     * @notice Sets the KeeperRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     */\\n    function setKeeperRewardDistributor(IKeeperRewardDistributor _keeperRewardDistributor) external;\\n\\n    /**\\n     * @notice Opens a position based on the provided order parameters.\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param _params The parameters for opening a position.\\n     * @return The total borrowed amount, position amount, position ID, and entry price of the new position.\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Opens margin position.\\n     * @dev Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal.\\n     * Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'.\\n     * Mints debtToken for trader (msg.sender)\\n     * @param _params The parameters required to open a position.\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Close trader's active position or liquidate risky position.\\n     * @dev Protocol will fall down (revert) if two conditions occur both:\\n     * 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1,\\n     * so position will make loss for Protocol.\\n     * 2. Not enough liquidity in bucket to pay that loss.\\n     * @param _id Position id for `msg.sender`.\\n     * @param _dealReceiver The receiver of the rest of trader's deposit.\\n     * @param _routes swap routes on dexes\\n     * @param _amountOutMin minimum allowed amount out for position\\n     */\\n    function closePosition(\\n        uint256 _id,\\n        address _dealReceiver,\\n        PrimexPricingLibrary.Route[] memory _routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Closes trader's active position by closing condition\\n     * @param _id Position id.\\n     * @param _keeper The address of the keeper or the recipient of the reward.\\n     * @param _routes An array of routes for executing trades, swap routes on dexes.\\n     * @param _conditionIndex The index of the condition to be used for closing the position.\\n     * @param _ccmAdditionalParams Additional params needed for canBeClosed() of the ConditionalClosingManager.\\n     * @param _closeReason The reason for closing the position.\\n     */\\n    function closePositionByCondition(\\n        uint256 _id,\\n        address _keeper,\\n        PrimexPricingLibrary.Route[] calldata _routes,\\n        uint256 _conditionIndex,\\n        bytes calldata _ccmAdditionalParams,\\n        PositionLibrary.CloseReason _closeReason\\n    ) external;\\n\\n    /**\\n     * @notice Allows the trader to partially close a position.\\n     * @param _positionId The ID of the position to be partially closed.\\n     * @param _amount The amount of the position asset to be closed from the position.\\n     * @param _depositReceiver The address where the remaining deposit will be sent.\\n     * @param _routes The routing information for swapping assets.\\n     * @param _amountOutMin The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.Route[] calldata _routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Updates the position with the given position ID by setting new close conditions.\\n     * @param _positionId The ID of the position to update.\\n     * @param _closeConditions An array of close conditions for the position.\\n     * @dev The caller of this function must be the trader who owns the position.\\n     * @dev Emits an `UpdatePositionConditions` event upon successful update.\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external;\\n\\n    /**\\n     * @notice Increases the deposit amount for a given position.\\n     * @param _positionId The ID of the position to increase the deposit for.\\n     * @param _amount The amount to increase the deposit by.\\n     * @param _asset The address of the asset to deposit.\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit immediately.\\n     * @param _routes An array of routes to use for trading.\\n     * @param _amountOutMin The minimum amount of the output asset to receive from trading.\\n     */\\n    function increaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _asset,\\n        bool _takeDepositFromWallet,\\n        PrimexPricingLibrary.Route[] calldata _routes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Decreases the deposit amount for a given position.\\n     * @param _positionId The ID of the position.\\n     * @param _amount The amount to decrease the deposit by.\\n     */\\n    function decreaseDeposit(uint256 _positionId, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the minimum position size and the corresponding asset for positions.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _minPositionSize The new minimum position size.\\n     * @param _minPositionAsset The address of the asset associated with the minimum position size.\\n     */\\n    function setMinPositionSize(uint256 _minPositionSize, address _minPositionAsset) external;\\n\\n    /**\\n     * @notice Checks if a position can be closed based on a specific condition.\\n     * @param _positionId The ID of the position.\\n     * @param _conditionIndex The index of the condition within the position's close conditions.\\n     * @param _additionalParams Additional parameters required for the condition check.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosed(\\n        uint256 _positionId,\\n        uint256 _conditionIndex,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Deletes a positions by their IDs from a specific bucket for a given traders.\\n     * @param _ids The IDs of the positions to be deleted.\\n     * @param _traders The addresses of the traders who owns the position.\\n     * @param _length The length of the traders array.\\n     * @param _bucket The address of the bucket from which the position is to be deleted.\\n     */\\n    function deletePositions(\\n        uint256[] calldata _ids,\\n        address[] calldata _traders,\\n        uint256 _length,\\n        address _bucket\\n    ) external;\\n\\n    /**\\n     * @notice Transfers a specified amount of tokens from the contract to a specified address.\\n     * @dev Only callable by the BATCH_MANAGER_ROLE role.\\n     * @param _token The address of the token to be transferred.\\n     * @param _to The address to which the tokens will be transferred.\\n     * @param _amount The amount of tokens to be transferred.\\n     */\\n    function doTransferOut(address _token, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Returns the oracle tolerable limit for the given asset pair.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the position information for a given ID.\\n     * @param _id The ID of the position to retrieve.\\n     * @return position The position information associated with the given ID.\\n     */\\n    function getPosition(uint256 _id) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Retrieves the position at the specified index.\\n     * @param _index The index of the position to retrieve.\\n     * @return The Position struct at the specified index.\\n     */\\n    function getPositionByIndex(uint256 _index) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Returns the length of the positions array.\\n     * @return The length of the positions array.\\n     */\\n    function getAllPositionsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The number of positions the trader has.\\n     */\\n    function getTraderPositionsLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of positions the bucket has.\\n     */\\n    function getBucketPositionsLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt of a position with the given ID.\\n     * @param _id The ID of the position.\\n     * @return The debt of the position, measured in the same decimal format as debtTokens.\\n     */\\n    function getPositionDebt(uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the close conditions for a specific position.\\n     * @param _positionId The ID of the position.\\n     * @return An array of close conditions associated with the position.\\n     */\\n    function getCloseConditions(uint256 _positionId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the close condition for a given position and index.\\n     * @param _positionId The identifier of the position.\\n     * @param _index The index of the close condition.\\n     * @return The close condition at the specified position and index.\\n     */\\n    function getCloseCondition(\\n        uint256 _positionId,\\n        uint256 _index\\n    ) external view returns (LimitOrderLibrary.Condition memory);\\n\\n    /**\\n     * @notice \\u0421hecks if the position is risky.\\n     * @param _id the id of the position\\n     * @return (1) True if position is risky\\n     */\\n    function isPositionRisky(uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if a position with the given ID is delisted.\\n     * @param _id The ID of the position.\\n     * @return A boolean indicating whether the position is delisted or not.\\n     */\\n    function isDelistedPosition(uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the health value of a position.\\n     * @param _id The ID of the position.\\n     * @return The health value of the position in WAD format.\\n     */\\n    function healthPosition(uint256 _id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x980be3b8ebfcd45983fa826a4875e9d5762bed30c3f067d6839c76b0f19c78a1\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManagerStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IKeeperRewardDistributor} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {ISpotTradingRewardDistributor} from \\\"../SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\\\";\\n\\ninterface IPositionManagerStorage {\\n    function maxPositionSize(address, address) external returns (uint256);\\n\\n    function defaultOracleTolerableLimit() external returns (uint256);\\n\\n    function securityBuffer() external view returns (uint256);\\n\\n    function maintenanceBuffer() external view returns (uint256);\\n\\n    function positionsId() external view returns (uint256);\\n\\n    function traderPositionIds(address _trader, uint256 _index) external view returns (uint256);\\n\\n    function bucketPositionIds(address _bucket, uint256 _index) external view returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    function priceOracle() external view returns (IPriceOracle);\\n\\n    function keeperRewardDistributor() external view returns (IKeeperRewardDistributor);\\n\\n    function spotTradingRewardDistributor() external view returns (ISpotTradingRewardDistributor);\\n\\n    function minPositionSize() external view returns (uint256);\\n\\n    function minPositionAsset() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7527f93ae59e40d28aeffed2a17eda5cef1d5caf8cc2c3efcd7ae6388e776f42\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracle.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPriceOracleStorage} from \\\"./IPriceOracleStorage.sol\\\";\\n\\ninterface IPriceOracle is IPriceOracleStorage {\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     */\\n    function initialize(address _registry, address _eth) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Add or update price feed for assets pair. For only the admin role.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @param priceFeed The chain link price feed address for the pair assetA/assetB\\n     */\\n    function updatePriceFeed(address assetA, address assetB, address priceFeed) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Requests two priceFeeds - assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * @dev If there is no price feed found, the code will return a message that no price feed found.\\n     * @param baseAsset The first currency within the currency pair quotation (the base currency).\\n     * @param quoteAsset The second currency within the currency pair quotation (the quote currency).\\n     * @return A tuple of basePriceFeed and quotePriceFeed. The addresses of the price feed for the base asset and quote asset respectively.\\n     */\\n    function getPriceFeedsPair(address baseAsset, address quoteAsset) external view returns (address, address);\\n\\n    /**\\n     * @notice Requests priceFeed for the actual exchange rate for an assetA/assetB pair.\\n     * @dev If no price feed for the pair found, USD and ETH are used as intermediate tokens.\\n     * A price for assetA/assetB can be derived if two data feeds exist:\\n     * assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * If there is no price feed found, the code will return a message that no price feed found.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality which will be recalucaled in PrimexPricingLibrary.\\n     * @return direction of a pair as it stored in chainLinkPriceFeeds (i.e. returns 'true' for assetA/assetB, and 'false' for assetB/assetA).\\n     * Throws if priceFeed wasn't found or priceFeed hasn't answer is 0.\\n     */\\n    function getExchangeRate(address assetA, address assetB) external view returns (uint256, bool);\\n\\n    /**\\n     * @notice Retrieves the direct price feed for the given asset pair.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return priceFeed The address of the direct price feed.\\n     */\\n    function getDirectPriceFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfbf719814c5ec263c449b7bc715594323e892de4b1bf463fe27dd1f6883e52c2\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracleStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IPriceOracleStorage {\\n    function registry() external view returns (address);\\n\\n    function eth() external view returns (address);\\n\\n    function gasPriceFeed() external view returns (address);\\n\\n    function pairPriceDrops(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd9231195e9d884dc5fa4b2d772a2a6d6cdd62b9bf321899102983e88e62af8dc\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNS.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPrimexDNSStorage} from \\\"./IPrimexDNSStorage.sol\\\";\\n\\ninterface IPrimexDNS is IPrimexDNSStorage {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ChangeFeeRate(OrderType orderType, address token, uint256 rate);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    /**\\n     * @param orderType The order type for which the rate is set\\n     * @param feeToken The token address for which the rate is set\\n     * @param rate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        OrderType orderType;\\n        address feeToken;\\n        uint256 rate;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _treasury The address of the Treasury contract.\\n     * @param _delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param _adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param _feeRateParams Initial fee params\\n     */\\n    function initialize(\\n        address _registry,\\n        address _pmx,\\n        address _treasury,\\n        uint256 _delistingDelay,\\n        uint256 _adminWithdrawalDelay,\\n        FeeRateParams[] calldata _feeRateParams\\n    ) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the protocol rate in PMX.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setFeeRate(FeeRateParams calldata _feeRateParams) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * 3 => TrailingStopCCM\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n}\\n\",\"keccak256\":\"0x371b01ecdf752804e79e0d52904e923aeace407e5b0b1f421e035e34d33592dc\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNSStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IPrimexDNSStorage {\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Deprecated\\n    }\\n\\n    enum OrderType {\\n        MARKET_ORDER,\\n        LIMIT_ORDER,\\n        SWAP_MARKET_ORDER,\\n        SWAP_LIMIT_ORDER\\n    }\\n\\n    struct BucketData {\\n        address bucketAddress;\\n        Status currentStatus;\\n        uint256 delistingDeadline;\\n        // The deadline is for the admin to call Bucket.withdrawAfterDelisting().\\n        uint256 adminDeadline;\\n    }\\n    struct DexData {\\n        address routerAddress;\\n        bool isActive;\\n    }\\n\\n    struct AdapterData {\\n        string[] dexes;\\n        bool isAdded;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function delistingDelay() external view returns (uint256);\\n\\n    function adminWithdrawalDelay() external view returns (uint256);\\n\\n    function buckets(string memory) external view returns (address, Status, uint256, uint256);\\n\\n    function dexes(string memory) external view returns (address, bool);\\n\\n    function cmTypeToAddress(uint256 cmType) external view returns (address);\\n\\n    function dexAdapter() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function aavePool() external view returns (address);\\n\\n    function feeRates(OrderType _orderType, address _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x434249b0db2c0a9ef29d5e06cef221ff655da7d7d19b83227e0f90ff6dc06c17\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserve.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserveStorage} from \\\"./IReserveStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IReserve is IReserveStorage, IPausable {\\n    event BurnAmountCalculated(uint256 burnAmount);\\n    event TransferRestrictionsChanged(address indexed pToken, TransferRestrictions newTransferRestrictions);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param dns The address of PrimexDNS contract\\n     * @param registry The address of Registry contract\\n     */\\n    function initialize(IPrimexDNS dns, address registry) external;\\n\\n    /**\\n     * @dev Burns the permanent loss amount (presented in pTokens) from the Reserve for a particular bucket\\n     * @param bucket The address of a bucket\\n     * Emits BurnAmountCalculated(burnAmount) event\\n     */\\n    function paybackPermanentLoss(IBucket bucket) external;\\n\\n    /**\\n     * @dev Transfers some bonus in pTokens to receiver from Reserve\\n     * Can be called by executor only\\n     * @param _bucketName The bucket where the msg.sender should be a fee decreaser (for debtToken) or\\n     * interest increaser (for pToken)\\n     * @param _to The receiver of bonus pTokens\\n     * @param _amount The amount of bonus pTokens to transfer\\n     */\\n    function payBonus(string memory _bucketName, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @dev Function to transfer tokens to the Treasury. Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param bucket The bucket from which to transfer pTokens\\n     * @param amount The amount of pTokens to transfer\\n     */\\n    function transferToTreasury(address bucket, uint256 amount) external;\\n\\n    /**\\n     * @dev Function to set transfer restrictions for a token.\\n     * @notice Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param pToken pToken to set restrictions for\\n     * @param transferRestrictions Min amount to be left in the Reserve\\n     */\\n    function setTransferRestrictions(address pToken, TransferRestrictions calldata transferRestrictions) external;\\n}\\n\",\"keccak256\":\"0x2c2145f1905eca14e254a417095b4999ec8b15a6686446871a9442bc8fd0a44f\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserveStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IReserveStorage {\\n    struct TransferRestrictions {\\n        uint256 minAmountToBeLeft;\\n        uint256 minPercentOfTotalSupplyToBeLeft;\\n    }\\n\\n    event TransferFromReserve(address pToken, address to, uint256 amount);\\n\\n    function transferRestrictions(address pToken) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x427d460adc8ddd1c2b4692baaec00af9b39742647d3bb1ab15b6be456c17289f\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ISpotTradingRewardDistributorStorage} from \\\"./ISpotTradingRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISpotTradingRewardDistributor is ISpotTradingRewardDistributorStorage, IPausable {\\n    event SpotTradingClaimReward(address indexed trader, uint256 amount);\\n    event RewardPerPeriodDecreased(uint256 indexed rewardPerPeriod);\\n    event TopUpUndistributedPmxBalance(uint256 indexed amount);\\n    event RewardPerPeriodChanged(uint256 indexed rewardPerPeriod);\\n    event PmxWithdrawn(uint256 indexed amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param registry The address of Registry contract\\n     * @param periodDuration The duration of a reward period\\n     * @param priceOracle The address of PriceOracle contract\\n     * @param pmx The address of PMX token\\n     * @param traderBalanceVault The address of TraderBalanceVault contract\\n     * @param treasury The address of Treasury contract\\n     */\\n    function initialize(\\n        address registry,\\n        uint256 periodDuration,\\n        address priceOracle,\\n        address pmx,\\n        address payable traderBalanceVault,\\n        address treasury\\n    ) external;\\n\\n    /**\\n     * @dev Function to update spot trader activity. Only PM_ROLE can call it.\\n     * @param trader Address of a trader\\n     * @param positionAsset Address of a position asset\\n     * @param positionAmount Amount of a position asset\\n     */\\n    function updateTraderActivity(address trader, address positionAsset, uint256 positionAmount) external;\\n\\n    /**\\n     * @dev Function to claim reward for spot trading activity.\\n     * Transfer rewards on the balance in traderBalanceVault\\n     * Emits SpotTradingClaimReward(address trader, uint256 amount)\\n     */\\n    function claimReward() external;\\n\\n    /**\\n     * @dev Function to set new reward per period. Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param rewardPerPeriod New value for reward per period\\n     */\\n    function setRewardPerPeriod(uint256 rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to decrease reward per period. Only EMERGENCY_ADMIN can call it.\\n     * @param _rewardPerPeriod New value for reward per period, must be less than the current value\\n     */\\n    function decreaseRewardPerPeriod(uint256 _rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to topUp the contract PMX balance\\n     * @param amount PMX amount to add to the contract balance\\n     */\\n    function topUpUndistributedPmxBalance(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to withdraw PMX from the contract to treasury\\n     * @param amount Amount of PMX to withdraw from the contract\\n     */\\n    function withdrawPmx(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to get SpotTraderActivity\\n     * @param periodNumber Period number\\n     * @param traderAddress Address of a trader\\n     * @return A struct with activity and hasClaimed members\\n     */\\n    function getSpotTraderActivity(uint256 periodNumber, address traderAddress) external view returns (uint256);\\n\\n    /**\\n     * @dev Get information for the period corresponding to the given timestamp\\n     * @param timestamp The timestamp to get information about\\n     * @return totalReward Total reward for the corresponding period\\n     * @return totalActivity Total activity for the corresponding period\\n     */\\n    function getPeriodInfo(uint256 timestamp) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Function to get an array of period numbers when trader had any activity\\n     * @param trader Address of a trader\\n     * @return An array of period numbers with trader activity\\n     */\\n    function getPeriodsWithTraderActivity(address trader) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Function to calculate trader's reward for her activities during periods\\n     * @param trader Address of a trader\\n     * @return reward Amount of reward\\n     * @return currentPeriod The current period\\n     */\\n    function calculateReward(address trader) external view returns (uint256 reward, uint256 currentPeriod);\\n}\\n\",\"keccak256\":\"0xbc25e92e6decf4beb8369378f389ed513371d8ff2deb61d0561699a6f5c39633\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributorStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ISpotTradingRewardDistributorStorage {\\n    struct PeriodInfo {\\n        uint256 totalReward;\\n        // map trader address to her activity\\n        mapping(address => uint256) traderActivity;\\n        uint256 totalActivity;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function dns() external view returns (address);\\n\\n    function periodDuration() external view returns (uint256);\\n\\n    function initialPeriodTimestamp() external view returns (uint256);\\n\\n    function rewardPerPeriod() external view returns (uint256);\\n\\n    function pmx() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function traderBalanceVault() external view returns (address payable);\\n\\n    function undistributedPMX() external view returns (uint256);\\n\\n    function periods(uint256 periodNumber) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x23c8112548009d3d70825d16e9850ebacf0fc4f015aa6ab8649bfeec7bf72ea5\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVault.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITraderBalanceVaultStorage} from \\\"./ITraderBalanceVaultStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITraderBalanceVault is ITraderBalanceVaultStorage, IPausable {\\n    /**\\n     * Types of way to open a position or order\\n     */\\n    enum OpenType {\\n        OPEN_BY_ORDER,\\n        OPEN,\\n        CREATE_LIMIT_ORDER\\n    }\\n\\n    /**\\n     * @param trader The trader, who opens margin deal\\n     * @param depositReceiver the address to which the deposit is transferred when blocked.\\n     * This happens because the trader's deposit is involved in the position\\n     * @param borrowedAsset The token to lock for deal in a borrowed asset\\n     * @param depositAsset The token is a deposit asset\\n     * (it is blocked when creating a limit order\\n     * For others, the operations is transferred to the account of the receiver of the deposit and is swapped )\\n     * @param depositAmount Amount of tokens in a deposit asset\\n     * @param depositInBorrowedAmount Amount of tokens to lock for deal in a borrowed asset\\n     * @param openType Corresponds to the purpose of locking\\n     */\\n    struct LockAssetParams {\\n        address trader;\\n        address depositReceiver;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        OpenType openType;\\n    }\\n\\n    /**\\n     * @param trader The trader who opened the position\\n     * @param receiver The receiver of the rest of trader deposit.\\n     * @param asset Borrowed asset of the position being closed (the need for accrual of profit).\\n     * @param unlockAmount The amount of unlocked collateral for deal\\n     * @param returnToTrader The returned to trader amount when position was closed.\\n     */\\n    struct UnlockAssetParams {\\n        address trader;\\n        address receiver;\\n        address asset;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @param traders An array of traders for which available balance should be increased\\n     * @param amounts An array of amounts corresponding to traders' addresses that should be added to their available balances\\n     * @param asset Asset address which amount will be increased\\n     * @param length The amount of traders in an array\\n     */\\n    struct BatchTopUpAvailableBalanceParams {\\n        address[] traders;\\n        uint256[] amounts;\\n        address asset;\\n        uint256 length;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed asset, uint256 amount);\\n    event Withdraw(address indexed withdrawer, address asset, uint256 amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _registry The address of Registry contract\\n     * @param _whiteBlackList The address of WhiteBlackList contract\\n     */\\n    function initialize(address _registry, address _whiteBlackList) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @dev Deposits trader collateral for margin deal\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Withdraws the rest of trader's deposit after closing deal\\n     * @param _asset The collateral asset for withdraw\\n     * @param _amount The amount of '_asset' to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Traders lock their collateral for the limit order.\\n     * @param _trader The owner of collateral\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function increaseLockedBalance(address _trader, address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Locks deposited trader's assets as collateral for orders.\\n     * Decreases the available balance when opening position.\\n     * Transfers deposited amount to the deposit receiver.\\n     * @param _params parameters necessary to lock asset\\n     */\\n    function useTraderAssets(LockAssetParams calldata _params) external;\\n\\n    /**\\n     * @dev Unlocks trader's collateral when open position by order or update deposit.\\n     * @param _params parameters necessary to unlock asset\\n     */\\n    function unlockAsset(UnlockAssetParams calldata _params) external;\\n\\n    /**\\n     * The function to increase available balance for several traders\\n     * @param _params A struct containing BatchTopUpAvailableBalanceParams\\n     */\\n    function batchTopUpAvailableBalance(BatchTopUpAvailableBalanceParams calldata _params) external;\\n\\n    /**\\n     * Withdraws an asset amount from an asset holder to a receiver\\n     * @param _from Withdraw from address\\n     * @param _to Withdraw to address\\n     * @param _asset Address of an asset\\n     * @param _amount Amount of an asset\\n     * @param fromLocked True if withdraw from locked balance\\n     */\\n    function withdrawFrom(address _from, address _to, address _asset, uint256 _amount, bool fromLocked) external;\\n\\n    /**\\n     * Increases available balance of a receiver in the protocol\\n     * @param receiver The address of an asset receiver\\n     * @param asset The asset address for which available balance will be increased\\n     * @param amount The amount of an asset\\n     */\\n    function topUpAvailableBalance(address receiver, address asset, uint256 amount) external payable;\\n}\\n\",\"keccak256\":\"0x7d7021be769ab6a7c4086eb6dfec873f22ae75e84d72b66492fa23d7a9b4f329\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVaultStorage.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ITraderBalanceVaultStorage {\\n    struct TraderBalance {\\n        uint256 availableBalance;\\n        uint256 lockedBalance;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    /**\\n     *\\n     * @param trader Trader's address\\n     * @param asset Asset address\\n     * @return availableBalance availableBalance\\n     * @return lockedBalance lockedBalance\\n     */\\n    function balances(\\n        address trader,\\n        address asset\\n    ) external view returns (uint256 availableBalance, uint256 lockedBalance);\\n}\\n\",\"keccak256\":\"0xd103723047a828ac9dcd2434ac3e8c4f57435faaeb310ae62f1cd67065dc2e80\",\"license\":\"BUSL-1.1\"},\"contracts/WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IWhiteBlackList {\\n    enum AccessType {\\n        UNLISTED,\\n        WHITELISTED,\\n        BLACKLISTED\\n    }\\n    event WhitelistedAddressAdded(address indexed addr);\\n    event WhitelistedAddressRemoved(address indexed addr);\\n    event BlacklistedAddressAdded(address indexed addr);\\n    event BlacklistedAddressRemoved(address indexed addr);\\n\\n    function addAddressToWhitelist(address _address) external;\\n\\n    function addAddressesToWhitelist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromWhitelist(address _address) external;\\n\\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external;\\n\\n    function addAddressToBlacklist(address _address) external;\\n\\n    function addAddressesToBlacklist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromBlacklist(address _address) external;\\n\\n    function removeAddressesFromBlacklist(address[] calldata _addresses) external;\\n\\n    function getAccessType(address _address) external view returns (AccessType);\\n\\n    function isBlackListed(address _address) external view returns (bool);\\n\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa02e0237ab68d21bb3005cac9d945da1eaab863d2321202295d72a1164d9f0ed\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x4b53df7e37eeb7c34aaed6ed236909444a40d5edf62e944f55cf78cbe43948d6\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/IConditionalClosingManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalClosingManager {\\n    /**\\n     * @notice Checks if a position can be closed.\\n     * @param _position The position details.\\n     * @param _params The encoded parameters for closing the position.\\n     * @param _additionalParams Additional encoded parameters.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosedBeforeSwap(\\n        PositionLibrary.Position calldata _position,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if a position can be closed.\\n     * @param _position The position details.\\n     * @param _params The encoded parameters for closing the position.\\n     * @param _additionalParams Additional encoded parameters (not used).\\n     * @param _closeAmount The amount of the position to be closed, measured in the same decimal format as the position's asset.\\n     * @param _borowedAssetAmount The amount of borrowed asset.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosedAfterSwap(\\n        PositionLibrary.Position calldata _position,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _closeAmount,\\n        uint256 _borowedAssetAmount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x18137eb0c4fb8b753c3bd6e9f5dc44aad884c13ed8249351d0e1d59fdb2e5295\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IConditionalOpeningManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalOpeningManager {\\n    /**\\n     * @notice Checks if a limit order can be filled.\\n     * Is used as a view function outside transactions and allows to check whether a specific order can be executed imitating the swap.\\n     * @param _order The limit order details.\\n     * @param _params Open condition parameters for the order.\\n     * @param _additionalParams Additional parameters for the order.\\n     * @return A boolean value indicating if the limit order can be filled.\\n     */\\n    function canBeFilledBeforeSwap(\\n        LimitOrderLibrary.LimitOrder calldata _order,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if a limit order can be filled based on the exchange rate.\\n     * @dev This function compares the exchange rate with the limit price.\\n     * @param _order The limit order details.\\n     * @param _params Open condition parameters for the order.\\n     * @param _additionalParams Additional parameters for the order.\\n     * @param _exchangeRate The exchange rate in WAD format to compare with the limit price.\\n     * @return A boolean value indicating if the limit order can be filled based on the exchange rate.\\n     */\\n    function canBeFilledAfterSwap(\\n        LimitOrderLibrary.LimitOrder calldata _order,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _exchangeRate\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xf5bf329b09f2a53e59e60e7faa30e1df63f474ad8d0359c931277f623f120c54\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDexAdapter.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\n\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ICurveCalc} from \\\"./routers/ICurveCalc.sol\\\";\\nimport {ICurveRegistry} from \\\"./routers/ICurveRegistry.sol\\\";\\n\\ninterface IDexAdapter {\\n    /**\\n     * @notice Possible dex types\\n     */\\n    enum DexType {\\n        none, // 0\\n        UniswapV2, // 1  \\\"uniswap\\\", \\\"sushiswap\\\", \\\"quickswap\\\" (v2)\\n        UniswapV3, // 2\\n        Curve, // 3\\n        Balancer, // 4\\n        AlgebraV3, // 5\\n        Meshswap // 6\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * Encoded differently for different dexes:\\n     * Uniswap v2 - just encoded array of asset addresses\\n     * Uniswap v3 - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes3(uint24(pool1Fee)), bytes20(address(usdc)), bytes3(uint24(pool2Fee)) ...)\\n     * Quickswap - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes20(address(usdc)), bytes20(address(usdt) ...)\\n     * Curve - encoded array of asset addresses and pool addresses\\n     * Balancer - encoded array of asset addresses, pool ids and asset limits\\n     * @param _amountIn TokenA amount in\\n     * @param _amountOutMin Min tokenB amount out\\n     * @param _to Destination address for swap\\n     * @param _deadline Timestamp deadline for swap\\n     * @param _dexRouter Dex router address\\n     */\\n    struct SwapParams {\\n        bytes encodedPath;\\n        uint256 amountIn;\\n        uint256 amountOutMin;\\n        address to;\\n        uint256 deadline;\\n        address dexRouter;\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * @param _amountIn TokenA amount in\\n     * @param _dexRouter Dex router address\\n     */\\n    struct GetAmountsParams {\\n        bytes encodedPath;\\n        uint256 amount; // amountIn or amountOut\\n        address dexRouter;\\n    }\\n\\n    event QuoterChanged(address indexed dexRouter, address indexed quoter);\\n    event DexTypeChanged(address indexed dexRouter, uint256 indexed dexType);\\n\\n    /**\\n     * @param _dexRouter The router address for which the quoter is set\\n     * @param _quoter The quoter address to set\\n     */\\n    function setQuoter(address _dexRouter, address _quoter) external;\\n\\n    /**\\n     * @notice Set a dex type for a dex router\\n     * @param _dexRouter The dex router address\\n     * @param _dexType The dex type from enum DexType\\n     */\\n    function setDexType(address _dexRouter, uint256 _dexType) external;\\n\\n    /**\\n     * @notice Swap ERC20 tokens\\n     * @param _params SwapParams struct\\n     */\\n    function swapExactTokensForTokens(SwapParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountOut calculations\\n     * @notice given an input amount of an asset, returns the maximum output amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsOut(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountIn calculations\\n     * @notice given an output amount of an asset, returns the maximum input amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsIn(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Dex type mapping dexRouter => dex type\\n     */\\n    function dexType(address) external view returns (DexType);\\n\\n    /**\\n     * @notice Mapping from the dexRouter to its quoter\\n     */\\n    function quoters(address) external view returns (address);\\n\\n    /**\\n     * @return The address of the Registry contract\\n     */\\n    function registry() external view returns (address);\\n\\n    /**\\n     * @notice Gets the average amount of gas that is required for the swap on some dex\\n     * @param dexRouter The address of a router\\n     */\\n    function getGas(address dexRouter) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20c68407aaf893618f2c1993ab0cef250ecb8c94e82e1801706bf26fbcc8b4f5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateStrategy.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IInterestRateStrategy {\\n    /**\\n     * @dev parameters for BAR calculation - they differ depending on bucket's underlying asset\\n     */\\n    struct BarCalculationParams {\\n        uint256 urOptimal;\\n        uint256 k0;\\n        uint256 k1;\\n        uint256 b0;\\n        int256 b1;\\n    }\\n\\n    event BarCalculationParamsChanged(\\n        address indexed bucket,\\n        uint256 urOptimal,\\n        uint256 k0,\\n        uint256 k1,\\n        uint256 b0,\\n        int256 b1\\n    );\\n\\n    /**\\n     * @dev Updates bucket's BAR and LAR.\\n     * Calculates using utilization ratio (UR):\\n     * BAR = UR <= URoptimal ? (k0 * UR + b0) : (k1 * UR + b1), where 'b1' may be < 0,\\n     * LAR = BAR * UR,\\n     * if reserveRate != 0, then LAR = LAR * (1 - reserveRate)\\n     * @param ur Utilization ratio\\n     * @param reserveRate The reserve portion of the interest that goes to the Primex reserve\\n     * @return tuple containing BAR and LAR\\n     */\\n\\n    function calculateInterestRates(uint256 ur, uint256 reserveRate) external returns (uint128, uint128);\\n\\n    /**\\n     * @dev Set parameters for BAR calculation.\\n     * @param _params parameters are represented in byte string\\n     */\\n\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Retrieves the calculation parameters for the Bar calculation.\\n     * @param _address an address of the bucket\\n     * @return BarCalculationParams struct containing the parameters.\\n     */\\n    function getBarCalculationParams(address _address) external view returns (BarCalculationParams memory);\\n}\\n\",\"keccak256\":\"0x3474a7be6c42ddf5faf12304d1978f0268b7d80c6d1c04880f00832151b280d8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// Copyright (c) 2016-2023 zOS Global Limited and contributors\\n// SPDX-License-Identifier: MIT\\n\\n// Interface for OpenZeppelin's Pausable contract from https://github.com/OpenZeppelin/openzeppelin-contracts/\\npragma solidity ^0.8.18;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Triggers stopped state.\\n     * This function can only be called by an address with the EMERGENCY_ADMIN role.\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract.\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x12e1f74846ecd309150da9ae8d3e119f39ea1ed32ee0d9db5a7509c6baac94e3\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapManager.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISwapManager is IPausable {\\n    event SpotSwap(\\n        address indexed trader,\\n        address indexed receiver,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountSold,\\n        uint256 amountBought\\n    );\\n\\n    /**\\n     * @param tokenA The address of the asset to be swapped from.\\n     * @param tokenB The address of the asset to be received in the swap.\\n     * @param amountTokenA The amount of tokenA to be swapped.\\n     * @param amountOutMin The minimum amount of tokenB expected to receive.\\n     * @param routes An array of PrimexPricingLibrary.Route structs representing the routes for the swap.\\n     * @param receiver The address where the swapped tokens will be received.\\n     * @param deadline The deadline for the swap transaction.\\n     * @param isSwapFromWallet A flag indicating whether the swap is perfomed from a wallet or a protocol balance.\\n     * @param isSwapToWallet A flag indicating whether the swapped tokens will be sent to a wallet or a protocol balance.\\n     * @param isSwapFeeInPmx A flag indicating whether the swap fee is paid in PMX or in native token.\\n     * @param payFeeFromWallet A flag indicating whether the swap fee is perfomed from a wallet or a protocol balance.\\n     */\\n    struct SwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        uint256 amountOutMin;\\n        PrimexPricingLibrary.Route[] routes;\\n        address receiver;\\n        uint256 deadline;\\n        bool isSwapFromWallet;\\n        bool isSwapToWallet;\\n        bool isSwapFeeInPmx;\\n        bool payFeeFromWallet;\\n    }\\n\\n    /**\\n     * @notice Executes a swap on dexes defined in routes\\n     * @param params The SwapParams struct containing the details of the swap transaction.\\n     * @param maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * @param needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The resulting amount after the swap.\\n     */\\n    function swap(\\n        SwapParams calldata params,\\n        uint256 maximumOracleTolerableLimit,\\n        bool needOracleTolerableLimitCheck\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the instance of PrimexRegistry contract.\\n     */\\n    function registry() external view returns (IAccessControl);\\n\\n    /**\\n     * @notice Retrieves the instance of TraderBalanceVault contract.\\n     */\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    /**\\n     * @notice Retrieves the instance of PrimexDNS contract.\\n     */\\n    function primexDNS() external view returns (IPrimexDNS);\\n\\n    /**\\n     * @notice Retrieves the instance of PriceOracle contract.\\n     */\\n    function priceOracle() external view returns (IPriceOracle);\\n}\\n\",\"keccak256\":\"0xf91a251dbe30ce2840eb804f09dfa6569723900052bc10f559162774d3124b2d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITakeProfitStopLossCCM.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface ITakeProfitStopLossCCM {\\n    struct CanBeClosedParams {\\n        uint256 takeProfitPrice;\\n        uint256 stopLossPrice;\\n    }\\n\\n    struct AdditionalParams {\\n        PrimexPricingLibrary.Route[] routes;\\n    }\\n\\n    /**\\n     * @notice Checks if the take profit has been reached for a given position.\\n     * @param _position The position details.\\n     * @param takeProfitPrice The take profit price in WAD format.\\n     * @param routes The array of routes for asset swapping.\\n     * @return A boolean indicating whether the take profit has been reached.\\n     */\\n    function isTakeProfitReached(\\n        PositionLibrary.Position calldata _position,\\n        uint256 takeProfitPrice,\\n        PrimexPricingLibrary.Route[] memory routes\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if the take profit has been reached based on the given parameters.\\n     * @dev Used in closeBatchPositions() function.\\n     * @param _params The encoded parameters.\\n     * @param exchangeRate The exchange rate in WAD format.\\n     * @return A boolean indicating whether the take profit has been reached.\\n     */\\n    function isTakeProfitReached(bytes calldata _params, uint256 exchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached for a given position.\\n     * @param _position The position details.\\n     * @param stopLossPrice The stop loss price in WAD format to compare against.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(\\n        PositionLibrary.Position calldata _position,\\n        uint256 stopLossPrice\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached on the given parameters.\\n     * @dev The takeProfitPrice and stopLossPrice values can be obtained from the encoded data via CanBeClosedParams struct.\\n     * @param _params The encoded closing condition parameters containing stop loss price.\\n     * @param oracleExchangeRate The current exchange rate from the oracle in WAD format.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(bytes calldata _params, uint256 oracleExchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the take profit and stop loss prices from the given parameters.\\n     * @param _params The encoded parameters for closing a position.\\n     * @return takeProfitPrice The take profit price.\\n     * @return stopLossPrice The stop loss price.\\n     */\\n    function getTakeProfitStopLossPrices(bytes calldata _params) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x5f5df8c88208778ad4387a39f6cc343199c8df8870f21158a48562e81275c8d7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveCalc.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveCalc {\\n    // solhint-disable func-name-mixedcase\\n    function get_dx(\\n        // solhint-disable-next-line var-name-mixedcase\\n        int128 n_coins,\\n        uint256[8] memory balances,\\n        uint256 amp,\\n        uint256 fee,\\n        uint256[8] memory rates,\\n        uint256[8] memory precisions,\\n        bool underlying,\\n        int128 i,\\n        int128 j,\\n        uint256 dy\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x5fa9879e97a93a46480f230b02f7e8518d2ad482390b3224359dce1c075e4d12\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveRegistry.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveRegistry {\\n    // solhint-disable func-name-mixedcase\\n    function get_n_coins(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[8] memory);\\n\\n    function get_coin_indices(address _pool, address _from, address _to) external view returns (int128, int128, bool);\\n}\\n\",\"keccak256\":\"0xaa6bf52698d973d56d123347ceac0e41bd58d4ceb29f489d74a36ca516b52798\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error DEPOSIT_IN_THIRD_ASSET_SHARES_ON_DEX_LENGTH_SHOULD_BE_0();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    error DEPOSITED_TO_BORROWED_SHARES_ON_DEX_LENGTH_SHOULD_BE_0();\\n    error DEPOSIT_TO_BORROWED_SHARES_ON_DEX_LENGTH_SHOULD_BE_0();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error DISABLED_TRANSFER_NATIVE_CURRENCY();\\n    error INVALID_AMOUNT();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error DEX_NOT_ACTIVE();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n    error SWAP_DEADLINE_PASSED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n}\\n\",\"keccak256\":\"0x126e6cc9583f24e642d29d85055a53d7d76ee84bd7f320f4369ea9e5ed3d8589\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/LimitOrderLibrary.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorage} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalOpeningManager} from \\\"../interfaces/IConditionalOpeningManager.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ISwapManager} from \\\"../interfaces/ISwapManager.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary LimitOrderLibrary {\\n    using WadRayMath for uint256;\\n\\n    enum CloseReason {\\n        FilledMargin,\\n        FilledSpot,\\n        FilledSwap,\\n        Cancelled\\n    }\\n\\n    struct Condition {\\n        uint256 managerType;\\n        bytes params;\\n    }\\n\\n    /**\\n     * @dev Creates a limit order and locks the deposit asset in the traderBalanceVault\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param positionAsset The address of output token for exchange\\n     * @param depositAsset The address of the deposit token\\n     * @param depositAmount The amount of deposit trader funds for deal\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a native currency\\n     * @param trader The trader, who has created the order\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param id The unique id of the order\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition The flag to indicate whether position should be opened\\n     * @param createdAt The timeStamp when the order was created\\n     * @param updatedConditionsAt The timestamp when the open condition was updated\\n     */\\n    struct LimitOrder {\\n        IBucket bucket;\\n        address positionAsset;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address feeToken;\\n        uint256 protocolFee;\\n        address trader;\\n        uint256 deadline;\\n        uint256 id;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        // The byte-encoded params, can be used for future updates\\n        bytes extraParams;\\n    }\\n\\n    /**\\n     * @dev Structure for the \\u0441reateLimitOrder with parameters necessary to create limit order\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition Bool, indicate whether position should be opened\\n     * @param openingManagerAddresses Array of contract addresses that will be called in canBeFilled\\n     * @param openingManagerParams Array of bytes representing params for contracts in openingManagerAddresses\\n     * @param closingManagerAddresses Array of contract addresses that will be called in canBeClosed\\n     * @param closingManagerParams Array of bytes representing params for contracts in closingManagerAddresses\\n     */\\n    struct CreateLimitOrderParams {\\n        string bucket;\\n        uint256 depositAmount;\\n        address depositAsset;\\n        address positionAsset;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        Condition[] openConditions;\\n        Condition[] closeConditions;\\n        bool isProtocolFeeInPmx;\\n    }\\n\\n    struct CreateLimitOrderVars {\\n        bool isSpot;\\n        IBucket bucket;\\n        uint256 positionSize;\\n        address priceOracle;\\n        uint256 rate;\\n        address feeToken;\\n    }\\n\\n    /**\\n     * @dev Opens a position on an existing order\\n     * @param orderId order id\\n     * @param com address of ConditionalOpeningManager\\n     * @param comAdditionalParams  params needed for ConditionalOpeningManager to calc canBeFilled\\n     * @param firstAssetRoutes routes to swap first asset\\n     * @param depositInThirdAssetRoutes routes to swap deposit asset\\n     */\\n    struct OpenPositionParams {\\n        uint256 orderId;\\n        uint256 conditionIndex;\\n        bytes comAdditionalParams;\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n        address keeper;\\n    }\\n\\n    struct OpenPositionByOrderVars {\\n        address assetIn;\\n        address assetOut;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        CloseReason closeReason;\\n        uint256 newPositionId;\\n        uint256 exchangeRate;\\n    }\\n\\n    /**\\n     * @dev Params for PositionManager to open position\\n     * @param order order\\n     * @param firstAssetRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositInThirdAssetRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionByOrderParams {\\n        address sender;\\n        LimitOrder order;\\n        Condition[] closeConditions;\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n    }\\n\\n    /**\\n     * @dev Structure for the updateOrder with parameters necessary to update limit order\\n     * @param orderId order id to update\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param makeDeposit Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     * @param payFeeFromWallet A flag indicating whether the Limit Order fee is perfomed from a wallet or a protocol balance.\\n     */\\n    struct UpdateLimitOrderParams {\\n        uint256 orderId;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n        bool isProtocolFeeInPmx;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n    }\\n\\n    /**\\n     * @notice Updates the protocol fee for a LimitOrder.\\n     * @param _order The LimitOrder storage object to update.\\n     * @param _params The new parameters for the LimitOrder.\\n     * @param _traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param _primexDNS The PrimexDNS contract for accessing PMX-related information.\\n     * @param _priceOracle The address of the price oracle contract.\\n     */\\n    function updateProtocolFee(\\n        LimitOrder storage _order,\\n        UpdateLimitOrderParams calldata _params,\\n        ITraderBalanceVault _traderBalanceVault,\\n        IPrimexDNS _primexDNS,\\n        address _priceOracle\\n    ) public {\\n        address feeToken;\\n        if (_params.isProtocolFeeInPmx) {\\n            feeToken = _primexDNS.pmx();\\n            _require(msg.value == 0, Errors.DISABLED_TRANSFER_NATIVE_CURRENCY.selector);\\n        } else {\\n            feeToken = NATIVE_CURRENCY;\\n        }\\n        if (\\n            _params.leverage != _order.leverage ||\\n            _params.depositAmount != _order.depositAmount ||\\n            feeToken != _order.feeToken\\n        ) {\\n            uint256 feeRate = _primexDNS.feeRates(\\n                _order.shouldOpenPosition\\n                    ? IPrimexDNSStorage.OrderType.LIMIT_ORDER\\n                    : IPrimexDNSStorage.OrderType.SWAP_LIMIT_ORDER,\\n                feeToken\\n            );\\n            uint256 newProtocolFee = feeRate > 0\\n                ? PrimexPricingLibrary.getOracleAmountsOut(\\n                    _order.depositAsset,\\n                    feeToken,\\n                    _params.depositAmount.wmul(_params.leverage).wmul(feeRate),\\n                    _priceOracle\\n                )\\n                : 0;\\n            if (feeToken == _order.feeToken) {\\n                uint256 amount;\\n                unchecked {\\n                    if (newProtocolFee > _order.protocolFee) amount = newProtocolFee - _order.protocolFee;\\n                    else amount = _order.protocolFee - newProtocolFee;\\n                }\\n                depositLockOrUnlock(\\n                    _traderBalanceVault,\\n                    feeToken,\\n                    amount,\\n                    _params.payFeeFromWallet,\\n                    newProtocolFee > _order.protocolFee\\n                );\\n            } else {\\n                if (newProtocolFee > 0) {\\n                    //lock the new fee token\\n                    depositLockOrUnlock(_traderBalanceVault, feeToken, newProtocolFee, _params.payFeeFromWallet, true);\\n                }\\n                //unlock the old fee token\\n                depositLockOrUnlock(\\n                    _traderBalanceVault,\\n                    _order.feeToken,\\n                    _order.protocolFee,\\n                    _params.payFeeFromWallet,\\n                    false\\n                );\\n                _order.feeToken = feeToken;\\n            }\\n            _order.protocolFee = newProtocolFee;\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the leverage of a limit order.\\n     * @param _order The limit order to update.\\n     * @param _leverage The new leverage value in WAD format for the order.\\n     */\\n    function updateLeverage(LimitOrder storage _order, uint256 _leverage) public {\\n        _require(_leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n        _require(_order.leverage != WadRayMath.WAD, Errors.CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN.selector);\\n\\n        _require(\\n            _leverage < _order.bucket.maxAssetLeverage(_order.positionAsset),\\n            Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n        );\\n        _order.leverage = _leverage;\\n    }\\n\\n    /**\\n     * @notice Updates the deposit details of a LimitOrder.\\n     * @param _order The LimitOrder to update.\\n     * @param _amount The amount of the asset being deposited.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or unlock the deposited asset.\\n     * @param traderBalanceVault The instance of ITraderBalanceVault used for deposit and unlock operations.\\n     */\\n    function updateDeposit(\\n        LimitOrderLibrary.LimitOrder storage _order,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        ITraderBalanceVault traderBalanceVault\\n    ) public {\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            _order.depositAsset,\\n            (_amount > _order.depositAmount) ? _amount - _order.depositAmount : _order.depositAmount - _amount,\\n            _takeDepositFromWallet,\\n            _amount > _order.depositAmount\\n        );\\n        _order.depositAmount = _amount;\\n    }\\n\\n    /**\\n     * @notice Sets the open conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param openConditionsMap The mapping of order IDs to open conditions.\\n     * @param openConditions The array of open conditions.\\n     * @param primexDNS The instance of the Primex DNS contract.\\n     */\\n    function setOpenConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage openConditionsMap,\\n        Condition[] memory openConditions,\\n        IPrimexDNS primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(openConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(openConditions.length > 0, Errors.SHOULD_HAVE_OPEN_CONDITIONS.selector);\\n        if (openConditionsMap[_order.id].length > 0) {\\n            delete openConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < openConditions.length; i++) {\\n            condition = openConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalOpeningManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_COM.selector\\n            );\\n            openConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the close conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param closeConditionsMap The mapping of order IDs to close conditions.\\n     * @param closeConditions The array of close conditions to set.\\n     * @param primexDNS The Primex DNS contract address.\\n     */\\n    function setCloseConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage closeConditionsMap,\\n        Condition[] memory closeConditions,\\n        IPrimexDNS primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(closeConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(\\n            _order.shouldOpenPosition || closeConditions.length == 0,\\n            Errors.SHOULD_NOT_HAVE_CLOSE_CONDITIONS.selector\\n        );\\n\\n        if (closeConditionsMap[_order.id].length > 0) {\\n            delete closeConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n            closeConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a limit order.\\n     * @param _params The struct containing the order parameters.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param primexDNS The instance of the PrimexDNS contract.\\n     * @return The created limit order.\\n     */\\n    function createLimitOrder(\\n        CreateLimitOrderParams calldata _params,\\n        IPositionManager pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        IPrimexDNS primexDNS\\n    ) public returns (LimitOrder memory) {\\n        _require(_params.leverage >= WadRayMath.WAD, Errors.INCORRECT_LEVERAGE.selector);\\n        _require(_params.deadline > block.timestamp, Errors.INCORRECT_DEADLINE.selector);\\n\\n        CreateLimitOrderVars memory vars;\\n        vars.isSpot = bytes(_params.bucket).length == 0;\\n        vars.positionSize = _params.depositAmount.wmul(_params.leverage);\\n        vars.priceOracle = address(pm.priceOracle());\\n        if (vars.isSpot) {\\n            _require(_params.leverage == WadRayMath.WAD, Errors.LEVERAGE_SHOULD_BE_1.selector);\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            IPriceOracle(vars.priceOracle).getPriceFeedsPair(_params.positionAsset, _params.depositAsset);\\n        } else {\\n            _require(_params.shouldOpenPosition, Errors.SHOULD_OPEN_POSITION.selector);\\n            _require(_params.leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n            vars.bucket = IBucket(primexDNS.getBucketAddress(_params.bucket));\\n            _require(vars.bucket.getLiquidityMiningParams().isBucketLaunched, Errors.BUCKET_IS_NOT_LAUNCHED.selector);\\n\\n            (, bool tokenAllowed) = vars.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n            _require(\\n                _params.leverage < vars.bucket.maxAssetLeverage(_params.positionAsset),\\n                Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n            );\\n        }\\n        LimitOrder memory order = LimitOrder({\\n            bucket: IBucket(address(0)),\\n            positionAsset: _params.positionAsset,\\n            depositAsset: _params.depositAsset,\\n            depositAmount: _params.depositAmount,\\n            feeToken: _params.isProtocolFeeInPmx ? primexDNS.pmx() : NATIVE_CURRENCY,\\n            protocolFee: 0,\\n            trader: msg.sender,\\n            deadline: _params.deadline,\\n            id: 0,\\n            leverage: _params.leverage,\\n            shouldOpenPosition: _params.shouldOpenPosition,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n        order.bucket = vars.bucket;\\n\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            pm.minPositionSize(),\\n            pm.minPositionAsset(),\\n            vars.positionSize,\\n            order.depositAsset,\\n            vars.priceOracle\\n        );\\n        if (_params.isProtocolFeeInPmx) {\\n            vars.feeToken = primexDNS.pmx();\\n            _require(msg.value == 0, Errors.DISABLED_TRANSFER_NATIVE_CURRENCY.selector);\\n        } else {\\n            vars.feeToken = NATIVE_CURRENCY;\\n        }\\n        vars.rate = primexDNS.feeRates(\\n            order.shouldOpenPosition\\n                ? IPrimexDNSStorage.OrderType.LIMIT_ORDER\\n                : IPrimexDNSStorage.OrderType.SWAP_LIMIT_ORDER,\\n            vars.feeToken\\n        );\\n        if (vars.rate > 0) {\\n            order.protocolFee = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.depositAsset,\\n                vars.feeToken,\\n                _params.depositAmount.wmul(_params.leverage).wmul(vars.rate),\\n                address(pm.priceOracle())\\n            );\\n            // fee locking\\n            depositLockOrUnlock(traderBalanceVault, vars.feeToken, order.protocolFee, _params.payFeeFromWallet, true);\\n        }\\n        // deposit locking\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            order.depositAsset,\\n            order.depositAmount,\\n            _params.takeDepositFromWallet,\\n            true\\n        );\\n\\n        return order;\\n    }\\n\\n    /**\\n     * @notice Opens a position by order.\\n     * @param order The LimitOrder storage containing order details.\\n     * @param _params The OpenPositionParams calldata containing additional position parameters.\\n     * @param _closeConditions The Condition array containing close conditions for the position.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param primexDNS The instance of the PrimexDNS contract.\\n     * @param swapManager The instance of the SwapManager contract.\\n     * @return vars The OpenPositionByOrderVars struct containing the result of the open position operation.\\n     */\\n    function openPositionByOrder(\\n        LimitOrder storage order,\\n        OpenPositionParams calldata _params,\\n        Condition[] memory _closeConditions,\\n        IPositionManager pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        IPrimexDNS primexDNS,\\n        ISwapManager swapManager\\n    ) public returns (OpenPositionByOrderVars memory) {\\n        OpenPositionByOrderVars memory vars;\\n        bool isSpot = address(order.bucket) == address(0);\\n\\n        if (order.shouldOpenPosition) {\\n            vars.closeReason = isSpot ? CloseReason.FilledSpot : CloseReason.FilledMargin;\\n            (vars.amountIn, vars.amountOut, vars.newPositionId, vars.exchangeRate) = pm.openPositionByOrder(\\n                OpenPositionByOrderParams({\\n                    sender: msg.sender,\\n                    order: order,\\n                    closeConditions: _closeConditions,\\n                    firstAssetRoutes: _params.firstAssetRoutes,\\n                    depositInThirdAssetRoutes: _params.depositInThirdAssetRoutes\\n                })\\n            );\\n        } else {\\n            _require(\\n                _params.depositInThirdAssetRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n            vars.closeReason = CloseReason.FilledSwap;\\n            vars.amountIn = order.depositAmount;\\n\\n            PrimexPricingLibrary.payProtocolFee(\\n                PrimexPricingLibrary.ProtocolFeeParams({\\n                    depositData: PrimexPricingLibrary.DepositData({\\n                        protocolFee: order.protocolFee,\\n                        depositAsset: order.depositAsset,\\n                        depositAmount: order.depositAmount,\\n                        leverage: order.leverage\\n                    }),\\n                    feeToken: order.feeToken,\\n                    isSwapFromWallet: false,\\n                    calculateFee: false,\\n                    feeRate: 0, //because of calculateFee is false\\n                    trader: order.trader,\\n                    priceOracle: address(pm.priceOracle()),\\n                    traderBalanceVault: traderBalanceVault,\\n                    primexDNS: primexDNS\\n                })\\n            );\\n\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams({\\n                    trader: order.trader,\\n                    receiver: address(this),\\n                    asset: order.depositAsset,\\n                    amount: order.depositAmount\\n                })\\n            );\\n\\n            vars.amountOut = swapManager.swap(\\n                ISwapManager.SwapParams({\\n                    tokenA: order.depositAsset,\\n                    tokenB: order.positionAsset,\\n                    amountTokenA: order.depositAmount,\\n                    amountOutMin: 0,\\n                    routes: _params.firstAssetRoutes,\\n                    receiver: order.trader,\\n                    deadline: order.deadline,\\n                    isSwapFromWallet: false,\\n                    isSwapToWallet: false,\\n                    isSwapFeeInPmx: false,\\n                    payFeeFromWallet: false\\n                }),\\n                pm.getOracleTolerableLimit(order.depositAsset, order.positionAsset),\\n                true\\n            );\\n            uint256 multiplierDepositAsset = 10 ** (18 - IERC20Metadata(order.depositAsset).decimals());\\n            uint256 multiplierPositionAsset = 10 ** (18 - IERC20Metadata(order.positionAsset).decimals());\\n            vars.exchangeRate =\\n                (vars.amountIn * multiplierDepositAsset).wdiv(vars.amountOut * multiplierPositionAsset) /\\n                multiplierDepositAsset;\\n        }\\n\\n        vars.assetIn = isSpot ? order.depositAsset : address(order.bucket.borrowedAsset());\\n        vars.assetOut = order.positionAsset;\\n        return vars;\\n    }\\n\\n    /**\\n     * @notice Checks if an array of Condition structs has no duplicate manager types.\\n     * @param conditions The array of Condition structs to be checked.\\n     * @return bool Boolean value indicating whether the array has no duplicate manager types.\\n     */\\n    function hasNoConditionManagerTypeDuplicates(Condition[] memory conditions) public pure returns (bool) {\\n        if (conditions.length == 0) {\\n            return true;\\n        }\\n        for (uint256 i; i < conditions.length - 1; i++) {\\n            for (uint256 j = i + 1; j < conditions.length; j++) {\\n                if (conditions[i].managerType == conditions[j].managerType) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This function is used to either deposit or unlock assets in the trader balance vault.\\n     * @param traderBalanceVault The instance of the trader balance vault.\\n     * @param _depositAsset The address of the asset to be deposited or unlocked.\\n     * @param _amount The amount of the asset to be deposited or unlocked.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or not.\\n     * @param _isAdd Boolean indicating whether to lock or unlock asset. Should lock asset, if true.\\n     */\\n    function depositLockOrUnlock(\\n        ITraderBalanceVault traderBalanceVault,\\n        address _depositAsset,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        bool _isAdd\\n    ) internal {\\n        if (!_isAdd) {\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams(msg.sender, msg.sender, _depositAsset, _amount)\\n            );\\n            return;\\n        }\\n        if (_takeDepositFromWallet) {\\n            if (_depositAsset == NATIVE_CURRENCY) {\\n                _require(msg.value >= _amount, Errors.INSUFFICIENT_DEPOSIT.selector);\\n                traderBalanceVault.increaseLockedBalance{value: _amount}(msg.sender, _depositAsset, _amount);\\n                if (msg.value > _amount) {\\n                    uint256 rest = msg.value - _amount;\\n                    traderBalanceVault.topUpAvailableBalance{value: rest}(msg.sender, NATIVE_CURRENCY, rest);\\n                }\\n                return;\\n            }\\n            TokenTransfersLibrary.doTransferFromTo(_depositAsset, msg.sender, address(traderBalanceVault), _amount);\\n            traderBalanceVault.increaseLockedBalance(msg.sender, _depositAsset, _amount);\\n            return;\\n        }\\n        traderBalanceVault.useTraderAssets(\\n            ITraderBalanceVault.LockAssetParams(\\n                msg.sender,\\n                address(0),\\n                _depositAsset,\\n                _amount,\\n                ITraderBalanceVault.OpenType.CREATE_LIMIT_ORDER\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xda0be58fb553dcf5487806434febbe0db39f18c2163f8491baf3f69c28e0a6ab\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PositionLibrary.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"./LimitOrderLibrary.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorage} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {ITakeProfitStopLossCCM} from \\\"../interfaces/ITakeProfitStopLossCCM.sol\\\";\\nimport {IKeeperRewardDistributorStorage} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\\\";\\n\\nlibrary PositionLibrary {\\n    using WadRayMath for uint256;\\n\\n    event ClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed closedBy,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut,\\n        PositionLibrary.CloseReason reason\\n    );\\n\\n    /**\\n     * @notice This struct represents a trading position\\n     * @param id unique identifier for the position\\n     * @param scaledDebtAmount scaled debt amount associated with the position\\n     * @param bucket instance of the Bucket associated for trading\\n     * @param soldAsset bucket asset in the case of margin trading or deposit asset in the case of spot trading\\n     * @param depositAmountInSoldAsset equivalent of trader deposit size (this deposit can be in any asset) in the sold asset\\n     * or just deposit amount for spot trading\\n     * @param positionAsset asset of the trading position\\n     * @param positionAmount amount of the trading position\\n     * @param trader address of the trader holding the position\\n     * @param openBorrowIndex variable borrow index when position was opened\\n     * @param createdAt timestamp when the position was created\\n     * @param updatedConditionsAt timestamp when the close condition was updated\\n     * @param extraParams byte-encoded params, can be used for future updates\\n     */\\n    struct Position {\\n        uint256 id;\\n        uint256 scaledDebtAmount;\\n        IBucket bucket;\\n        address soldAsset;\\n        uint256 depositAmountInSoldAsset;\\n        address positionAsset;\\n        uint256 positionAmount;\\n        address trader;\\n        uint256 openBorrowIndex;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        bytes extraParams;\\n    }\\n\\n    struct IncreaseDepositParams {\\n        uint256 amount;\\n        address asset;\\n        bool takeDepositFromWallet;\\n        PrimexPricingLibrary.Route[] routes;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 amountOutMin;\\n    }\\n\\n    struct DecreaseDepositParams {\\n        uint256 amount;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        uint256 oracleTolerableLimit;\\n        uint256 maintenanceBuffer;\\n    }\\n\\n    struct MultiSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        PrimexPricingLibrary.Route[] routes;\\n        address receiver;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n    }\\n\\n    struct ClosePositionParams {\\n        uint256 closeAmount;\\n        uint256 depositDecrease;\\n        uint256 scaledDebtAmount;\\n        address depositReceiver;\\n        PrimexPricingLibrary.Route[] routes;\\n        uint256 amountOutMin;\\n        uint256 oracleTolerableLimit;\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        LimitOrderLibrary.Condition closeCondition;\\n        bytes ccmAdditionalParams;\\n        bool borrowedAmountIsNotZero;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    struct ClosePositionVars {\\n        address dexAdapter;\\n        uint256 borowedAssetAmount;\\n        uint256 amountToReturn;\\n        uint256 permanentLoss;\\n        uint256 fee;\\n    }\\n\\n    struct ClosePositionEventData {\\n        int256 profit;\\n        uint256 debtAmount;\\n        uint256 amountOut;\\n        IKeeperRewardDistributorStorage.KeeperActionType actionType;\\n    }\\n\\n    struct OpenPositionVars {\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n        PrimexPricingLibrary.DepositData depositData;\\n        address feeToken;\\n        uint256 borrowedAmount;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool isSpot;\\n        bool isThirdAsset;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n        bool byOrder;\\n        address sender;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    struct OpenPositionEventData {\\n        uint256 protocolFee;\\n        uint256 entryPrice;\\n        uint256 leverage;\\n    }\\n\\n    /**\\n     * The struct for openPosition function local vars\\n     */\\n    struct OpenPositionLocalData {\\n        uint256 amountToTransfer;\\n        address dexAdapter;\\n        address depositReceiver;\\n        uint256 depositInPositionAsset;\\n        bool isSpot;\\n    }\\n\\n    /**\\n     * @dev Structure for the OpenPositionParams when margin trading is activated\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param borrowedAmount The amount of tokens borrowed to be exchanged\\n     * @param depositInThirdAssetRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionMarginParams {\\n        string bucket;\\n        uint256 borrowedAmount;\\n        PrimexPricingLibrary.Route[] depositInThirdAssetRoutes;\\n    }\\n\\n    /**\\n     * @dev Structure for the openPosition with parameters necessary to open a position\\n     * @param marginParams margin trading related params\\n     * @param firstAssetRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param amountOutMin The minimum amount of output tokens\\n     * that must be received for the transaction not to revert.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @param takeDepositFromWallet Bool, add a deposit within the current transaction\\n     * @param payFeeFromWallet Bool, add a fee  within the current transaction\\n     * @param closeConditions Array of conditions that position can be closed by\\n     */\\n    struct OpenPositionParams {\\n        OpenPositionMarginParams marginParams;\\n        PrimexPricingLibrary.Route[] firstAssetRoutes;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address positionAsset;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        bool payFeeFromWallet;\\n        bool isProtocolFeeInPmx;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n    }\\n    struct PositionManagerParams {\\n        IPrimexDNS primexDNS;\\n        IPriceOracle priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 oracleTolerableLimit;\\n        uint256 oracleTolerableLimitForThirdAsset;\\n        uint256 minPositionSize;\\n        address minPositionAsset;\\n        uint256 maxPositionSize;\\n    }\\n\\n    struct ScaledParams {\\n        uint256 decreasePercent;\\n        uint256 scaledDebtAmount;\\n        uint256 depositDecrease;\\n        bool borrowedAmountIsNotZero;\\n    }\\n\\n    enum CloseReason {\\n        CLOSE_BY_TRADER,\\n        RISKY_POSITION,\\n        BUCKET_DELISTED,\\n        LIMIT_CONDITION,\\n        BATCH_LIQUIDATION,\\n        BATCH_STOP_LOSS,\\n        BATCH_TAKE_PROFIT\\n    }\\n\\n    /**\\n     * @dev Increases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for increasing the deposit.\\n     * @return The amount of trader debtTokens burned.\\n     */\\n    function increaseDeposit(Position storage position, IncreaseDepositParams memory params) public returns (uint256) {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.scaledDebtAmount != 0, Errors.BORROWED_AMOUNT_IS_ZERO.selector);\\n        address borrowedAsset = position.soldAsset;\\n\\n        uint256 depositAmountInBorrowed;\\n        address depositReceiver = params.primexDNS.dexAdapter();\\n        if (params.asset == borrowedAsset) {\\n            depositReceiver = address(position.bucket);\\n            depositAmountInBorrowed = params.amount;\\n        }\\n\\n        if (params.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(params.asset, msg.sender, depositReceiver, params.amount);\\n        } else {\\n            params.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams(\\n                    msg.sender,\\n                    depositReceiver,\\n                    params.asset,\\n                    params.amount,\\n                    ITraderBalanceVault.OpenType.OPEN\\n                )\\n            );\\n        }\\n\\n        if (params.asset != borrowedAsset) {\\n            depositAmountInBorrowed = PrimexPricingLibrary.multiSwap(\\n                PrimexPricingLibrary.MultiSwapParams({\\n                    tokenA: params.asset,\\n                    tokenB: borrowedAsset,\\n                    amountTokenA: params.amount,\\n                    routes: params.routes,\\n                    dexAdapter: params.primexDNS.dexAdapter(),\\n                    receiver: address(position.bucket),\\n                    deadline: block.timestamp\\n                }),\\n                0,\\n                address(params.primexDNS),\\n                address(params.priceOracle),\\n                false // don't need oracle check. add amountOutMin?\\n            );\\n            _require(depositAmountInBorrowed >= params.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n        }\\n\\n        uint256 debt = getDebt(position);\\n        uint256 amountToTrader;\\n        uint256 debtToBurn = depositAmountInBorrowed;\\n\\n        if (depositAmountInBorrowed >= debt) {\\n            amountToTrader = depositAmountInBorrowed - debt;\\n            debtToBurn = debt;\\n            position.scaledDebtAmount = 0;\\n            if (amountToTrader > 0)\\n                params.traderBalanceVault.topUpAvailableBalance(position.trader, borrowedAsset, amountToTrader);\\n        } else {\\n            position.scaledDebtAmount =\\n                position.scaledDebtAmount -\\n                debtToBurn.rdiv(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        position.depositAmountInSoldAsset += debtToBurn;\\n\\n        position.bucket.decreaseTraderDebt(\\n            position.trader,\\n            debtToBurn,\\n            address(params.traderBalanceVault),\\n            amountToTrader,\\n            0\\n        );\\n        return debtToBurn;\\n    }\\n\\n    /**\\n     * @dev Decreases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for the decrease deposit operation.\\n     */\\n    function decreaseDeposit(Position storage position, DecreaseDepositParams memory params) public {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.bucket != IBucket(address(0)), Errors.IS_SPOT_POSITION.selector);\\n        _require(position.bucket.isActive(), Errors.BUCKET_IS_NOT_ACTIVE.selector);\\n        _require(params.amount > 0, Errors.DECREASE_AMOUNT_IS_ZERO.selector);\\n        _require(params.amount <= position.depositAmountInSoldAsset, Errors.AMOUNT_IS_MORE_THAN_DEPOSIT.selector);\\n        position.depositAmountInSoldAsset -= params.amount;\\n        position.scaledDebtAmount =\\n            position.scaledDebtAmount +\\n            params.amount.rdiv(position.bucket.getNormalizedVariableDebt());\\n\\n        params.traderBalanceVault.topUpAvailableBalance(position.trader, position.soldAsset, params.amount);\\n\\n        _require(\\n            health(\\n                position,\\n                params.priceOracle,\\n                params.pairPriceDrop,\\n                params.securityBuffer,\\n                params.oracleTolerableLimit\\n            ) >= WadRayMath.WAD + params.maintenanceBuffer,\\n            Errors.INSUFFICIENT_DEPOSIT_SIZE.selector\\n        );\\n        position.bucket.increaseDebt(position.trader, params.amount, address(params.traderBalanceVault));\\n    }\\n\\n    /**\\n     * @notice Closes a position.\\n     * @param position The position to be closed.\\n     * @param params The parameters for closing the position.\\n     * @param reason The reason for closing the position.\\n     * @return posEventData The event data for the closed position.\\n     */\\n    function closePosition(\\n        Position memory position,\\n        ClosePositionParams memory params,\\n        CloseReason reason\\n    ) public returns (ClosePositionEventData memory) {\\n        ClosePositionEventData memory posEventData;\\n        ClosePositionVars memory vars;\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            posEventData.debtAmount = params.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        vars.dexAdapter = params.primexDNS.dexAdapter();\\n        TokenTransfersLibrary.doTransferOut(position.positionAsset, vars.dexAdapter, params.closeAmount);\\n        posEventData.amountOut = PrimexPricingLibrary.multiSwap(\\n            PrimexPricingLibrary.MultiSwapParams({\\n                tokenA: position.positionAsset,\\n                tokenB: position.soldAsset,\\n                amountTokenA: params.closeAmount,\\n                routes: params.routes,\\n                dexAdapter: vars.dexAdapter,\\n                receiver: params.borrowedAmountIsNotZero\\n                    ? address(position.bucket)\\n                    : address(params.traderBalanceVault),\\n                deadline: block.timestamp\\n            }),\\n            params.oracleTolerableLimit,\\n            address(params.primexDNS),\\n            address(params.priceOracle),\\n            params.needOracleTolerableLimitCheck\\n        );\\n\\n        _require(\\n            posEventData.amountOut >= params.amountOutMin && posEventData.amountOut > 0,\\n            Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector\\n        );\\n\\n        bool canBeClosed;\\n        if (reason == CloseReason.CLOSE_BY_TRADER) {\\n            canBeClosed = position.trader == msg.sender;\\n        } else if (reason == CloseReason.RISKY_POSITION) {\\n            canBeClosed =\\n                health(\\n                    position,\\n                    params.priceOracle,\\n                    params.pairPriceDrop,\\n                    params.securityBuffer,\\n                    params.oracleTolerableLimit\\n                ) <\\n                WadRayMath.WAD;\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.Liquidation;\\n        } else if (reason == CloseReason.LIMIT_CONDITION) {\\n            address cm = params.primexDNS.cmTypeToAddress(params.closeCondition.managerType);\\n            _require(cm != address(0), Errors.INCORRECT_CM_TYPE.selector);\\n\\n            canBeClosed = IConditionalClosingManager(cm).canBeClosedAfterSwap(\\n                position,\\n                params.closeCondition.params,\\n                params.ccmAdditionalParams,\\n                params.closeAmount,\\n                posEventData.amountOut\\n            );\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.StopLoss;\\n        } else if (reason == CloseReason.BUCKET_DELISTED) {\\n            canBeClosed = position.bucket != IBucket(address(0)) && position.bucket.isDelisted();\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.BucketDelisted;\\n        }\\n        _require(canBeClosed, Errors.POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON.selector);\\n\\n        uint256 permanentLoss;\\n        if (posEventData.amountOut > posEventData.debtAmount) {\\n            unchecked {\\n                vars.amountToReturn = posEventData.amountOut - posEventData.debtAmount;\\n            }\\n        } else {\\n            unchecked {\\n                permanentLoss = posEventData.debtAmount - posEventData.amountOut;\\n            }\\n        }\\n\\n        posEventData.profit = -int256(params.depositDecrease);\\n\\n        if (reason != CloseReason.RISKY_POSITION) {\\n            if (vars.amountToReturn > 0) {\\n                posEventData.profit += int256(vars.amountToReturn);\\n                params.traderBalanceVault.topUpAvailableBalance(\\n                    reason == CloseReason.CLOSE_BY_TRADER ? params.depositReceiver : position.trader,\\n                    position.soldAsset,\\n                    vars.amountToReturn\\n                );\\n            }\\n        }\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            position.bucket.decreaseTraderDebt(\\n                position.trader,\\n                posEventData.debtAmount,\\n                reason == CloseReason.RISKY_POSITION ? params.primexDNS.treasury() : address(params.traderBalanceVault),\\n                vars.amountToReturn,\\n                permanentLoss\\n            );\\n        }\\n\\n        // to avoid stack to deep\\n        CloseReason _reason = reason;\\n        if (params.closeAmount == position.positionAmount) {\\n            emit ClosePosition({\\n                positionId: position.id,\\n                trader: position.trader,\\n                closedBy: msg.sender,\\n                bucketAddress: address(position.bucket),\\n                soldAsset: position.soldAsset,\\n                positionAsset: position.positionAsset,\\n                decreasePositionAmount: position.positionAmount,\\n                profit: posEventData.profit,\\n                positionDebt: posEventData.debtAmount,\\n                amountOut: posEventData.amountOut,\\n                reason: _reason\\n            });\\n        }\\n        return posEventData;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum position size between two tokens.\\n     * @param maxPositionSize The storage mapping for maximum position sizes.\\n     * @param token0 The address of token0.\\n     * @param token1 The address of token1.\\n     * @param amountInToken0 The maximum position size in token0.\\n     * @param amountInToken1 The maximum position size in token1.\\n     */\\n    function setMaxPositionSize(\\n        mapping(address => mapping(address => uint256)) storage maxPositionSize,\\n        address token0,\\n        address token1,\\n        uint256 amountInToken0,\\n        uint256 amountInToken1\\n    ) public {\\n        _require(token0 != address(0) && token1 != address(0), Errors.TOKEN_ADDRESS_IS_ZERO.selector);\\n        _require(token0 != token1, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n\\n        maxPositionSize[token1][token0] = amountInToken0;\\n        maxPositionSize[token0][token1] = amountInToken1;\\n    }\\n\\n    /**\\n     * @dev Sets the tolerable limit for an oracle between two assets.\\n     * @param oracleTolerableLimits The mapping to store oracle tolerable limits.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @param percent The percentage tolerable limit for the oracle in WAD format (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(\\n        mapping(address => mapping(address => uint256)) storage oracleTolerableLimits,\\n        address assetA,\\n        address assetB,\\n        uint256 percent\\n    ) public {\\n        _require(assetA != address(0) && assetB != address(0), Errors.ASSET_ADDRESS_NOT_SUPPORTED.selector);\\n        _require(assetA != assetB, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n        _require(percent <= WadRayMath.WAD && percent > 0, Errors.INVALID_PERCENT_NUMBER.selector);\\n        oracleTolerableLimits[assetA][assetB] = percent;\\n        oracleTolerableLimits[assetB][assetA] = percent;\\n    }\\n\\n    /**\\n     * @dev Sets the close conditions for a given position.\\n     * @param position The position for which to set the close conditions.\\n     * @param closeConditionsMap The storage mapping of close conditions for each position ID.\\n     * @param closeConditions The array of close conditions to be set.\\n     * @param primexDNS The address of the IPrimexDNS contract.\\n     */\\n    function setCloseConditions(\\n        Position memory position,\\n        mapping(uint256 => LimitOrderLibrary.Condition[]) storage closeConditionsMap,\\n        LimitOrderLibrary.Condition[] memory closeConditions,\\n        IPrimexDNS primexDNS\\n    ) public {\\n        _require(\\n            LimitOrderLibrary.hasNoConditionManagerTypeDuplicates(closeConditions),\\n            Errors.SHOULD_NOT_HAVE_DUPLICATES.selector\\n        );\\n        if (closeConditionsMap[position.id].length > 0) {\\n            delete closeConditionsMap[position.id];\\n        }\\n        LimitOrderLibrary.Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n\\n            closeConditionsMap[position.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Opens a position by depositing assets and borrowing funds (except when the position is spot)\\n     * @param _position The position to be opened\\n     * @param _vars Variables related to the position opening\\n     * @param _pmParams Parameters for the PositionManager contract\\n     * @return The updated position and event data\\n     */\\n    function openPosition(\\n        Position memory _position,\\n        OpenPositionVars memory _vars,\\n        PositionManagerParams memory _pmParams\\n    ) public returns (Position memory, OpenPositionEventData memory) {\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            _pmParams.minPositionSize,\\n            _pmParams.minPositionAsset,\\n            _vars.borrowedAmount + _position.depositAmountInSoldAsset,\\n            _position.soldAsset,\\n            address(_pmParams.priceOracle)\\n        );\\n        OpenPositionLocalData memory data;\\n        data.amountToTransfer = _vars.borrowedAmount;\\n        data.dexAdapter = _pmParams.primexDNS.dexAdapter();\\n        data.depositReceiver = data.dexAdapter;\\n        if (_vars.depositData.depositAsset == _position.positionAsset) {\\n            _position.positionAmount = _vars.depositData.depositAmount;\\n            data.depositInPositionAsset = _vars.depositData.depositAmount;\\n            data.depositReceiver = address(this);\\n        } else if (_vars.depositData.depositAsset == _position.soldAsset) {\\n            data.amountToTransfer += _vars.depositData.depositAmount;\\n        }\\n\\n        data.isSpot = _vars.borrowedAmount == 0;\\n        if (data.isSpot) _vars.depositData.depositAsset = _position.soldAsset;\\n\\n        if (_vars.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(\\n                _vars.depositData.depositAsset,\\n                msg.sender,\\n                data.depositReceiver,\\n                _vars.depositData.depositAmount\\n            );\\n        } else {\\n            _pmParams.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams({\\n                    trader: _position.trader,\\n                    depositReceiver: data.depositReceiver,\\n                    depositAsset: _vars.depositData.depositAsset,\\n                    depositAmount: _vars.depositData.depositAmount,\\n                    openType: _vars.byOrder\\n                        ? ITraderBalanceVault.OpenType.OPEN_BY_ORDER\\n                        : ITraderBalanceVault.OpenType.OPEN\\n                })\\n            );\\n        }\\n\\n        if (!data.isSpot) {\\n            _position.bucket.increaseDebt(_position.trader, _vars.borrowedAmount, data.dexAdapter);\\n            // @note You need to write index only after opening a position in bucket.\\n            // Since when opening position in the bucket, index becomes relevant (containing accumulated profit)\\n            _position.openBorrowIndex = _position.bucket.variableBorrowIndex();\\n            _position.scaledDebtAmount = _vars.borrowedAmount.rdiv(_position.openBorrowIndex);\\n        }\\n        if (_vars.isThirdAsset) {\\n            data.depositInPositionAsset = PrimexPricingLibrary.multiSwap(\\n                PrimexPricingLibrary.MultiSwapParams({\\n                    tokenA: _vars.depositData.depositAsset,\\n                    tokenB: _position.positionAsset,\\n                    amountTokenA: _vars.depositData.depositAmount,\\n                    routes: _vars.depositInThirdAssetRoutes,\\n                    dexAdapter: data.dexAdapter,\\n                    receiver: address(this),\\n                    deadline: _vars.deadline\\n                }),\\n                _pmParams.oracleTolerableLimitForThirdAsset,\\n                address(_pmParams.primexDNS),\\n                address(_pmParams.priceOracle),\\n                true\\n            );\\n            _position.positionAmount += data.depositInPositionAsset;\\n        } else {\\n            _require(\\n                _vars.depositInThirdAssetRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n        }\\n\\n        uint256 borrowedAmountInPositionAsset = PrimexPricingLibrary.multiSwap(\\n            PrimexPricingLibrary.MultiSwapParams({\\n                tokenA: _position.soldAsset,\\n                tokenB: _position.positionAsset,\\n                amountTokenA: data.isSpot ? _vars.depositData.depositAmount : data.amountToTransfer,\\n                routes: _vars.firstAssetRoutes,\\n                dexAdapter: data.dexAdapter,\\n                receiver: address(this),\\n                deadline: _vars.deadline\\n            }),\\n            _pmParams.oracleTolerableLimit,\\n            address(_pmParams.primexDNS),\\n            address(_pmParams.priceOracle),\\n            _vars.needOracleTolerableLimitCheck\\n        );\\n        _position.positionAmount += borrowedAmountInPositionAsset;\\n        _require(_pmParams.maxPositionSize >= _position.positionAmount, Errors.POSITION_SIZE_EXCEEDED.selector);\\n        uint256 leverage = WadRayMath.WAD;\\n        if (!data.isSpot) {\\n            if (_vars.depositData.depositAsset == _position.soldAsset) {\\n                leverage = (_vars.borrowedAmount + _position.depositAmountInSoldAsset).wdiv(\\n                    _position.depositAmountInSoldAsset\\n                );\\n            } else {\\n                leverage = (borrowedAmountInPositionAsset + data.depositInPositionAsset).wdiv(\\n                    data.depositInPositionAsset\\n                );\\n            }\\n            _require(\\n                leverage <= _position.bucket.maxAssetLeverage(_position.positionAsset),\\n                Errors.INSUFFICIENT_DEPOSIT.selector\\n            );\\n        }\\n\\n        if (!_vars.byOrder) {\\n            _vars.depositData.leverage = leverage;\\n        }\\n\\n        _require(_position.positionAmount >= _vars.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n\\n        OpenPositionEventData memory posEventData;\\n\\n        posEventData.protocolFee = PrimexPricingLibrary.payProtocolFee(\\n            PrimexPricingLibrary.ProtocolFeeParams({\\n                depositData: _vars.depositData,\\n                feeToken: _vars.feeToken,\\n                isSwapFromWallet: _vars.payFeeFromWallet,\\n                calculateFee: !_vars.byOrder,\\n                feeRate: _vars.byOrder\\n                    ? 0\\n                    : _pmParams.primexDNS.feeRates(IPrimexDNSStorage.OrderType.MARKET_ORDER, _vars.feeToken),\\n                trader: _position.trader,\\n                priceOracle: address(_pmParams.priceOracle),\\n                traderBalanceVault: _pmParams.traderBalanceVault,\\n                primexDNS: _pmParams.primexDNS\\n            })\\n        );\\n\\n        uint256 multiplierBorrowedAsset = 10 ** (18 - IERC20Metadata(_position.soldAsset).decimals());\\n        uint256 multiplierPositionAsset = 10 ** (18 - IERC20Metadata(_position.positionAsset).decimals());\\n        posEventData.entryPrice =\\n            ((_vars.borrowedAmount + _position.depositAmountInSoldAsset) * multiplierBorrowedAsset).wdiv(\\n                _position.positionAmount * multiplierPositionAsset\\n            ) /\\n            multiplierBorrowedAsset;\\n        posEventData.leverage = _vars.depositData.leverage;\\n        return (_position, posEventData);\\n    }\\n\\n    /**\\n     * @dev Retrieves the debt amount for a given position.\\n     * @param position The Position struct representing the position to get the debt amount for.\\n     * @return The debt amount in debtTokens.\\n     */\\n    function getDebt(Position memory position) public view returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return 0;\\n        return position.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n    }\\n\\n    /**\\n     * @dev Calculates the health of a position.\\n     * @dev health = ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * borrowedAssetAmountOut) /\\n     (feeBuffer * debt)\\n     * @param position The position object containing relevant information.\\n     * @param priceOracle The price oracle contract used for obtaining asset prices.\\n     * @param pairPriceDrop The priceDrop in WAD format of the asset pair.\\n     * @param securityBuffer The security buffer in WAD format for the position.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the price oracle.\\n     * @return The health value in WAD format of the position.\\n     */\\n    function health(\\n        Position memory position,\\n        IPriceOracle priceOracle,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit\\n    ) public view returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return WadRayMath.WAD;\\n        return\\n            health(\\n                PrimexPricingLibrary.getOracleAmountsOut(\\n                    position.positionAsset,\\n                    position.soldAsset,\\n                    position.positionAmount,\\n                    address(priceOracle)\\n                ),\\n                pairPriceDrop,\\n                securityBuffer,\\n                oracleTolerableLimit,\\n                getDebt(position),\\n                position.bucket.feeBuffer()\\n            );\\n    }\\n\\n    /**\\n     * @dev Creates a new position based on the given parameters.\\n     * @param _params The input parameters for creating the position.\\n     * @param primexDNS The address of the PrimexDNS contract.\\n     * @param priceOracle The address of the PriceOracle contract.\\n     * @return position The created Position struct.\\n     * @return vars The OpenPositionVars struct.\\n     */\\n    function createPosition(\\n        OpenPositionParams calldata _params,\\n        IPrimexDNS primexDNS,\\n        IPriceOracle priceOracle\\n    ) public view returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetRoutes: _params.firstAssetRoutes,\\n            depositInThirdAssetRoutes: _params.marginParams.depositInThirdAssetRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                protocolFee: 0,\\n                depositAsset: address(0),\\n                depositAmount: _params.depositAmount,\\n                leverage: 0\\n            }),\\n            feeToken: _params.isProtocolFeeInPmx ? primexDNS.pmx() : NATIVE_CURRENCY,\\n            borrowedAmount: _params.marginParams.borrowedAmount,\\n            amountOutMin: _params.amountOutMin,\\n            deadline: _params.deadline,\\n            isSpot: _params.marginParams.borrowedAmount == 0,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: _params.takeDepositFromWallet,\\n            payFeeFromWallet: _params.payFeeFromWallet,\\n            byOrder: false,\\n            sender: address(0),\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: _params.marginParams.borrowedAmount > 0\\n        });\\n        PositionLibrary.Position memory position = PositionLibrary.Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucket(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.positionAsset,\\n            positionAmount: 0,\\n            trader: msg.sender,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            _require(bytes(_params.marginParams.bucket).length == 0, Errors.BUCKET_SHOULD_BE_UNDEFINED.selector);\\n            priceOracle.getPriceFeedsPair(_params.positionAsset, _params.depositAsset);\\n            position.soldAsset = _params.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n            vars.depositData.leverage = WadRayMath.WAD;\\n        } else {\\n            position.bucket = IBucket(primexDNS.getBucketAddress(_params.marginParams.bucket));\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.depositAsset;\\n            (, bool tokenAllowed) = position.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n\\n            vars.isThirdAsset =\\n                _params.depositAsset != position.soldAsset &&\\n                _params.depositAsset != _params.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.depositAsset,\\n                position.soldAsset,\\n                _params.depositAmount,\\n                address(priceOracle)\\n            );\\n        }\\n\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Creates a position based on the provided order parameters.\\n     * @dev This function calculates and returns a Position and OpenPositionVars struct.\\n     * @param _params The OpenPositionByOrderParams struct containing the order parameters.\\n     * @param priceOracle The price oracle contract used for retrieving asset prices.\\n     * @return position The Position struct representing the created position.\\n     * @return vars The OpenPositionVars struct containing additional variables related to the position.\\n     */\\n    function createPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params,\\n        IPriceOracle priceOracle\\n    ) public view returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetRoutes: _params.firstAssetRoutes,\\n            depositInThirdAssetRoutes: _params.depositInThirdAssetRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                protocolFee: _params.order.protocolFee,\\n                depositAsset: address(0),\\n                depositAmount: _params.order.depositAmount,\\n                leverage: _params.order.leverage\\n            }),\\n            feeToken: _params.order.feeToken,\\n            borrowedAmount: 0,\\n            amountOutMin: 0,\\n            deadline: _params.order.deadline,\\n            isSpot: _params.order.leverage == WadRayMath.WAD,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: false,\\n            payFeeFromWallet: false,\\n            byOrder: true,\\n            sender: _params.sender,\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: true\\n        });\\n\\n        Position memory position = Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucket(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.order.positionAsset,\\n            positionAmount: 0,\\n            trader: _params.order.trader,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            position.soldAsset = _params.order.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n        } else {\\n            position.bucket = _params.order.bucket;\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.order.depositAsset;\\n            vars.isThirdAsset =\\n                _params.order.depositAsset != position.soldAsset &&\\n                _params.order.depositAsset != _params.order.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.order.depositAsset,\\n                position.soldAsset,\\n                _params.order.depositAmount,\\n                address(priceOracle)\\n            );\\n            vars.borrowedAmount = position.depositAmountInSoldAsset.wmul(_params.order.leverage - WadRayMath.WAD);\\n        }\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Calculates the health score for a position.\\n     * @param borrowedAssetAmountOut The amount of borrowed assets.\\n     * @param pairPriceDrop The priceDrop in WAD format of the pair.\\n     * @param securityBuffer The security buffer in WAD format.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the oracle.\\n     * @param positionDebt The debt of the position.\\n     * @param feeBuffer The buffer for fees.\\n     * @return The health score of the position.\\n     */\\n    function health(\\n        uint256 borrowedAssetAmountOut,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit,\\n        uint256 positionDebt,\\n        uint256 feeBuffer\\n    ) public pure returns (uint256) {\\n        return\\n            (\\n                (WadRayMath.WAD - securityBuffer)\\n                    .wmul(WadRayMath.WAD - oracleTolerableLimit)\\n                    .wmul(WadRayMath.WAD - pairPriceDrop)\\n                    .wmul(borrowedAssetAmountOut)\\n            ).wdiv(feeBuffer.wmul(positionDebt));\\n    }\\n}\\n\",\"keccak256\":\"0xe873c1aa3cbb9e91ac0708cade30ebd0c2fa58fd2489705536f6bc7223ae52ad\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PrimexPricingLibrary.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {BytesLib} from \\\"./utils/BytesLib.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {NATIVE_CURRENCY, USD, USD_MULTIPLIER} from \\\"../Constants.sol\\\";\\nimport {IDexAdapter} from \\\"../interfaces/IDexAdapter.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IBucket} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPositionManager} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary PrimexPricingLibrary {\\n    using WadRayMath for uint256;\\n    using BytesLib for bytes;\\n\\n    struct Route {\\n        uint256 shares;\\n        SwapPath[] paths;\\n    }\\n\\n    struct SwapPath {\\n        string dexName;\\n        bytes encodedPath;\\n    }\\n\\n    struct MultiSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        Route[] routes;\\n        address dexAdapter;\\n        address receiver;\\n        uint256 deadline;\\n    }\\n\\n    struct MultiSwapVars {\\n        uint256 sumOfShares;\\n        uint256 balance;\\n        uint256 amountOnDex;\\n        uint256 remainder;\\n        Route route;\\n    }\\n\\n    struct AmountParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amount;\\n        Route[] routes;\\n        address dexAdapter;\\n        address primexDNS;\\n    }\\n\\n    struct LiquidationPriceCalculationParams {\\n        address bucket;\\n        address positionAsset;\\n        uint256 limitPrice;\\n        uint256 leverage;\\n    }\\n\\n    struct DepositData {\\n        uint256 protocolFee;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n    }\\n\\n    /**\\n     * @param _depositData the deposit data through which the protocol fee can be calculated\\n     * if the position is opened through an order using deposit asset\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a native currency\\n     * @param _isSwapFromWallet bool, the protocol fee is taken from the user wallet or from the Vault\\n     * @param _trader trader address\\n     * @param _priceOracle PriceOracle contract address\\n     * @param _traderBalanceVault TraderBalanceVault contract address\\n     * @param _primexDNS PrimexDNS contract address\\n     */\\n    struct ProtocolFeeParams {\\n        DepositData depositData;\\n        address feeToken;\\n        bool isSwapFromWallet;\\n        address trader;\\n        address priceOracle;\\n        uint256 feeRate;\\n        bool calculateFee;\\n        ITraderBalanceVault traderBalanceVault;\\n        IPrimexDNS primexDNS;\\n    }\\n\\n    /**\\n     * The struct for payProtocolFee function\\n     */\\n    struct ProtocolFeeVars {\\n        bool fromLocked;\\n        address treasury;\\n    }\\n\\n    /**\\n     * The struct for getLiquidationPrice and getLiquidationPriceByOrder functions\\n     */\\n    struct LiquidationPriceData {\\n        IBucket bucket;\\n        IPositionManager positionManager;\\n        IPriceOracle priceOracle;\\n        IERC20Metadata borrowedAsset;\\n    }\\n\\n    event Withdraw(\\n        address indexed withdrawer,\\n        address borrowAssetReceiver,\\n        address borrowedAsset,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Encodes the given parameters into a bytes array based on the specified DEX type.\\n     * @param path The token path for the swap.\\n     * @param dexRouter The address of the DEX router.\\n     * @param ancillaryData Additional data required for certain DEX types.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @param isAmountToBuy A flag indicating whether it is the path for the swap with fixed amountIn or amountOut.\\n     * Swap with fixed amountIn, if true.\\n     * @return The encoded bytes array.\\n     */\\n    function encodePath(\\n        address[] memory path,\\n        address dexRouter,\\n        bytes32 ancillaryData,\\n        address dexAdapter,\\n        bool isAmountToBuy\\n    ) external view returns (bytes memory) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            return abi.encode(path);\\n        }\\n        if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            if (isAmountToBuy)\\n                return bytes.concat(bytes20(path[1]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            if (isAmountToBuy) return bytes.concat(bytes20(path[1]), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.Curve) {\\n            address[] memory pools = new address[](1);\\n            pools[0] = address(uint160(uint256(ancillaryData)));\\n            return abi.encode(path, pools);\\n        }\\n        if (type_ == IDexAdapter.DexType.Balancer) {\\n            int256[] memory limits = new int256[](2);\\n            limits[0] = type(int256).max;\\n            bytes32[] memory pools = new bytes32[](1);\\n            pools[0] = ancillaryData;\\n            return abi.encode(path, pools, limits);\\n        }\\n        _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n    }\\n\\n    /**\\n     * @notice Wrapped getAmountsOut to the dex\\n     * @param _params parameters necessary to get amount out\\n     * @return the amount of `tokenB` by the amount of 'tokenA' on dexes\\n     */\\n    function getAmountOut(AmountParams memory _params) public returns (uint256) {\\n        _require(_params.tokenA != _params.tokenB, Errors.IDENTICAL_ASSETS.selector);\\n        _require(\\n            IERC165(address(_params.primexDNS)).supportsInterface(type(IPrimexDNS).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        uint256 sumOfShares;\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            sumOfShares += _params.routes[i].shares;\\n        }\\n        _require(sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n\\n        uint256 remainder = _params.amount;\\n        uint256 sum;\\n        uint256 amountOnDex;\\n        Route memory route;\\n        IDexAdapter.GetAmountsParams memory getAmountsParams;\\n        address[] memory path;\\n\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            route = _params.routes[i];\\n            amountOnDex = i == _params.routes.length - 1 ? remainder : (_params.amount * route.shares) / sumOfShares;\\n            remainder -= amountOnDex;\\n            address tokenIn = _params.tokenA;\\n\\n            for (uint256 j; j < route.paths.length; j++) {\\n                getAmountsParams.encodedPath = route.paths[j].encodedPath;\\n                getAmountsParams.amount = amountOnDex;\\n                getAmountsParams.dexRouter = IPrimexDNS(_params.primexDNS).getDexAddress(route.paths[j].dexName);\\n                path = decodePath(getAmountsParams.encodedPath, getAmountsParams.dexRouter, _params.dexAdapter);\\n                _require(path.length >= 2 && path[0] == tokenIn, Errors.INCORRECT_PATH.selector);\\n                if (j == route.paths.length - 1) {\\n                    _require(path[path.length - 1] == _params.tokenB, Errors.INCORRECT_PATH.selector);\\n                }\\n                tokenIn = path[path.length - 1];\\n                amountOnDex = IDexAdapter(_params.dexAdapter).getAmountsOut(getAmountsParams)[1];\\n            }\\n            sum += amountOnDex;\\n        }\\n\\n        return sum;\\n    }\\n\\n    /**\\n     * @notice Wrapped getAmountIn to the dex\\n     * @param _params parameters necessary to get amount in\\n     * @return the amount of `tokenA` by the amount of 'tokenB' on dexes\\n     */\\n    function getAmountIn(AmountParams memory _params) public returns (uint256) {\\n        _require(_params.tokenA != _params.tokenB, Errors.IDENTICAL_ASSETS.selector);\\n        _require(\\n            IERC165(address(_params.primexDNS)).supportsInterface(type(IPrimexDNS).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n\\n        uint256 sumOfShares;\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            sumOfShares += _params.routes[i].shares;\\n        }\\n        _require(sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n\\n        uint256 remainder = _params.amount;\\n        uint256 sum;\\n        uint256 amountOnDex;\\n        Route memory route;\\n        IDexAdapter.GetAmountsParams memory getAmountsParams;\\n        address[] memory path;\\n\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            route = _params.routes[i];\\n            amountOnDex = i == _params.routes.length - 1 ? remainder : (_params.amount * route.shares) / sumOfShares;\\n            remainder -= amountOnDex;\\n            address tokenOut = _params.tokenB;\\n            for (uint256 j; j < route.paths.length; j++) {\\n                getAmountsParams.encodedPath = route.paths[route.paths.length - 1 - j].encodedPath;\\n                getAmountsParams.amount = amountOnDex;\\n                getAmountsParams.dexRouter = IPrimexDNS(_params.primexDNS).getDexAddress(\\n                    route.paths[route.paths.length - 1 - j].dexName\\n                );\\n                path = decodePath(getAmountsParams.encodedPath, getAmountsParams.dexRouter, _params.dexAdapter);\\n                _require(path.length >= 2 && path[path.length - 1] == tokenOut, Errors.INCORRECT_PATH.selector);\\n                if (j == route.paths.length - 1) {\\n                    _require(path[0] == _params.tokenA, Errors.INCORRECT_PATH.selector);\\n                }\\n                tokenOut = path[0];\\n                amountOnDex = IDexAdapter(_params.dexAdapter).getAmountsIn(getAmountsParams)[0];\\n            }\\n            sum += amountOnDex;\\n        }\\n\\n        return sum;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of deposit assets in borrowed assets.\\n     * @param _params The parameters for the calculation.\\n     * @param _isThirdAsset A flag indicating if deposit is in a third asset.\\n     * @param _priceOracle The address of the price oracle.\\n     * @return The amount of deposit assets is measured in borrowed assets.\\n     */\\n    function getDepositAmountInBorrowed(\\n        AmountParams memory _params,\\n        bool _isThirdAsset,\\n        address _priceOracle\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_params.primexDNS).supportsInterface(type(IPrimexDNS).interfaceId) &&\\n                IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_params.tokenA == _params.tokenB) {\\n            _require(_params.routes.length == 0, Errors.DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0.selector);\\n            return _params.amount;\\n        }\\n\\n        uint256 depositAmountInBorrowed = getAmountOut(_params);\\n        if (_isThirdAsset) {\\n            uint256 oracleDepositAmountOut = getOracleAmountsOut(\\n                _params.tokenA,\\n                _params.tokenB,\\n                _params.amount,\\n                _priceOracle\\n            );\\n            if (depositAmountInBorrowed > oracleDepositAmountOut) depositAmountInBorrowed = oracleDepositAmountOut;\\n        }\\n\\n        return depositAmountInBorrowed;\\n    }\\n\\n    /**\\n     * @notice Performs a multi-hop swap transaction using the specified parameters.\\n     * @dev This function executes a series of token swaps on different DEXs based on the provided routes.\\n     * @param _params The struct containing all the necessary parameters for the multi-hop swap.\\n     * @param _maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * for the price difference between DEX and the oracle.\\n     * @param _primexDNS The address of the Primex DNS contract.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @param _needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The final balance of the _params.tokenB in the receiver's address after the multi-hop swap.\\n     */\\n    function multiSwap(\\n        MultiSwapParams memory _params,\\n        uint256 _maximumOracleTolerableLimit,\\n        address _primexDNS,\\n        address _priceOracle,\\n        bool _needOracleTolerableLimitCheck\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_primexDNS).supportsInterface(type(IPrimexDNS).interfaceId) &&\\n                IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        MultiSwapVars memory vars;\\n        vars.balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver);\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            vars.sumOfShares += _params.routes[i].shares;\\n        }\\n        _require(vars.sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n\\n        vars.remainder = _params.amountTokenA;\\n        IDexAdapter.SwapParams memory swapParams;\\n        swapParams.deadline = _params.deadline;\\n\\n        for (uint256 i; i < _params.routes.length; i++) {\\n            vars.route = _params.routes[i];\\n            vars.amountOnDex = i == _params.routes.length - 1\\n                ? vars.remainder\\n                : (_params.amountTokenA * vars.route.shares) / vars.sumOfShares;\\n            vars.remainder -= vars.amountOnDex;\\n            swapParams.to = _params.dexAdapter;\\n\\n            for (uint256 j; j < vars.route.paths.length; j++) {\\n                swapParams.encodedPath = vars.route.paths[j].encodedPath;\\n                swapParams.amountIn = vars.amountOnDex;\\n                swapParams.dexRouter = IPrimexDNS(_primexDNS).getDexAddress(vars.route.paths[j].dexName);\\n                if (j == vars.route.paths.length - 1) {\\n                    swapParams.to = _params.receiver;\\n                }\\n                vars.amountOnDex = IDexAdapter(_params.dexAdapter).swapExactTokensForTokens(swapParams)[1];\\n            }\\n        }\\n\\n        vars.balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver) - vars.balance;\\n        if (_needOracleTolerableLimitCheck) {\\n            _require(\\n                vars.balance >=\\n                    getOracleAmountsOut(_params.tokenA, _params.tokenB, _params.amountTokenA, _priceOracle).wmul(\\n                        WadRayMath.WAD - _maximumOracleTolerableLimit\\n                    ),\\n                Errors.DIFFERENT_PRICE_DEX_AND_ORACLE.selector\\n            );\\n        }\\n\\n        return vars.balance;\\n    }\\n\\n    /**\\n     * @notice Pays the protocol fee.\\n     * @dev This function transfers the protocol fee from the trader to the protocol treasury.\\n     * @param params The parameters for paying the protocol fee.\\n     * @return protocolFee The amount of the protocol fee in PMX or NATIVE_CURRENCY paid.\\n     */\\n    function payProtocolFee(ProtocolFeeParams memory params) public returns (uint256 protocolFee) {\\n        if (!params.isSwapFromWallet || params.feeToken != NATIVE_CURRENCY) {\\n            _require(msg.value == 0, Errors.DISABLED_TRANSFER_NATIVE_CURRENCY.selector);\\n        }\\n        ProtocolFeeVars memory vars;\\n        vars.treasury = params.primexDNS.treasury();\\n        vars.fromLocked = true;\\n\\n        if (params.calculateFee) {\\n            if (params.feeRate == 0) return 0;\\n            vars.fromLocked = false;\\n            params.depositData.protocolFee = getOracleAmountsOut(\\n                params.depositData.depositAsset,\\n                params.feeToken,\\n                params.depositData.depositAmount.wmul(params.depositData.leverage).wmul(params.feeRate),\\n                params.priceOracle\\n            );\\n            if (params.isSwapFromWallet) {\\n                if (params.feeToken == NATIVE_CURRENCY) {\\n                    _require(msg.value >= params.depositData.protocolFee, Errors.INSUFFICIENT_DEPOSIT.selector);\\n                    TokenTransfersLibrary.doTransferOutETH(vars.treasury, params.depositData.protocolFee);\\n                    if (msg.value > params.depositData.protocolFee) {\\n                        uint256 rest = msg.value - params.depositData.protocolFee;\\n                        params.traderBalanceVault.topUpAvailableBalance{value: rest}(msg.sender, NATIVE_CURRENCY, rest);\\n                    }\\n                } else {\\n                    TokenTransfersLibrary.doTransferFromTo(\\n                        params.feeToken,\\n                        params.trader,\\n                        vars.treasury,\\n                        params.depositData.protocolFee\\n                    );\\n                }\\n                return params.depositData.protocolFee;\\n            }\\n        }\\n\\n        params.traderBalanceVault.withdrawFrom(\\n            params.trader,\\n            vars.treasury,\\n            params.feeToken,\\n            params.depositData.protocolFee,\\n            vars.fromLocked\\n        );\\n\\n        return params.depositData.protocolFee;\\n    }\\n\\n    /**\\n     * @param _tokenA asset for sell\\n     * @param _tokenB asset to buy\\n     * @param _amountAssetA Amount tokenA to sell\\n     * @param _priceOracle PriceOracle contract address\\n     * @return returns the amount of `tokenB` by the `amountAssetA` by the price of the oracle\\n     */\\n    function getOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountAssetA,\\n        address _priceOracle\\n    ) public view returns (uint256) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountAssetA;\\n        }\\n        (uint256 exchangeRate, bool isForward) = IPriceOracle(_priceOracle).getExchangeRate(_tokenA, _tokenB);\\n        uint256 amountAssetB;\\n        uint256 multiplier1 = _getAssetMultiplier(_tokenA);\\n        uint256 multiplier2 = _getAssetMultiplier(_tokenB);\\n\\n        if (isForward) {\\n            amountAssetB = (_amountAssetA * multiplier1).wmul(exchangeRate) / multiplier2;\\n        } else {\\n            amountAssetB = (_amountAssetA * multiplier1).wdiv(exchangeRate) / multiplier2;\\n        }\\n        return amountAssetB;\\n    }\\n\\n    /**\\n     * @param _tokenA asset for sell\\n     * @param _tokenB asset to buy\\n     * @param _amountsAssetA An array of amounts of tokenA to sell\\n     * @param _priceOracle PriceOracle contract address\\n     * @return returns an array of amounts of `tokenB` by the `amountsAssetA` by the price of the oracle\\n     */\\n    function getBatchOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256[] memory _amountsAssetA,\\n        address _priceOracle\\n    ) public view returns (uint256[] memory) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracle).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountsAssetA;\\n        }\\n        uint256[] memory amountsAssetB = new uint256[](_amountsAssetA.length);\\n        (uint256 exchangeRate, bool isForward) = IPriceOracle(_priceOracle).getExchangeRate(_tokenA, _tokenB);\\n        uint256 multiplier1 = 10 ** (18 - IERC20Metadata(_tokenA).decimals());\\n        uint256 multiplier2 = 10 ** (18 - IERC20Metadata(_tokenB).decimals());\\n\\n        if (isForward) {\\n            for (uint256 i; i < _amountsAssetA.length; i++) {\\n                amountsAssetB[i] = (_amountsAssetA[i] * multiplier1).wmul(exchangeRate) / multiplier2;\\n            }\\n        } else {\\n            for (uint256 i; i < _amountsAssetA.length; i++) {\\n                amountsAssetB[i] = (_amountsAssetA[i] * multiplier1).wdiv(exchangeRate) / multiplier2;\\n            }\\n        }\\n        return amountsAssetB;\\n    }\\n\\n    /**\\n     * @notice Calculates the liquidation price for a position.\\n     * @dev liquidationPrice = (feeBuffer * debt) /\\n     * ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * positionAmount))\\n     * @param _bucket The address of the related bucket.\\n     * @param _positionAsset The address of the position asset.\\n     * @param _positionAmount The size of the opened position.\\n     * @param _positionDebt The debt amount in debtTokens associated with the position.\\n     * @return The calculated liquidation price in borrowed asset.\\n     */\\n    function getLiquidationPrice(\\n        address _bucket,\\n        address _positionAsset,\\n        uint256 _positionAmount,\\n        uint256 _positionDebt\\n    ) public view returns (uint256) {\\n        _require(_positionAsset != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        LiquidationPriceData memory data;\\n        data.bucket = IBucket(_bucket);\\n\\n        (, bool tokenAllowed) = data.bucket.allowedAssets(_positionAsset);\\n        _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n\\n        data.positionManager = data.bucket.positionManager();\\n        data.borrowedAsset = data.bucket.borrowedAsset();\\n        data.priceOracle = data.positionManager.priceOracle();\\n\\n        uint256 multiplier1 = 10 ** (18 - data.borrowedAsset.decimals());\\n        uint256 denominator = (WadRayMath.WAD - data.positionManager.securityBuffer())\\n            .wmul(\\n                WadRayMath.WAD -\\n                    data.positionManager.getOracleTolerableLimit(_positionAsset, address(data.borrowedAsset))\\n            )\\n            .wmul(WadRayMath.WAD - data.priceOracle.getPairPriceDrop(_positionAsset, address(data.borrowedAsset)))\\n            .wmul(_positionAmount) * 10 ** (18 - IERC20Metadata(_positionAsset).decimals());\\n        // numerator = data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1;\\n        return (data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1).wdiv(denominator) / multiplier1;\\n    }\\n\\n    /**\\n     * @notice Validates if a position meets the minimum size requirement.\\n     * @param _minPositionSize The minimum position size.\\n     * @param _minPositionAsset The asset associated with the minimum position size.\\n     * @param _amount The amount of the asset in the position.\\n     * @param _asset The asset associated with the position.\\n     * @param _priceOracle The address of the price oracle contract.\\n     */\\n    function validateMinPositionSize(\\n        uint256 _minPositionSize,\\n        address _minPositionAsset,\\n        uint256 _amount,\\n        address _asset,\\n        address _priceOracle\\n    ) public view {\\n        _require(\\n            isCorrespondsMinPositionSize(_minPositionSize, _minPositionAsset, _asset, _amount, _priceOracle),\\n            Errors.INSUFFICIENT_POSITION_SIZE.selector\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks if the given amount of _asset corresponds to the minimum position size _minPositionSize,\\n     * based on the _minPositionAsset and the provided _priceOracle.\\n     * Returns true if the amount corresponds to or exceeds the minimum position size, otherwise returns false.\\n     * @param _minPositionSize The minimum position size required.\\n     * @param _minPositionAsset The address of the asset used for determining the minimum position size.\\n     * @param _asset The address of the asset being checked.\\n     * @param _amount The amount of _asset being checked.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @return A boolean value indicating whether the amount corresponds to or exceeds the minimum position size.\\n     */\\n    function isCorrespondsMinPositionSize(\\n        uint256 _minPositionSize,\\n        address _minPositionAsset,\\n        address _asset,\\n        uint256 _amount,\\n        address _priceOracle\\n    ) public view returns (bool) {\\n        if (_minPositionSize == 0) return true;\\n\\n        uint256 amountInMinPositionAsset = getOracleAmountsOut(_asset, _minPositionAsset, _amount, _priceOracle);\\n        return amountInMinPositionAsset >= _minPositionSize;\\n    }\\n\\n    /**\\n     * @notice Decodes an encoded path and returns an array of addresses.\\n     * @param encodedPath The encoded path to be decoded.\\n     * @param dexRouter The address of the DEX router.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @return path An array of addresses representing the decoded path.\\n     */\\n    function decodePath(\\n        bytes memory encodedPath,\\n        address dexRouter,\\n        address dexAdapter\\n    ) public view returns (address[] memory path) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            path = abi.decode(encodedPath, (address[]));\\n        } else if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 23; // address size(20) + fee size(3)\\n            uint256 pathLength = encodedPath.length / offsetSize + 1;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else if (type_ == IDexAdapter.DexType.Curve) {\\n            (path, ) = abi.decode(encodedPath, (address[], address[]));\\n        } else if (type_ == IDexAdapter.DexType.Balancer) {\\n            (path, , ) = abi.decode(encodedPath, (address[], bytes32[], int256[]));\\n        } else if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 20; // address size(20)\\n            uint256 pathLength = encodedPath.length / offsetSize;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else {\\n            _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the price from two price feeds.\\n     * @dev This function returns the price ratio between the base price and the quote price.\\n     * @param basePriceFeed The address of the base price feed (AggregatorV3Interface).\\n     * @param quotePriceFeed The address of the quote price feed (AggregatorV3Interface).\\n     * @param roundBaseFeed The round ID of the base price feed.\\n     * @param roundQuoteFeed The round ID of the quote price feed.\\n     * @param checkedTimestamp The timestamp used to filter relevant prices. Set to 0 to consider all prices.\\n     * @return The price ratio in WAD format between the base price and the quote price, and the timestamp of the latest price.\\n     */\\n    function getPriceFromFeeds(\\n        AggregatorV3Interface basePriceFeed,\\n        AggregatorV3Interface quotePriceFeed,\\n        uint80 roundBaseFeed,\\n        uint80 roundQuoteFeed,\\n        uint256 checkedTimestamp\\n    ) internal view returns (uint256, uint256) {\\n        (, int256 basePrice, , uint256 basePriceUpdatedAt, ) = basePriceFeed.getRoundData(roundBaseFeed);\\n        (, , , uint256 basePriceUpdatedAtNext, ) = basePriceFeed.getRoundData(roundBaseFeed + 1);\\n        // update to current timestamp if roundBaseFeed is last round\\n        if (basePriceUpdatedAtNext == 0) basePriceUpdatedAtNext = block.timestamp;\\n\\n        (, int256 quotePrice, , uint256 quotePriceUpdatedAt, ) = quotePriceFeed.getRoundData(roundQuoteFeed);\\n        (, , , uint256 quotePriceUpdatedAtNext, ) = quotePriceFeed.getRoundData(roundQuoteFeed + 1);\\n        // update to current timestamp if roundQuoteFeed is last round\\n        if (quotePriceUpdatedAtNext == 0) quotePriceUpdatedAtNext = block.timestamp;\\n\\n        _require(basePriceUpdatedAt > 0 && quotePriceUpdatedAt > 0, Errors.DATA_FOR_ROUND_DOES_NOT_EXIST.selector);\\n\\n        // we work only with prices that were relevant after position creation\\n        _require(\\n            checkedTimestamp == 0 ||\\n                (basePriceUpdatedAtNext > checkedTimestamp && quotePriceUpdatedAtNext > checkedTimestamp),\\n            Errors.HIGH_PRICE_TIMESTAMP_IS_INCORRECT.selector\\n        );\\n        // there should be an intersection between their duration\\n        _require(\\n            quotePriceUpdatedAt < basePriceUpdatedAtNext && basePriceUpdatedAt < quotePriceUpdatedAtNext,\\n            Errors.NO_PRICE_FEED_INTERSECTION.selector\\n        );\\n        //the return value will always be 18 decimals if the basePrice and quotePrice have the same decimals\\n        return (\\n            uint256(basePrice).wdiv(uint256(quotePrice)),\\n            quotePriceUpdatedAt < basePriceUpdatedAt ? quotePriceUpdatedAt : basePriceUpdatedAt\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the asset multiplier for a given asset.\\n     * @dev If the asset is the native currency, the function returns 1.\\n     * If the asset is USD, the function returns the value stored in the constant USD_MULTIPLIER.\\n     * For any other asset, the function calculates the multiplier based on the number of decimals of the token.\\n     * @param _asset The address of the asset.\\n     * @return The asset multiplier. It is a number with 10 raised to a power of decimals of a given asset.\\n     */\\n    function _getAssetMultiplier(address _asset) internal view returns (uint256) {\\n        if (_asset == NATIVE_CURRENCY) return 1;\\n        if (_asset == USD) return USD_MULTIPLIER;\\n\\n        return 10 ** (18 - IERC20Metadata(_asset).decimals());\\n    }\\n}\\n\",\"keccak256\":\"0xf32a5f58a97fe5ea1f41a87ee4c9fdac5e82584c25856777320e03f0be412f57\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TokenTransfersLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of token transfer logic that allows working with non-standart ERC-20 tokens, added method doTransferFromTo,\\n// modified doTransferIn\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenTransfersLibrary {\\n    function doTransferIn(address token, address from, uint256 amount) public returns (uint256) {\\n        return doTransferFromTo(token, from, address(this), amount);\\n    }\\n\\n    function doTransferFromTo(address token, address from, address to, uint256 amount) public returns (uint256) {\\n        uint256 balanceBefore = IERC20(token).balanceOf(to);\\n        // The returned value is checked in the assembly code below.\\n        // Arbitrary `from` should be checked at a higher level. The library function cannot be called by the user.\\n        // slither-disable-next-line unchecked-transfer arbitrary-send-erc20\\n        EIP20NonStandardInterface(token).transferFrom(from, to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_IN_FAILED.selector);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = IERC20(token).balanceOf(to);\\n        _require(balanceAfter >= balanceBefore, Errors.TOKEN_TRANSFER_IN_OVERFLOW.selector);\\n\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    function doTransferOut(address token, address to, uint256 amount) public {\\n        // The returned value is checked in the assembly code below.\\n        // slither-disable-next-line unchecked-transfer\\n        EIP20NonStandardInterface(token).transfer(to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_OUT_FAILED.selector);\\n    }\\n\\n    function doTransferOutETH(address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        _require(success, Errors.NATIVE_TOKEN_TRANSFER_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x055c6c72633f72ec523e7b74a58549f12e8c92320a6a06ae74503f637cb2ab97\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/utils/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// A modified version of BytesLib\\n// Unused methods and constants were removed\\npragma solidity 0.8.18;\\n\\nlibrary BytesLib {\\n    error ToAddressOverflow();\\n    error ToAddressOutOfBounds();\\n\\n    /// @notice Returns the address starting at byte `_start`\\n    /// @dev _bytesLength must equal _bytes.length for this to function correctly\\n    /// @param _bytes The input bytes string to slice\\n    /// @param _start The starting index of the address\\n    /// @param _bytesLength The length of _bytes\\n    /// @return tempAddress The address starting at _start\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _bytesLength\\n    ) internal pure returns (address tempAddress) {\\n        unchecked {\\n            if (_start + 20 < _start) revert ToAddressOverflow();\\n            if (_bytesLength < _start + 20) revert ToAddressOutOfBounds();\\n        }\\n\\n        assembly {\\n            tempAddress := mload(add(add(_bytes, 0x14), _start))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc2995d56bed0fa115b5678f8f08fa4dce0c26bfb1a56fd998a21af17d71c97bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.18;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x505d0ff0f49362e7ff1d878bfc8e286e70b09558e93763659bdb2153917bc3e3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60808060405234620000c6576000549060ff8260081c1662000074575060ff8082160362000038575b604051614d309081620000cc8239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a13862000028565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146135d75750806307c2e16c146135b95780631ba42ea71461357157806323b515c41461353f57806330284efc14613420578063305d98b4146134025780633f4a2d27146133d95780633f4ba83a146132b057806355815199146132865780635973af39146131e75780635c975abb146131c45780636e1c227514612c7e578063709d039d14612c5557806371e536c714612bee5780637948398d14612b985780637a2ef801146121de5780637b103999146121b5578063838bf2d5146121495780638456cb59146120455780638970cdff1461201c5780639968861e14611ff35780639dd984f214611fc9578063a5cdc8fc14611dad578063c1001337146112ca578063c5d4d450146112a0578063c712a93914611267578063cc2a9a5b14610dbb578063ce3ca00b14610d4a578063d09ef24114610cdf578063d81db0ff14610c36578063dabe8a7114610bf0578063e9b3cd5214610bb7578063ea0341a814610b0d578063efa160f41461085a5763f17194bb146101a257600080fd5b60c0366003190112610857576101b6613edb565b60d754604051630723eb0360e51b815233600482015290602090829060249082906001600160a01b03165afa9081156104ee578291610819575b506108075760043580825260cb60205261020d6040832054613cf4565b50805460068201546001600160a01b03918216911633036107f55780610777575b5060d554604051632630c12f60e01b81529290602090849060049082906001600160a01b03165afa92831561076c578493610728575b5060d35460d4546001600160a01b039081169491169073C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea93b15610531576040519263f1bc5b8160e01b84528460048501526024840152602435604484015260443560648401526064358015158091036107235760848401526084359485151586036107235785151560a485015260a435928315158403610723578793151560c486015260e485015261010484015260018060a01b0316918261012482015281816101448173C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea95af480156104ee5761070f575b506003830193845460243503610681575b50506009820190815460443503610604575b83548254869181159182156105b5575b5050156105a3576706f05b59d3b2000081019081811161058f57811061057d5760d554604051635dc189e160e11b815287939173eFCDBbd36a9D77264d56F22e0E94f8D5F425f9b4906001600160a01b0316602083600481845afa92831561053d578693610548575b50916020600493604051948580926305e1621360e21b82525afa92831561053d5786936104fd575b5060028801546001600160a01b031691803b156104f957869460a493670de0b6b3a7640000604051988997889663d3b9cb1560e01b8852600488015260018060a01b03166024870152046044850152606484015260848301525af480156104ee576104d6575b505060807f22e28f14941a8f9d89c3ee26b19498784e5ae277784b2f56a813ecdb41611c659160088401549360018060a01b036006820154169554915490600560018060a01b0360048301541691015491604051938452602084015260408301526060820152a36001805580f35b6104df906137a1565b6104ea578338610468565b8380fd5b6040513d84823e3d90fd5b8680fd5b9092506020813d602011610535575b8161051960209383613806565b810103126105315761052a90613b7b565b9138610402565b8580fd5b3d915061050c565b6040513d88823e3d90fd5b92506020833d602011610575575b8161056360209383613806565b810103126105315791519160206103da565b3d9150610556565b604051630a77254f60e01b8152600490fd5b634e487b7160e01b87526011600452602487fd5b604051631550e8b760e01b8152600490fd5b818192939450028281048214831517156105ee5780936105d85704143880610371565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b73C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea93b1561067d57846040516326d1999160e11b81528460048201526044356024820152818160448173C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea95af480156104ee57610669575b5050610361565b610672906137a1565b61067d578438610662565b8480fd5b60d3546001600160a01b031673C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea93b1561070b5760405191630658598b60e51b83528560048401526024356024840152151560448301526064820152818160848173C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea95af480156104ee571561034f57610700906137a1565b6104ea57833861034f565b8280fd5b610718906137a1565b6104ea57833861033e565b600080fd5b9092506020813d602011610764575b8161074460209383613806565b810103126104ea57516001600160a01b03811681036104ea579138610264565b3d9150610737565b6040513d86823e3d90fd5b6020600491604051928380926308bcf8b560e21b82525afa90811561076c5784916107bb575b50156107a9573861022e565b60405163d42bba7f60e01b8152600490fd5b90506020813d6020116107ed575b816107d660209383613806565b810103126104ea576107e790613b0e565b3861079d565b3d91506107c9565b60405163014d683360e41b8152600490fd5b6040516333df015b60e01b8152600490fd5b90506020813d60201161084f575b8161083460209383613806565b8101031261084b5761084590613b0e565b386101f0565b5080fd5b3d9150610827565b80fd5b50346108575760208060031936011261084b576004356001600160401b038082116104ea57366023830112156104ea5781600401359081116104ea573660248260051b840101116104ea57835b8181106108b2578480f35b6108c08183602486016140a0565b35855260cb8452604085205460c95415610b08576108dd90613cf4565b509060018060a01b0380835416801591600885015490610901858860248b016140a0565b35821480610a83575b610922575b5050505061091d9150613ce5565b6108a7565b8989826006890154169486600014610a2957604051610940816137eb565b838152965b156109ac5750509261091d9692600080516020614cdb8339815191526109a3969361099e965b610996826001890154169260098901549060028a01541660038a015491604051958695339b87613f86565b0390a4613fd8565b614624565b3880808061090f565b906004959296939894916040519687809263011ddaef60e71b82525afa94851561053d578861091d9961099e97600080516020614cdb833981519152938f6109a39b926109fc575b50501661096b565b610a1b9250803d10610a22575b610a138183613806565b810190613f67565b388f6109f4565b503d610a09565b6040516306fdde0360e01b815291508282600481845afa8015610a78578c928491610a56575b5096610945565b610a7291503d8086833e610a6a8183613806565b810190613f31565b38610a4f565b6040513d85823e3d90fd5b5060078601544210158061090a57508315801561090a5750604051634db1160160e11b81528981600481875afa908115610afd578b91610ac4575b5061090a565b90508981813d8311610af6575b610adb8183613806565b81010312610af257610aec90613b0e565b38610abe565b8a80fd5b503d610ad1565b6040513d8d823e3d90fd5b508480f35b50346108575760208060031936011261084b57600435825260d1815260408220805490610b39826138dd565b93610b476040519586613806565b828552908152828120838086015b848410610b735760405182815280610b6f8185018a61386f565b0390f35b600191600291604051610b8581613786565b85548152604051610ba381610b9c81898b016136f0565b0382613806565b838201528152019201920191908490610b55565b5034610857576020366003190112610857576020906040906001600160a01b03610bdf61362c565b16815260cd83522054604051908152f35b503461085757602036600319011261085757610c0a6142a0565b50610b6f610c22610c1c600435613cf4565b50613fd8565b6040519182916020835260208301906139fa565b50346108575760208060031936011261084b576001600160a01b03610c5961362c565b169182815260cf91828152604082205492610c7384614307565b94835b858110610c8b5760405180610b6f8982613aac565b610cda90828652838552610ca28160408820613656565b90549060031b1c865260cb8552610cbf610c1c6040882054613cf4565b610cc9828a614357565b52610cd48189614357565b50613ce5565b610c76565b503461085757602036600319011261085757600435610cfc6142a0565b5080825260cb602052806008610d156040852054613cf4565b50015403610d3857610c1c604083610c2293610b6f955260cb6020522054613cf4565b60405163d5516fcd60e01b8152600490fd5b50346108575760208060031936011261084b576001600160a01b03610d6d61362c565b169182815260cd91828152604082205492610d8784614307565b94835b858110610d9f5760405180610b6f8982613aac565b610db690828652838552610ca28160408820613656565b610d8a565b50346108575760c036600319011261085757610dd561362c565b6001600160a01b03906024908135838116908190036107235760443590848216809203610723576064358581168091036104f957608435928684168094036107235760a435928784168094036107235788549760ff8960081c16159687809861125a575b8015611243575b156111e85760ff198a81166001178c5599886111d7575b5016936040516301ffc9a760e01b98898252637965db0b60e01b60048301528b60209a8b8484818c5afa9384156104ee578c929461119f575b5083611135575b836110cb575b83611061575b83610ff3575b83610f8b575b50505015610f79576001600160601b0360a01b948560d254161760d2558460d754161760d7558360d454161760d4558260d554161760d5558160d354161760d35560d654161760d655610f3a84549360ff8560081c1690610f0f82613b1b565b610f1882613b1b565b60655416606555610f2881613b1b565b610f3181613b1b565b60018055613b1b565b610f42578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001916835560405160018152a138808280f35b60405163044aa57560e41b8152600490fd5b604051908152633df6cef760e01b6004820152925090829081855afa908115610afd578b91610fbe575b50388981610eaf565b90508881813d8311610fec575b610fd58183613806565b81010312610af257610fe690613b0e565b38610fb5565b503d610fcb565b9250508b604051838152631c94d2c560e01b60048201528b8184818d5afa9081156104ee578c9291611027575b5092610ea9565b82819392503d831161105a575b61103e8183613806565b81010312611056576110508b91613b0e565b38611020565b8c80fd5b503d611034565b9250508b6040518381526312b3ed2b60e01b60048201528b8184818b5afa9081156104ee578c9291611095575b5092610ea3565b82819392503d83116110c4575b6110ac8183613806565b81010312611056576110be8b91613b0e565b3861108e565b503d6110a2565b9250508b6040518381526306cc15a560e11b60048201528b8184818a5afa9081156104ee578c92916110ff575b5092610e9d565b82819392503d831161112e575b6111168183613806565b81010312611056576111288b91613b0e565b386110f8565b503d61110c565b9250508b60405183815263fa6ab0ef60e01b60048201528b818481895afa9081156104ee578c9291611169575b5092610e97565b82819392503d8311611198575b6111808183613806565b81010312611056576111928b91613b0e565b38611162565b503d611176565b8281939295503d83116111d0575b6111b78183613806565b81010312611056576111c98b91613b0e565b9238610e90565b503d6111ad565b61ffff1916610101178b5538610e57565b60405162461bcd60e51b815260206004820152602e818b01527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610e405750600160ff8b1614610e40565b50600160ff8b1610610e39565b5034610857576020366003190112610857576020906040906001600160a01b0361128f61362c565b16815260cf83522054604051908152f35b5034610857576020366003190112610857576040602091600435815260ce83522054604051908152f35b5034610857576020366003190112610857576001600160401b03600435116108575760c0600435360360031901126108575760043560040135815260cb602052604081205460c95415159081611d91575b5015610d3857611329613edb565b60d754604051630723eb0360e51b815233600482015290602090829060249082906001600160a01b03165afa9081156104ee578291611d57575b5061080757611370613e97565b5a9060043560040135815260d06020526040812054602460043501351015611d455760043560040135815260cb6020526113ad6040822054613cf4565b506007810154421015611d335780546001600160a01b031680611c4a575b506001600160a01b036113e260043560a4016140ca565b1615611c38576008810154825260d1602052604080832060d55460d35460d45460d654945163153e85cd60e01b8152600480820188905260e06024808401919091528135918201803560e4850152908201356101048401529197966001600160a01b039081169689969095948216948216939116916114d1916114aa91611483916114709160440190613bc6565b60c06101248b01526101a48a0191613bf7565b611497606460043501600435600401613c25565b89830360e319016101448b0152906140de565b6114be608460043501600435600401613c25565b88830360e319016101648a0152906140de565b6001600160a01b036114e760043560a401613642565b166101848701526003198682030160448701528454808252602082019160208260051b820101968c5260208c20928c915b838310611bf05750505050509160e095918594936064860152608485015260a484015260c4830152038173C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea95af4918215610a78578392611b42575b5060043560040135835260d0602052611589602460043501356040852061369a565b5060018060a01b0360d45416602082546024604051809481936352ff146960e11b835260048301525afa908115611b37578591611af8575b50600160209160043560040135875260cb835261162c6115e46040892054613cf4565b506116516115fc604460043501600435600401613dfc565b919060c08b01519261163f6040519a8b998a9889986301f24f2560e11b8a52608060048b015260848a01906141ef565b8881036003190160248a015291016136f0565b85810360031901604487015291613bf7565b606483019190915203916001600160a01b03165afa90811561076c578491611abe575b5015611aac57805460068201546001600160a01b03918216911661169c60043560a4016140ca565b916080850151926004841015611a985760a086015182611a365790600080516020614cdb833981519152916040516116d3816137eb565b898152935b611a255788935b60018060a01b0360018901541660098901549061172760018060a01b0360028c0154169360038c0154956040519b8c5260208c015261010060408c01526101008b019061384a565b9660018060a01b031660608a0152608089015260a088015260c087015260e086015260018060a01b0316938060043560040135930390a461177761177242600c840154141592613fd8565b614971565b611784575b506001805580f35b60d554604051637496a94d60e11b81529190602090839060049082906001600160a01b03165afa918215610a785783926119e1575b506117c860a4600435016140ca565b93606060018060a01b03602084015116920151905a81039081116105ee57604051916117f3836137eb565b858352611858611864611810606460043501600435600401613dc7565b611827608460049593953501600435600401613dc7565b6118446040949294519687946040602087015260608601916140de565b90601f1994858584030160408601526140de565b03908101835282613806565b519360405197886101008101106001600160401b036101008b0111176119cb57610100890160405260018060a01b03168852602088015260408701528460608701526001608087015260a086015260c085015260e084015260018060a01b0381163b1561084b57604080516350b29c5560e11b815260206004820181905285516001600160a01b0390811660248401529086015116604482015290840151606482015260608401516101248201949192919060058110156119b7576084840152608081015160a484015260a081015160c484015260c081015161010060e4850152805195869052919461014484019260200190855b8181106119a1575050508394838581819560e082960151610104830152039260018060a01b03165af180156104ee571561177c57611996906137a1565b61085757803861177c565b8251855260209485019490920191600101611959565b634e487b7160e01b85526021600452602485fd5b634e487b7160e01b600052604160045260246000fd5b9091506020813d602011611a1d575b816119fd60209383613806565b8101031261070b57516001600160a01b038116810361070b5790386117b9565b3d91506119f0565b87516001600160a01b0316936116df565b6040516306fdde0360e01b81528881600481875afa908115611a8d5790600080516020614cdb8339815191529392918a91611a73575b50936116d8565b611a8791503d808c833e610a6a8183613806565b38611a6c565b6040513d8b823e3d90fd5b634e487b7160e01b87526021600452602487fd5b604051635745ee4960e01b8152600490fd5b90506020813d602011611af0575b81611ad960209383613806565b810103126104ea57611aea90613b0e565b38611674565b3d9150611acc565b90506020813d602011611b2f575b81611b1360209383613806565b8101031261067d576001611b28602092613b7b565b91506115c1565b3d9150611b06565b6040513d87823e3d90fd5b90915060e0813d60e011611be8575b81611b5e60e09383613806565b8101031261070b57604051908160e08101106001600160401b0360e0840111176119cb5760e08201604052611b9281613b7b565b8252611ba060208201613b7b565b602083015260408101516040830152606081015160608301526080810151600481101561067d579060c091608084015260a081015160a0840152015160c08201529038611567565b3d9150611b51565b9193999850919394959660206002611c228c600160408196601f19898203018a528354815281878201520191016136f0565b9b019301930190928b9899979695949293611518565b604051639783f5bd60e01b8152600490fd5b6040516308bcf8b560e21b8152602081600481855afa90811561076c578491611cf9575b50156107a957604060018060a01b03600184015416602482518094819363a4c1cccb60e01b835260048301525afa908115610a78578391611cc8575b5015611cb657386113cb565b60405163b7addff360e01b8152600490fd5b611cea915060403d604011611cf2575b611ce28183613806565b8101906140b0565b905038611caa565b503d611cd8565b90506020813d602011611d2b575b81611d1460209383613806565b810103126104ea57611d2590613b0e565b38611c6e565b3d9150611d07565b60405163065445df60e51b8152600490fd5b6040516316f5923f60e31b8152600490fd5b90506020813d602011611d89575b81611d7260209383613806565b8101031261084b57611d8390613b0e565b38611363565b3d9150611d65565b611d9b9150613cf4565b5060080154600480350135143861131b565b50346108575760208060031936011261084b576004359081835260cb815260408320548260c95415159182611fb0575b505015610d3857611dec613edb565b60d754604051630723eb0360e51b81523360048201526001600160a01b039183908290602490829086165afa908115611b37578591611f7b575b506108075782845260cb8252611e3f6040852054613cf4565b509281600685015416918233036107f55784548116801594908515611f3757604051611e6a816137eb565b888152955b15611ec35750509161099e9391600080516020614cdb833981519152611ebc969488610996826001890154169260098901549060028a01541660038a015491604051958695339b87613f86565b6001805580f35b81600491604098969497959398519283809263011ddaef60e71b82525afa958615611f2c578061099e97600080516020614cdb83398151915293611ebc9a8c92611f0f5750501661096b565b611f259250803d10610a2257610a138183613806565b38806109f4565b6040513d8a823e3d90fd5b6040516306fdde0360e01b81528881600481855afa908115611a8d578991611f61575b5095611e6f565b611f7591503d808b833e610a6a8183613806565b38611f5a565b90508281813d8311611fa9575b611f928183613806565b8101031261067d57611fa390613b0e565b38611e26565b503d611f88565b6008919250611fbe90613cf4565b500154148238611ddd565b5034610857576020366003190112610857576040602091600435815260cc83522054604051908152f35b503461085757806003193601126108575760d3546040516001600160a01b039091168152602090f35b503461085757806003193601126108575760d5546040516001600160a01b039091168152602090f35b503461085757806003193601126108575760d254604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb600482015233602482015290602090829060449082906001600160a01b03165afa9081156104ee578291612110575b50156120fe576120c4613e97565b600160ff1960655416176065557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b60405163036be76f60e61b8152600490fd5b90506020813d8211612141575b8161212a60209383613806565b8101031261084b5761213b90613b0e565b386120b6565b3d915061211d565b50346108575761215836613684565b9190815260d16020526040812090815483101561085757600161217b848461369a565b5061219981549161219260405180958193016136f0565b0383613806565b610b6f604051928392835260406020840152604083019061384a565b503461085757806003193601126108575760d2546040516001600160a01b039091168152602090f35b506020366003190112610857576004356001600160401b03811161084b57610180600319823603011261084b57612213613edb565b60d754604051630723eb0360e51b815233600482015290602090829060249082906001600160a01b03165afa908115610a78578391612b5e575b506108075761225a613e97565b60d55460d35460d454604051634f10664360e11b815260806004808301919091529094936001600160a01b03908116939281169287928792839216906122a290880180613bc6565b6084840161018090526102048401906122ba92613bf7565b602488013560a4840152946001600160a01b036122d960448a01613642565b1660c48401526001600160a01b036122f360648a01613642565b1660e48401526101049160848901358385015260a4890161231390613c18565b151597610124988986015260c48a0161232b90613c18565b15159761014498898701526101649460e48c0135868801528b0161234e90613c18565b15156101848701526123658b8b0160048d01613c25565b916083199283898303016101a48a015261237e92613c6d565b61238d8c8b0160048e01613c25565b9092888303016101c48901526123a292613c6d565b938a016123ae90613c18565b15156101e4860152602485015260448401526064830152038173C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea95af4938415611b375785946129fc575b506123f860ca54613ce5565b8060ca5561010085015260c954600160401b8110156129e857806001612421920160c955613cf4565b6129d457845181546001600160a01b039182166001600160a01b03199182161783556020870151600184018054918416918316919091179055604087015160028401805491841691831691909117905560608701516003840155608087015160048401805491841691831691909117905560a0870151600584015560c087015160068401805491909316911617905560e0850151600782015561010085015160088201556101208501516009820155610140850151600a8201805460ff191691151560ff16919091179055610160850151600b820155610180850151600c8201556101a08501518051906001600160401b0382116129c0576125338261252a600d8601546136b6565b600d8601613d46565b602090601f831160011461295357600d9291899183612948575b50508160011b916000199060031b1c1916179101555b60c9548060001981011161293457610100850151865260cb60205260001901604086205560018060a01b0360c085015116855260cd6020526125ae6040862061010086015190613d8b565b60c08401516001600160a01b0316855260cd60205260408520546000198101811061293457610100850151865260cc60205260001901604086205560018060a01b03845116855260cf60205261260d6040862061010086015190613d8b565b83516001600160a01b0316855260cf602052604085205460001981018110612934579061265591610100860151875260ce602052600019016040872055830183600401613dc7565b60d4549091906001600160a01b031673C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea93b156104f9579186926040519263226af0f360e01b8452608060048501526126a460848501896139fa565b9260d16024860152600319858503016044860152808452602084019360208260051b82010194836000925b8484106128f55750505050505082849281926064830152038173C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea95af480156104ee576128e1575b505061271b90820182600401613dc7565b60d4549091906001600160a01b031673C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea93b156105315791859260405192630f703ee360e31b84526080600485015261276a60848501886139fa565b9260d06024860152600319858503016044860152808452602084019360208260051b82010194836000925b8484106128865750505050505082849281926064830152038173C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea95af480156104ee57612872575b506127e091600401905080613dfc565b50506101008101517f08718d7f9294b21cbcc13bfca0a165339c7bd7276c02aa2675c0795fbfd9452561284c60018060a01b0360c0850151169360ca54865260d06020526128686040872060d160205261285a60408920916040519586956060875260608701906139fa565b908582036020870152613e2e565b908382036040850152613e2e565b0390a36001805580f35b61287b906137a1565b61070b5782386127d0565b919395968598995060206128cd819260406128be6128b1600197999b601f198a8603018c528a613c59565b8035845285810190613bc6565b91909281868201520191613bf7565b990194019401918b98979695939491612795565b6128ea906137a1565b6104ea57833861270a565b91939596859899506020612920819260406128be6128b1600197999b601f198a8603018c528a613c59565b990194019401918c989796959394916126cf565b634e487b7160e01b86526011600452602486fd5b01519050388061254d565b90600d840189526020892091895b601f19851681106129a85750918391600193600d95601f1981161061298f575b505050811b01910155612563565b015160001960f88460031b161c19169055388080612981565b91926020600181928685015181550194019201612961565b634e487b7160e01b88526041600452602488fd5b634e487b7160e01b86526004869052602486fd5b634e487b7160e01b86526041600452602486fd5b9093503d8086833e612a0e8183613806565b60208282810103126105315781516001600160401b0381116104f9576101c081840183850103126104f95760405192612a46846137b4565b808201516001600160a01b0381168103612b5a578452612a6a602083830101613b7b565b6020850152612a7d604083830101613b7b565b6040850152606082820101516060850152612a9c608083830101613b7b565b608085015260a0828201015160a0850152612abb60c083830101613b7b565b60c085015280820160e081810151908601526101008082015190860152610120808201519086015261014090612af2908201613b0e565b90850152808201610160818101519086015261018080820151908601526101a00151926001600160401b038411612b5a57808201601f8585850101011215612b5a57612b4d9360209183019381818501015193010101613b8f565b6101a082015292386123ec565b8880fd5b90506020813d602011612b90575b81612b7960209383613806565b8101031261070b57612b8a90613b0e565b3861224d565b3d9150612b6c565b503461085757604036600319011261085757612bb261362c565b6001600160a01b0316815260cf6020526040812080546024359290831015610857576020612be08484613656565b90546040519160031b1c8152f35b5034610857576060366003190112610857576044356001600160401b03918282116108575736602383011215610857578160040135928311610857573660248484010111610857576020612c4b846024850160243560043561436b565b6040519015158152f35b503461085757806003193601126108575760d6546040516001600160a01b039091168152602090f35b5034610857576020366003190112610857576004356001600160401b0380821161070b576060600319833603011261070b576040519160608301838110838211176131b05760405280600401358352602481013582811161067d57612ce9906004369184010161390f565b602084015260448101359182116104ea576004612d09923692010161390f565b6040820152612d16613edb565b60d754604051630723eb0360e51b815233600482015290602090829060249082906001600160a01b03165afa908115610a78578391613176575b50610807578051825260cb602052612d6b6040832054613cf4565b506006810180549091906001600160a01b031633036107f55780546001600160a01b03168061310a575b506040830151604051612dc681612db8602082019460208652604083019061386f565b03601f198101835282613806565b51902060088201908154865260d160205260408620604051612df881612db86020820194602086526040830190613e2e565b51902003612fe6575b6020840151604051612e2381612db8602082019460208652604083019061386f565b5190209054855260d060205260408520604051612e5081612db86020820194602086526040830190613e2e565b51902003612ebb575b507fa8b27bffdacaa4db21058695f3dbf1a56df849ef23906c118644f2e46ba1cf1f612ead83519260018060a01b03905416936128686040602083015192015160405193849360408552604085019061386f565b90838203602085015261386f565b612ec481613fd8565b602084015160d4546001600160a01b031673C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea93b156104f95790869291612f1660405193630f703ee360e31b85526080600486015260848501906139fa565b60d06024850152600319848203016044850152825180825260208201916020808360051b8301019501926000915b838310612fa057505050505082849281926064830152038173C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea95af480156104ee57612f8c575b5050600c4291015538612e59565b612f95906137a1565b6104ea578338612f7e565b9193969750919394602080612fd2600193601f198682030187526040838c51805184520151918185820152019061384a565b98019301930190928b979695949293612f44565b612fef82613fd8565b604085015160d4546001600160a01b031673C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea93b15613106579061304392889160405194859263226af0f360e01b84526080600485015260848401906139fa565b9360d16024840152600319838603016044840152815180865260208601956020808360051b83010194019686915b8383106130c25750505050829394506064830152038173C015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea95af4801561053d576130af575b50612e01565b6130bb909591956137a1565b93386130a9565b929550929550926020806130f3600193601f198682030187526040838c51805184520151918185820152019061384a565b9801930193018c95929693889592613071565b8780fd5b6020600491604051928380926308bcf8b560e21b82525afa908115611b3757859161313c575b50156107a95738612d95565b90506020813d60201161316e575b8161315760209383613806565b8101031261067d5761316890613b0e565b38613130565b3d915061314a565b90506020813d6020116131a8575b8161319160209383613806565b8101031261070b576131a290613b0e565b38612d50565b3d9150613184565b634e487b7160e01b85526041600452602485fd5b5034610857578060031936011261085757602060ff606554166040519015158152f35b50346108575760208060031936011261084b57600435825260d0815260408220805490613213826138dd565b936132216040519586613806565b828552908152828120838086015b8484106132495760405182815280610b6f8185018a61386f565b60019160029160405161325b81613786565b8554815260405161327281610b9c81898b016136f0565b83820152815201920192019190849061322f565b5034610857576020366003190112610857576040602091600435815260cb83522054604051908152f35b503461085757806003193601126108575760d254604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d860048201523360248201526020918290829060449082906001600160a01b03165afa908115610a785783916133a4575b50156120fe5760655460ff8116156133685760ff19166065556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9190a180f35b60405162461bcd60e51b815260048101839052601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b90508181813d83116133d2575b6133bb8183613806565b8101031261070b576133cc90613b0e565b38613322565b503d6133b1565b503461085757806003193601126108575760d4546040516001600160a01b039091168152602090f35b5034610857578060031936011261085757602060ca54604051908152f35b50346108575760208060031936011261084b5761343b61362c565b60d254604051632474521560e21b8152600481018590523360248201526001600160a01b03929184908290604490829087165afa908115611b3757859161350a575b50156120fe576040516301ffc9a760e01b8152631c94d2c560e01b6004820152911691908181602481865afa91821561076c5784926134d4575b505015610f79576001600160601b0360a01b60d654161760d65580f35b90809250813d8311613503575b6134eb8183613806565b8101031261070b576134fc90613b0e565b38806134b7565b503d6134e1565b90508381813d8311613538575b6135218183613806565b8101031261067d5761353290613b0e565b3861347d565b503d613517565b50346108575761354e36613684565b9190815260d06020526040812090815483101561085757600161217b848461369a565b50346108575760403660031901126108575761358b61362c565b6001600160a01b0316815260cd6020526040812080546024359290831015610857576020612be08484613656565b5034610857578060031936011261085757602060c954604051908152f35b90503461084b57602036600319011261084b5760043563ffffffff60e01b811680910361070b57602092506332ed0a6160e11b811490811561361b575b5015158152f35b6301ffc9a760e01b14905038613614565b600435906001600160a01b038216820361072357565b35906001600160a01b038216820361072357565b805482101561366e5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6040906003190112610723576004359060243590565b805482101561366e5760005260206000209060011b0190600090565b90600182811c921680156136e6575b60208310146136d057565b634e487b7160e01b600052602260045260246000fd5b91607f16916136c5565b9060009291805491613701836136b6565b9182825260019384811690816000146137635750600114613723575b50505050565b90919394506000526020928360002092846000945b83861061374f57505050500101903880808061371d565b805485870183015294019385908201613738565b9294505050602093945060ff191683830152151560051b0101903880808061371d565b604081019081106001600160401b038211176119cb57604052565b6001600160401b0381116119cb57604052565b6101c081019081106001600160401b038211176119cb57604052565b608081019081106001600160401b038211176119cb57604052565b602081019081106001600160401b038211176119cb57604052565b90601f801991011681019081106001600160401b038211176119cb57604052565b60005b83811061383a5750506000910152565b818101518382015260200161382a565b9060209161386381518092818552858086019101613827565b601f01601f1916010190565b908082519081815260208091019281808460051b8301019501936000915b84831061389d5750505050505090565b90919293949584806138cd600193601f19868203018752828b51805183520151906040908185820152019061384a565b980193019301919493929061388d565b6001600160401b0381116119cb5760051b60200190565b6001600160401b0381116119cb57601f01601f191660200190565b81601f8201121561072357803591613926836138dd565b9260409061393682519586613806565b808552602093848087019260051b8201019380851161072357858201925b858410613965575050505050505090565b6001600160401b039084358281116107235784019186601f1984860301126107235786519261399384613786565b8981013584528781013591821161072357019083603f830112156107235788820135926139bf846138f4565b6139cb89519182613806565b848152858986860101116107235760008b8681978c839801838601378301015283820152815201930192613954565b90613aa99160018060a01b038082511683528060208301511660208401528060408301511660408401526060820151606084015280608083015116608084015260a082015160a084015260c08201511660c083015260e081015160e08301526101008082015190830152610120808201519083015261014080820151151590830152610160808201519083015261018080820151908301526101a080910151916101c08092820152019061384a565b90565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310613ae05750505050505090565b9091929394958480613afe600193603f198682030187528a516139fa565b9801930193019194939290613ad0565b5190811515820361072357565b15613b2257565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b51906001600160a01b038216820361072357565b90929192613b9c816138f4565b91613baa6040519384613806565b829482845282820111610723576020613bc4930190613827565b565b9035601e19823603018112156107235701602081359101916001600160401b03821161072357813603831361072357565b908060209392818452848401376000828201840152601f01601f1916010190565b3590811515820361072357565b9035601e19823603018112156107235701602081359101916001600160401b038211610723578160051b3603831361072357565b9035603e1982360301811215610723570190565b90808352602080930192838260051b810194846000925b858410613c95575050505050505090565b909192939495968580613cd48385600195038852613cc3613cb68d89613c59565b8035835284810190613bc6565b909160409081868201520191613bf7565b990194019401929594939190613c84565b60001981146105ee5760010190565b60c95481101561366e57600e9060c9600052027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280190600090565b818110613d3a575050565b60008155600101613d2f565b9190601f8111613d5557505050565b613bc4926000526020600020906020601f840160051c83019310613d81575b601f0160051c0190613d2f565b9091508190613d74565b90815491600160401b8310156119cb5782613dae916001613bc495018155613656565b90919082549060031b91821b91600019901b1916179055565b903590601e198136030182121561072357018035906001600160401b03821161072357602001918160051b3603831361072357565b903590601e198136030182121561072357018035906001600160401b0382116107235760200191813603831361072357565b908154808252602080920191828260051b81019460005281600020936000915b848310613e5e5750505050505090565b909192939495846002613e8783856001950387528a548152604090818582015201848b016136f0565b9801930193019194939290613e4e565b60ff60655416613ea357565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260015414613eec576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b602081830312610723578051906001600160401b03821161072357019080601f83011215610723578151613aa992602001613b8f565b9081602091031261072357516001600160a01b03811681036107235790565b92919695949093613faf60e095600386526000602087015261010080604088015286019061384a565b6001600160a01b039889166060860152928816608085015260a084015290951660c08201520152565b90600d6101a0604051613fea816137b4565b61409c819560018060a01b0380825416845280600183015416602085015280600283015416604085015260038201546060850152806004830154166080850152600582015460a085015260068201541660c0840152600781015460e08401526008810154610100840152600981015461012084015260ff600a820154161515610140840152600b810154610160840152600c81015461018084015261409560405180968193016136f0565b0384613806565b0152565b919081101561366e5760051b0190565b919082604091031261072357613aa9602083519301613b0e565b356001600160a01b03811681036107235790565b9190818181526020809101926005938284861b83010195809560009182945b8786106141105750505050505050505090565b90919293949596979998601f1982820301865261412d8b84613c59565b9060409061414582820193803583528b810190613c25565b809194848d850152526060918281019282891b8201019480948a915b84831061418a575050505050505087806001929c9b9c9b019601960194979695939291906140fd565b909192939495968e806141e0600193605f19898203018b526141ac8c87613c59565b906141d36141c96141bd8480613bc6565b8b85528b850191613bf7565b9285810190613bc6565b9185818503910152613bf7565b99019701959493019190614161565b80546001600160a01b03908116835260018201548116602084015260028201548116604084015260038201546060840152600482015481166080840152600582015460a084015260068201541660c0830152600781015460e083015260088101546101008301526009810154610120830152600a81015460ff161515610140830152600b810154610160830152600c8101546101808301526101c06101a08301819052613aa9920190600d016136f0565b604051906142ad826137b4565b60606101a083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e0830152806101008301528061012083015280610140830152806101608301526101808201520152565b90614311826138dd565b61431e6040519182613806565b828152809261432f601f19916138dd565b019060005b82811061434057505050565b60209061434b6142a0565b82828501015201614334565b805182101561366e5760209160051b010190565b909260009180835260209160d08352604095868520548110156146135761439b9083865260d0855287862061369a565b509082855260cb84526143b087862054613cf4565b50906007820154421161459e5781546001600160a01b039290831690839082614532575b50905060d454169285815460248b51809781936352ff146960e11b835260048301525afa938415614528579186949391889384956144d8575b509061447a84939261446b9798614455965260cb895261442f8d862054613cf4565b508d51633fa1ee4760e11b8152606060048201529c8d998a9889969360648801906141ef565b600160031995868984030160248a0152016136f0565b92858403016044860152613bf7565b0393165af19384156144cd57508193614494575b50505090565b9091809350813d83116144c6575b6144ac8183613806565b8101031261085757506144be90613b0e565b38808061448e565b503d6144a2565b51913d9150823e3d90fd5b9295919450925081813d8111614521575b6144f38183613806565b810103126104f95761446b9386959361447a614455946145138b95613b7b565b96989750919293945061440d565b503d6144e9565b89513d89823e3d90fd5b600101548a5163a4c1cccb60e01b8152911660048201528981602481855afa9081156145e757879089926145f1575b508a516308bcf8b560e21b81529192829060049082905afa9081156145e75788916145b2575b50159081156145a9575b5061459e573882816143d4565b505050505091505090565b90501538614591565b90508681813d83116145e0575b6145c98183613806565b81010312613106576145da90613b0e565b38614587565b503d6145bf565b8a513d8a823e3d90fd5b6004925061460b908c8d3d10611cf257611ce28183613806565b905091614561565b86516316f5923f60e31b8152600490fd5b60d35460009060018060a01b038091169060c0840181815116604093838588015116606088015190865193614658856137d0565b8085526020850152868401526060830152803b1561053157845163a0fd10ad60e01b80825283516001600160a01b039081166004840152602085015181166024840152604085015116604483015260609093015160648201529086908290608490829084905af1801561479657614783575b50828060d354169251169260808701511660a0870151908551946146ed866137d0565b8086526020860152858501526060840152813b1561067d57835190815282516001600160a01b0390811660048301526020840151811660248301526040840151166044820152606090920151606483015290919083908390608490829084905af190811561477a5750614766575b5050613bc490614971565b61477082916137a1565b610857578061475b565b513d84823e3d90fd5b61478f909591956137a1565b93386146ca565b85513d88823e3d90fd5b6147aa81546136b6565b90816147b4575050565b81601f600093116001146147c6575055565b9080839182526147e5601f60208420940160051c840160018501613d2f565b5555565b8054600091828155816147fb57505050565b6001600160ff1b038216820361483f5782526020822091600191821b8301925b8381106148285750505050565b8082600292556148398482016147a0565b0161481b565b634e487b7160e01b83526011600452602483fd5b805490811561487d576000199182019161486d8383613656565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b9080821461496d576148a581546136b6565b906001600160401b0382116119cb5781906148ca826148c486546136b6565b86613d46565b600090601f8311600114614901576000926148f6575b50508160011b916000199060031b1c1916179055565b0154905038806148e0565b81526020808220858352818320935090601f1985169083905b82821061495457505090846001959493921061493b575b505050811b019055565b015460001960f88460031b161c19169055388080614931565b849581929585015481556001809101960194019061491a565b5050565b610100810190815191600092835260209060d082526040926149948486206147e9565b8151855260d183526149a78486206147e9565b80516001600160a01b03908116865260cf8452848620825182168752858720546000199391848201918211614cc65760c092916149e391613656565b90549060031b1c83825116895260cf8752614a1081613dae8a8c2089518d5260ce8b528b8d205490613656565b8551895260ce8752878920549089528789205582815116885260cf8652614a38878920614853565b8451885260ce865287878120550181815116875260cd85528587208282511688528688205490848201918211614cc657839291614a7491613656565b90549060031b1c82825116895260cd8752614aa181613dae8a8c2089518d5260cc8b528b8d205490613656565b8551895260cc875287892054908952878920555116865260cd8452614ac7858720614853565b8251865260cc8452858581205560c95482810190811161058f57614aea90613cf4565b508351875260cb8552614aff86882054613cf4565b919091614cb257808203614bd5575b5050508151855260cb83528385205460c95482810190811161058f57614b35600891613cf4565b500154865260cb84528486205560c9548015614bc15701614b5581613cf4565b6129d45790614bb5600d838860cb9796955588600182015588600282015588600382015588600482015588600582015588600682015588600782015588600882015588600982015588600a82015588600b82015588600c820155016147a0565b60c95551845252812055565b634e487b7160e01b86526031600452602486fd5b600d8184614caa95839454166001600160601b0360a01b90818754161786556001860182600185015416828254161790556002860182600285015416828254161790556003830154600387015560048601826004850154168282541617905560058301546005870155600686019160068401541690825416179055600781015460078501556008810154600885015560098101546009850155614c8e60ff600a83015416600a86019060ff801983541691151516179055565b600b810154600b850155600c810154600c850155019101614893565b388080614b0e565b634e487b7160e01b88526004889052602488fd5b634e487b7160e01b89526011600452602489fdfe288073495da2273b7902460b23ea23540d925931880b7ecc8ed6c7c6a5477e50a2646970667358221220249fc6cea1669b95f711e978ad3a4bf840257d95a9aa4bfadaf8189c5e1e166b64736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146135d75750806307c2e16c146135b95780631ba42ea71461357157806323b515c41461353f57806330284efc14613420578063305d98b4146134025780633f4a2d27146133d95780633f4ba83a146132b057806355815199146132865780635973af39146131e75780635c975abb146131c45780636e1c227514612c7e578063709d039d14612c5557806371e536c714612bee5780637948398d14612b985780637a2ef801146121de5780637b103999146121b5578063838bf2d5146121495780638456cb59146120455780638970cdff1461201c5780639968861e14611ff35780639dd984f214611fc9578063a5cdc8fc14611dad578063c1001337146112ca578063c5d4d450146112a0578063c712a93914611267578063cc2a9a5b14610dbb578063ce3ca00b14610d4a578063d09ef24114610cdf578063d81db0ff14610c36578063dabe8a7114610bf0578063e9b3cd5214610bb7578063ea0341a814610b0d578063efa160f41461085a5763f17194bb146101a257600080fd5b60c0366003190112610857576101b6613edb565b60d754604051630723eb0360e51b815233600482015290602090829060249082906001600160a01b03165afa9081156104ee578291610819575b506108075760043580825260cb60205261020d6040832054613cf4565b50805460068201546001600160a01b03918216911633036107f55780610777575b5060d554604051632630c12f60e01b81529290602090849060049082906001600160a01b03165afa92831561076c578493610728575b5060d35460d4546001600160a01b039081169491169073__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__3b15610531576040519263f1bc5b8160e01b84528460048501526024840152602435604484015260443560648401526064358015158091036107235760848401526084359485151586036107235785151560a485015260a435928315158403610723578793151560c486015260e485015261010484015260018060a01b0316918261012482015281816101448173__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__5af480156104ee5761070f575b506003830193845460243503610681575b50506009820190815460443503610604575b83548254869181159182156105b5575b5050156105a3576706f05b59d3b2000081019081811161058f57811061057d5760d554604051635dc189e160e11b815287939173__$75df3f6366b0557754cd3ba14359105414$__906001600160a01b0316602083600481845afa92831561053d578693610548575b50916020600493604051948580926305e1621360e21b82525afa92831561053d5786936104fd575b5060028801546001600160a01b031691803b156104f957869460a493670de0b6b3a7640000604051988997889663d3b9cb1560e01b8852600488015260018060a01b03166024870152046044850152606484015260848301525af480156104ee576104d6575b505060807f22e28f14941a8f9d89c3ee26b19498784e5ae277784b2f56a813ecdb41611c659160088401549360018060a01b036006820154169554915490600560018060a01b0360048301541691015491604051938452602084015260408301526060820152a36001805580f35b6104df906137a1565b6104ea578338610468565b8380fd5b6040513d84823e3d90fd5b8680fd5b9092506020813d602011610535575b8161051960209383613806565b810103126105315761052a90613b7b565b9138610402565b8580fd5b3d915061050c565b6040513d88823e3d90fd5b92506020833d602011610575575b8161056360209383613806565b810103126105315791519160206103da565b3d9150610556565b604051630a77254f60e01b8152600490fd5b634e487b7160e01b87526011600452602487fd5b604051631550e8b760e01b8152600490fd5b818192939450028281048214831517156105ee5780936105d85704143880610371565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b73__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__3b1561067d57846040516326d1999160e11b81528460048201526044356024820152818160448173__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__5af480156104ee57610669575b5050610361565b610672906137a1565b61067d578438610662565b8480fd5b60d3546001600160a01b031673__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__3b1561070b5760405191630658598b60e51b83528560048401526024356024840152151560448301526064820152818160848173__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__5af480156104ee571561034f57610700906137a1565b6104ea57833861034f565b8280fd5b610718906137a1565b6104ea57833861033e565b600080fd5b9092506020813d602011610764575b8161074460209383613806565b810103126104ea57516001600160a01b03811681036104ea579138610264565b3d9150610737565b6040513d86823e3d90fd5b6020600491604051928380926308bcf8b560e21b82525afa90811561076c5784916107bb575b50156107a9573861022e565b60405163d42bba7f60e01b8152600490fd5b90506020813d6020116107ed575b816107d660209383613806565b810103126104ea576107e790613b0e565b3861079d565b3d91506107c9565b60405163014d683360e41b8152600490fd5b6040516333df015b60e01b8152600490fd5b90506020813d60201161084f575b8161083460209383613806565b8101031261084b5761084590613b0e565b386101f0565b5080fd5b3d9150610827565b80fd5b50346108575760208060031936011261084b576004356001600160401b038082116104ea57366023830112156104ea5781600401359081116104ea573660248260051b840101116104ea57835b8181106108b2578480f35b6108c08183602486016140a0565b35855260cb8452604085205460c95415610b08576108dd90613cf4565b509060018060a01b0380835416801591600885015490610901858860248b016140a0565b35821480610a83575b610922575b5050505061091d9150613ce5565b6108a7565b8989826006890154169486600014610a2957604051610940816137eb565b838152965b156109ac5750509261091d9692600080516020614cdb8339815191526109a3969361099e965b610996826001890154169260098901549060028a01541660038a015491604051958695339b87613f86565b0390a4613fd8565b614624565b3880808061090f565b906004959296939894916040519687809263011ddaef60e71b82525afa94851561053d578861091d9961099e97600080516020614cdb833981519152938f6109a39b926109fc575b50501661096b565b610a1b9250803d10610a22575b610a138183613806565b810190613f67565b388f6109f4565b503d610a09565b6040516306fdde0360e01b815291508282600481845afa8015610a78578c928491610a56575b5096610945565b610a7291503d8086833e610a6a8183613806565b810190613f31565b38610a4f565b6040513d85823e3d90fd5b5060078601544210158061090a57508315801561090a5750604051634db1160160e11b81528981600481875afa908115610afd578b91610ac4575b5061090a565b90508981813d8311610af6575b610adb8183613806565b81010312610af257610aec90613b0e565b38610abe565b8a80fd5b503d610ad1565b6040513d8d823e3d90fd5b508480f35b50346108575760208060031936011261084b57600435825260d1815260408220805490610b39826138dd565b93610b476040519586613806565b828552908152828120838086015b848410610b735760405182815280610b6f8185018a61386f565b0390f35b600191600291604051610b8581613786565b85548152604051610ba381610b9c81898b016136f0565b0382613806565b838201528152019201920191908490610b55565b5034610857576020366003190112610857576020906040906001600160a01b03610bdf61362c565b16815260cd83522054604051908152f35b503461085757602036600319011261085757610c0a6142a0565b50610b6f610c22610c1c600435613cf4565b50613fd8565b6040519182916020835260208301906139fa565b50346108575760208060031936011261084b576001600160a01b03610c5961362c565b169182815260cf91828152604082205492610c7384614307565b94835b858110610c8b5760405180610b6f8982613aac565b610cda90828652838552610ca28160408820613656565b90549060031b1c865260cb8552610cbf610c1c6040882054613cf4565b610cc9828a614357565b52610cd48189614357565b50613ce5565b610c76565b503461085757602036600319011261085757600435610cfc6142a0565b5080825260cb602052806008610d156040852054613cf4565b50015403610d3857610c1c604083610c2293610b6f955260cb6020522054613cf4565b60405163d5516fcd60e01b8152600490fd5b50346108575760208060031936011261084b576001600160a01b03610d6d61362c565b169182815260cd91828152604082205492610d8784614307565b94835b858110610d9f5760405180610b6f8982613aac565b610db690828652838552610ca28160408820613656565b610d8a565b50346108575760c036600319011261085757610dd561362c565b6001600160a01b03906024908135838116908190036107235760443590848216809203610723576064358581168091036104f957608435928684168094036107235760a435928784168094036107235788549760ff8960081c16159687809861125a575b8015611243575b156111e85760ff198a81166001178c5599886111d7575b5016936040516301ffc9a760e01b98898252637965db0b60e01b60048301528b60209a8b8484818c5afa9384156104ee578c929461119f575b5083611135575b836110cb575b83611061575b83610ff3575b83610f8b575b50505015610f79576001600160601b0360a01b948560d254161760d2558460d754161760d7558360d454161760d4558260d554161760d5558160d354161760d35560d654161760d655610f3a84549360ff8560081c1690610f0f82613b1b565b610f1882613b1b565b60655416606555610f2881613b1b565b610f3181613b1b565b60018055613b1b565b610f42578280f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001916835560405160018152a138808280f35b60405163044aa57560e41b8152600490fd5b604051908152633df6cef760e01b6004820152925090829081855afa908115610afd578b91610fbe575b50388981610eaf565b90508881813d8311610fec575b610fd58183613806565b81010312610af257610fe690613b0e565b38610fb5565b503d610fcb565b9250508b604051838152631c94d2c560e01b60048201528b8184818d5afa9081156104ee578c9291611027575b5092610ea9565b82819392503d831161105a575b61103e8183613806565b81010312611056576110508b91613b0e565b38611020565b8c80fd5b503d611034565b9250508b6040518381526312b3ed2b60e01b60048201528b8184818b5afa9081156104ee578c9291611095575b5092610ea3565b82819392503d83116110c4575b6110ac8183613806565b81010312611056576110be8b91613b0e565b3861108e565b503d6110a2565b9250508b6040518381526306cc15a560e11b60048201528b8184818a5afa9081156104ee578c92916110ff575b5092610e9d565b82819392503d831161112e575b6111168183613806565b81010312611056576111288b91613b0e565b386110f8565b503d61110c565b9250508b60405183815263fa6ab0ef60e01b60048201528b818481895afa9081156104ee578c9291611169575b5092610e97565b82819392503d8311611198575b6111808183613806565b81010312611056576111928b91613b0e565b38611162565b503d611176565b8281939295503d83116111d0575b6111b78183613806565b81010312611056576111c98b91613b0e565b9238610e90565b503d6111ad565b61ffff1916610101178b5538610e57565b60405162461bcd60e51b815260206004820152602e818b01527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b158015610e405750600160ff8b1614610e40565b50600160ff8b1610610e39565b5034610857576020366003190112610857576020906040906001600160a01b0361128f61362c565b16815260cf83522054604051908152f35b5034610857576020366003190112610857576040602091600435815260ce83522054604051908152f35b5034610857576020366003190112610857576001600160401b03600435116108575760c0600435360360031901126108575760043560040135815260cb602052604081205460c95415159081611d91575b5015610d3857611329613edb565b60d754604051630723eb0360e51b815233600482015290602090829060249082906001600160a01b03165afa9081156104ee578291611d57575b5061080757611370613e97565b5a9060043560040135815260d06020526040812054602460043501351015611d455760043560040135815260cb6020526113ad6040822054613cf4565b506007810154421015611d335780546001600160a01b031680611c4a575b506001600160a01b036113e260043560a4016140ca565b1615611c38576008810154825260d1602052604080832060d55460d35460d45460d654945163153e85cd60e01b8152600480820188905260e06024808401919091528135918201803560e4850152908201356101048401529197966001600160a01b039081169689969095948216948216939116916114d1916114aa91611483916114709160440190613bc6565b60c06101248b01526101a48a0191613bf7565b611497606460043501600435600401613c25565b89830360e319016101448b0152906140de565b6114be608460043501600435600401613c25565b88830360e319016101648a0152906140de565b6001600160a01b036114e760043560a401613642565b166101848701526003198682030160448701528454808252602082019160208260051b820101968c5260208c20928c915b838310611bf05750505050509160e095918594936064860152608485015260a484015260c4830152038173__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__5af4918215610a78578392611b42575b5060043560040135835260d0602052611589602460043501356040852061369a565b5060018060a01b0360d45416602082546024604051809481936352ff146960e11b835260048301525afa908115611b37578591611af8575b50600160209160043560040135875260cb835261162c6115e46040892054613cf4565b506116516115fc604460043501600435600401613dfc565b919060c08b01519261163f6040519a8b998a9889986301f24f2560e11b8a52608060048b015260848a01906141ef565b8881036003190160248a015291016136f0565b85810360031901604487015291613bf7565b606483019190915203916001600160a01b03165afa90811561076c578491611abe575b5015611aac57805460068201546001600160a01b03918216911661169c60043560a4016140ca565b916080850151926004841015611a985760a086015182611a365790600080516020614cdb833981519152916040516116d3816137eb565b898152935b611a255788935b60018060a01b0360018901541660098901549061172760018060a01b0360028c0154169360038c0154956040519b8c5260208c015261010060408c01526101008b019061384a565b9660018060a01b031660608a0152608089015260a088015260c087015260e086015260018060a01b0316938060043560040135930390a461177761177242600c840154141592613fd8565b614971565b611784575b506001805580f35b60d554604051637496a94d60e11b81529190602090839060049082906001600160a01b03165afa918215610a785783926119e1575b506117c860a4600435016140ca565b93606060018060a01b03602084015116920151905a81039081116105ee57604051916117f3836137eb565b858352611858611864611810606460043501600435600401613dc7565b611827608460049593953501600435600401613dc7565b6118446040949294519687946040602087015260608601916140de565b90601f1994858584030160408601526140de565b03908101835282613806565b519360405197886101008101106001600160401b036101008b0111176119cb57610100890160405260018060a01b03168852602088015260408701528460608701526001608087015260a086015260c085015260e084015260018060a01b0381163b1561084b57604080516350b29c5560e11b815260206004820181905285516001600160a01b0390811660248401529086015116604482015290840151606482015260608401516101248201949192919060058110156119b7576084840152608081015160a484015260a081015160c484015260c081015161010060e4850152805195869052919461014484019260200190855b8181106119a1575050508394838581819560e082960151610104830152039260018060a01b03165af180156104ee571561177c57611996906137a1565b61085757803861177c565b8251855260209485019490920191600101611959565b634e487b7160e01b85526021600452602485fd5b634e487b7160e01b600052604160045260246000fd5b9091506020813d602011611a1d575b816119fd60209383613806565b8101031261070b57516001600160a01b038116810361070b5790386117b9565b3d91506119f0565b87516001600160a01b0316936116df565b6040516306fdde0360e01b81528881600481875afa908115611a8d5790600080516020614cdb8339815191529392918a91611a73575b50936116d8565b611a8791503d808c833e610a6a8183613806565b38611a6c565b6040513d8b823e3d90fd5b634e487b7160e01b87526021600452602487fd5b604051635745ee4960e01b8152600490fd5b90506020813d602011611af0575b81611ad960209383613806565b810103126104ea57611aea90613b0e565b38611674565b3d9150611acc565b90506020813d602011611b2f575b81611b1360209383613806565b8101031261067d576001611b28602092613b7b565b91506115c1565b3d9150611b06565b6040513d87823e3d90fd5b90915060e0813d60e011611be8575b81611b5e60e09383613806565b8101031261070b57604051908160e08101106001600160401b0360e0840111176119cb5760e08201604052611b9281613b7b565b8252611ba060208201613b7b565b602083015260408101516040830152606081015160608301526080810151600481101561067d579060c091608084015260a081015160a0840152015160c08201529038611567565b3d9150611b51565b9193999850919394959660206002611c228c600160408196601f19898203018a528354815281878201520191016136f0565b9b019301930190928b9899979695949293611518565b604051639783f5bd60e01b8152600490fd5b6040516308bcf8b560e21b8152602081600481855afa90811561076c578491611cf9575b50156107a957604060018060a01b03600184015416602482518094819363a4c1cccb60e01b835260048301525afa908115610a78578391611cc8575b5015611cb657386113cb565b60405163b7addff360e01b8152600490fd5b611cea915060403d604011611cf2575b611ce28183613806565b8101906140b0565b905038611caa565b503d611cd8565b90506020813d602011611d2b575b81611d1460209383613806565b810103126104ea57611d2590613b0e565b38611c6e565b3d9150611d07565b60405163065445df60e51b8152600490fd5b6040516316f5923f60e31b8152600490fd5b90506020813d602011611d89575b81611d7260209383613806565b8101031261084b57611d8390613b0e565b38611363565b3d9150611d65565b611d9b9150613cf4565b5060080154600480350135143861131b565b50346108575760208060031936011261084b576004359081835260cb815260408320548260c95415159182611fb0575b505015610d3857611dec613edb565b60d754604051630723eb0360e51b81523360048201526001600160a01b039183908290602490829086165afa908115611b37578591611f7b575b506108075782845260cb8252611e3f6040852054613cf4565b509281600685015416918233036107f55784548116801594908515611f3757604051611e6a816137eb565b888152955b15611ec35750509161099e9391600080516020614cdb833981519152611ebc969488610996826001890154169260098901549060028a01541660038a015491604051958695339b87613f86565b6001805580f35b81600491604098969497959398519283809263011ddaef60e71b82525afa958615611f2c578061099e97600080516020614cdb83398151915293611ebc9a8c92611f0f5750501661096b565b611f259250803d10610a2257610a138183613806565b38806109f4565b6040513d8a823e3d90fd5b6040516306fdde0360e01b81528881600481855afa908115611a8d578991611f61575b5095611e6f565b611f7591503d808b833e610a6a8183613806565b38611f5a565b90508281813d8311611fa9575b611f928183613806565b8101031261067d57611fa390613b0e565b38611e26565b503d611f88565b6008919250611fbe90613cf4565b500154148238611ddd565b5034610857576020366003190112610857576040602091600435815260cc83522054604051908152f35b503461085757806003193601126108575760d3546040516001600160a01b039091168152602090f35b503461085757806003193601126108575760d5546040516001600160a01b039091168152602090f35b503461085757806003193601126108575760d254604051632474521560e21b81527f5c91514091af31f62f596a314af7d5be40146b2f2355969392f055e12e0982fb600482015233602482015290602090829060449082906001600160a01b03165afa9081156104ee578291612110575b50156120fe576120c4613e97565b600160ff1960655416176065557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b60405163036be76f60e61b8152600490fd5b90506020813d8211612141575b8161212a60209383613806565b8101031261084b5761213b90613b0e565b386120b6565b3d915061211d565b50346108575761215836613684565b9190815260d16020526040812090815483101561085757600161217b848461369a565b5061219981549161219260405180958193016136f0565b0383613806565b610b6f604051928392835260406020840152604083019061384a565b503461085757806003193601126108575760d2546040516001600160a01b039091168152602090f35b506020366003190112610857576004356001600160401b03811161084b57610180600319823603011261084b57612213613edb565b60d754604051630723eb0360e51b815233600482015290602090829060249082906001600160a01b03165afa908115610a78578391612b5e575b506108075761225a613e97565b60d55460d35460d454604051634f10664360e11b815260806004808301919091529094936001600160a01b03908116939281169287928792839216906122a290880180613bc6565b6084840161018090526102048401906122ba92613bf7565b602488013560a4840152946001600160a01b036122d960448a01613642565b1660c48401526001600160a01b036122f360648a01613642565b1660e48401526101049160848901358385015260a4890161231390613c18565b151597610124988986015260c48a0161232b90613c18565b15159761014498898701526101649460e48c0135868801528b0161234e90613c18565b15156101848701526123658b8b0160048d01613c25565b916083199283898303016101a48a015261237e92613c6d565b61238d8c8b0160048e01613c25565b9092888303016101c48901526123a292613c6d565b938a016123ae90613c18565b15156101e4860152602485015260448401526064830152038173__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__5af4938415611b375785946129fc575b506123f860ca54613ce5565b8060ca5561010085015260c954600160401b8110156129e857806001612421920160c955613cf4565b6129d457845181546001600160a01b039182166001600160a01b03199182161783556020870151600184018054918416918316919091179055604087015160028401805491841691831691909117905560608701516003840155608087015160048401805491841691831691909117905560a0870151600584015560c087015160068401805491909316911617905560e0850151600782015561010085015160088201556101208501516009820155610140850151600a8201805460ff191691151560ff16919091179055610160850151600b820155610180850151600c8201556101a08501518051906001600160401b0382116129c0576125338261252a600d8601546136b6565b600d8601613d46565b602090601f831160011461295357600d9291899183612948575b50508160011b916000199060031b1c1916179101555b60c9548060001981011161293457610100850151865260cb60205260001901604086205560018060a01b0360c085015116855260cd6020526125ae6040862061010086015190613d8b565b60c08401516001600160a01b0316855260cd60205260408520546000198101811061293457610100850151865260cc60205260001901604086205560018060a01b03845116855260cf60205261260d6040862061010086015190613d8b565b83516001600160a01b0316855260cf602052604085205460001981018110612934579061265591610100860151875260ce602052600019016040872055830183600401613dc7565b60d4549091906001600160a01b031673__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__3b156104f9579186926040519263226af0f360e01b8452608060048501526126a460848501896139fa565b9260d16024860152600319858503016044860152808452602084019360208260051b82010194836000925b8484106128f55750505050505082849281926064830152038173__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__5af480156104ee576128e1575b505061271b90820182600401613dc7565b60d4549091906001600160a01b031673__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__3b156105315791859260405192630f703ee360e31b84526080600485015261276a60848501886139fa565b9260d06024860152600319858503016044860152808452602084019360208260051b82010194836000925b8484106128865750505050505082849281926064830152038173__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__5af480156104ee57612872575b506127e091600401905080613dfc565b50506101008101517f08718d7f9294b21cbcc13bfca0a165339c7bd7276c02aa2675c0795fbfd9452561284c60018060a01b0360c0850151169360ca54865260d06020526128686040872060d160205261285a60408920916040519586956060875260608701906139fa565b908582036020870152613e2e565b908382036040850152613e2e565b0390a36001805580f35b61287b906137a1565b61070b5782386127d0565b919395968598995060206128cd819260406128be6128b1600197999b601f198a8603018c528a613c59565b8035845285810190613bc6565b91909281868201520191613bf7565b990194019401918b98979695939491612795565b6128ea906137a1565b6104ea57833861270a565b91939596859899506020612920819260406128be6128b1600197999b601f198a8603018c528a613c59565b990194019401918c989796959394916126cf565b634e487b7160e01b86526011600452602486fd5b01519050388061254d565b90600d840189526020892091895b601f19851681106129a85750918391600193600d95601f1981161061298f575b505050811b01910155612563565b015160001960f88460031b161c19169055388080612981565b91926020600181928685015181550194019201612961565b634e487b7160e01b88526041600452602488fd5b634e487b7160e01b86526004869052602486fd5b634e487b7160e01b86526041600452602486fd5b9093503d8086833e612a0e8183613806565b60208282810103126105315781516001600160401b0381116104f9576101c081840183850103126104f95760405192612a46846137b4565b808201516001600160a01b0381168103612b5a578452612a6a602083830101613b7b565b6020850152612a7d604083830101613b7b565b6040850152606082820101516060850152612a9c608083830101613b7b565b608085015260a0828201015160a0850152612abb60c083830101613b7b565b60c085015280820160e081810151908601526101008082015190860152610120808201519086015261014090612af2908201613b0e565b90850152808201610160818101519086015261018080820151908601526101a00151926001600160401b038411612b5a57808201601f8585850101011215612b5a57612b4d9360209183019381818501015193010101613b8f565b6101a082015292386123ec565b8880fd5b90506020813d602011612b90575b81612b7960209383613806565b8101031261070b57612b8a90613b0e565b3861224d565b3d9150612b6c565b503461085757604036600319011261085757612bb261362c565b6001600160a01b0316815260cf6020526040812080546024359290831015610857576020612be08484613656565b90546040519160031b1c8152f35b5034610857576060366003190112610857576044356001600160401b03918282116108575736602383011215610857578160040135928311610857573660248484010111610857576020612c4b846024850160243560043561436b565b6040519015158152f35b503461085757806003193601126108575760d6546040516001600160a01b039091168152602090f35b5034610857576020366003190112610857576004356001600160401b0380821161070b576060600319833603011261070b576040519160608301838110838211176131b05760405280600401358352602481013582811161067d57612ce9906004369184010161390f565b602084015260448101359182116104ea576004612d09923692010161390f565b6040820152612d16613edb565b60d754604051630723eb0360e51b815233600482015290602090829060249082906001600160a01b03165afa908115610a78578391613176575b50610807578051825260cb602052612d6b6040832054613cf4565b506006810180549091906001600160a01b031633036107f55780546001600160a01b03168061310a575b506040830151604051612dc681612db8602082019460208652604083019061386f565b03601f198101835282613806565b51902060088201908154865260d160205260408620604051612df881612db86020820194602086526040830190613e2e565b51902003612fe6575b6020840151604051612e2381612db8602082019460208652604083019061386f565b5190209054855260d060205260408520604051612e5081612db86020820194602086526040830190613e2e565b51902003612ebb575b507fa8b27bffdacaa4db21058695f3dbf1a56df849ef23906c118644f2e46ba1cf1f612ead83519260018060a01b03905416936128686040602083015192015160405193849360408552604085019061386f565b90838203602085015261386f565b612ec481613fd8565b602084015160d4546001600160a01b031673__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__3b156104f95790869291612f1660405193630f703ee360e31b85526080600486015260848501906139fa565b60d06024850152600319848203016044850152825180825260208201916020808360051b8301019501926000915b838310612fa057505050505082849281926064830152038173__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__5af480156104ee57612f8c575b5050600c4291015538612e59565b612f95906137a1565b6104ea578338612f7e565b9193969750919394602080612fd2600193601f198682030187526040838c51805184520151918185820152019061384a565b98019301930190928b979695949293612f44565b612fef82613fd8565b604085015160d4546001600160a01b031673__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__3b15613106579061304392889160405194859263226af0f360e01b84526080600485015260848401906139fa565b9360d16024840152600319838603016044840152815180865260208601956020808360051b83010194019686915b8383106130c25750505050829394506064830152038173__$52ea7cf0c9ae2adbe7796b4f32fb3f8ca1$__5af4801561053d576130af575b50612e01565b6130bb909591956137a1565b93386130a9565b929550929550926020806130f3600193601f198682030187526040838c51805184520151918185820152019061384a565b9801930193018c95929693889592613071565b8780fd5b6020600491604051928380926308bcf8b560e21b82525afa908115611b3757859161313c575b50156107a95738612d95565b90506020813d60201161316e575b8161315760209383613806565b8101031261067d5761316890613b0e565b38613130565b3d915061314a565b90506020813d6020116131a8575b8161319160209383613806565b8101031261070b576131a290613b0e565b38612d50565b3d9150613184565b634e487b7160e01b85526041600452602485fd5b5034610857578060031936011261085757602060ff606554166040519015158152f35b50346108575760208060031936011261084b57600435825260d0815260408220805490613213826138dd565b936132216040519586613806565b828552908152828120838086015b8484106132495760405182815280610b6f8185018a61386f565b60019160029160405161325b81613786565b8554815260405161327281610b9c81898b016136f0565b83820152815201920192019190849061322f565b5034610857576020366003190112610857576040602091600435815260cb83522054604051908152f35b503461085757806003193601126108575760d254604051632474521560e21b81527f5a7d4408f4759dddd7fdfd0d21abd99341dc2f52cda14804988a9b2df20766d860048201523360248201526020918290829060449082906001600160a01b03165afa908115610a785783916133a4575b50156120fe5760655460ff8116156133685760ff19166065556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9190a180f35b60405162461bcd60e51b815260048101839052601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b90508181813d83116133d2575b6133bb8183613806565b8101031261070b576133cc90613b0e565b38613322565b503d6133b1565b503461085757806003193601126108575760d4546040516001600160a01b039091168152602090f35b5034610857578060031936011261085757602060ca54604051908152f35b50346108575760208060031936011261084b5761343b61362c565b60d254604051632474521560e21b8152600481018590523360248201526001600160a01b03929184908290604490829087165afa908115611b3757859161350a575b50156120fe576040516301ffc9a760e01b8152631c94d2c560e01b6004820152911691908181602481865afa91821561076c5784926134d4575b505015610f79576001600160601b0360a01b60d654161760d65580f35b90809250813d8311613503575b6134eb8183613806565b8101031261070b576134fc90613b0e565b38806134b7565b503d6134e1565b90508381813d8311613538575b6135218183613806565b8101031261067d5761353290613b0e565b3861347d565b503d613517565b50346108575761354e36613684565b9190815260d06020526040812090815483101561085757600161217b848461369a565b50346108575760403660031901126108575761358b61362c565b6001600160a01b0316815260cd6020526040812080546024359290831015610857576020612be08484613656565b5034610857578060031936011261085757602060c954604051908152f35b90503461084b57602036600319011261084b5760043563ffffffff60e01b811680910361070b57602092506332ed0a6160e11b811490811561361b575b5015158152f35b6301ffc9a760e01b14905038613614565b600435906001600160a01b038216820361072357565b35906001600160a01b038216820361072357565b805482101561366e5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6040906003190112610723576004359060243590565b805482101561366e5760005260206000209060011b0190600090565b90600182811c921680156136e6575b60208310146136d057565b634e487b7160e01b600052602260045260246000fd5b91607f16916136c5565b9060009291805491613701836136b6565b9182825260019384811690816000146137635750600114613723575b50505050565b90919394506000526020928360002092846000945b83861061374f57505050500101903880808061371d565b805485870183015294019385908201613738565b9294505050602093945060ff191683830152151560051b0101903880808061371d565b604081019081106001600160401b038211176119cb57604052565b6001600160401b0381116119cb57604052565b6101c081019081106001600160401b038211176119cb57604052565b608081019081106001600160401b038211176119cb57604052565b602081019081106001600160401b038211176119cb57604052565b90601f801991011681019081106001600160401b038211176119cb57604052565b60005b83811061383a5750506000910152565b818101518382015260200161382a565b9060209161386381518092818552858086019101613827565b601f01601f1916010190565b908082519081815260208091019281808460051b8301019501936000915b84831061389d5750505050505090565b90919293949584806138cd600193601f19868203018752828b51805183520151906040908185820152019061384a565b980193019301919493929061388d565b6001600160401b0381116119cb5760051b60200190565b6001600160401b0381116119cb57601f01601f191660200190565b81601f8201121561072357803591613926836138dd565b9260409061393682519586613806565b808552602093848087019260051b8201019380851161072357858201925b858410613965575050505050505090565b6001600160401b039084358281116107235784019186601f1984860301126107235786519261399384613786565b8981013584528781013591821161072357019083603f830112156107235788820135926139bf846138f4565b6139cb89519182613806565b848152858986860101116107235760008b8681978c839801838601378301015283820152815201930192613954565b90613aa99160018060a01b038082511683528060208301511660208401528060408301511660408401526060820151606084015280608083015116608084015260a082015160a084015260c08201511660c083015260e081015160e08301526101008082015190830152610120808201519083015261014080820151151590830152610160808201519083015261018080820151908301526101a080910151916101c08092820152019061384a565b90565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310613ae05750505050505090565b9091929394958480613afe600193603f198682030187528a516139fa565b9801930193019194939290613ad0565b5190811515820361072357565b15613b2257565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b51906001600160a01b038216820361072357565b90929192613b9c816138f4565b91613baa6040519384613806565b829482845282820111610723576020613bc4930190613827565b565b9035601e19823603018112156107235701602081359101916001600160401b03821161072357813603831361072357565b908060209392818452848401376000828201840152601f01601f1916010190565b3590811515820361072357565b9035601e19823603018112156107235701602081359101916001600160401b038211610723578160051b3603831361072357565b9035603e1982360301811215610723570190565b90808352602080930192838260051b810194846000925b858410613c95575050505050505090565b909192939495968580613cd48385600195038852613cc3613cb68d89613c59565b8035835284810190613bc6565b909160409081868201520191613bf7565b990194019401929594939190613c84565b60001981146105ee5760010190565b60c95481101561366e57600e9060c9600052027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d280190600090565b818110613d3a575050565b60008155600101613d2f565b9190601f8111613d5557505050565b613bc4926000526020600020906020601f840160051c83019310613d81575b601f0160051c0190613d2f565b9091508190613d74565b90815491600160401b8310156119cb5782613dae916001613bc495018155613656565b90919082549060031b91821b91600019901b1916179055565b903590601e198136030182121561072357018035906001600160401b03821161072357602001918160051b3603831361072357565b903590601e198136030182121561072357018035906001600160401b0382116107235760200191813603831361072357565b908154808252602080920191828260051b81019460005281600020936000915b848310613e5e5750505050505090565b909192939495846002613e8783856001950387528a548152604090818582015201848b016136f0565b9801930193019194939290613e4e565b60ff60655416613ea357565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260015414613eec576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b602081830312610723578051906001600160401b03821161072357019080601f83011215610723578151613aa992602001613b8f565b9081602091031261072357516001600160a01b03811681036107235790565b92919695949093613faf60e095600386526000602087015261010080604088015286019061384a565b6001600160a01b039889166060860152928816608085015260a084015290951660c08201520152565b90600d6101a0604051613fea816137b4565b61409c819560018060a01b0380825416845280600183015416602085015280600283015416604085015260038201546060850152806004830154166080850152600582015460a085015260068201541660c0840152600781015460e08401526008810154610100840152600981015461012084015260ff600a820154161515610140840152600b810154610160840152600c81015461018084015261409560405180968193016136f0565b0384613806565b0152565b919081101561366e5760051b0190565b919082604091031261072357613aa9602083519301613b0e565b356001600160a01b03811681036107235790565b9190818181526020809101926005938284861b83010195809560009182945b8786106141105750505050505050505090565b90919293949596979998601f1982820301865261412d8b84613c59565b9060409061414582820193803583528b810190613c25565b809194848d850152526060918281019282891b8201019480948a915b84831061418a575050505050505087806001929c9b9c9b019601960194979695939291906140fd565b909192939495968e806141e0600193605f19898203018b526141ac8c87613c59565b906141d36141c96141bd8480613bc6565b8b85528b850191613bf7565b9285810190613bc6565b9185818503910152613bf7565b99019701959493019190614161565b80546001600160a01b03908116835260018201548116602084015260028201548116604084015260038201546060840152600482015481166080840152600582015460a084015260068201541660c0830152600781015460e083015260088101546101008301526009810154610120830152600a81015460ff161515610140830152600b810154610160830152600c8101546101808301526101c06101a08301819052613aa9920190600d016136f0565b604051906142ad826137b4565b60606101a083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e0830152806101008301528061012083015280610140830152806101608301526101808201520152565b90614311826138dd565b61431e6040519182613806565b828152809261432f601f19916138dd565b019060005b82811061434057505050565b60209061434b6142a0565b82828501015201614334565b805182101561366e5760209160051b010190565b909260009180835260209160d08352604095868520548110156146135761439b9083865260d0855287862061369a565b509082855260cb84526143b087862054613cf4565b50906007820154421161459e5781546001600160a01b039290831690839082614532575b50905060d454169285815460248b51809781936352ff146960e11b835260048301525afa938415614528579186949391889384956144d8575b509061447a84939261446b9798614455965260cb895261442f8d862054613cf4565b508d51633fa1ee4760e11b8152606060048201529c8d998a9889969360648801906141ef565b600160031995868984030160248a0152016136f0565b92858403016044860152613bf7565b0393165af19384156144cd57508193614494575b50505090565b9091809350813d83116144c6575b6144ac8183613806565b8101031261085757506144be90613b0e565b38808061448e565b503d6144a2565b51913d9150823e3d90fd5b9295919450925081813d8111614521575b6144f38183613806565b810103126104f95761446b9386959361447a614455946145138b95613b7b565b96989750919293945061440d565b503d6144e9565b89513d89823e3d90fd5b600101548a5163a4c1cccb60e01b8152911660048201528981602481855afa9081156145e757879089926145f1575b508a516308bcf8b560e21b81529192829060049082905afa9081156145e75788916145b2575b50159081156145a9575b5061459e573882816143d4565b505050505091505090565b90501538614591565b90508681813d83116145e0575b6145c98183613806565b81010312613106576145da90613b0e565b38614587565b503d6145bf565b8a513d8a823e3d90fd5b6004925061460b908c8d3d10611cf257611ce28183613806565b905091614561565b86516316f5923f60e31b8152600490fd5b60d35460009060018060a01b038091169060c0840181815116604093838588015116606088015190865193614658856137d0565b8085526020850152868401526060830152803b1561053157845163a0fd10ad60e01b80825283516001600160a01b039081166004840152602085015181166024840152604085015116604483015260609093015160648201529086908290608490829084905af1801561479657614783575b50828060d354169251169260808701511660a0870151908551946146ed866137d0565b8086526020860152858501526060840152813b1561067d57835190815282516001600160a01b0390811660048301526020840151811660248301526040840151166044820152606090920151606483015290919083908390608490829084905af190811561477a5750614766575b5050613bc490614971565b61477082916137a1565b610857578061475b565b513d84823e3d90fd5b61478f909591956137a1565b93386146ca565b85513d88823e3d90fd5b6147aa81546136b6565b90816147b4575050565b81601f600093116001146147c6575055565b9080839182526147e5601f60208420940160051c840160018501613d2f565b5555565b8054600091828155816147fb57505050565b6001600160ff1b038216820361483f5782526020822091600191821b8301925b8381106148285750505050565b8082600292556148398482016147a0565b0161481b565b634e487b7160e01b83526011600452602483fd5b805490811561487d576000199182019161486d8383613656565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b9080821461496d576148a581546136b6565b906001600160401b0382116119cb5781906148ca826148c486546136b6565b86613d46565b600090601f8311600114614901576000926148f6575b50508160011b916000199060031b1c1916179055565b0154905038806148e0565b81526020808220858352818320935090601f1985169083905b82821061495457505090846001959493921061493b575b505050811b019055565b015460001960f88460031b161c19169055388080614931565b849581929585015481556001809101960194019061491a565b5050565b610100810190815191600092835260209060d082526040926149948486206147e9565b8151855260d183526149a78486206147e9565b80516001600160a01b03908116865260cf8452848620825182168752858720546000199391848201918211614cc65760c092916149e391613656565b90549060031b1c83825116895260cf8752614a1081613dae8a8c2089518d5260ce8b528b8d205490613656565b8551895260ce8752878920549089528789205582815116885260cf8652614a38878920614853565b8451885260ce865287878120550181815116875260cd85528587208282511688528688205490848201918211614cc657839291614a7491613656565b90549060031b1c82825116895260cd8752614aa181613dae8a8c2089518d5260cc8b528b8d205490613656565b8551895260cc875287892054908952878920555116865260cd8452614ac7858720614853565b8251865260cc8452858581205560c95482810190811161058f57614aea90613cf4565b508351875260cb8552614aff86882054613cf4565b919091614cb257808203614bd5575b5050508151855260cb83528385205460c95482810190811161058f57614b35600891613cf4565b500154865260cb84528486205560c9548015614bc15701614b5581613cf4565b6129d45790614bb5600d838860cb9796955588600182015588600282015588600382015588600482015588600582015588600682015588600782015588600882015588600982015588600a82015588600b82015588600c820155016147a0565b60c95551845252812055565b634e487b7160e01b86526031600452602486fd5b600d8184614caa95839454166001600160601b0360a01b90818754161786556001860182600185015416828254161790556002860182600285015416828254161790556003830154600387015560048601826004850154168282541617905560058301546005870155600686019160068401541690825416179055600781015460078501556008810154600885015560098101546009850155614c8e60ff600a83015416600a86019060ff801983541691151516179055565b600b810154600b850155600c810154600c850155019101614893565b388080614b0e565b634e487b7160e01b88526004889052602488fd5b634e487b7160e01b89526011600452602489fdfe288073495da2273b7902460b23ea23540d925931880b7ecc8ed6c7c6a5477e50a2646970667358221220249fc6cea1669b95f711e978ad3a4bf840257d95a9aa4bfadaf8189c5e1e166b64736f6c63430008120033",
  "libraries": {
    "PrimexPricingLibrary": "0xeFCDBbd36a9D77264d56F22e0E94f8D5F425f9b4",
    "TokenTransfersLibrary": "0x4FFa6c545a6249baF2D66ce21CeF3D2C2cCa69D0",
    "LimitOrderLibrary": "0xC015F00Cd03302A8Cc964BFCCF5F5663DCdD3Ea9",
    "Errors": "0x988288925196F0725268378d0C7c8aA0E50EB423"
  },
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "canBeFilled(uint256,uint256,bytes)": {
        "params": {
          "_additionalParams": "parameters needed for dex",
          "_conditionIndex": "index of condition in openConditions",
          "_orderId": "order id"
        }
      },
      "cancelExpiredLimitOrders(uint256[])": {
        "params": {
          "_orderIds": "The array of order IDs to remove."
        }
      },
      "cancelLimitOrder(uint256)": {
        "params": {
          "_orderId": "order id"
        }
      },
      "createLimitOrder((string,uint256,address,address,uint256,bool,bool,uint256,bool,(uint256,bytes)[],(uint256,bytes)[],bool))": {
        "details": "This function allows users to create a limit order and locks the deposit asset in the traderBalanceVault",
        "params": {
          "_params": "The parameters necessary to create limit order"
        }
      },
      "getBucketOrders(address)": {
        "params": {
          "_bucket": "The address of the bucket."
        },
        "returns": {
          "_0": "An array of LimitOrder structs representing the bucket's orders."
        }
      },
      "getBucketOrdersLength(address)": {
        "params": {
          "_bucket": "The address of the bucket."
        },
        "returns": {
          "_0": "The number of orders in the bucket."
        }
      },
      "getCloseConditions(uint256)": {
        "params": {
          "_orderId": "The ID of the order."
        },
        "returns": {
          "_0": "An array of Condition representing the close conditions."
        }
      },
      "getOpenConditions(uint256)": {
        "params": {
          "_orderId": "The ID of the order."
        },
        "returns": {
          "_0": "An array of Condition structs representing the open conditions."
        }
      },
      "getOrder(uint256)": {
        "params": {
          "_id": "The ID of the limit order to retrieve."
        },
        "returns": {
          "_0": "The LimitOrder struct representing the limit order."
        }
      },
      "getOrderByIndex(uint256)": {
        "params": {
          "_index": "The index of the limit order to retrieve."
        },
        "returns": {
          "_0": "The limit order at the specified index."
        }
      },
      "getTraderOrders(address)": {
        "params": {
          "_trader": "The address of the trader."
        },
        "returns": {
          "_0": "traderOrders An array of LimitOrder structures representing the orders placed by the trader."
        }
      },
      "getTraderOrdersLength(address)": {
        "params": {
          "_trader": "The address of the trader."
        },
        "returns": {
          "_0": "The length of the order array."
        }
      },
      "initialize(address,address,address,address,address,address)": {
        "params": {
          "_pm": "The address of the PositionManager contract.",
          "_primexDNS": "The address of the PrimexDNS contract.",
          "_registry": "The address of the Registry contract.",
          "_swapManager": "The address of the SwapManager contract.",
          "_traderBalanceVault": "The address of the TraderBalanceVault contract.",
          "_whiteBlackList": "The address of the WhiteBlacklist contract."
        }
      },
      "openPositionByOrder((uint256,uint256,bytes,(uint256,(string,bytes)[])[],(uint256,(string,bytes)[])[],address))": {
        "details": "This function is called to open a position based on the given order parameters.",
        "params": {
          "_params": "The OpenPositionParams struct containing the necessary parameters for opening the position."
        }
      },
      "pause()": {
        "details": "Triggers stopped state. This function can only be called by an address with the EMERGENCY_ADMIN role. Requirements: - The contract must not be paused."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setSwapManager(address)": {
        "details": "Only callable by the BIG_TIMELOCK_ADMIN role.",
        "params": {
          "_swapManager": "Address of the new swapManager."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The interface id to check"
        }
      },
      "unpause()": {
        "details": "Returns to normal state. This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract. Requirements: - The contract must be paused."
      },
      "updateOrder((uint256,uint256,uint256,bool,bool,bool))": {
        "details": "Edits prices on an existing order",
        "params": {
          "_params": "The parameters for updating the limit order."
        }
      },
      "updateOrderConditions((uint256,(uint256,bytes)[],(uint256,bytes)[]))": {
        "details": "Only the trader of the order can update the conditions.",
        "params": {
          "_params": "The parameters for updating the order conditions."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canBeFilled(uint256,uint256,bytes)": {
        "notice": "Returns true if current price >= limit price and block.timestamp <= deadline"
      },
      "cancelExpiredLimitOrders(uint256[])": {
        "notice": "Removes expired limit orders"
      },
      "cancelLimitOrder(uint256)": {
        "notice": "Cancels the order. Can only be called by the trader"
      },
      "createLimitOrder((string,uint256,address,address,uint256,bool,bool,uint256,bool,(uint256,bytes)[],(uint256,bytes)[],bool))": {
        "notice": "Creates a limit order."
      },
      "getBucketOrders(address)": {
        "notice": "Retrieves all limit orders associated with a given bucket."
      },
      "getBucketOrdersLength(address)": {
        "notice": "Returns the length of orders in a bucket."
      },
      "getCloseConditions(uint256)": {
        "notice": "Retrieves the close conditions associated with the given order ID."
      },
      "getOpenConditions(uint256)": {
        "notice": "Retrieves the open conditions associated with a given order ID."
      },
      "getOrder(uint256)": {
        "notice": "Retrieves the details of a limit order based on its ID."
      },
      "getOrderByIndex(uint256)": {
        "notice": "Retrieves the limit order at the specified index."
      },
      "getOrdersLength()": {
        "notice": "Returns orders array length."
      },
      "getTraderOrders(address)": {
        "notice": "Returns an array of LimitOrder structures representing the orders placed by a specific trader."
      },
      "getTraderOrdersLength(address)": {
        "notice": "Returns the length of the order array for a specific trader."
      },
      "initialize(address,address,address,address,address,address)": {
        "notice": "Initializes the LimitOrderManager contract."
      },
      "openPositionByOrder((uint256,uint256,bytes,(uint256,(string,bytes)[])[],(uint256,(string,bytes)[])[],address))": {
        "notice": "Opens a position by an existing order."
      },
      "setSwapManager(address)": {
        "notice": "Function to set new swapManager."
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      },
      "updateOrder((uint256,uint256,uint256,bool,bool,bool))": {
        "notice": "Updates an existing limit order."
      },
      "updateOrderConditions((uint256,(uint256,bytes)[],(uint256,bytes)[]))": {
        "notice": "Updates the open and close conditions of an order."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2890,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2893,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3193,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3262,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5867,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3073,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 3178,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6506,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 34711,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "orders",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_struct(LimitOrder)63271_storage)dyn_storage"
      },
      {
        "astId": 34714,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "ordersId",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 34719,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "orderIndexes",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 34724,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "traderOrderIndexes",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 34730,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "traderOrderIds",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 34735,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "bucketOrderIndexes",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 34741,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "bucketOrderIds",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 34747,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "openConditions",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_array(t_struct(Condition)63241_storage)dyn_storage)"
      },
      {
        "astId": 34753,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "closeConditions",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_array(t_struct(Condition)63241_storage)dyn_storage)"
      },
      {
        "astId": 34757,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "registry",
        "offset": 0,
        "slot": "210",
        "type": "t_contract(IAccessControl)7879"
      },
      {
        "astId": 34761,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "traderBalanceVault",
        "offset": 0,
        "slot": "211",
        "type": "t_contract(ITraderBalanceVault)52304"
      },
      {
        "astId": 34765,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "primexDNS",
        "offset": 0,
        "slot": "212",
        "type": "t_contract(IPrimexDNS)43432"
      },
      {
        "astId": 34769,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "pm",
        "offset": 0,
        "slot": "213",
        "type": "t_contract(IPositionManager)39707"
      },
      {
        "astId": 34773,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "swapManager",
        "offset": 0,
        "slot": "214",
        "type": "t_contract(ISwapManager)58059"
      },
      {
        "astId": 34776,
        "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
        "label": "whiteBlackList",
        "offset": 0,
        "slot": "215",
        "type": "t_contract(IWhiteBlackList)53981"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Condition)63241_storage)dyn_storage": {
        "base": "t_struct(Condition)63241_storage",
        "encoding": "dynamic_array",
        "label": "struct LimitOrderLibrary.Condition[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LimitOrder)63271_storage)dyn_storage": {
        "base": "t_struct(LimitOrder)63271_storage",
        "encoding": "dynamic_array",
        "label": "struct LimitOrderLibrary.LimitOrder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IAccessControl)7879": {
        "encoding": "inplace",
        "label": "contract IAccessControl",
        "numberOfBytes": "20"
      },
      "t_contract(IBucket)26049": {
        "encoding": "inplace",
        "label": "contract IBucket",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionManager)39707": {
        "encoding": "inplace",
        "label": "contract IPositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPrimexDNS)43432": {
        "encoding": "inplace",
        "label": "contract IPrimexDNS",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)58059": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITraderBalanceVault)52304": {
        "encoding": "inplace",
        "label": "contract ITraderBalanceVault",
        "numberOfBytes": "20"
      },
      "t_contract(IWhiteBlackList)53981": {
        "encoding": "inplace",
        "label": "contract IWhiteBlackList",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Condition)63241_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LimitOrderLibrary.Condition[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Condition)63241_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Condition)63241_storage": {
        "encoding": "inplace",
        "label": "struct LimitOrderLibrary.Condition",
        "members": [
          {
            "astId": 63238,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "managerType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 63240,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "params",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LimitOrder)63271_storage": {
        "encoding": "inplace",
        "label": "struct LimitOrderLibrary.LimitOrder",
        "members": [
          {
            "astId": 63244,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "bucket",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IBucket)26049"
          },
          {
            "astId": 63246,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "positionAsset",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 63248,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "depositAsset",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 63250,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "depositAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 63252,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "feeToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 63254,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "protocolFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 63256,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "trader",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 63258,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "deadline",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 63260,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "id",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 63262,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "leverage",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 63264,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "shouldOpenPosition",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 63266,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "createdAt",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 63268,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "updatedConditionsAt",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 63270,
            "contract": "contracts/LimitOrderManager/LimitOrderManager.sol:LimitOrderManager",
            "label": "extraParams",
            "offset": 0,
            "slot": "13",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}