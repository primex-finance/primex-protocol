{
  "address": "0x15d071AcE9920c5e2f238d05229e474E311973a4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WNative",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ToAddressOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ToAddressOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dexRouter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dexType",
          "type": "uint256"
        }
      ],
      "name": "DexTypeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dexRouter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoter",
          "type": "address"
        }
      ],
      "name": "QuoterChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WNative",
      "outputs": [
        {
          "internalType": "contract IWNative",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dexType",
      "outputs": [
        {
          "internalType": "enum IDexAdapter.DexType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "megaRoutes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IDexAdapter.AmountParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "getAmountInByMegaRoutes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "megaRoutes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IDexAdapter.AmountParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "getAmountOutByMegaRoutes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "encodedPath",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dexRouter",
              "type": "address"
            }
          ],
          "internalType": "struct IDexAdapter.GetAmountsParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "dexName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.Path[]",
          "name": "paths",
          "type": "tuple[]"
        }
      ],
      "name": "getAmountsInByPaths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dexName",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "payload",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.Path[]",
              "name": "paths",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.Route[]",
          "name": "routes",
          "type": "tuple[]"
        }
      ],
      "name": "getAmountsInByRoutes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "encodedPath",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dexRouter",
              "type": "address"
            }
          ],
          "internalType": "struct IDexAdapter.GetAmountsParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "dexName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.Path[]",
          "name": "paths",
          "type": "tuple[]"
        }
      ],
      "name": "getAmountsOutByPaths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dexName",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "payload",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.Path[]",
              "name": "paths",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.Route[]",
          "name": "routes",
          "type": "tuple[]"
        }
      ],
      "name": "getAmountsOutByRoutes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dexRouter",
          "type": "address"
        }
      ],
      "name": "getGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primexDNS",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenA",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenB",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountTokenA",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "megaRoutes",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.MegaSwapParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "performMegaRoutesSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "dexName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.Path[]",
          "name": "paths",
          "type": "tuple[]"
        }
      ],
      "name": "performPathsSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dexName",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "payload",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.Path[]",
              "name": "paths",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PrimexPricingLibrary.Route[]",
          "name": "routes",
          "type": "tuple[]"
        }
      ],
      "name": "performRoutesSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primexDNS",
      "outputs": [
        {
          "internalType": "contract IPrimexDNSV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "quoters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dexRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dexType",
          "type": "uint256"
        }
      ],
      "name": "setDexType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dexRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quoter",
          "type": "address"
        }
      ],
      "name": "setQuoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "encodedPath",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMin",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "dexRouter",
              "type": "address"
            }
          ],
          "internalType": "struct IDexAdapter.SwapParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa1ddbc0b0fe94f5b6b8b7e4669779d0718a5b4796920a6816b5be62c4883fde8",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0x15d071AcE9920c5e2f238d05229e474E311973a4",
    "transactionIndex": 4,
    "gasUsed": "4203387",
    "logsBloom": "0x
    "blockHash": "0x7d695aa1db620a67fd970c3d998ff74eb9680b0478e0b6b3fc5ce625e21cbba9",
    "transactionHash": "0xa1ddbc0b0fe94f5b6b8b7e4669779d0718a5b4796920a6816b5be62c4883fde8",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 65248159,
        "transactionHash": "0xa1ddbc0b0fe94f5b6b8b7e4669779d0718a5b4796920a6816b5be62c4883fde8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c110b6e93a51acf1f3ded19c754789e7a2304f07",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000005d557d20c15ba07000000000000000000000000000000000000000000000003fcd2c53cc5ab9a720000000000000000000000000000000000000000000007f4d23a0a31c7940910000000000000000000000000000000000000000000000003f6fd6d6ab995e06b0000000000000000000000000000000000000000000007f4d80f6203d3a9c317",
        "logIndex": 7,
        "blockHash": "0x7d695aa1db620a67fd970c3d998ff74eb9680b0478e0b6b3fc5ce625e21cbba9"
      }
    ],
    "blockNumber": 65248159,
    "cumulativeGasUsed": "4497099",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD1869a3C77C17D185c9a5e8904e0e4867e5EB1D9",
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270"
  ],
  "numDeployments": 4,
  "solcInputHash": "b9821e6aa5ae8bcd6a583375e546781d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WNative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToAddressOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ToAddressOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dexType\",\"type\":\"uint256\"}],\"name\":\"DexTypeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"}],\"name\":\"QuoterChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WNative\",\"outputs\":[{\"internalType\":\"contract IWNative\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dexType\",\"outputs\":[{\"internalType\":\"enum IDexAdapter.DexType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDexAdapter.AmountParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"getAmountInByMegaRoutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDexAdapter.AmountParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"getAmountOutByMegaRoutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encodedPath\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"}],\"internalType\":\"struct IDexAdapter.GetAmountsParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsInByPaths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsInByRoutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encodedPath\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"}],\"internalType\":\"struct IDexAdapter.GetAmountsParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsOutByPaths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"name\":\"getAmountsOutByRoutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"}],\"name\":\"getGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primexDNS\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenA\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaSwapParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"performMegaRoutesSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"name\":\"performPathsSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"name\":\"performRoutesSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primexDNS\",\"outputs\":[{\"internalType\":\"contract IPrimexDNSV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"quoters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dexType\",\"type\":\"uint256\"}],\"name\":\"setDexType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoter\",\"type\":\"address\"}],\"name\":\"setQuoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encodedPath\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dexRouter\",\"type\":\"address\"}],\"internalType\":\"struct IDexAdapter.SwapParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"getAmountInByMegaRoutes((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]))\":{\"details\":\"The function may not support some types of dex, e.g. the Paraswap\",\"params\":{\"_params\":\"AmountParams struct\"}},\"getAmountOutByMegaRoutes((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]))\":{\"details\":\"The function may not support some types of dex, e.g. the Paraswap\",\"params\":{\"_params\":\"AmountParams struct\"}},\"getAmountsIn((bytes,uint256,address))\":{\"params\":{\"_params\":\"GetAmountsParams struct\"}},\"getAmountsInByPaths(uint256,(string,uint256,bytes)[])\":{\"details\":\"The function may not support some types of dex, e.g. the Paraswap\",\"params\":{\"amountOut\":\"amount in the destination token\",\"paths\":\"Array of Path structs\"}},\"getAmountsInByRoutes(uint256,(address,(string,uint256,bytes)[])[])\":{\"details\":\"The function may not support some types of dex, e.g. the Paraswap\",\"params\":{\"amountOut\":\"amountin the destination token\",\"routes\":\"Array of Route structs\"}},\"getAmountsOut((bytes,uint256,address))\":{\"params\":{\"_params\":\"GetAmountsParams struct\"}},\"getAmountsOutByPaths(uint256,(string,uint256,bytes)[])\":{\"details\":\"The function may not support some types of dex, e.g. the Paraswap\",\"params\":{\"amountIn\":\"amount in the source token\",\"paths\":\"Array of Path structs\"}},\"getAmountsOutByRoutes(uint256,(address,(string,uint256,bytes)[])[])\":{\"details\":\"The function may not support some types of dex, e.g. the Paraswap\",\"params\":{\"amountIn\":\"amount in the source token\",\"routes\":\"Array of Route structs\"}},\"getGas(address)\":{\"params\":{\"dexRouter\":\"The address of a router\"}},\"initialize(address)\":{\"details\":\"This function should only be called once during the initial setup of the contract.\",\"params\":{\"_primexDNS\":\"The address of the PrimexDNS contract.\"}},\"performMegaRoutesSwap((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[],address,uint256))\":{\"params\":{\"_params\":\"MegaSwapParams struct\"}},\"performPathsSwap(address,address,uint256,address,(string,uint256,bytes)[])\":{\"params\":{\"amountIn\":\"amount in the source token\",\"paths\":\"Array of Path structs\",\"receiver\":\"destination address for swap\",\"tokenIn\":\"source token\",\"tokenOut\":\"destination token\"}},\"performRoutesSwap(address,uint256,address,(address,(string,uint256,bytes)[])[])\":{\"params\":{\"amountIn\":\"amount in the source token\",\"receiver\":\"destination address for swap\",\"routes\":\"Array of Route structs\",\"tokenIn\":\"source token\"}},\"setDexType(address,uint256)\":{\"params\":{\"_dexRouter\":\"The dex router address\",\"_dexType\":\"The dex type from enum DexType\"}},\"setQuoter(address,address)\":{\"params\":{\"_dexRouter\":\"The router address for which the quoter is set\",\"_quoter\":\"The quoter address to set\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The interface id to check\"}},\"swapExactTokensForTokens((bytes,address,address,uint256,uint256,address,uint256,address))\":{\"params\":{\"_params\":\"SwapParams struct\"}}},\"stateVariables\":{\"WNative\":{\"details\":\"e.g WETH or WMATIC\"},\"registry\":{\"return\":\"The address of the Registry contract\",\"returns\":{\"_0\":\"The address of the Registry contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"dexType(address)\":{\"notice\":\"Dex type mapping dexRouter => dex type\"},\"getAmountInByMegaRoutes((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]))\":{\"notice\":\"Performs chained getAmountsIn calculations by MegaRoute structs\"},\"getAmountOutByMegaRoutes((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]))\":{\"notice\":\"Performs chained getAmountsOut calculations by MegaRoute structs\"},\"getAmountsIn((bytes,uint256,address))\":{\"notice\":\"Performs chained getAmountIn calculationsgiven an output amount of an asset, returns the maximum input amount of the other asset\"},\"getAmountsInByPaths(uint256,(string,uint256,bytes)[])\":{\"notice\":\"Performs chained getAmountsIn calculations by Path structs\"},\"getAmountsInByRoutes(uint256,(address,(string,uint256,bytes)[])[])\":{\"notice\":\"Performs chained  getAmountsIn calculations by Route structs\"},\"getAmountsOut((bytes,uint256,address))\":{\"notice\":\"Performs chained getAmountOut calculationsgiven an input amount of an asset, returns the maximum output amount of the other asset\"},\"getAmountsOutByPaths(uint256,(string,uint256,bytes)[])\":{\"notice\":\"Performs chained getAmountOut calculations by Path structs\"},\"getAmountsOutByRoutes(uint256,(address,(string,uint256,bytes)[])[])\":{\"notice\":\"Performs chained getAmountsOut calculations by Route structs\"},\"getGas(address)\":{\"notice\":\"Gets the average amount of gas that is required for the swap on some dex\"},\"initialize(address)\":{\"notice\":\"Initializes the DexAdapter contract.\"},\"performMegaRoutesSwap((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[],address,uint256))\":{\"notice\":\"perform swap of ERC20 tokens by MegaRoute structs\"},\"performPathsSwap(address,address,uint256,address,(string,uint256,bytes)[])\":{\"notice\":\"perform swap of ERC20 tokens by Path structs\"},\"performRoutesSwap(address,uint256,address,(address,(string,uint256,bytes)[])[])\":{\"notice\":\"perform swap of ERC20 tokens by Route structs\"},\"quoters(address)\":{\"notice\":\"Mapping from the dexRouter to its quoter\"},\"setDexType(address,uint256)\":{\"notice\":\"Set a dex type for a dex router\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"},\"swapExactTokensForTokens((bytes,address,address,uint256,uint256,address,uint256,address))\":{\"notice\":\"Swap ERC20 tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DexAdapter.sol\":\"DexAdapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@cryptoalgebra/solidity-interfaces/contracts/core/callback/IAlgebraSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IAlgebraPoolActions#swap\\r\\n/// @notice Any contract that calls IAlgebraPoolActions#swap must implement this interface\\r\\ninterface IAlgebraSwapCallback {\\r\\n  /// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.\\r\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n  /// The caller of this method must be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\\r\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call\\r\\n  function algebraSwapCallback(\\r\\n    int256 amount0Delta,\\r\\n    int256 amount1Delta,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5df4418988371544d9a2d166d64ae4b0b6e8cc1eab3d3d99dfe19782230d8184\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/periphery/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @title Quoter Interface\\r\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\r\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\r\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\r\\ninterface IQuoter {\\r\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\r\\n    /// @param path The path of the swap, i.e. each token pair\\r\\n    /// @param amountIn The amount of the first token to swap\\r\\n    /// @return amountOut The amount of the last token that would be received\\r\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\r\\n        external\\r\\n        returns (uint256 amountOut, uint16[] memory fees);\\r\\n\\r\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\r\\n    /// @param tokenIn The token being swapped in\\r\\n    /// @param tokenOut The token being swapped out\\r\\n    /// @param amountIn The desired input amount\\r\\n    /// @param limitSqrtPrice The price limit of the pool that cannot be exceeded by the swap\\r\\n    /// @return amountOut The amount of `tokenOut` that would be received\\r\\n    function quoteExactInputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint160 limitSqrtPrice\\r\\n    ) external returns (uint256 amountOut, uint16 fee);\\r\\n\\r\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\r\\n    /// @param path The path of the swap, i.e. each token pair. Path must be provided in reverse order\\r\\n    /// @param amountOut The amount of the last token to receive\\r\\n    /// @return amountIn The amount of first token required to be paid\\r\\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\\r\\n        external\\r\\n        returns (uint256 amountIn, uint16[] memory fees);\\r\\n\\r\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\r\\n    /// @param tokenIn The token being swapped in\\r\\n    /// @param tokenOut The token being swapped out\\r\\n    /// @param amountOut The desired output amount\\r\\n    /// @param limitSqrtPrice The price limit of the pool that cannot be exceeded by the swap\\r\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\r\\n    function quoteExactOutputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountOut,\\r\\n        uint160 limitSqrtPrice\\r\\n    ) external returns (uint256 amountIn, uint16 fee);\\r\\n}\\r\\n\",\"keccak256\":\"0x6b1422cd153796d30a35f4e506db9f3e5bea34cf442064111cc3053aa9b6cb78\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/periphery/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport '../core/callback/IAlgebraSwapCallback.sol';\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via Algebra\\r\\ninterface ISwapRouter is IAlgebraSwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 limitSqrtPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 limitSqrtPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Unlike standard swaps, handles transferring from user before the actual swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingleSupportingFeeOnTransferTokens(ExactInputSingleParams calldata params)\\r\\n        external\\r\\n        returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0xc5d5f5e3e4323fd9e9382f2c36b319878f3dc2c4f0ba111d5b90e774f55f9165\",\"license\":\"GPL-2.0-or-later\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@orally-network/solidity-sdk/IOrallyVerifierOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.18;\\n\\nimport {OrallyStructs} from \\\"./OrallyStructs.sol\\\";\\n\\n/**\\n * @title IOrallyVerifierOracle\\n * @notice Interface for the OrallyVerifierOracle contract.\\n * This interface defines the required functions for verifying and handling\\n * data feeds, specifically focusing on functionality related to price feeds\\n * and custom data verification processes.\\n */\\ninterface IOrallyVerifierOracle {\\n    // Events to notify about changes in reporter status or data updates\\n    event ReporterAdded(address indexed reporter);\\n    event ReporterRemoved(address indexed reporter);\\n    event PriceFeedSaved(string indexed pairId, uint256 price, uint256 decimals, uint256 timestamp);\\n    event CustomNumberSaved(string indexed feedId, uint256 value, uint256 decimals);\\n    event CustomStringSaved(string indexed feedId, string value);\\n\\n    // Price Feeds\\n\\n    /**\\n     * @notice Gets the price feed data for a given pair ID.\\n     * @param pairId The unique identifier for the currency pair.\\n     * @return The price feed data for the given pair ID.\\n     */\\n    function getPriceFeed(string memory pairId) external view returns (OrallyStructs.PriceFeed memory);\\n\\n    /**\\n     * @notice Verifies the integrity and authenticity of price feed data, then returns it (if fee paid with API key / allowed domain).\\n     * @param _data The packed byte array containing the price feed and its signature.\\n     * @return Tuple of pair ID, price, decimals, and timestamp if the verification is successful.\\n     */\\n    function verifyPriceFeed(bytes memory _data) external view returns (OrallyStructs.PriceFeed memory);\\n\\n    /**\\n     * @notice Verifies, caches, and returns the details of a price feed (if fee paid with API key / allowed domain).\\n     * Caching is performed to store the most recent and valid data.\\n     * @param _data The packed data containing the price feed and its signature.\\n     * @return Tuple of pair ID, price, decimals, and timestamp.\\n     */\\n    function updatePriceFeed(bytes memory _data) external returns (OrallyStructs.PriceFeed memory);\\n\\n    // --------------------------------------------------------------\\n    // Custom Numbers\\n\\n    /**\\n     * @notice Gets the custom number data for a given feed ID.\\n     * @param _feedId The unique identifier for the custom number feed.\\n     * @return The custom number data for the given feed ID.\\n     */\\n    function getCustomNumber(string memory _feedId) external view returns (OrallyStructs.CustomNumber memory);\\n\\n    /**\\n     * @notice Verifies and returns custom numerical data from provided packed data.\\n     * @param data The packed data containing custom numerical information and its signature.\\n     * @return Tuple containing the feed ID, numerical value, and decimals.\\n     */\\n    function verifyCustomNumber(bytes memory data) external view returns (OrallyStructs.CustomNumber memory);\\n\\n    /**\\n     * @notice Verifies, caches, and returns the details of a custom number feed (if fee paid with API key / allowed domain).\\n     * Caching is performed to store the most recent and valid data.\\n     * @param _data The packed data containing the custom number feed and its signature.\\n     * @return Tuple of feed ID, numerical value, and decimals.\\n     */\\n    function updateCustomNumber(bytes memory _data) external returns (OrallyStructs.CustomNumber memory);\\n\\n    // --------------------------------------------------------------\\n    // Custom Strings\\n\\n    /**\\n     * @notice Gets the custom string data for a given feed ID.\\n     * @param _feedId The unique identifier for the custom string feed.\\n     * @return The custom string data for the given feed ID.\\n     */\\n    function getCustomString(string memory _feedId) external view returns (OrallyStructs.CustomString memory);\\n\\n    /**\\n     * @notice Verifies and returns custom string data from provided packed data.\\n     * @param data The packed data containing custom string information and its signature.\\n     * @return Tuple containing the feed ID and the string value.\\n     */\\n    function verifyCustomString(bytes memory data) external view returns (OrallyStructs.CustomString memory);\\n\\n    /**\\n     * @notice Verifies, caches, and returns the details of a custom string feed (if fee paid with API key / allowed domain).\\n     * Caching is performed to store the most recent and valid data.\\n     * @param _data The packed data containing the custom string feed and its signature.\\n     * @return Tuple of feed ID and the string value.\\n     */\\n    function updateCustomString(bytes memory _data) external returns (OrallyStructs.CustomString memory);\\n\\n    // --------------------------------------------------------------\\n\\n    /**\\n     * @notice Verifies and returns the details of a chain data feed from provided feed.\\n     * @param _chainData The packed data containing the chain data feed and its signature.\\n     * @return Tuple of chainData and metaData if the verification is successful.\\n     */\\n    function verifyReadContractData(bytes memory _chainData) external view returns (bytes memory, bytes memory);\\n\\n    /**\\n    * @notice Verifies and returns the details of a chain data feed from provided feed.\\n     * @param _chainData The packed data containing the chain data feed and its signature.\\n     * @return Tuple of chainData and metaData if the verification is successful.\\n     */\\n    function verifyReadLogsData(bytes memory _chainData) external view returns (bytes memory, bytes memory);\\n\\n    // Reporters\\n\\n    /**\\n     * @notice Checks if an address is an authorized reporter.\\n     * @param _reporter The address to check.\\n     * @return bool Returns true if the address is authorized to submit data.\\n     */\\n    function isReporter(address _reporter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe7e28048dd03c4e0fbe0dab969c0967bf3ec529aeac5fd5539192fb9470fd8b7\",\"license\":\"AGPL-3.0\"},\"@orally-network/solidity-sdk/OrallyStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.18;\\n\\ncontract OrallyStructs {\\n    // Structure to store information about each price feed\\n    struct PriceFeed {\\n        string pairId;     // The identifier for the currency pair\\n        uint256 price;     // The latest price of the currency pair\\n        uint256 decimals;  // The decimal places for the price to ensure precision\\n        uint256 timestamp; // The timestamp when the price was last updated\\n    }\\n\\n    struct Meta {\\n        string feedId;      // The identifier for the data feed\\n        uint256 timestamp;  // The timestamp HTTP Gateway response happened\\n        uint256 fee;        // The update fee in ether (could be zero)\\n//        string fee_symbol;  // The symbol of the fee token\\n    }\\n\\n    // Structure to store custom number data\\n    struct CustomNumber {\\n        string feedId;      // The identifier for the data feed\\n        uint256 value;      // The custom number value\\n        uint256 decimals;   // The timestamp when the number was last updated\\n    }\\n\\n    // Structure to store custom string data\\n    struct CustomString {\\n        string feedId;  // The identifier for the data feed\\n        string value;   // The custom string data\\n    }\\n\\n    // Structure to store chain data feed and metadata\\n    struct ReadContractMetadata {\\n        uint256 chain_id;           // The chain ID of the contract\\n        address contract_address;   // The address of the contract\\n        string method;              // The method of the contract call\\n        string params;              // The parameters of the contract call\\n        uint256 block_number;       // The block number the contract call happened (0 if last one)\\n        uint256 timestamp;          // The timestamp HTTP Gateway response happened\\n        uint256 fee;                // The update fee in ether (could be zero)\\n        string fee_symbol;          // The symbol of the fee token\\n    }\\n\\n    struct ReadLogsData {\\n        address addr;\\n        string[] topics;\\n        bytes data;\\n        string block_hash;\\n        uint256 block_number;\\n        string transaction_hash;\\n        uint256 transaction_index;\\n        string log_index;\\n        string transaction_log_index;\\n        string log_type;\\n        bool removed;\\n    }\\n\\n    struct ReadLogsMetadata {\\n        uint256 chain_id;\\n        uint256 block_from;\\n        uint256 block_to;\\n        string[] topics0;\\n        string[] topics1;\\n        string[] topics2;\\n        string[] topics3;\\n        address[] addresses;\\n        uint256 timestamp;\\n\\n        uint256 fee;        // The update fee in ether (could be zero)\\n        string fee_symbol;  // The symbol of the fee token\\n    }\\n}\\n\",\"keccak256\":\"0x523635406666c42d69898ef784490cd95fb09ef68461455cc58f3311320a4736\",\"license\":\"AGPL-3.0\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IActivityRewardDistributorStorage, IERC20, IPrimexDNSV3, ITraderBalanceVault} from \\\"./IActivityRewardDistributorStorage.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IActivityRewardDistributor is IActivityRewardDistributorStorage, IPausable {\\n    enum Role {\\n        LENDER,\\n        TRADER\\n    }\\n\\n    struct BucketWithRole {\\n        address bucketAddress;\\n        Role role;\\n    }\\n\\n    /**\\n     * @notice Emitted on claimReward()\\n     * @param user The address of the user who claimed reward\\n     * @param bucket The address of the bucket this reward is related to\\n     * @param role User role - TRADER or LENDER\\n     * @param amount Claimed amount\\n     */\\n    event ClaimReward(address indexed user, address indexed bucket, Role indexed role, uint256 amount);\\n\\n    /**\\n     * @notice  Initializes the ActivityRewardDistributor contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _pmx The address of the PMXToken contract.\\n     * @param _dns The address of the PrimexDNS contract.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _treasury The address of the treasury where fees will be collected.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IERC20 _pmx,\\n        IPrimexDNSV3 _dns,\\n        address _registry,\\n        address _treasury,\\n        ITraderBalanceVault _traderBalanceVault,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice  Saves user activity in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   user  User address\\n     * @param   newBalance  User balance after action\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUserActivity(IBucketV3 bucket, address user, uint256 newBalance, Role role) external;\\n\\n    /**\\n     * @notice  Saves activity of multiple users in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   users  Array of user addresses\\n     * @param   newBalances  Array of users balances after action\\n     * @param   length  The length of the users and oldBalances arrays\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUsersActivities(\\n        IBucketV3 bucket,\\n        address[] calldata users,\\n        uint256[] calldata newBalances,\\n        uint256 length,\\n        Role role\\n    ) external;\\n\\n    /**\\n     * @notice Allows the caller to claim their accumulated reward from the specified buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets from which to claim the rewards.\\n     */\\n    function claimReward(BucketWithRole[] calldata bucketsArray) external;\\n\\n    /**\\n     * @notice Sets up activity rewards distribution in bucket with the specified role and reward parameters.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket to set up.\\n     * @param role The role associated with the bucket.\\n     * @param increaseAmount The amount by which to increase the total reward for the bucket (in PMX).\\n     * Adds specified amount to totalReward of the bucket. Initial value of totalReward is 0.\\n     * @param rewardPerDay The reward amount per day for the bucket.\\n     */\\n    function setupBucket(address bucket, Role role, uint256 increaseAmount, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Allows the caller to withdraw PMX tokens from a specific bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket from which to withdraw PMX tokens.\\n     * @param role The role associated with the bucket.\\n     * @param amount The amount of PMX tokens to withdraw.\\n     */\\n    function withdrawPmx(address bucket, Role role, uint256 amount) external;\\n\\n    /**\\n     * @notice Decreases the reward per day for a bucket and role.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param bucket The address of the bucket for which to decrease the reward per day.\\n     * @param role The role associated with the bucket.\\n     * @param rewardPerDay The amount by which to decrease the reward per day.\\n     */\\n    function decreaseRewardPerDay(address bucket, Role role, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Returns the accumulated reward for a specific bucket and role.\\n     * @param bucket The address of the bucket for which to retrieve the accumulated reward.\\n     * @param role The role associated with the bucket.\\n     * @return The accumulated reward for the specified bucket and role.\\n     */\\n    function getBucketAccumulatedReward(address bucket, Role role) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable reward for a user across multiple buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets to check for claimable rewards.\\n     * @param user The address of the user for whom to calculate the claimable reward.\\n     * @return The total claimable reward for the specified user across all provided buckets.\\n     */\\n    function getClaimableReward(BucketWithRole[] calldata bucketsArray, address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the user information from a specific bucket and role.\\n     * @param bucket The address of the bucket from which to retrieve the user information.\\n     * @param role The role associated with the bucket.\\n     * @param user The address of the user for whom to retrieve the information.\\n     * @return A UserInfo struct containing the user information.\\n     */\\n    function getUserInfoFromBucket(address bucket, Role role, address user) external view returns (UserInfo memory);\\n}\\n\",\"keccak256\":\"0xeec30381ae5c694a65a51d831704f2f2d9a969ae6c7ff1901a89c1bc2e668cb3\",\"license\":\"BUSL-1.1\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface IActivityRewardDistributorStorage {\\n    /*\\n     * @param oldBalance last updated balance for user\\n     * @param fixedReward the accumulated value of the reward at the time lastUpdatedRewardIndex\\n     * @param lastUpdatedRewardIndex last index with which the user's reward was accumulated\\n     */\\n    struct UserInfo {\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardIndex;\\n        uint256 oldBalance;\\n    }\\n\\n    /*\\n     * @param users data to calculate users rewards in this bucket\\n     * @param rewardIndex an index that accumulates user rewards\\n     * @param lastUpdatedTimestamp timestamp of the last update of user activity\\n     * @param rewardPerToken current reward for one token(PToken or DebtToken of bucket)\\n     * @param isFinished Shows that the bucket has distributed all the rewards\\n     * @param fixedReward reward distributed by a bucket over the past period\\n     * with a certain reward per day or with the entire reward fully distributed\\n     * @param lastUpdatedRewardTimestamp timestamp of last fixed reward update\\n     * @param rewardPerDay current reward distributed for 1 day\\n     * @param totalReward Full distributable reward\\n     * @param endTimestamp end time of the distribution of rewards, which is calculated relative to the rewardPerDay and totalReward\\n     */\\n    struct BucketInfo {\\n        mapping(address => UserInfo) users;\\n        //accumulated reward per token\\n        uint256 rewardIndex;\\n        uint256 lastUpdatedTimestamp;\\n        uint256 rewardPerToken;\\n        uint256 scaledTotalSupply;\\n        bool isFinished;\\n        // setted by admin's actions\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardTimestamp;\\n        uint256 rewardPerDay;\\n        uint256 totalReward;\\n        uint256 endTimestamp;\\n    }\\n\\n    function pmx() external returns (IERC20);\\n\\n    function dns() external returns (IPrimexDNSV3);\\n\\n    function registry() external returns (address);\\n\\n    function traderBalanceVault() external returns (ITraderBalanceVault);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc93484ae76ebd5ec509e1fb1b5efee69159abcbee241f97c04579770d0573287\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IFeeExecutorStorage} from \\\"./IFeeExecutorStorage.sol\\\";\\n\\ninterface IFeeExecutor is IFeeExecutorStorage {\\n    /**\\n     * @dev Sets tier bonuses for a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @param _tiers The array of tier values.\\n     * @param _bonuses The array of NFT bonus parameters.\\n     */\\n    function setTierBonus(address _bucket, uint256[] calldata _tiers, NFTBonusParams[] calldata _bonuses) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the Debt-Token\\n     * @param _user User for which the bonus will be updated. If user doesn't have the bonus for paused\\n     * @param _oldScaledBalance Balance of the user before the operation at which the updateBonus function was called (e.g mint/burn)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonus(address _user, uint256 _oldScaledBalance, address _bucket, uint256 _currentIndex) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called directly by the user\\n     * @param _nftId Id of activated token\\n     **/\\n    function updateBonus(uint256 _nftId) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the P-Token or Debt-Token\\n     * @param _users Array of the users for whom the bonus will be updated.\\n     * @param _oldBalances Array of the balances before the operation at which the updateBonus function was called (e.g mint/transfer)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonuses(\\n        address[] memory _users,\\n        uint256[] memory _oldBalances,\\n        address _bucket,\\n        uint256 _currentIndex\\n    ) external;\\n\\n    /**\\n     * @dev Returns accumulated amount of p-tokens at the moment\\n     * @param _user The user for which the accumatedAmount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     * @return The accumulated amount.\\n     */\\n    function getAccumulatedAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the available amount (accumulated - claimedAmount) of p-tokens at the moment.\\n     * @param _user The user for which the available amount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     **/\\n    function getAvailableAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the bonus information for a user and NFT.\\n     * @param _user The address of the user.\\n     * @param _nftId The ID of the NFT.\\n     * @return bonus The activated bonus information.\\n     */\\n    function getBonus(address _user, uint256 _nftId) external view returns (ActivatedBonus memory);\\n}\\n\",\"keccak256\":\"0x53e9c9edcec4c00b7cbac171770da68af43b39a4c7a36d1813c3ea03588e81e1\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\n\\ninterface IFeeExecutorStorage {\\n    struct ActivatedBonus {\\n        uint256 nftId;\\n        IBucketV3 bucket;\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 accumulatedAmount;\\n        uint256 lastUpdatedIndex;\\n        uint256 deadline;\\n        //if we allow to claim funds before the end of the bonus\\n        uint256 claimedAmount;\\n    }\\n\\n    struct NFTBonusParams {\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 duration;\\n    }\\n}\\n\",\"keccak256\":\"0x0e7e8db0434b1c208e47cea395f710edbbcf70bc97d4ce363a8b9c36a8a91205\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucket.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManager, IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS, IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\nimport {ISwapManager} from \\\"../SwapManager/ISwapManager.sol\\\";\\nimport {IBucketStorage} from \\\"./IBucketStorage.sol\\\";\\nimport {IBucketEvents} from \\\"./IBucketEvents.sol\\\";\\n\\ninterface IBucket is IBucketStorage, IBucketEvents {\\n    struct ConstructorParams {\\n        string name;\\n        IPToken pToken;\\n        IDebtToken debtToken;\\n        IPositionManager positionManager;\\n        IPriceOracle priceOracle;\\n        IPrimexDNS dns;\\n        IReserve reserve;\\n        IWhiteBlackList whiteBlackList;\\n        address[] assets;\\n        IERC20Metadata borrowedAsset;\\n        uint256 feeBuffer;\\n        uint256 withdrawalFeeRate;\\n        uint256 reserveRate;\\n        // liquidityMining params\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        uint256 liquidityMiningAmount;\\n        uint256 liquidityMiningDeadline;\\n        uint256 stabilizationDuration;\\n        IInterestRateStrategy interestRateStrategy;\\n        uint128 estimatedBar;\\n        uint128 estimatedLar;\\n        uint256 maxAmountPerUser;\\n        bool isReinvestToAaveEnabled;\\n        bytes barCalcParams;\\n        uint256 maxTotalDeposit;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed pTokenReceiver, uint256 amount);\\n\\n    event DepositToAave(address indexed pool, uint256 amount);\\n\\n    event FeeBufferChanged(uint256 feeBuffer);\\n\\n    event ReserveRateChanged(uint256 reserveRate);\\n\\n    event RatesIndexesUpdated(\\n        uint128 bar,\\n        uint128 lar,\\n        uint128 variableBorrowIndex,\\n        uint128 liquidityIndex,\\n        uint256 timestamp\\n    );\\n\\n    event WithdrawalFeeChanged(uint256 withdrawalFeeRate);\\n\\n    event InterestRateStrategyChanged(address interestRateStrategy);\\n\\n    event AddAsset(address addedAsset);\\n\\n    event RemoveAsset(address deletedAsset);\\n\\n    event MaxTotalDepositChanged(uint256 maxTotalDeposit);\\n\\n    event BarCalculationParamsChanged(bytes params);\\n\\n    event BucketLaunched();\\n\\n    /**\\n     * @dev Initializes the contract with the given parameters.\\n     * @param _params The ConstructorParams struct containing initialization parameters.\\n     * @param _registry The address of the registry contract.\\n     */\\n    function initialize(ConstructorParams memory _params, address _registry) external;\\n\\n    /**\\n     * @dev Function to add new trading asset for this bucket\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _newAsset The address of trading asset\\n     */\\n    function addAsset(address _newAsset) external;\\n\\n    /**\\n     * @notice Removes a trading asset from this bucket.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _assetToDelete The address of the asset to be removed.\\n     */\\n    function removeAsset(address _assetToDelete) external;\\n\\n    /**\\n     * @dev Sets barCalculationParams (urOptimal, k0, k1, b0, b1)\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Sets the reserve rate.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _reserveRate The new reserve rate value.\\n     */\\n    function setReserveRate(uint256 _reserveRate) external;\\n\\n    /**\\n     * @dev Sets the new fee buffer.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _feeBuffer The new fee buffer value.\\n     */\\n    function setFeeBuffer(uint256 _feeBuffer) external;\\n\\n    /**\\n     * @dev Sets the withdrawal fee.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _withdrawalFee The new withdrawal fee value.\\n     */\\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\\n\\n    /**\\n     * @dev Sets the interest rate strategy contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _interestRateStrategy The address of the interest rate strategy contract.\\n     */\\n    function setInterestRateStrategy(address _interestRateStrategy) external;\\n\\n    /**\\n     * @notice The function sets the max total deposit for the particular bucket\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _maxTotalDeposit The amount of max total deposit for the bucket\\n     */\\n    function setMaxTotalDeposit(uint256 _maxTotalDeposit) external;\\n\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraws the 'amount' of underlying asset from the bucket. The 'amount' of overlying pTokens will be burned.\\n     * @param _borrowAssetReceiver The address of receiver of the borrowed asset.\\n     * @param amount The amount of underlying tokens to be withdrawn.\\n     */\\n    function withdraw(address _borrowAssetReceiver, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the BIG_TIMELOCK_ADMIN role to withdraw a specified amount of tokens after delisting.\\n     * @param _amount The amount of tokens to withdraw.\\n     */\\n    function withdrawAfterDelisting(uint256 _amount) external;\\n\\n    /**\\n     * @dev Receives a deposit and distributes it to the specified pToken receiver.\\n     * @dev Can be called only by another bucket.\\n     * @param _pTokenReceiver The address of the recipient of the pToken.\\n     * @param _amount The amount of tokens being deposited.\\n     * @param _duration The blocking time for a fixed-term deposit (if it's 0, then it will be a usual deposit)\\n     * @param _bucketFrom The name of the bucket from which the deposit is being made.\\n     */\\n    function receiveDeposit(\\n        address _pTokenReceiver,\\n        uint256 _amount,\\n        uint256 _duration,\\n        string memory _bucketFrom\\n    ) external;\\n\\n    /**\\n     * @notice Deposits (reinvests) funds from a bucket to another bucket.\\n     * Used only in the case of failed liquidity mining in the bucket from where the transfer happens.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _swapManager The address of the swap manager.\\n     * @param _megaRoutes The array of routes for swapping tokens.\\n     * @param _amountOutMin The minimum amount of tokens to receive from the swap.\\n     */\\n    function depositFromBucket(\\n        string calldata _bucketTo,\\n        ISwapManager _swapManager,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @dev Allows the SMALL_TIMELOCK_ADMIN to withdraw all liquidity from Aave to Bucket.\\n     */\\n    function returnLiquidityFromAaveToBucket() external;\\n\\n    /**\\n     * @dev Function to update rates and indexes when a trader opens a trading position.\\n     * Mints debt tokens to trader. Calls only by positionManager contract.\\n     * @param _trader The address of the trader, who opens position.\\n     * @param _amount The 'amount' for which the deal is open, and 'amount' of debtTokens will be minted to the trader.\\n     * @param _to The address to transfer the borrowed asset to.\\n     */\\n\\n    function increaseDebt(address _trader, uint256 _amount, address _to) external;\\n\\n    /**\\n     * @dev Function to update rates and indexes.\\n     * Burns debt tokens of trader. Called only by positionManager contract.\\n     * @param _trader The address of the trader, who opened position.\\n     * @param _debtToBurn The 'amount' of trader's debtTokens will be burned by the trader.\\n     * @param _receiverOfAmountToReturn Treasury in case of liquidation. TraderBalanceVault in other cases\\n     * @param _amountToReturn Amount to transfer from bucket\\n     * @param _permanentLossAmount The amount of the protocol's debt to creditors accrued for this position\\n     */\\n    function decreaseTraderDebt(\\n        address _trader,\\n        uint256 _debtToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount\\n    ) external;\\n\\n    /**\\n     * @notice Batch decreases the debt of multiple traders.\\n     * @dev This function can only be called by the BATCH_MANAGER_ROLE.\\n     * @param _traders An array of addresses representing the traders.\\n     * @param _debtsToBurn An array of uint256 values representing the debts to burn for each trader.\\n     * @param _receiverOfAmountToReturn The address that will receive the amount to be returned.\\n     * @param _amountToReturn The amount to be returned.\\n     * @param _permanentLossAmount The amount of permanent loss.\\n     * @param _length The length of the traders array.\\n     */\\n    function batchDecreaseTradersDebt(\\n        address[] memory _traders,\\n        uint256[] memory _debtsToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount,\\n        uint256 _length\\n    ) external;\\n\\n    /**\\n     * @notice This function allows a user to pay back a permanent loss by burning his pTokens.\\n     * @param amount The amount of pTokens to be burned to pay back the permanent loss.\\n     */\\n    function paybackPermanentLoss(uint256 amount) external;\\n\\n    /**\\n     * @dev Calculates the permanent loss based on the scaled permanent loss and the normalized income.\\n     * @return The amount of permanent loss.\\n     */\\n    function permanentLoss() external view returns (uint256);\\n\\n    /**\\n     * @dev Checks if the bucket is deprecated in the protocol.\\n     * @return Whether the bucket is deprecated or not.\\n     */\\n    function isDeprecated() external view returns (bool);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is delisted.\\n     * @return True if the bucket is delisted, otherwise false.\\n     */\\n    function isDelisted() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if an admin can withdraw from the bucket after delisting.\\n     * @return A boolean indicating whether withdrawal is available.\\n     */\\n    function isWithdrawAfterDelistingAvailable() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if this bucket is active in the protocol.\\n     * @return bool True if the bucket is active, false otherwise.\\n     */\\n    function isActive() external view returns (bool);\\n\\n    /**\\n     * @dev Returns the parameters for liquidity mining.\\n     * @return LMparams The liquidity mining parameters.\\n     */\\n    function getLiquidityMiningParams() external view returns (LiquidityMiningParams memory);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is stable in the liquidity mining event.\\n     * @return A boolean value representing the stability of the bucket.\\n     */\\n    function isBucketStable() external view returns (bool);\\n\\n    /**\\n     * @dev Calculates the max leverage according to the following formula:\\n     * ((1 + maintenanceBuffer) * feeBuffer) / ((1 + maintenanceBuffer) * feeBuffer - (1 - securityBuffer) *\\n     * (1 - pairPriceDropBA) * (1 - oracleTolerableLimitAB) * (1 - oracleTolerableLimitBA))\\n     * @param _asset The address of trading asset\\n     * @return The maximum leverage as a uint256 value.\\n     */\\n    function maxAssetLeverage(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized income per unit of underlying asset, expressed in ray\\n     * @return The normalized income per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedIncome() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedVariableDebt() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns allowed trading assets for current bucket\\n     * @return List of addresses of allowed assets\\n     */\\n    function getAllowedAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns current avalable liquidity of borrowedAsset for trading.\\n     * @return The amount of available borrowedAsset\\n     */\\n    function availableLiquidity() external view returns (uint256);\\n}\\n\\ninterface IBucketV2 is IBucket {\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit from user wallet\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount, bool _takeDepositFromWallet) external;\\n}\\n\\ninterface IBucketV3 is IBucketV2 {\\n    event ChangedBucketExtension(address newBucketExtension);\\n\\n    /**\\n     * @dev Calculates the max leverage according to the following formula:\\n     * ((1 + maintenanceBuffer) * feeBuffer) / ((1 + maintenanceBuffer) * feeBuffer - (1 - securityBuffer) *\\n     * (1 - pairPriceDropBA) * (1 - oracleTolerableLimitAB) * (1 - oracleTolerableLimitBA) + protocolFeeInPositiontAsset / positionSize)\\n     * @param _asset The address of trading asset\\n     * @param _feeRate The ratio of protocolFeeInPositionAsset to positionSize\\n     * @return The maximum leverage as a uint256 value.\\n     */\\n    function maxAssetLeverage(address _asset, uint256 _feeRate) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the bucketExtension.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newBucketExtension The address of BucketExtension contract.\\n     */\\n    function setBucketExtension(address _newBucketExtension) external;\\n}\\n\\ninterface IBucketV4 is IBucketV3 {\\n    /**\\n     * @notice Performs a flash loan transfer of a specified amount to a receiver address.\\n     * @dev Only callable by the FLASH_LOAN_MANAGER_ROLE role.\\n     * @param _to The address to which the flash loan amount will be transferred.\\n     * @param _amount The amount of tokens to transfer in the flash loan.\\n     */\\n    function performFlashLoanTransfer(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Accumulates a predefined amount of asset to the bucket as a fixed, instantaneous income. Used\\n     * to accumulate the flashloan fee to the bucket, and spread it between all the suppliers.\\n     * @dev Only callable by the FLASH_LOAN_MANAGER_ROLE role.\\n     * @param amount The amount to accumulate\\n     * @param availableLiquidity The availableLiquidity before flashLoan\\n     */\\n    function cumulateToLiquidityIndex(uint256 amount, uint256 availableLiquidity) external;\\n\\n    /**\\n     * @notice Updates bucket's BAR and LAR.\\n     * @dev Only callable by the FLASH_LOAN_MANAGER_ROLE role.\\n     */\\n    function updateRates() external;\\n}\\n\",\"keccak256\":\"0x2b9127c5ba8e7c9ceb708d1490b85d8c3552fd05d531a74df8ad5dae8e9ec5e3\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucketEvents.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IBucketEvents {\\n    event WithdrawFromAave(address indexed pool, uint256 amount);\\n    event Withdraw(address indexed withdrawer, address indexed borrowAssetReceiver, uint256 amount);\\n    event TopUpTreasury(address indexed sender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xefe6ff5ba4275599f84dff3e9accda189d62681a99c2851a843925c287a045ba\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucketStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\n\\ninterface IBucketStorage {\\n    /**\\n     * @dev Parameters of liquidity mining\\n     */\\n    struct LiquidityMiningParams {\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        bool isBucketLaunched;\\n        uint256 accumulatingAmount;\\n        uint256 deadlineTimestamp;\\n        uint256 stabilizationDuration;\\n        uint256 stabilizationEndTimestamp;\\n        uint256 maxAmountPerUser; // if maxAmountPerUser is >= accumulatingAmount then check on maxAmountPerUser is off\\n        // Constant max variables are used for calculating users' points.\\n        // These intervals are used for fair distribution of points among Lenders.\\n        // Lenders who brought liquidity earlier receive more than the ones who deposited later.\\n        // To get maximum points per token, a Lender should deposit immediately after the Bucket deployment.\\n        uint256 maxDuration;\\n        uint256 maxStabilizationEndTimestamp;\\n    }\\n    //                                        1. Corner case of bucket launch\\n    //\\n    //                                              maxDuration\\n    //       ------------------------------------------------------------------------------------------------\\n    //      |                                                                                               |\\n    //      |                                                                        stabilizationDuration  |\\n    //      |                                                                      -------------------------|\\n    //      |                                                                     | bucket launch           |\\n    //   +--+---------------------------------------------------------------------+-------------------------+------> time\\n    //      bucket deploy                                                         deadlineTimestamp         maxStabilizationEndTimestamp\\n    //                                                                                                       (=stabilizationEndTimestamp here)\\n    //                                  (corner case of bucket launch)\\n\\n    //                                        2. One of cases of bucket launch\\n    //\\n    //      |                     stabilizationDuration\\n    //      |                   -------------------------\\n    //      |                  |                         |\\n    //   +--+------------------+-------------------------+------------------------+-------------------------+------> time\\n    //      bucket deploy      bucket launch            stabilizationEndTimestamp  deadlineTimestamp        maxStabilizationEndTimestamp\\n    //                                                                            (after deadline bucket can't be launched)\\n\\n    struct Asset {\\n        uint256 index;\\n        bool isSupported;\\n    }\\n\\n    function liquidityIndex() external returns (uint128);\\n\\n    function variableBorrowIndex() external returns (uint128);\\n\\n    function name() external view returns (string memory);\\n\\n    function registry() external view returns (address);\\n\\n    function positionManager() external view returns (IPositionManagerV2);\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function permanentLossScaled() external view returns (uint256);\\n\\n    function pToken() external view returns (IPToken);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowedAsset() external view returns (IERC20Metadata);\\n\\n    function feeBuffer() external view returns (uint256);\\n\\n    function withdrawalFeeRate() external view returns (uint256);\\n\\n    /**\\n     * @notice bar = borrowing annual rate (originally APR)\\n     */\\n    function bar() external view returns (uint128);\\n\\n    /**\\n     * @notice lar = lending annual rate (originally APY)\\n     */\\n    function lar() external view returns (uint128);\\n\\n    function interestRateStrategy() external view returns (IInterestRateStrategy);\\n\\n    function estimatedBar() external view returns (uint128);\\n\\n    function estimatedLar() external view returns (uint128);\\n\\n    function allowedAssets(address _asset) external view returns (uint256, bool);\\n\\n    function whiteBlackList() external view returns (IWhiteBlackList);\\n\\n    function maxTotalDeposit() external view returns (uint256);\\n}\\n\\ninterface IBucketStorageV2 {\\n    function bucketExtension() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d992b76b9281db2418f75de141b8f002edb793224bbe265decd3433bc2fce3a\",\"license\":\"BUSL-1.1\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\nimport {IArbGasInfo} from \\\"./interfaces/IArbGasInfo.sol\\\";\\nimport {IOVM_GasPriceOracle} from \\\"./interfaces/IOVM_GasPriceOracle.sol\\\";\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_MANAGER_ROLE = keccak256(\\\"FLASH_LOAN_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_FREE_BORROWER_ROLE = keccak256(\\\"FLASH_LOAN_FREE_BORROWER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\naddress constant NATIVE_CURRENCY_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\\n// constants for Arbitrum payment model\\nIArbGasInfo constant ARB_NITRO_ORACLE = IArbGasInfo(0x000000000000000000000000000000000000006C);\\nuint256 constant TRANSACTION_METADATA_BYTES = 140;\\n\\nIOVM_GasPriceOracle constant OVM_GASPRICEORACLE = IOVM_GasPriceOracle(0x420000000000000000000000000000000000000F);\\n\\nuint256 constant GAS_FOR_BYTE = 16;\\n\\n// Magic values\\nuint256 constant TRADER_MAGIC_TIER = uint256(keccak256(\\\"TRADER_MAGIC_TIER\\\"));\\nuint256 constant LENDER_MAGIC_TIER = uint256(keccak256(\\\"LENDER_MAGIC_TIER\\\"));\\nuint256 constant FARMING_MAGIC_TIER = uint256(keccak256(\\\"FARMING_MAGIC_TIER\\\"));\\n\",\"keccak256\":\"0x806aeb2d3007701f19dd16fb2765b3e50c548869ca19310f096059b83ca339b5\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtToken.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IDebtTokenStorage, IBucket, IFeeExecutor, IERC20Upgradeable, IActivityRewardDistributor} from \\\"./IDebtTokenStorage.sol\\\";\\n\\ninterface IDebtToken is IDebtTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     **/\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after DebtTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     **/\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the FeeDecreaser for current DebtToken.\\n     * @param _feeDecreaser The interest increaser address.\\n     */\\n    function setFeeDecreaser(IFeeExecutor _feeDecreaser) external;\\n\\n    /**\\n     * @dev Sets the trader reward distributor contract address.\\n     * @param _traderRewardDistributor The address of the trader reward distributor contract.\\n     * Only the BIG_TIMELOCK_ADMIN role can call this function.\\n     */\\n    function setTraderRewardDistributor(IActivityRewardDistributor _traderRewardDistributor) external;\\n\\n    /**\\n     * @dev Mints `amount` DebtTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current variableBorrowIndex\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns DebtTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the DebtTokens, getting them burned\\n     * @param _amount The amount being burned\\n     * @param _index The current variableBorrowIndex\\n     **/\\n    function burn(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns a batch of tokens from multiple users.\\n     * @param _users An array of user addresses whose tokens will be burned.\\n     * @param _amounts An array of token amounts to be burned for each user.\\n     * @param _index The index used to calculate the scaled amounts.\\n     * @param _length The length of the user and amounts arrays.\\n     */\\n    function batchBurn(address[] memory _users, uint256[] memory _amounts, uint256 _index, uint256 _length) external;\\n\\n    /**\\n     * @dev Returns the principal debt balance of the user\\n     * @param _user The address of the user.\\n     * @return The scaled balance of the user.\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of debtToken.\\n     * @return The scaled total supply of the debtToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xeb40ae51d2d32f11c8db3712dadffb01789ef30e2cb92643f707afcdc2223af1\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtTokenStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {IBucket, IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IDebtTokenStorage is IERC20Upgradeable {\\n    function bucket() external view returns (IBucketV3);\\n\\n    function feeDecreaser() external view returns (IFeeExecutor);\\n\\n    function traderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0x3839c065a8b034a56bcaf23d06be78df5d042f699944d5435d202eddab39e6ef\",\"license\":\"BUSL-1.1\"},\"contracts/DexAdapter.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport {ISwapRouter as ISwapRouterAlgebraV3} from \\\"@cryptoalgebra/solidity-interfaces/contracts/periphery/ISwapRouter.sol\\\";\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\nimport {IQuoter as IQuoterAlgebraV3} from \\\"@cryptoalgebra/solidity-interfaces/contracts/periphery/IQuoter.sol\\\";\\nimport {WadRayMath} from \\\"./libraries/utils/WadRayMath.sol\\\";\\nimport {V3Path} from \\\"./libraries/utils/V3Path.sol\\\";\\nimport {TokenApproveLibrary} from \\\"./libraries/TokenApproveLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"./libraries/PrimexPricingLibrary.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IPrimexDNSV3} from \\\"./PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IAugustusSwapper} from \\\"./interfaces/IAugustusSwapper.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\n\\nimport {MEDIUM_TIMELOCK_ADMIN, BIG_TIMELOCK_ADMIN, VAULT_ACCESS_ROLE, NATIVE_CURRENCY, NATIVE_CURRENCY_CURVE} from \\\"./Constants.sol\\\";\\nimport {IBalancer} from \\\"./interfaces/IBalancer.sol\\\";\\nimport {IAsset} from \\\"./interfaces/IAsset.sol\\\";\\nimport {IDexAdapter} from \\\"./interfaces/IDexAdapter.sol\\\";\\nimport {ICurveRouter} from \\\"./interfaces/routers/ICurveRouter.sol\\\";\\nimport {IWNative} from \\\"./interfaces/IWNative.sol\\\";\\n\\ncontract DexAdapter is IDexAdapter, IERC165, Initializable {\\n    using WadRayMath for uint256;\\n    using V3Path for bytes;\\n\\n    struct Call {\\n        address target;\\n        bytes callData;\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    mapping(address => DexType) public override dexType;\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    mapping(address => address) public override quoters;\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    address public immutable override registry;\\n\\n    IPrimexDNSV3 public primexDNS;\\n\\n    /**\\n     * @dev e.g WETH or WMATIC\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    IWNative public immutable WNative;\\n\\n    receive() external payable override {}\\n\\n    /**\\n     * @dev Throws if caller is not granted with _role\\n     * @param _role The role that is being checked for a function caller\\n     */\\n    modifier onlyRole(bytes32 _role) {\\n        _require(IAccessControl(registry).hasRole(_role, msg.sender), Errors.FORBIDDEN.selector);\\n        _;\\n    }\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    constructor(address _registry, address _WNative) {\\n        _require(\\n            IERC165(_registry).supportsInterface(type(IAccessControl).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        registry = _registry;\\n        WNative = IWNative(_WNative);\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    function initialize(address _primexDNS) external override initializer onlyRole(BIG_TIMELOCK_ADMIN) {\\n        _require(\\n            IERC165(_primexDNS).supportsInterface(type(IPrimexDNSV3).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        primexDNS = IPrimexDNSV3(_primexDNS);\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    function setQuoter(address _dexRouter, address _quoter) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        _require(uint256(dexType[_dexRouter]) > 0, Errors.DEX_ROUTER_NOT_SUPPORTED.selector);\\n        _require(_quoter != address(0), Errors.QUOTER_NOT_SUPPORTED.selector);\\n        quoters[_dexRouter] = _quoter;\\n        emit QuoterChanged(_dexRouter, _quoter);\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    function setDexType(address _dexRouter, uint256 _dexType) external override onlyRole(MEDIUM_TIMELOCK_ADMIN) {\\n        _require(_dexRouter != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        dexType[_dexRouter] = DexType(_dexType);\\n        emit DexTypeChanged(_dexRouter, _dexType);\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n\\n    function performMegaRoutesSwap(\\n        PrimexPricingLibrary.MegaSwapParams calldata _params\\n    ) external payable override returns (uint256) {\\n        _require(_params.deadline >= block.timestamp, Errors.SWAP_DEADLINE_PASSED.selector);\\n        MegaSwapVars memory vars;\\n\\n        for (uint256 i; i < _params.megaRoutes.length; i++) {\\n            vars.sumOfShares += _params.megaRoutes[i].shares;\\n        }\\n        _require(vars.sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n\\n        vars.remainder = _params.amountTokenA;\\n\\n        for (uint256 i; i < _params.megaRoutes.length - 1; i++) {\\n            vars.amountOnMegaRoute = (_params.amountTokenA * _params.megaRoutes[i].shares) / vars.sumOfShares;\\n            vars.remainder -= vars.amountOnMegaRoute;\\n            vars.totalAmount += performRoutesSwap(\\n                _params.tokenA,\\n                vars.amountOnMegaRoute,\\n                _params.receiver,\\n                _params.megaRoutes[i].routes\\n            );\\n        }\\n        //perform the last route with the remainder\\n        vars.totalAmount += performRoutesSwap(\\n            _params.tokenA,\\n            vars.remainder,\\n            _params.receiver,\\n            _params.megaRoutes[_params.megaRoutes.length - 1].routes\\n        );\\n        return vars.totalAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    function swapExactTokensForTokens(SwapParams memory _params) external payable override returns (uint256[3] memory) {\\n        _require(_params.to != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        _require(_params.amountIn != 0, Errors.ZERO_AMOUNT_IN.selector);\\n        return _swapExactTokensForTokens(_params);\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n\\n    function getAmountOutByMegaRoutes(AmountParams calldata _params) external override returns (uint256) {\\n        _require(_params.tokenA != _params.tokenB, Errors.IDENTICAL_ASSETS.selector);\\n\\n        MegaSwapVars memory vars;\\n\\n        for (uint256 i; i < _params.megaRoutes.length; i++) {\\n            vars.sumOfShares += _params.megaRoutes[i].shares;\\n        }\\n        _require(vars.sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n        vars.remainder = _params.amount;\\n\\n        for (uint256 i; i < _params.megaRoutes.length - 1; i++) {\\n            vars.amountOnMegaRoute = (_params.amount * _params.megaRoutes[i].shares) / vars.sumOfShares;\\n            vars.remainder -= vars.amountOnMegaRoute;\\n            vars.totalAmount += getAmountsOutByRoutes(vars.amountOnMegaRoute, _params.megaRoutes[i].routes);\\n        }\\n        // getting amountOut for the last route\\n        vars.totalAmount += getAmountsOutByRoutes(\\n            vars.remainder,\\n            _params.megaRoutes[_params.megaRoutes.length - 1].routes\\n        );\\n\\n        return vars.totalAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n\\n    function getAmountInByMegaRoutes(AmountParams calldata _params) external override returns (uint256) {\\n        _require(_params.tokenA != _params.tokenB, Errors.IDENTICAL_ASSETS.selector);\\n\\n        MegaSwapVars memory vars;\\n\\n        for (uint256 i; i < _params.megaRoutes.length; i++) {\\n            vars.sumOfShares += _params.megaRoutes[i].shares;\\n        }\\n        _require(vars.sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n        //amount is amountOut\\n        vars.remainder = _params.amount;\\n\\n        for (uint256 i; i < _params.megaRoutes.length - 1; i++) {\\n            vars.amountOnMegaRoute = (_params.amount * _params.megaRoutes[i].shares) / vars.sumOfShares;\\n            vars.remainder -= vars.amountOnMegaRoute;\\n            vars.totalAmount += getAmountsInByRoutes(vars.amountOnMegaRoute, _params.megaRoutes[i].routes);\\n        }\\n        //getting amountIn for the last route\\n        vars.totalAmount += getAmountsInByRoutes(\\n            vars.remainder,\\n            _params.megaRoutes[_params.megaRoutes.length - 1].routes\\n        );\\n\\n        return vars.totalAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    function getGas(address dexRouter) external view override returns (uint256) {\\n        _require(dexRouter != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        DexType type_ = dexType[dexRouter];\\n        // These values are average taken from the gas tracker in etherscan\\n        // The actual values depend on many variables especially the more complex dex such as uniswap v3\\n        if (type_ == DexType.UniswapV2) {\\n            return 152809;\\n        } else if (type_ == DexType.UniswapV3 || type_ == DexType.AlgebraV3) {\\n            return 184523;\\n        } else if (type_ == DexType.Curve) {\\n            return 183758;\\n        } else if (type_ == DexType.Balancer) {\\n            return 196625;\\n        } else if (type_ == DexType.Meshswap) {\\n            return 271000;\\n        } else {\\n            _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n\\n    function performRoutesSwap(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address receiver,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) public payable override returns (uint256) {\\n        //amountInOnRoute will be either amountIn or amountOut of the previous route\\n        uint256 amountInOnRoute = amountIn;\\n        for (uint256 i; i < routes.length; i++) {\\n            //tokenInOnRoute will be either tokenIn or tokenOutOnRoute of the previous route\\n            address tokenInOnRoute = i > 0 ? routes[i - 1].to : tokenIn;\\n            address tokenOutOnRoute = routes[i].to;\\n            amountInOnRoute = performPathsSwap(\\n                tokenInOnRoute,\\n                tokenOutOnRoute,\\n                amountInOnRoute,\\n                i == routes.length - 1 ? receiver : address(this),\\n                routes[i].paths\\n            );\\n        }\\n        // at the last iteration amountInOnRoute will be amountOut of the last route\\n        return amountInOnRoute;\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    function performPathsSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address receiver,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) public payable override returns (uint256) {\\n        uint256 sumOfShares;\\n        uint256 totalAmount;\\n\\n        for (uint256 i; i < paths.length; i++) {\\n            sumOfShares += paths[i].shares;\\n        }\\n\\n        _require(sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n        uint256 remainder = amountIn;\\n        SwapParams memory swapParams;\\n        swapParams.deadline = block.timestamp;\\n        swapParams.tokenIn = tokenIn;\\n        swapParams.tokenOut = tokenOut;\\n        swapParams.to = receiver;\\n        for (uint256 i; i < paths.length - 1; i++) {\\n            swapParams.amountIn = (amountIn * paths[i].shares) / sumOfShares;\\n            remainder -= swapParams.amountIn;\\n            swapParams.encodedPath = paths[i].payload;\\n            swapParams.dexRouter = primexDNS.getDexAddress(paths[i].dexName);\\n            totalAmount += _swapExactTokensForTokens(swapParams)[1];\\n        }\\n        // swap for the last path\\n        swapParams.amountIn = remainder;\\n        swapParams.encodedPath = paths[paths.length - 1].payload;\\n        swapParams.dexRouter = primexDNS.getDexAddress(paths[paths.length - 1].dexName);\\n        totalAmount += _swapExactTokensForTokens(swapParams)[1];\\n        return totalAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    function getAmountsOutByRoutes(\\n        uint256 amountIn,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) public override returns (uint256) {\\n        //amountInOnRoute will be either amountIn or amountOut of the previous route\\n        uint256 amountInOnRoute = amountIn;\\n        for (uint256 i; i < routes.length; i++) {\\n            amountInOnRoute = getAmountsOutByPaths(amountInOnRoute, routes[i].paths);\\n        }\\n        // at the last iteration amountInOnRoute will be amountOut of the last route\\n        return amountInOnRoute;\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n\\n    function getAmountsOutByPaths(\\n        uint256 amountIn,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) public override returns (uint256) {\\n        uint256 sumOfShares;\\n        uint256 totalAmount;\\n\\n        for (uint256 i; i < paths.length; i++) {\\n            sumOfShares += paths[i].shares;\\n        }\\n\\n        _require(sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n        uint256 remainder = amountIn;\\n        GetAmountsParams memory getAmountsParams;\\n        for (uint256 i; i < paths.length - 1; i++) {\\n            getAmountsParams.amount = (amountIn * paths[i].shares) / sumOfShares;\\n            remainder -= getAmountsParams.amount;\\n            getAmountsParams.encodedPath = paths[i].payload;\\n            getAmountsParams.dexRouter = primexDNS.getDexAddress(paths[i].dexName);\\n            totalAmount += getAmountsOut(getAmountsParams)[1];\\n        }\\n        //getting amountOut for the last path\\n        getAmountsParams.amount = remainder;\\n        getAmountsParams.encodedPath = paths[paths.length - 1].payload;\\n        getAmountsParams.dexRouter = primexDNS.getDexAddress(paths[paths.length - 1].dexName);\\n        totalAmount += getAmountsOut(getAmountsParams)[1];\\n        return totalAmount;\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n\\n    function getAmountsOut(GetAmountsParams memory _params) public override returns (uint256[3] memory) {\\n        _checkAmountsParams(_params);\\n        DexType type_ = dexType[_params.dexRouter];\\n\\n        if (type_ == DexType.UniswapV2 || type_ == DexType.Meshswap) {\\n            return _getAmountsWithUniswapV2(_params);\\n        } else if (type_ == DexType.UniswapV3) {\\n            return _getAmountsWithUniswapV3(_params);\\n        } else if (type_ == DexType.Curve) {\\n            return _getAmountsWithCurve(_params);\\n        } else if (type_ == DexType.Balancer) {\\n            return _getAmountsWithBalancer(_params);\\n        } else if (type_ == DexType.AlgebraV3) {\\n            return _getAmountsWithAlgebraV3(_params);\\n        } else {\\n            _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n\\n    function getAmountsInByRoutes(\\n        uint256 amountOut,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) public override returns (uint256) {\\n        //amountOutOnRoute will be either amountOut or amountIn of the previous route (in reverse order)\\n        uint256 amountOutOnRoute = amountOut;\\n\\n        for (uint256 i = routes.length; i > 0; i--) {\\n            // i - 1 == current index\\n            amountOutOnRoute = getAmountsInByPaths(amountOutOnRoute, routes[i - 1].paths);\\n        }\\n        // at the last iteration amountOutOnRoute will be amountIn of the first route\\n        return amountOutOnRoute;\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n\\n    function getAmountsInByPaths(\\n        uint256 amountOut,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) public override returns (uint256) {\\n        uint256 sumOfShares;\\n        uint256 totalAmountIn;\\n\\n        for (uint256 i; i < paths.length; i++) {\\n            sumOfShares += paths[i].shares;\\n        }\\n        _require(sumOfShares > 0, Errors.SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO.selector);\\n        uint256 remainder = amountOut;\\n        GetAmountsParams memory getAmountsParams;\\n        for (uint256 i; i < paths.length - 1; i++) {\\n            getAmountsParams.amount = (amountOut * paths[i].shares) / sumOfShares;\\n            remainder -= getAmountsParams.amount;\\n            getAmountsParams.encodedPath = paths[i].payload;\\n            getAmountsParams.dexRouter = primexDNS.getDexAddress(paths[i].dexName);\\n            totalAmountIn += getAmountsIn(getAmountsParams)[0];\\n        }\\n        //getting amountIn for the last path\\n        getAmountsParams.amount = remainder;\\n        getAmountsParams.encodedPath = paths[paths.length - 1].payload;\\n        getAmountsParams.dexRouter = primexDNS.getDexAddress(paths[paths.length - 1].dexName);\\n        totalAmountIn += getAmountsIn(getAmountsParams)[0];\\n        return totalAmountIn;\\n    }\\n\\n    /**\\n     * @inheritdoc IDexAdapter\\n     */\\n    function getAmountsIn(GetAmountsParams memory _params) public override returns (uint256[3] memory) {\\n        _checkAmountsParams(_params);\\n        DexType type_ = dexType[_params.dexRouter];\\n\\n        if (type_ == DexType.UniswapV2 || type_ == DexType.Meshswap) {\\n            return _getAmountsInWithUniswapV2(_params);\\n        } else if (type_ == DexType.UniswapV3) {\\n            return _getAmountsInWithUniswapV3(_params);\\n        } else if (type_ == DexType.Curve) {\\n            return _getAmountsInWithCurve(_params);\\n        } else if (type_ == DexType.Balancer) {\\n            return _getAmountsInWithBalancer(_params);\\n        } else if (type_ == DexType.AlgebraV3) {\\n            return _getAmountsInWithAlgebraV3(_params);\\n        } else {\\n            _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n        }\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param _interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IERC165).interfaceId || _interfaceId == type(IDexAdapter).interfaceId;\\n    }\\n\\n    function _swapExactTokensForTokens(SwapParams memory _params) internal returns (uint256[3] memory) {\\n        DexType type_ = dexType[_params.dexRouter];\\n\\n        if (type_ == DexType.UniswapV2 || type_ == DexType.Meshswap) {\\n            return _swapWithUniswapV2(_params);\\n        } else if (type_ == DexType.UniswapV3) {\\n            return _swapWithUniswapV3(_params);\\n        } else if (type_ == DexType.Curve) {\\n            return _swapWithCurve(_params);\\n        } else if (type_ == DexType.Balancer) {\\n            return _swapWithBalancer(_params);\\n        } else if (type_ == DexType.AlgebraV3) {\\n            return _swapWithAlgebraV3(_params);\\n        } else if (type_ == DexType.Paraswap) {\\n            return _swapWithParaswap(_params);\\n        } else if (type_ == DexType.Enso) {\\n            return _swapWithEnso(_params);\\n        } else {\\n            return _swapWithMulticall(_params);\\n        }\\n    }\\n\\n    function _getAmountsWithBalancer(GetAmountsParams memory _params) internal returns (uint256[3] memory) {\\n        (address[] memory path, bytes32[] memory pools, ) = abi.decode(\\n            _params.encodedPath,\\n            (address[], bytes32[], int256[])\\n        );\\n        (IAsset[] memory assets, IBalancer.BatchSwapStep[] memory steps) = _getBalancerSwapSteps(\\n            path,\\n            pools,\\n            _params.amount\\n        );\\n\\n        IBalancer.FundManagement memory fundManagement = IBalancer.FundManagement({\\n            sender: address(this),\\n            fromInternalBalance: false,\\n            recipient: payable(address(this)),\\n            toInternalBalance: false\\n        });\\n\\n        int256[] memory deltas;\\n        deltas = IBalancer(_params.dexRouter).queryBatchSwap(\\n            IBalancer.SwapKind.GIVEN_IN,\\n            steps,\\n            assets,\\n            fundManagement\\n        );\\n        /// @notice - queryBatchSwap will return a delta for each token in the assets array and last asset should be tokenOut\\n        _require(deltas[deltas.length - 1] <= 0, Errors.DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE.selector);\\n        uint256 amountOut = uint256(deltas[deltas.length - 1] * -1);\\n        return [_params.amount, amountOut, 0];\\n    }\\n\\n    function _getAmountsInWithBalancer(GetAmountsParams memory _params) internal returns (uint256[3] memory) {\\n        (address[] memory path, bytes32[] memory pools, ) = abi.decode(\\n            _params.encodedPath,\\n            (address[], bytes32[], int256[])\\n        );\\n        IAsset[] memory assets = new IAsset[](path.length);\\n        IBalancer.BatchSwapStep[] memory steps = new IBalancer.BatchSwapStep[](pools.length);\\n\\n        IBalancer.FundManagement memory fundManagement = IBalancer.FundManagement({\\n            sender: address(this),\\n            fromInternalBalance: false,\\n            recipient: payable(address(this)),\\n            toInternalBalance: false\\n        });\\n        for (uint256 i; i < path.length - 1; i++) {\\n            assets[i] = IAsset(path[i]);\\n            steps[path.length - 2 - i] = IBalancer.BatchSwapStep({\\n                poolId: pools[i],\\n                assetInIndex: i,\\n                assetOutIndex: i + 1,\\n                amount: 0,\\n                userData: \\\"0x\\\"\\n            });\\n        }\\n        steps[0].amount = _params.amount;\\n        assets[path.length - 1] = IAsset(path[path.length - 1]);\\n\\n        int256[] memory deltas;\\n        deltas = IBalancer(_params.dexRouter).queryBatchSwap(\\n            IBalancer.SwapKind.GIVEN_OUT,\\n            steps,\\n            assets,\\n            fundManagement\\n        );\\n        _require(deltas[0] >= 0, Errors.DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE.selector);\\n        return [uint256(deltas[0]), _params.amount, 0];\\n    }\\n\\n    function _getAmountsWithUniswapV3(GetAmountsParams memory _params) internal returns (uint256[3] memory) {\\n        address quoter = quoters[_params.dexRouter];\\n        _require(address(quoter) != address(0), Errors.QUOTER_IS_NOT_PROVIDED.selector);\\n        uint256 amountOut = IQuoter(quoter).quoteExactInput(_params.encodedPath, _params.amount);\\n        return [_params.amount, amountOut, 0];\\n    }\\n\\n    function _getAmountsInWithUniswapV3(GetAmountsParams memory _params) internal returns (uint256[3] memory) {\\n        address quoter = quoters[_params.dexRouter];\\n        _require(address(quoter) != address(0), Errors.QUOTER_IS_NOT_PROVIDED.selector);\\n        uint256 amountIn = IQuoter(quoter).quoteExactOutput(_params.encodedPath, _params.amount);\\n        return [amountIn, _params.amount, 0];\\n    }\\n\\n    function _getAmountsWithAlgebraV3(GetAmountsParams memory _params) internal returns (uint256[3] memory) {\\n        address quoter = quoters[_params.dexRouter];\\n        _require(address(quoter) != address(0), Errors.QUOTER_IS_NOT_PROVIDED.selector);\\n        (uint256 amountOut, ) = IQuoterAlgebraV3(quoter).quoteExactInput(_params.encodedPath, _params.amount);\\n        return [_params.amount, amountOut, 0];\\n    }\\n\\n    function _getAmountsInWithAlgebraV3(GetAmountsParams memory _params) internal returns (uint256[3] memory) {\\n        address quoter = quoters[_params.dexRouter];\\n        _require(address(quoter) != address(0), Errors.QUOTER_IS_NOT_PROVIDED.selector);\\n        (uint256 amountIn, ) = IQuoterAlgebraV3(quoter).quoteExactOutput(_params.encodedPath, _params.amount);\\n        return [amountIn, _params.amount, 0];\\n    }\\n\\n    function _getAmountsWithCurve(GetAmountsParams memory _params) internal view returns (uint256[3] memory) {\\n        (address[] memory path, address[] memory pools) = abi.decode(_params.encodedPath, (address[], address[]));\\n        uint256 amountOut = _getExchangeAmountCurve(_params.amount, _params.dexRouter, path, pools);\\n\\n        return [_params.amount, amountOut, 0];\\n    }\\n\\n    function _getExchangeAmountCurve(\\n        uint256 amount,\\n        address dexRouter,\\n        address[] memory path,\\n        address[] memory pools\\n    ) internal view returns (uint256) {\\n        uint256 amountOut = amount;\\n\\n        for (uint256 i; i < path.length - 1; i++) {\\n            amountOut = ICurveRouter(dexRouter).get_exchange_amount(pools[i], path[i], path[i + 1], amountOut);\\n        }\\n        return amountOut;\\n    }\\n\\n    function _getAmountsInWithCurve(GetAmountsParams memory _params) internal view returns (uint256[3] memory) {\\n        (address[] memory path, address[] memory pools) = abi.decode(_params.encodedPath, (address[], address[]));\\n        uint256 inverseAmount = _getExchangeAmountCurve(\\n            _params.amount,\\n            _params.dexRouter,\\n            _reverseArray(path),\\n            _reverseArray(pools)\\n        );\\n        //expanding the search to +50% and -50% from the inverseAmount\\n        // mul by 0.5 WAD\\n        uint256 minValue = inverseAmount.wmul(5e17);\\n        // mul by 1.5 WAD\\n        uint256 maxValue = inverseAmount.wmul(15e17);\\n        uint256 amountIn;\\n        for (uint256 i; i <= 100; i++) {\\n            // first iteration checks the inverseAmount: (0.5 + 1.5) / 2\\n            uint256 middle = (minValue + maxValue) / 2;\\n            if (middle == amountIn) break;\\n            amountIn = middle;\\n            uint256 amountOut = _getExchangeAmountCurve(amountIn, _params.dexRouter, path, pools);\\n            if (amountOut == _params.amount) break;\\n            else if (amountOut < _params.amount) minValue = amountIn;\\n            else maxValue = amountIn;\\n        }\\n        return [amountIn, _params.amount, 0];\\n    }\\n\\n    function _getAmountsWithUniswapV2(GetAmountsParams memory _params) internal view returns (uint256[3] memory) {\\n        address[] memory path = abi.decode(_params.encodedPath, (address[]));\\n\\n        uint256[] memory amounts = IUniswapV2Router02(_params.dexRouter).getAmountsOut(_params.amount, path);\\n\\n        return [_params.amount, amounts[amounts.length - 1], 0];\\n    }\\n\\n    function _getAmountsInWithUniswapV2(GetAmountsParams memory _params) internal view returns (uint256[3] memory) {\\n        address[] memory path = abi.decode(_params.encodedPath, (address[]));\\n\\n        uint256[] memory amounts = IUniswapV2Router02(_params.dexRouter).getAmountsIn(_params.amount, path);\\n\\n        return [amounts[0], _params.amount, 0];\\n    }\\n\\n    function _reverseArray(address[] memory source) internal pure returns (address[] memory) {\\n        uint256 length = source.length;\\n        address[] memory result = new address[](length);\\n        for (uint256 i; i < length; i++) {\\n            result[length - 1 - i] = source[i];\\n        }\\n        return result;\\n    }\\n\\n    function _checkAmountsParams(GetAmountsParams memory _params) internal pure {\\n        _require(_params.dexRouter != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        _require(_params.amount != 0, Errors.ZERO_AMOUNT.selector);\\n    }\\n\\n    function _getBalancerSwapSteps(\\n        address[] memory path,\\n        bytes32[] memory pools,\\n        uint256 amount\\n    ) internal pure returns (IAsset[] memory assets, IBalancer.BatchSwapStep[] memory steps) {\\n        assets = new IAsset[](path.length);\\n        steps = new IBalancer.BatchSwapStep[](pools.length);\\n\\n        for (uint256 i; i < path.length - 1; i++) {\\n            assets[i] = IAsset(path[i]);\\n            steps[i] = IBalancer.BatchSwapStep({\\n                poolId: pools[i],\\n                assetInIndex: i,\\n                assetOutIndex: i + 1,\\n                amount: 0,\\n                userData: \\\"0x\\\"\\n            });\\n        }\\n        steps[0].amount = amount;\\n        assets[path.length - 1] = IAsset(path[path.length - 1]);\\n    }\\n\\n    function _swapWithUniswapV2(SwapParams memory _params) private returns (uint256[3] memory) {\\n        if (_params.tokenIn == NATIVE_CURRENCY) {\\n            WNative.deposit{value: _params.amountIn}();\\n        }\\n\\n        address[] memory path = abi.decode(_params.encodedPath, (address[]));\\n        TokenApproveLibrary.doApprove(path[0], _params.dexRouter, _params.amountIn);\\n        uint256[] memory amounts;\\n\\n        amounts = IUniswapV2Router02(_params.dexRouter).swapExactTokensForTokens(\\n            _params.amountIn,\\n            _params.amountOutMin,\\n            path,\\n            _params.to,\\n            _params.deadline\\n        );\\n        if (_params.tokenOut == NATIVE_CURRENCY) {\\n            WNative.withdraw(WNative.balanceOf(address(this)));\\n        }\\n        return [_params.amountIn, amounts[amounts.length - 1], 0];\\n    }\\n\\n    function _swapWithUniswapV3(SwapParams memory _params) private returns (uint256[3] memory) {\\n        if (_params.tokenIn == NATIVE_CURRENCY) {\\n            WNative.deposit{value: _params.amountIn}();\\n        }\\n\\n        address tokenIn = _params.encodedPath.decodeFirstToken();\\n        TokenApproveLibrary.doApprove(tokenIn, _params.dexRouter, _params.amountIn);\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: _params.encodedPath,\\n            recipient: _params.to,\\n            deadline: _params.deadline,\\n            amountIn: _params.amountIn,\\n            amountOutMinimum: _params.amountOutMin\\n        });\\n        uint256 amountOut;\\n        // slither-disable-next-line unused-return\\n        try ISwapRouter(_params.dexRouter).exactInput(params) returns (uint256 _amountOut) {\\n            // slither-disable-next-line variable-scope\\n            amountOut = _amountOut;\\n            if (_params.tokenOut == NATIVE_CURRENCY) {\\n                WNative.withdraw(WNative.balanceOf(address(this)));\\n            }\\n        } catch Error(string memory err) {\\n            // slither-disable-next-line variable-scope\\n            revert(err);\\n        } catch (bytes memory) {\\n            _revert(Errors.REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA.selector);\\n        }\\n\\n        return [_params.amountIn, amountOut, 0];\\n    }\\n\\n    function _swapWithAlgebraV3(SwapParams memory _params) private returns (uint256[3] memory) {\\n        if (_params.tokenIn == NATIVE_CURRENCY) {\\n            WNative.deposit{value: _params.amountIn}();\\n        }\\n\\n        address tokenIn = _params.encodedPath.decodeFirstToken();\\n        TokenApproveLibrary.doApprove(tokenIn, _params.dexRouter, _params.amountIn);\\n\\n        ISwapRouterAlgebraV3.ExactInputParams memory params = ISwapRouterAlgebraV3.ExactInputParams({\\n            path: _params.encodedPath,\\n            recipient: _params.to,\\n            deadline: _params.deadline,\\n            amountIn: _params.amountIn,\\n            amountOutMinimum: _params.amountOutMin\\n        });\\n        uint256 amountOut = ISwapRouterAlgebraV3(_params.dexRouter).exactInput(params);\\n        if (_params.tokenOut == NATIVE_CURRENCY) {\\n            WNative.withdraw(WNative.balanceOf(address(this)));\\n        }\\n        return [_params.amountIn, amountOut, 0];\\n    }\\n\\n    function _swapWithParaswap(SwapParams memory _params) private returns (uint256[3] memory) {\\n        uint256 balance = IERC20(_params.tokenOut).balanceOf(_params.to);\\n\\n        if (_params.tokenIn != NATIVE_CURRENCY) {\\n            TokenApproveLibrary.doApprove(\\n                _params.tokenIn,\\n                IAugustusSwapper(_params.dexRouter).getTokenTransferProxy(),\\n                _params.amountIn\\n            );\\n        }\\n        // we just pass all payload data to the target router\\n        Address.functionCallWithValue(\\n            _params.dexRouter,\\n            _params.encodedPath,\\n            _params.tokenIn == NATIVE_CURRENCY ? _params.amountIn : 0\\n        );\\n\\n        balance = IERC20(_params.tokenOut).balanceOf(_params.to) - balance;\\n        _require(balance >= _params.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n\\n        return [_params.amountIn, balance, 0];\\n    }\\n\\n    function _swapWithEnso(SwapParams memory _params) private returns (uint256[3] memory) {\\n        uint256 balance = IERC20(_params.tokenOut).balanceOf(_params.to);\\n\\n        if (_params.tokenIn != NATIVE_CURRENCY) {\\n            TokenApproveLibrary.doApprove(_params.tokenIn, _params.dexRouter, _params.amountIn);\\n        }\\n        // we just pass all payload data to the target router\\n        Address.functionCallWithValue(\\n            _params.dexRouter,\\n            _params.encodedPath,\\n            _params.tokenIn == NATIVE_CURRENCY ? _params.amountIn : 0\\n        );\\n\\n        balance = IERC20(_params.tokenOut).balanceOf(_params.to) - balance;\\n        _require(balance >= _params.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n\\n        return [_params.amountIn, balance, 0];\\n    }\\n\\n    function _swapWithMulticall(SwapParams memory _params) private returns (uint256[3] memory) {\\n        uint256 balance;\\n        if (_params.tokenOut == NATIVE_CURRENCY) {\\n            balance = _params.to.balance;\\n        } else {\\n            balance = IERC20(_params.tokenOut).balanceOf(_params.to);\\n        }\\n\\n        Call[] memory calls = abi.decode(_params.encodedPath, (Call[]));\\n\\n        for (uint256 i; i < calls.length; i++) {\\n            Address.functionCallWithValue(calls[i].target, calls[i].callData, calls[i].value);\\n        }\\n        if (_params.tokenOut == NATIVE_CURRENCY) {\\n            balance = _params.to.balance - balance;\\n        } else {\\n            balance = IERC20(_params.tokenOut).balanceOf(_params.to) - balance;\\n        }\\n        _require(balance >= _params.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n\\n        return [_params.amountIn, balance, 0];\\n    }\\n\\n    function _swapWithCurve(SwapParams memory _params) private returns (uint256[3] memory) {\\n        // Curve does not check the deadline hence this check is necessary before the swap.\\n        _require(_params.deadline >= block.timestamp, Errors.SWAP_DEADLINE_PASSED.selector);\\n        (address[] memory path, address[] memory pools) = abi.decode(_params.encodedPath, (address[], address[]));\\n        uint256 amountOut = _params.amountIn;\\n\\n        // we don't wrap and unwrap eth since the curve can handle the native currency\\n        for (uint256 i; i < path.length - 1; i++) {\\n            //'cause in the curve the native currency is denoted as 0xEeE...\\n            if (path[i] == NATIVE_CURRENCY_CURVE) {\\n                amountOut = ICurveRouter(_params.dexRouter).exchange{value: amountOut}(\\n                    pools[i],\\n                    path[i],\\n                    path[i + 1],\\n                    amountOut,\\n                    i == path.length - 2 ? _params.amountOutMin : 0,\\n                    i == path.length - 2 ? _params.to : address(this)\\n                );\\n            } else {\\n                TokenApproveLibrary.doApprove(path[i], _params.dexRouter, amountOut);\\n                amountOut = ICurveRouter(_params.dexRouter).exchange(\\n                    pools[i],\\n                    path[i],\\n                    path[i + 1],\\n                    amountOut,\\n                    i == path.length - 2 ? _params.amountOutMin : 0,\\n                    i == path.length - 2 ? _params.to : address(this)\\n                );\\n            }\\n        }\\n\\n        return [_params.amountIn, amountOut, 0];\\n    }\\n\\n    function _swapWithBalancer(SwapParams memory _params) private returns (uint256[3] memory) {\\n        (address[] memory path, bytes32[] memory pools, int256[] memory limits) = abi.decode(\\n            _params.encodedPath,\\n            (address[], bytes32[], int256[])\\n        );\\n        _require(path.length >= 2, Errors.INCORRECT_PATH.selector);\\n\\n        if (_params.tokenIn == NATIVE_CURRENCY) {\\n            WNative.deposit{value: _params.amountIn}();\\n        }\\n\\n        TokenApproveLibrary.doApprove(path[0], _params.dexRouter, _params.amountIn);\\n\\n        IBalancer.FundManagement memory fundManagement = IBalancer.FundManagement({\\n            sender: address(this),\\n            fromInternalBalance: false,\\n            recipient: payable(_params.to),\\n            toInternalBalance: false\\n        });\\n\\n        if (path.length > 2) {\\n            (IAsset[] memory assets, IBalancer.BatchSwapStep[] memory steps) = _getBalancerSwapSteps(\\n                path,\\n                pools,\\n                _params.amountIn\\n            );\\n\\n            int256[] memory deltas;\\n            deltas = IBalancer(_params.dexRouter).batchSwap(\\n                IBalancer.SwapKind.GIVEN_IN,\\n                steps,\\n                assets,\\n                fundManagement,\\n                limits,\\n                _params.deadline\\n            );\\n            if (_params.tokenOut == NATIVE_CURRENCY) {\\n                WNative.withdraw(WNative.balanceOf(address(this)));\\n            }\\n            return [_params.amountIn, uint256(deltas[deltas.length - 1] * -1), 0];\\n        }\\n\\n        IBalancer.SingleSwap memory singleSwap = IBalancer.SingleSwap({\\n            poolId: pools[0],\\n            kind: IBalancer.SwapKind.GIVEN_IN,\\n            assetIn: IAsset(path[0]),\\n            assetOut: IAsset(path[1]),\\n            amount: _params.amountIn,\\n            userData: \\\"0x\\\"\\n        });\\n        uint256 amountOut = IBalancer(_params.dexRouter).swap(\\n            singleSwap,\\n            fundManagement,\\n            _params.amountOutMin,\\n            _params.deadline\\n        );\\n        if (_params.tokenOut == NATIVE_CURRENCY) {\\n            WNative.withdraw(WNative.balanceOf(address(this)));\\n        }\\n        return [_params.amountIn, amountOut, 0];\\n    }\\n}\\n\",\"keccak256\":\"0x344a5f61663a646ff6488f1016cf00b972b3a55a98254cf85b472cdab1ad1b69\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorStorageV2} from \\\"./IKeeperRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IKeeperRewardDistributorV3 is IKeeperRewardDistributorStorageV2, IPausable {\\n    struct DecreasingGasByReasonParams {\\n        DecreasingReason reason;\\n        uint256 amount;\\n    }\\n    struct MaxGasPerPositionParams {\\n        KeeperActionType actionType;\\n        KeeperActionRewardConfig config;\\n    }\\n\\n    /**\\n     * @dev     Params for initialize() function\\n     * @param   priceOracle Address of the PriceOracle contract\\n     * @param   registry Address of the Registry contract\\n     * @param   pmx Address of PMXToken\\n     * @param   treasury Address of the Treasury contract\\n     * @param   pmxPartInReward Percentage of PMX in reward (in WAD)\\n     * @param   nativePartInReward  Percentage of native token in reward (in WAD)\\n     * @param   positionSizeCoefficient The reward param which is needed to calculate rewards, in WAD\\n     * @param   additionalGas Additional gas added to actual gas spent\\n     * @param   defaultMaxGasPrice Max gas price allowed during reward calculation (used when no oracle price found)\\n     * @param   oracleGasPriceTolerance Percentage by which oracle gas price can be exceeded (in WAD)\\n     * @param   paymentModel The model of payment for gas in the network\\n     * @param   maxGasPerPositionParams Parameters for the setMaxGasPerPosition function\\n     * @param   decreasingGasByReasonParams Parameters for the setDecreasingGasByReason function\\n     */\\n    struct InitParams {\\n        address priceOracle;\\n        address registry;\\n        address pmx;\\n        address treasury;\\n        address whiteBlackList;\\n        uint256 pmxPartInReward;\\n        uint256 nativePartInReward;\\n        uint256 positionSizeCoefficient;\\n        uint256 additionalGas;\\n        uint256 defaultMaxGasPrice;\\n        uint256 oracleGasPriceTolerance;\\n        PaymentModel paymentModel;\\n        MaxGasPerPositionParams[] maxGasPerPositionParams;\\n        DecreasingGasByReasonParams[] decreasingGasByReasonParams;\\n    }\\n\\n    event ClaimFees(address indexed keeper, address indexed asset, uint256 amount);\\n    event DefaultMaxGasPriceChanged(uint256 indexed defaultMaxGasPrice);\\n    event OracleGasPriceToleranceChanged(uint256 indexed oracleGasPriceTolerance);\\n    event MaxGasPerPositionChanged(KeeperActionType indexed actionType, KeeperActionRewardConfig config);\\n    event DataLengthRestrictionsChanged(KeeperCallingMethod callingMethod, uint256 maxRoutesLength, uint256 baseLength);\\n    event DecreasingGasByReasonChanged(DecreasingReason indexed reason, uint256 amount);\\n    event PmxPartInRewardChanged(uint256 indexed pmxPartInReward);\\n    event NativePartInRewardChanged(uint256 indexed nativePartInReward);\\n    event PositionSizeCoefficientChanged(uint256 indexed positionSizeCoefficient);\\n    event AdditionalGasChanged(uint256 indexed additionalGas);\\n    event KeeperRewardUpdated(address indexed keeper, uint256 rewardInPmx, uint256 rewardInNativeCurrency);\\n    event MinPositionSizeAddendChanged(uint256 newMinPositionSizeAddend);\\n    event OptimisticGasCoefficientChanged(uint256 newOptimismGasCoefficient);\\n\\n    /**\\n     * @notice Initializes the KeeperRewardDistributor contract.\\n     * @param _params  Parameters for initialization\\n     */\\n    function initialize(InitParams calldata _params) external;\\n\\n    /**\\n     * @dev Params for the updateReward function\\n     * @param keeper  Address of the keeper\\n     * @param positionAsset  Address of the position asset\\n     * @param positionSize  Size of the position\\n     * @param action  The action that was performed by the keeper\\n     * @param numberOfActions  Number of actions performed by the keeper\\n     * @param gasSpent Gas spent on executing transaction\\n     * @param decreasingCounter An array where each index contains the number of decreasing reasons according to the DecreasingReason enum\\n     * @param routesLength  The length of routes provided as input to the protocol function,\\n     * subject to an additional commission in the ARBITRUM payment model.\\n     */\\n\\n    struct UpdateRewardParams {\\n        address keeper;\\n        address positionAsset;\\n        uint256 positionSize;\\n        KeeperActionType action;\\n        uint256 numberOfActions;\\n        uint256 gasSpent;\\n        uint256[] decreasingCounter;\\n        uint256 routesLength;\\n        bytes nativePmxOracleData;\\n        bytes positionNativeAssetOracleData;\\n    }\\n\\n    /**\\n     * @notice Updates reward for keeper for closing position or executing order\\n     * @dev Only callable by the PM_ROLE, LOM_ROLE, BATCH_MANAGER_ROLE roles.\\n     * @param _params The UpdateRewardParams params\\n     */\\n    function updateReward(UpdateRewardParams calldata _params) external;\\n\\n    /**\\n     * @notice Claims earned reward of the keeper\\n     * @param _pmxAmount  Amount of PMX token to claim\\n     * @param _nativeAmount  Amount of native token to claim\\n     */\\n    function claim(uint256 _pmxAmount, uint256 _nativeAmount) external;\\n\\n    /**\\n     * @notice Sets the default maximum gas price allowed.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _defaultMaxGasPrice The new default maximum gas price value.\\n     */\\n    function setDefaultMaxGasPrice(uint256 _defaultMaxGasPrice) external;\\n\\n    /**\\n     * @notice Sets the amount of gas to be removed for the specified reason\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _reason The reason for which an amount is set\\n     * @param _amount Gas amount.\\n     */\\n    function setDecreasingGasByReason(DecreasingReason _reason, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the KeeperActionRewardConfig for the specified action type\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _actionType The action type for which the config is set\\n     * @param _config The KeeperActionRewardConfig struct\\n     */\\n\\n    function setMaxGasPerPosition(KeeperActionType _actionType, KeeperActionRewardConfig calldata _config) external;\\n\\n    /**\\n     * @notice Sets the dataLengthRestrictions for the specified KeeperCallingMethod.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _callingMethod The calling method for which dataLengthRestrictions is set\\n     * @param _maxRoutesLength The maximum routes length for which an additional fee will be paid in the ARBITRUM payment model, in bytes\\n     * @param _baseLength The length of the data entering the protocol function including method signature\\n     * and excluding dynamic types(e.g, routesLength), in bytes\\n     */\\n    function setDataLengthRestrictions(\\n        KeeperCallingMethod _callingMethod,\\n        uint256 _maxRoutesLength,\\n        uint256 _baseLength\\n    ) external;\\n\\n    /**\\n     * @notice Sets the tolerance for gas price fluctuations from the oracle price.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _oracleGasPriceTolerance The new oracle gas price tolerance value (percent expressed as WAD).\\n     */\\n    function setOracleGasPriceTolerance(uint256 _oracleGasPriceTolerance) external;\\n\\n    /**\\n     * @notice Sets the PMX token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _pmxPartInReward The new PMX token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setPmxPartInReward(uint256 _pmxPartInReward) external;\\n\\n    /**\\n     * @notice Sets the native token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _nativePartInReward The new native token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setNativePartInReward(uint256 _nativePartInReward) external;\\n\\n    /**\\n     * @notice Sets the position size coefficients for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _positionSizeCoefficient The new positionSizeCoefficient value (in WAD).\\n     */\\n    function setPositionSizeCoefficient(uint256 _positionSizeCoefficient) external;\\n\\n    /**\\n     * @notice Sets the additional gas value for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _additionalGas The new additionalGas value.\\n     */\\n    function setAdditionalGas(uint256 _additionalGas) external;\\n\\n    /**\\n     * @notice Sets the minPositionSizeAddend for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _minPositionSizeAddend The new minPositionSizeAddend value (in WAD).\\n     */\\n\\n    function setMinPositionSizeAddend(uint256 _minPositionSizeAddend) external;\\n\\n    /**\\n     * @notice Retrieves gas calculation params.\\n     *\\n     * @return oracleGasPriceTolerance The tolerance for gas price fluctuations based on the oracle.\\n     * @return defaultMaxGasPrice The default maximum gas price allowed.\\n     */\\n    function getGasCalculationParams() external view returns (uint256, uint256, uint256, PaymentModel);\\n\\n    /**\\n     * @notice Sets the optimisticGasCoefficient for optimism paymentModel.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _newOptimisticGasCoefficient The new optimisticGasCoefficient value (in WAD).\\n     */\\n    function setOptimisticGasCoefficient(uint256 _newOptimisticGasCoefficient) external;\\n}\\n\",\"keccak256\":\"0xe7e8ed68096946966302efb5863878bf7cc40ae6aa353d995da1f4116efc04b0\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IKeeperRewardDistributorStorage {\\n    enum DecreasingReason {\\n        NonExistentIdForLiquidation,\\n        NonExistentIdForSLOrTP,\\n        IncorrectConditionForLiquidation,\\n        IncorrectConditionForSL,\\n        ClosePostionInTheSameBlock\\n    }\\n\\n    enum KeeperActionType {\\n        OpenByOrder,\\n        StopLoss,\\n        TakeProfit,\\n        Liquidation,\\n        BucketDelisted\\n    }\\n\\n    enum KeeperCallingMethod {\\n        ClosePositionByCondition,\\n        OpenPositionByOrder,\\n        CloseBatchPositions\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of keeper rewards in the ARBITRUM payment model\\n     * @param maxRoutesLength The maximum length of routes for which will be paid keeper rewards, depending on KeeperCallingMethod\\n     * @param baseLength The static length of the data entering the protocol function, depending on KeeperCallingMethod\\n     */\\n    struct DataLengthRestrictions {\\n        uint256 maxRoutesLength;\\n        uint256 baseLength;\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of maximum gas per position\\n     * @param baseMaxGas1 Base gas amount that used to calculate max gas amount\\n     * @param baseMaxGas2 Base gas amount that used to calculate max gas amount when number of keeper actions > inflectionPoint\\n     * @param multiplier2 The multiplier which is multiplied by the number of keeper actions when number of keeper actions > inflectionPoint\\n     * @param inflectionPoint Number of actions after which the multiplier2 takes effect\\n     */\\n    struct KeeperActionRewardConfig {\\n        uint256 baseMaxGas1;\\n        uint256 baseMaxGas2;\\n        uint256 multiplier1;\\n        uint256 multiplier2;\\n        uint256 inflectionPoint;\\n    }\\n\\n    struct KeeperBalance {\\n        uint256 pmxBalance;\\n        uint256 nativeBalance;\\n    }\\n    enum PaymentModel {\\n        DEFAULT,\\n        ARBITRUM,\\n        OPTIMISTIC // not for only optimism mainnet, but also for chains OP-Stack based chains like the Base\\n    }\\n\\n    function priceOracle() external view returns (address);\\n\\n    function registry() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address payable);\\n\\n    function pmxPartInReward() external view returns (uint256);\\n\\n    function nativePartInReward() external view returns (uint256);\\n\\n    function positionSizeCoefficient() external view returns (uint256);\\n\\n    function positionSizeCoefficientB() external view returns (int256);\\n\\n    function additionalGas() external view returns (uint256);\\n\\n    function defaultMaxGasPrice() external view returns (uint256);\\n\\n    function oracleGasPriceTolerance() external view returns (uint256);\\n\\n    function paymentModel() external view returns (PaymentModel);\\n\\n    function keeperBalance(address) external view returns (uint256, uint256);\\n\\n    function maxGasPerPosition(KeeperActionType) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function dataLengthRestrictions(KeeperCallingMethod) external view returns (uint256, uint256);\\n\\n    function decreasingGasByReason(DecreasingReason) external view returns (uint256);\\n\\n    function totalBalance() external view returns (uint256, uint256);\\n}\\n\\ninterface IKeeperRewardDistributorStorageV2 is IKeeperRewardDistributorStorage {\\n    function minPositionSizeAddend() external view returns (uint256);\\n\\n    function optimisticGasCoefficient() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0039900733afe2e8403358176a91090383e28f72308b93f2c6d1191e6c10540\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {ILiquidityMiningRewardDistributorStorage} from \\\"./ILiquidityMiningRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributor is ILiquidityMiningRewardDistributorStorage, IPausable {\\n    struct RewardsInPMX {\\n        uint256 minReward;\\n        uint256 maxReward;\\n        uint256 extraReward;\\n    }\\n\\n    /**\\n     * @notice Emitted when a reward is claimed by a receiver from a specific bucket.\\n     * @param receiver The address of the receiver.\\n     * @param bucket The address of the bucket from which the reward is claimed.\\n     * @param amount The amount of the claimed reward.\\n     */\\n    event ClaimedReward(address indexed receiver, address indexed bucket, uint256 amount);\\n    /**\\n     * @notice Emitted when PMX tokens are withdrawn by an admin.\\n     * @param amount The amount of PMX tokens withdrawn.\\n     */\\n    event WithdrawPmxByAdmin(uint256 indexed amount);\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _primexDNS The address of the IPrimexDNS contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _registry The address of the registry contract.\\n     * @param _treasury The address of the treasury contract.\\n     * @param _reinvestmentRate The rate at which rewards are reinvested.\\n     * @param _reinvestmentDuration The duration for which rewards are reinvested.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IPrimexDNSV3 _primexDNS,\\n        IERC20 _pmx,\\n        ITraderBalanceVault _traderBalanceVault,\\n        address _registry,\\n        address _treasury,\\n        uint256 _reinvestmentRate,\\n        uint256 _reinvestmentDuration,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Updates the reward amount for a specific bucket.\\n     * @dev Only callable by the PrimexDNS contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _pmxRewardsAmount The amount of PMX rewards to be allocated to the bucket.\\n     */\\n    function updateBucketReward(string memory _bucketName, uint256 _pmxRewardsAmount) external;\\n\\n    /**\\n     * @notice Adds points for a user for future reward distribution.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _miningAmount The amount of mining points to be added.\\n     * @param _maxStabilizationPeriodEnd The maximum end timestamp of the stabilization period.\\n     * @param _maxPeriodTime The maximum period time.\\n     * @param _currentTimestamp The current timestamp.\\n     */\\n    function addPoints(\\n        string memory _bucketName,\\n        address _user,\\n        uint256 _miningAmount,\\n        uint256 _maxStabilizationPeriodEnd,\\n        uint256 _maxPeriodTime,\\n        uint256 _currentTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes points for a user.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _name The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _amount The amount of mining points to be removed.\\n     */\\n    function removePoints(string memory _name, address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Claims the accumulated rewards for a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     */\\n    function claimReward(string memory _bucketName) external;\\n\\n    /**\\n     * @notice Moves rewards from one bucket to another.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketFrom The name of the source bucket.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _user The address of the user.\\n     * @param _isBucketLaunched A flag indicating if the destination bucket is launched.\\n     * @param _liquidityMiningDeadline The deadline for liquidity mining\\n     */\\n    function reinvest(\\n        string memory _bucketFrom,\\n        string memory _bucketTo,\\n        address _user,\\n        bool _isBucketLaunched,\\n        uint256 _liquidityMiningDeadline\\n    ) external;\\n\\n    /**\\n     * @dev The function to withdraw PMX from a delisted bucket or a bucket where liquidity mining failed (after reinvesting period).\\n     * Emits WithdrawPmxByAdmin event.\\n     * @param _bucketFrom Name of the bucket with failed liquidity mining event.\\n     */\\n    function withdrawPmxByAdmin(string memory _bucketFrom) external;\\n\\n    /**\\n     * @notice Retrieves information about a lender in a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @param _timestamp The timestamp for which the information is queried.\\n     * @return amountInMining The amount of tokens the lender has in mining for the given bucket.\\n     * @return currentPercent The current percentage of rewards the lender is eligible to receive for the given bucket.\\n     * Measured in WAD (1 WAD = 100%).\\n     * @return rewardsInPMX An object containing information about the lender's rewards in PMX for the given bucket.\\n     */\\n    function getLenderInfo(\\n        string calldata _bucketName,\\n        address _lender,\\n        uint256 _timestamp\\n    ) external view returns (uint256 amountInMining, uint256 currentPercent, RewardsInPMX memory rewardsInPMX);\\n\\n    /**\\n     * @notice Retrieves rewards information about a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @return totalPmxReward The total amount of PMX reward in the bucket.\\n     * @return withdrawnRewards The total amount of withdrawn rewards from the bucket.\\n     * @return totalPoints The total number of mining points in the bucket.\\n     */\\n    function getBucketInfo(\\n        string calldata _bucketName\\n    ) external view returns (uint256 totalPmxReward, uint256 withdrawnRewards, uint256 totalPoints);\\n\\n    /**\\n     * @notice Retrieves the amount of tokens a lender has in mining for a specific bucket.\\n     * @param _bucket The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @return The amount of tokens the lender has in mining for the given bucket.\\n     */\\n    function getLenderAmountInMining(string calldata _bucket, address _lender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20c7cd863230da4fc92831e99263814c285a45cc4779525b5433222d2370c264\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributorStorage {\\n    struct LenderInfo {\\n        uint256 points;\\n        uint256 depositedAmount;\\n    }\\n\\n    struct BucketInfo {\\n        uint256 totalPoints;\\n        uint256 totalPmxReward;\\n        uint256 withdrawnRewards;\\n        mapping(address => LenderInfo) lendersInfo;\\n    }\\n\\n    function primexDNS() external view returns (IPrimexDNSV3);\\n\\n    function pmx() external view returns (IERC20);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function registry() external view returns (address);\\n\\n    function reinvestmentRate() external view returns (uint256);\\n\\n    function reinvestmentDuration() external view returns (uint256);\\n\\n    function extraRewards(address, string calldata) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb89b62cf6cc5c1fdeb7209b86973b46610ff7b48b114c9b0cd850507c45e3c2a\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPToken.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IPTokenStorage, IBucket, IBucketV3, IFeeExecutor, IERC20MetadataUpgradeable, IActivityRewardDistributor} from \\\"./IPTokenStorage.sol\\\";\\n\\ninterface IPToken is IPTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     */\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after pTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     */\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param amount The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     */\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 amount, uint256 index);\\n\\n    event LockDeposit(address indexed user, uint256 indexed id, uint256 deadline, uint256 amount);\\n    event UnlockDeposit(address indexed user, uint256 indexed id);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the InterestIncreaser for current PToken.\\n     * @param _interestIncreaser The interest increaser address.\\n     */\\n    function setInterestIncreaser(IFeeExecutor _interestIncreaser) external;\\n\\n    /**\\n     * @dev Sets the lender reward distributor contract address.\\n     * @param _lenderRewardDistributor The address of the lender reward distributor contract.\\n     */\\n    function setLenderRewardDistributor(IActivityRewardDistributor _lenderRewardDistributor) external;\\n\\n    /**\\n     * @notice Locks a deposit for a specified user.\\n     * @param _user The address of the user for whom the deposit is being locked.\\n     * @param _amount The amount to be locked as a deposit.\\n     * @param _duration The duration for which the deposit will be locked.\\n     * @dev This function can only be called externally and overrides the corresponding function in the parent contract.\\n     * @dev The user must not be blacklisted.\\n     */\\n    function lockDeposit(address _user, uint256 _amount, uint256 _duration) external;\\n\\n    /**\\n     * @dev Unlocks a specific deposit.\\n     * @param _depositId The ID of the deposit to be unlocked.\\n     */\\n    function unlockDeposit(uint256 _depositId) external;\\n\\n    /**\\n     * @dev Mints `amount` pTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     * @return Minted amount of PTokens\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Mints pTokens to the reserve address\\n     * Compared to the normal mint, we don't revert when the amountScaled is equal to the zero. Additional checks were also removed\\n     * Only callable by the Bucket\\n     * @param _reserve The address of the reserve\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     */\\n    function mintToReserve(address _reserve, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns pTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the pTokens, getting them burned\\n     * @param _amount The amount of underlying token being returned to receiver\\n     * @param _index The current liquidityIndex\\n     * @return Burned amount of PTokens\\n     */\\n    function burn(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The scaled balances of the user\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns available balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The available balance of the user\\n     */\\n    function availableBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns locked deposits and balance of user\\n     * @param _user The owner of locked deposits\\n     * @return Structure with deposits and total locked balance of user\\n     */\\n    function getUserLockedBalance(address _user) external view returns (LockedBalance memory);\\n\\n    /**\\n     * @dev Returns the scaled total supply of pToken.\\n     * @return The scaled total supply of the pToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Function to get a deposit index in user's deposit array.\\n     * @param id Deposit id.\\n     * @return index Deposit index in user's 'deposit' array.\\n     */\\n    function getDepositIndexById(uint256 id) external returns (uint256 index);\\n}\\n\",\"keccak256\":\"0x180185e60157be84a899b0f6201aae3af5e9a98c5f016054658d14fc2559d70e\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPTokenStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\nimport {IBucket, IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IPTokenStorage is IERC20MetadataUpgradeable {\\n    struct Deposit {\\n        uint256 lockedBalance;\\n        uint256 deadline;\\n        uint256 id;\\n    }\\n\\n    struct LockedBalance {\\n        uint256 totalLockedBalance;\\n        Deposit[] deposits;\\n    }\\n\\n    function bucket() external view returns (IBucketV3);\\n\\n    function interestIncreaser() external view returns (IFeeExecutor);\\n\\n    function lenderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0xc3156264a851ed48f66e8099fb7595ea9c99c2eaed9ad6790b0d5412dd1fcf69\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\n\\nimport {IPositionManagerStorage, IPositionManagerStorageV2, IKeeperRewardDistributorV3} from \\\"./IPositionManagerStorage.sol\\\";\\nimport {IPositionManagerEvents} from \\\"./IPositionManagerEvents.sol\\\";\\nimport {IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IPositionManagerV2 is IPositionManagerStorageV2, IPositionManagerStorage, IPositionManagerEvents, IPausable {\\n    struct ClosePositionVars {\\n        PositionLibrary.Position position;\\n        bool borrowedAmountIsNotZero;\\n        uint256 oracleTolerableLimit;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    event ChangePositionManagerExtension(address indexed newPositionManagerExtension);\\n\\n    event IncreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    struct ClosePositionByConditionParams {\\n        uint256 id;\\n        address keeper;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        uint256 conditionIndex;\\n        bytes ccmAdditionalParams;\\n        PositionLibrary.CloseReason closeReason;\\n        bytes positionSoldAssetOracleData;\\n        bytes nativePmxOracleData;\\n        bytes positionNativeAssetOracleData;\\n        bytes pmxSoldAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified addresses and initializes inherited contracts.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     * @param _positionManagerExtension The address of the PositionManagerExtension contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _keeperRewardDistributor,\\n        address _whiteBlackList,\\n        address _positionManagerExtension\\n    ) external;\\n\\n    /**\\n     * @notice Sets the positionManagerExtension.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newPositionManagerExtension The address of PositionManagerExtension contract.\\n     */\\n    function setPositionManagerExtension(address _newPositionManagerExtension) external;\\n\\n    /**\\n     * @notice Sets protocol parameters through an administrative delegatecall.\\n     * @dev This function allows an admin to update protocol parameters using a delegatecall to the PositionManagerExtension contract.\\n     * @param _data The data containing the encoded function call to be executed by the delegatecall.\\n     */\\n    function setProtocolParamsByAdmin(bytes calldata _data) external;\\n\\n    /**\\n     * @notice Opens a position based on the provided order parameters.\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param _params The parameters for opening a position.\\n     * @return The total borrowed amount, position amount, position ID, and entry price of the new position.\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Opens margin position.\\n     * @dev Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal.\\n     * Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'.\\n     * Mints debtToken for trader (msg.sender)\\n     * @param _params The parameters required to open a position.\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Close trader's active position or liquidate risky position.\\n     * @dev Protocol will fall down (revert) if two conditions occur both:\\n     * 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1,\\n     * so position will make loss for Protocol.\\n     * 2. Not enough liquidity in bucket to pay that loss.\\n     * @param _id Position id for `msg.sender`.\\n     * @param _dealReceiver The receiver of the rest of trader's deposit.\\n     * @param _megaRoutes swap routes on dexes\\n     * @param _amountOutMin minimum allowed amount out for position\\n     */\\n    function closePosition(\\n        uint256 _id,\\n        address _dealReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _pmxSoldAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    // /**\\n    //  * @notice Closes trader's active position by closing condition\\n    //  * @param _id Position id.\\n    //  * @param _keeper The address of the keeper or the recipient of the reward.\\n    //  * @param _megaRoutes An array of routes for executing trades, swap routes on dexes.\\n    //  * @param _conditionIndex The index of the condition to be used for closing the position.\\n    //  * @param _ccmAdditionalParams Additional params needed for canBeClosedAfterSwap of the ConditionalClosingManager.\\n    //  * @param _closeReason The reason for closing the position.\\n    //  */\\n    function closePositionByCondition(ClosePositionByConditionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Updates the position with the given position ID by setting new close conditions.\\n     * @param _positionId The ID of the position to update.\\n     * @param _closeConditions An array of close conditions for the position.\\n     * @dev The caller of this function must be the trader who owns the position.\\n     * @dev Emits an `UpdatePositionConditions` event upon successful update.\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external;\\n\\n    /**\\n     * @notice Increases the deposit amount for a given position.\\n     * @param _positionId The ID of the position to increase the deposit for.\\n     * @param _amount The amount to increase the deposit by.\\n     * @param _asset The address of the asset to deposit.\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit immediately.\\n     * @param _megaRoutes An array of routes to use for trading.\\n     * @param _amountOutMin The minimum amount of the output asset to receive from trading.\\n     */\\n    function increaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _asset,\\n        bool _takeDepositFromWallet,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Decreases the deposit amount for a given position.\\n     * @param _positionId The ID of the position.\\n     * @param _amount The amount to decrease the deposit by.\\n     */\\n    function decreaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    /**\\n     * @notice Deletes a positions by their IDs from a specific bucket for a given traders.\\n     * @param _ids The IDs of the positions to be deleted.\\n     * @param _traders The addresses of the traders who owns the position.\\n     * @param _length The length of the traders array.\\n     * @param _bucket The address of the bucket from which the position is to be deleted.\\n     */\\n    function deletePositions(\\n        uint256[] calldata _ids,\\n        address[] calldata _traders,\\n        uint256 _length,\\n        address _bucket\\n    ) external;\\n\\n    /**\\n     * @notice Allows the trader to partially close a position.\\n     * @param _positionId The ID of the position to be partially closed.\\n     * @param _amount The amount of the position asset to be closed from the position.\\n     * @param _depositReceiver The address where the remaining deposit will be sent.\\n     * @param _megaRoutes The routing information for swapping assets.\\n     * @param _amountOutMin The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _nativePositionAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes calldata _pmxSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfers a specified amount of tokens from the contract to a specified address.\\n     * @dev Only callable by the BATCH_MANAGER_ROLE role.\\n     * @param _token The address of the token to be transferred.\\n     * @param _to The address to which the tokens will be transferred.\\n     * @param _amount The amount of tokens to be transferred.\\n     */\\n    function doTransferOut(address _token, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Returns the oracle tolerable limit for the given asset pair.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the position information for a given ID.\\n     * @param _id The ID of the position to retrieve.\\n     * @return position The position information associated with the given ID.\\n     */\\n    function getPosition(uint256 _id) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Retrieves the position at the specified index.\\n     * @param _index The index of the position to retrieve.\\n     * @return The Position struct at the specified index.\\n     */\\n    function getPositionByIndex(uint256 _index) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Returns the length of the positions array.\\n     * @return The length of the positions array.\\n     */\\n    function getAllPositionsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The number of positions the trader has.\\n     */\\n    function getTraderPositionsLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of positions the bucket has.\\n     */\\n    function getBucketPositionsLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt of a position with the given ID.\\n     * @param _id The ID of the position.\\n     * @return The debt of the position, measured in the same decimal format as debtTokens.\\n     */\\n    function getPositionDebt(uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the close conditions for a specific position.\\n     * @param _positionId The ID of the position.\\n     * @return An array of close conditions associated with the position.\\n     */\\n    function getCloseConditions(uint256 _positionId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the close condition for a given position and index.\\n     * @param _positionId The identifier of the position.\\n     * @param _index The index of the close condition.\\n     * @return The close condition at the specified position and index.\\n     */\\n    function getCloseCondition(\\n        uint256 _positionId,\\n        uint256 _index\\n    ) external view returns (LimitOrderLibrary.Condition memory);\\n\\n    /**\\n     * @notice Checks if a position with the given ID is delisted.\\n     * @param _id The ID of the position.\\n     * @return A boolean indicating whether the position is delisted or not.\\n     */\\n    function isDelistedPosition(uint256 _id) external view returns (bool);\\n}\\n\\ninterface IPositionManager is IPositionManagerStorage, IPausable {\\n    struct ClosePositionVars {\\n        PositionLibrary.Position position;\\n        bool borrowedAmountIsNotZero;\\n        uint256 oracleTolerableLimit;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    event SetMaxPositionSize(address token0, address token1, uint256 amountInToken0, uint256 amountInToken1);\\n    event SetDefaultOracleTolerableLimit(uint256 indexed oracleTolerableLimit);\\n    event SecurityBufferChanged(uint256 indexed securityBuffer);\\n    event MaintenanceBufferChanged(uint256 indexed maintenanceBuffer);\\n    event SetOracleTolerableLimit(address indexed assetA, address indexed assetB, uint256 oracleTolerableLimit);\\n    event KeeperRewardDistributorChanged(address indexed _keeperRewardDistributor);\\n    event MinPositionSizeAndAssetChanged(uint256 indexed _minPositionSize, address indexed _minPositionAsset);\\n    event OracleTolerableLimitMultiplierChanged(uint256 indexed newMultiplier);\\n\\n    event OpenPosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed openedBy,\\n        PositionLibrary.Position position,\\n        address feeToken,\\n        uint256 protocolFee,\\n        uint256 entryPrice,\\n        uint256 leverage,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event PartialClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        uint256 depositedAmount,\\n        uint256 scaledDebtAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut\\n    );\\n\\n    event IncreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event DecreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event UpdatePositionConditions(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    /**\\n     * @notice Initializes the contract with the specified addresses and initializes inherited contracts.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _keeperRewardDistributor,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Sets the maximum position size for a pair of tokens.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _token0 The address of the first token in the pair.\\n     * @param _token1 The address of the second token in the pair.\\n     * @param _amountInToken0 The maximum amount of token0 allowed in the position.\\n     * @param _amountInToken1 The maximum amount of token1 allowed in the position.\\n     */\\n    function setMaxPositionSize(\\n        address _token0,\\n        address _token1,\\n        uint256 _amountInToken0,\\n        uint256 _amountInToken1\\n    ) external;\\n\\n    /**\\n     * @notice Sets the default oracle tolerable limit for the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _percent The new value for the default oracle tolerable limit. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setDefaultOracleTolerableLimit(uint256 _percent) external;\\n\\n    /**\\n     * @notice Sets the oracle tolerable limit between two assets.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _assetA The address of the first asset.\\n     * @param _assetB The address of the second asset.\\n     * @param _percent The new value for the oracle tolerable limit between two assets. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(address _assetA, address _assetB, uint256 _percent) external;\\n\\n    /**\\n     * @notice Function to set oracleTolerableLimitMultiplier.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param newMultiplier New multiplier in WAD format.\\n     */\\n    function setOracleTolerableLimitMultiplier(uint256 newMultiplier) external;\\n\\n    /**\\n     * @notice Sets the security buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * 0 <= newSecurityBuffer < 1.\\n     * Buffer security parameter is used in calculating the liquidation conditions\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.i9v508hvrv42\\n     * @param newSecurityBuffer The new value of the security buffer in WAD format.\\n     */\\n    function setSecurityBuffer(uint256 newSecurityBuffer) external;\\n\\n    /**\\n     * @notice Sets the maintenance buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * The new maintenance buffer value should be greater than zero and less than one.\\n     * Maintenance buffer is used in calculating the maximum leverage\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.87oc1j1s9z21\\n     * @param newMaintenanceBuffer The new value of the maintenance buffer in WAD format.\\n     */\\n    function setMaintenanceBuffer(uint256 newMaintenanceBuffer) external;\\n\\n    /**\\n     * @notice Sets the address of the SpotTradingRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _spotTradingRewardDistributor The address of the SpotTradingRewardDistributor contract.\\n     */\\n    function setSpotTradingRewardDistributor(address _spotTradingRewardDistributor) external;\\n\\n    /**\\n     * @notice Sets the KeeperRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     */\\n    function setKeeperRewardDistributor(IKeeperRewardDistributorV3 _keeperRewardDistributor) external;\\n\\n    /**\\n     * @notice Opens a position based on the provided order parameters.\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param _params The parameters for opening a position.\\n     * @return The total borrowed amount, position amount, position ID, and entry price of the new position.\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Opens margin position.\\n     * @dev Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal.\\n     * Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'.\\n     * Mints debtToken for trader (msg.sender)\\n     * @param _params The parameters required to open a position.\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Close trader's active position or liquidate risky position.\\n     * @dev Protocol will fall down (revert) if two conditions occur both:\\n     * 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1,\\n     * so position will make loss for Protocol.\\n     * 2. Not enough liquidity in bucket to pay that loss.\\n     * @param _id Position id for `msg.sender`.\\n     * @param _dealReceiver The receiver of the rest of trader's deposit.\\n     * @param _megaRoutes swap routes on dexes\\n     * @param _amountOutMin minimum allowed amount out for position\\n     */\\n    function closePosition(\\n        uint256 _id,\\n        address _dealReceiver,\\n        PrimexPricingLibrary.MegaRoute[] memory _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Closes trader's active position by closing condition\\n     * @param _id Position id.\\n     * @param _keeper The address of the keeper or the recipient of the reward.\\n     * @param _megaRoutes An array of routes for executing trades, swap routes on dexes.\\n     * @param _conditionIndex The index of the condition to be used for closing the position.\\n     * @param _ccmAdditionalParams Additional params needed for canBeClosedAfterSwap of the ConditionalClosingManager.\\n     * @param _closeReason The reason for closing the position.\\n     */\\n    function closePositionByCondition(\\n        uint256 _id,\\n        address _keeper,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _conditionIndex,\\n        bytes calldata _ccmAdditionalParams,\\n        PositionLibrary.CloseReason _closeReason\\n    ) external;\\n\\n    /**\\n     * @notice Allows the trader to partially close a position.\\n     * @param _positionId The ID of the position to be partially closed.\\n     * @param _amount The amount of the position asset to be closed from the position.\\n     * @param _depositReceiver The address where the remaining deposit will be sent.\\n     * @param _megaRoutes The routing information for swapping assets.\\n     * @param _amountOutMin The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Updates the position with the given position ID by setting new close conditions.\\n     * @param _positionId The ID of the position to update.\\n     * @param _closeConditions An array of close conditions for the position.\\n     * @dev The caller of this function must be the trader who owns the position.\\n     * @dev Emits an `UpdatePositionConditions` event upon successful update.\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external;\\n\\n    /**\\n     * @notice Increases the deposit amount for a given position.\\n     * @param _positionId The ID of the position to increase the deposit for.\\n     * @param _amount The amount to increase the deposit by.\\n     * @param _asset The address of the asset to deposit.\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit immediately.\\n     * @param _megaRoutes An array of routes to use for trading.\\n     * @param _amountOutMin The minimum amount of the output asset to receive from trading.\\n     */\\n    function increaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _asset,\\n        bool _takeDepositFromWallet,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Decreases the deposit amount for a given position.\\n     * @param _positionId The ID of the position.\\n     * @param _amount The amount to decrease the deposit by.\\n     */\\n    function decreaseDeposit(uint256 _positionId, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the minimum position size and the corresponding asset for positions.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _minPositionSize The new minimum position size.\\n     * @param _minPositionAsset The address of the asset associated with the minimum position size.\\n     */\\n    function setMinPositionSize(uint256 _minPositionSize, address _minPositionAsset) external;\\n\\n    /**\\n     * @notice Deletes a positions by their IDs from a specific bucket for a given traders.\\n     * @param _ids The IDs of the positions to be deleted.\\n     * @param _traders The addresses of the traders who owns the position.\\n     * @param _length The length of the traders array.\\n     * @param _bucket The address of the bucket from which the position is to be deleted.\\n     */\\n    function deletePositions(\\n        uint256[] calldata _ids,\\n        address[] calldata _traders,\\n        uint256 _length,\\n        address _bucket\\n    ) external;\\n\\n    /**\\n     * @notice Transfers a specified amount of tokens from the contract to a specified address.\\n     * @dev Only callable by the BATCH_MANAGER_ROLE role.\\n     * @param _token The address of the token to be transferred.\\n     * @param _to The address to which the tokens will be transferred.\\n     * @param _amount The amount of tokens to be transferred.\\n     */\\n    function doTransferOut(address _token, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Returns the oracle tolerable limit for the given asset pair.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the position information for a given ID.\\n     * @param _id The ID of the position to retrieve.\\n     * @return position The position information associated with the given ID.\\n     */\\n    function getPosition(uint256 _id) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Retrieves the position at the specified index.\\n     * @param _index The index of the position to retrieve.\\n     * @return The Position struct at the specified index.\\n     */\\n    function getPositionByIndex(uint256 _index) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Returns the length of the positions array.\\n     * @return The length of the positions array.\\n     */\\n    function getAllPositionsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The number of positions the trader has.\\n     */\\n    function getTraderPositionsLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of positions the bucket has.\\n     */\\n    function getBucketPositionsLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt of a position with the given ID.\\n     * @param _id The ID of the position.\\n     * @return The debt of the position, measured in the same decimal format as debtTokens.\\n     */\\n    function getPositionDebt(uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the close conditions for a specific position.\\n     * @param _positionId The ID of the position.\\n     * @return An array of close conditions associated with the position.\\n     */\\n    function getCloseConditions(uint256 _positionId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the close condition for a given position and index.\\n     * @param _positionId The identifier of the position.\\n     * @param _index The index of the close condition.\\n     * @return The close condition at the specified position and index.\\n     */\\n    function getCloseCondition(\\n        uint256 _positionId,\\n        uint256 _index\\n    ) external view returns (LimitOrderLibrary.Condition memory);\\n\\n    /**\\n     * @notice Checks if a position with the given ID is delisted.\\n     * @param _id The ID of the position.\\n     * @return A boolean indicating whether the position is delisted or not.\\n     */\\n    function isDelistedPosition(uint256 _id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb1069a961bc115256679dcc62a7870c70163ebeb2269bf9e1ab9486a45484ee1\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManagerEvents.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\n\\ninterface IPositionManagerEvents {\\n    event SetMaxPositionSize(address token0, address token1, uint256 amountInToken0, uint256 amountInToken1);\\n    event SetDefaultOracleTolerableLimit(uint256 indexed oracleTolerableLimit);\\n    event SecurityBufferChanged(uint256 indexed securityBuffer);\\n    event MaintenanceBufferChanged(uint256 indexed maintenanceBuffer);\\n    event SetOracleTolerableLimit(address indexed assetA, address indexed assetB, uint256 oracleTolerableLimit);\\n    event KeeperRewardDistributorChanged(address indexed _keeperRewardDistributor);\\n    event OracleTolerableLimitMultiplierChanged(uint256 indexed newMultiplier);\\n\\n    event OpenPosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed openedBy,\\n        PositionLibrary.Position position,\\n        uint256 entryPrice,\\n        uint256 leverage,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event PartialClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        uint256 depositedAmount,\\n        uint256 scaledDebtAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut\\n    );\\n\\n    event DecreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event UpdatePositionConditions(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n}\\n\",\"keccak256\":\"0x568630183883e5b6bee9e1d3ee6fba6f707dc33496111a4892cca839ad6a9f05\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManagerStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {ISpotTradingRewardDistributorV2} from \\\"../SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\\\";\\n\\ninterface IPositionManagerStorage {\\n    function maxPositionSize(address, address) external returns (uint256);\\n\\n    function defaultOracleTolerableLimit() external returns (uint256);\\n\\n    function securityBuffer() external view returns (uint256);\\n\\n    function maintenanceBuffer() external view returns (uint256);\\n\\n    function positionsId() external view returns (uint256);\\n\\n    function traderPositionIds(address _trader, uint256 _index) external view returns (uint256);\\n\\n    function bucketPositionIds(address _bucket, uint256 _index) external view returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function primexDNS() external view returns (IPrimexDNSV3);\\n\\n    function priceOracle() external view returns (IPriceOracleV2);\\n\\n    function keeperRewardDistributor() external view returns (IKeeperRewardDistributorV3);\\n\\n    function spotTradingRewardDistributor() external view returns (ISpotTradingRewardDistributorV2);\\n\\n    function minPositionSize() external view returns (uint256);\\n\\n    function minPositionAsset() external view returns (address);\\n}\\n\\ninterface IPositionManagerStorageV2 {\\n    function positionManagerExtension() external view returns (address);\\n}\\n\",\"keccak256\":\"0x01ffe4757883c6cb129e22d7cfd1b40fe0191f498c28eff60a4d7ca14e774acb\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPriceOracleStorage, IPriceOracleStorageV3, IPriceOracleStorageV4} from \\\"./IPriceOracleStorage.sol\\\";\\n\\ninterface IPriceOracleV2 is IPriceOracleStorageV3 {\\n    event ChainlinkPriceFeedUpdated(address indexed token, address indexed priceFeed);\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n    event PythPairIdUpdated(address indexed token, bytes32 indexed priceFeedId);\\n    event Univ3OracleUpdated(uint256 indexed oracleType, address indexed oracle);\\n    event TimeToleranceUpdated(uint256 timeTolerance);\\n    event SupraDataFeedUpdated(address indexed tokenA, address indexed tokenB, uint256 id);\\n\\n    event Univ3TrustedPairUpdated(\\n        uint256 indexed oracleType,\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        bool isTrusted\\n    );\\n\\n    struct UpdateUniv3TrustedPairParams {\\n        uint256 oracleType;\\n        address tokenA;\\n        address tokenB;\\n        bool isTrusted;\\n    }\\n\\n    enum UpdatePullOracle {\\n        Pyth,\\n        Supra,\\n        Orally\\n    }\\n\\n    struct UpdateSupraDataFeedParams {\\n        address tokenA;\\n        address tokenB;\\n        SupraDataFeedId feedData;\\n    }\\n\\n    /**\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    struct UpdatePriceDropFeedsParams {\\n        address assetA;\\n        address assetB;\\n        address priceDropFeed;\\n    }\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     * @param _usdt Address of the USDT token\\n     * @param _treasury Address of the Treasury\\n     */\\n    function initialize(address _registry, address _eth, address _usdt, address _treasury) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _updateParams The array of the UpdatePriceDropFeedsParams structs\\n     */\\n    function updatePriceDropFeeds(UpdatePriceDropFeedsParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Calculates exchange rate of one token to another according to the specific oracle route\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param oracleData The list of oracles to use for price calculations\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality\\n     */\\n    function getExchangeRate(\\n        address assetA,\\n        address assetB,\\n        bytes calldata oracleData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Sets or updates the Chainlink price feed for the list of tokens to usd.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _feeds Array of price feeds.\\n     */\\n    function updateChainlinkPriceFeedsUsd(address[] calldata _tokens, address[] calldata _feeds) external;\\n\\n    /**\\n     * @notice Sets or updates the Pyth pair ids for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _priceFeedIds Array of pair ids.\\n     */\\n    function updatePythPairId(address[] calldata _tokens, bytes32[] calldata _priceFeedIds) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _params Array of token pairs and Supra ids.\\n     */\\n\\n    function updateSupraDataFeed(UpdateSupraDataFeedParams[] calldata _params) external;\\n\\n    /**\\n     * @notice Sets Uni v3-based TWAP price oracle contracts.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _oracleTypes Array of ids of TWAP contracts.\\n     * @param _oracles Array of TWAP contract addresses.\\n     */\\n    function updateUniv3TypeOracle(uint256[] calldata _oracleTypes, address[] calldata _oracles) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _updateParams Array of token pairs, their DEXs and new trusted status.\\n     */\\n    function updateUniv3TrustedPair(UpdateUniv3TrustedPairParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Sets the Pyth address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pyth the address of the Pyth oracle\\n     */\\n\\n    function setPyth(address _pyth) external;\\n\\n    /**\\n     * @notice Sets the Supra pull oracle address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraPullOracle the address of the Supra pull oracle\\n     */\\n\\n    function setSupraPullOracle(address _supraPullOracle) external;\\n\\n    /**\\n     * @notice Sets the Supra storage address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraStorageOracle the address of the Supra storage\\n     */\\n    function setSupraStorageOracle(address _supraStorageOracle) external;\\n\\n    /**\\n     * @notice Updates pull oracle data for passed oracle types\\n     * @param _data An array of update data for passed oracles\\n     * @param _pullOracleTypes An array of oracle types  (Must conform to the UpdatePullOracle struct)\\n     */\\n\\n    function updatePullOracle(bytes[][] calldata _data, uint256[] calldata _pullOracleTypes) external payable;\\n\\n    /**\\n     * @notice Sets the time tolerance\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _timeTolerance Time tolerance in seconds\\n     */\\n\\n    function setTimeTolerance(uint256 _timeTolerance) external;\\n\\n    /**\\n     * @notice Sets the usdt address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _usdt the address of the USDT\\n     */\\n\\n    function setUSDT(address _usdt) external;\\n\\n    /**\\n     * @notice Sets the treasury address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _treasury the address of the treasury\\n     */\\n    function setTreasury(address _treasury) external;\\n}\\n\\ninterface IPriceOracle is IPriceOracleStorage {\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     */\\n    function initialize(address _registry, address _eth) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Add or update price feed for assets pair. For only the admin role.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @param priceFeed The chain link price feed address for the pair assetA/assetB\\n     */\\n    function updatePriceFeed(address assetA, address assetB, address priceFeed) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Requests two priceFeeds - assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * @dev If there is no price feed found, the code will return a message that no price feed found.\\n     * @param baseAsset The first currency within the currency pair quotation (the base currency).\\n     * @param quoteAsset The second currency within the currency pair quotation (the quote currency).\\n     * @return A tuple of basePriceFeed and quotePriceFeed. The addresses of the price feed for the base asset and quote asset respectively.\\n     */\\n    function getPriceFeedsPair(address baseAsset, address quoteAsset) external view returns (address, address);\\n\\n    /**\\n     * @notice Requests priceFeed for the actual exchange rate for an assetA/assetB pair.\\n     * @dev If no price feed for the pair found, USD and ETH are used as intermediate tokens.\\n     * A price for assetA/assetB can be derived if two data feeds exist:\\n     * assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * If there is no price feed found, the code will return a message that no price feed found.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality which will be recalucaled in PrimexPricingLibrary.\\n     * @return direction of a pair as it stored in chainLinkPriceFeeds (i.e. returns 'true' for assetA/assetB, and 'false' for assetB/assetA).\\n     * Throws if priceFeed wasn't found or priceFeed hasn't answer is 0.\\n     */\\n    function getExchangeRate(address assetA, address assetB) external view returns (uint256, bool);\\n\\n    /**\\n     * @notice Retrieves the direct price feed for the given asset pair.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return priceFeed The address of the direct price feed.\\n     */\\n    function getDirectPriceFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n}\\n\\ninterface IPriceOracleV3 is IPriceOracleV2 {\\n    struct UpdateOrallySymbolsParams {\\n        string symbol; // string(\\\"tokenA/tokenB\\\")\\n        address[2] tokens; // [addressA, addressB]\\n    }\\n\\n    struct UpdateStorkPairIdsParams {\\n        string pair; // string(\\\"BTCUSD\\\")\\n        address[2] tokens; // [btc address, usd address]\\n    }\\n    event OrallySymbolUpdated(address indexed tokenA, address indexed tokenB, string symbol);\\n    event OrallyTimeToleranceUpdated(uint256 timeTolerance);\\n    event StorkPairIdUpdated(address indexed tokenA, address indexed tokenB, string pairId);\\n    event CurveOracleUpdated(IPriceOracleStorageV4.CurveOracleKind indexed oracleType, address indexed oracle);\\n    event EIP4626TokenToUnderlyingAssetUpdated(address indexed token, address underlyingAsset);\\n    event AddUniswapV2LPToken(address indexed uniswapV2Token);\\n    event RemoveUniswapV2LPToken(address indexed uniswapV2Token);\\n\\n    /**\\n     * @notice Sets or updates the Orally token symbol for the list of tokens (tokens order MATTERS)\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param params Array of UpdateOrallySymbolsParams struct\\n     */\\n\\n    function updateOrallySymbols(UpdateOrallySymbolsParams[] calldata params) external;\\n\\n    /**\\n     * @notice Sets the time tolerance specially for the orally\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _orallyTimeTolerance Time tolerance in seconds\\n     */\\n\\n    function setOrallyTimeTolerance(uint256 _orallyTimeTolerance) external;\\n\\n    /**\\n     * @notice Sets the orally oracle address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _orally the address of the Orally oracle\\n     */\\n    function setOrallyOracle(address _orally) external;\\n\\n    /**\\n     * @notice Sets or updates the Stork Pair Ids\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param params Array of UpdateStorkPairIdsParams struct\\n     */\\n\\n    function updateStorkPairIds(UpdateStorkPairIdsParams[] calldata params) external;\\n\\n    /**\\n     * @notice Sets the stork verify address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _storkVerify the Stork verify address\\n     */\\n\\n    function setStorkVerify(address _storkVerify) external;\\n\\n    /**\\n     * @notice Sets the stork public key (address)\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _storkPublicKey the Stork public key address\\n     */\\n\\n    function setStorkPublicKey(address _storkPublicKey) external;\\n\\n    function updateCurveTypeOracle(\\n        IPriceOracleStorageV4.CurveOracleKind[] calldata _oracleTypes,\\n        address[] calldata _oracles\\n    ) external;\\n\\n    function updateEIP4626TokenToUnderlyingAsset(\\n        address[] calldata _rebaseTokens,\\n        address[] calldata _underlyingAssets\\n    ) external;\\n\\n    /**\\n     * @notice Sets the flag to true for the passed tokens\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _lpTokens the addresses of lp tokens\\n     */\\n\\n    function addUniswapV2LPTokens(address[] calldata _lpTokens) external;\\n\\n    /**\\n     * @notice Sets the flag to false for the passed tokens\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _lpTokens the addresses of lp tokens\\n     */\\n\\n    function removeUniswapV2LPTokens(address[] calldata _lpTokens) external;\\n\\n    /**\\n     * @notice Sets the UniswapV2LP oracle\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _uniswapV2LPOracle the UniswapV2LP oracle address\\n     */\\n\\n    function setUniswapV2LPOracle(address _uniswapV2LPOracle) external;\\n}\\n\",\"keccak256\":\"0xc325d610885e86499c1c1444c3f5e45ec3751158ca84f3ad5ea7a72bb31db921\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracleStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {ISupraOraclePull} from \\\"../interfaces/ISupraOraclePull.sol\\\";\\nimport {ISupraSValueFeed} from \\\"../interfaces/ISupraSValueFeed.sol\\\";\\nimport {IOrallyVerifierOracle} from \\\"@orally-network/solidity-sdk/IOrallyVerifierOracle.sol\\\";\\nimport {IStorkVerify} from \\\"../interfaces/IStorkVerify.sol\\\";\\nimport {IUniswapV2LPOracle} from \\\"../UniswapV2LPOracle/IUniswapV2LPOracle.sol\\\";\\n\\ninterface IPriceOracleStorage {\\n    function registry() external view returns (address);\\n\\n    function eth() external view returns (address);\\n\\n    function gasPriceFeed() external view returns (address);\\n\\n    function pairPriceDrops(address, address) external view returns (uint256);\\n}\\n\\ninterface IPriceOracleStorageV2 is IPriceOracleStorage {\\n    enum OracleType {\\n        Pyth,\\n        Chainlink,\\n        Uniswapv3,\\n        Supra,\\n        Orally,\\n        Stork,\\n        CurveLPOracle,\\n        EIP4626,\\n        UniswapV2LP\\n    }\\n\\n    struct OracleRoute {\\n        address tokenTo;\\n        OracleType oracleType;\\n        bytes oracleData;\\n    }\\n\\n    function pyth() external view returns (IPyth);\\n\\n    function timeTolerance() external view returns (uint256);\\n\\n    function chainlinkPriceFeedsUsd(address) external view returns (address);\\n\\n    function pythPairIds(address) external view returns (bytes32);\\n\\n    function univ3TypeOracles(uint256) external view returns (address);\\n\\n    function univ3TrustedPairs(uint256, address, address) external view returns (bool);\\n}\\n\\ninterface IPriceOracleStorageV3 is IPriceOracleStorageV2 {\\n    struct SupraDataFeedId {\\n        uint256 id;\\n        bool initialize;\\n    }\\n\\n    function supraPullOracle() external view returns (ISupraOraclePull);\\n\\n    function supraStorageOracle() external view returns (ISupraSValueFeed);\\n\\n    function supraDataFeedID(address, address) external view returns (uint256, bool);\\n\\n    function usdt() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\\ninterface IPriceOracleStorageV4 is IPriceOracleStorageV3 {\\n    enum CurveOracleKind {\\n        STABLE,\\n        TRICRYPTO,\\n        VOLATILE\\n    }\\n\\n    function orallySymbol(address, address) external view returns (string memory);\\n\\n    function orallyOracle() external view returns (IOrallyVerifierOracle);\\n\\n    function orallyTimeTolerance() external view returns (uint256);\\n\\n    function storkVerify() external view returns (IStorkVerify);\\n\\n    function storkPublicKey() external view returns (address);\\n\\n    function storkAssetPairId(address, address) external view returns (string memory);\\n\\n    function curveTypeOracles(CurveOracleKind) external view returns (address);\\n\\n    function eip4626TokenToUnderlyingAsset(address) external view returns (address);\\n\\n    function isUniswapV2LP(address) external view returns (bool);\\n\\n    function uniswapV2LPOracle() external view returns (IUniswapV2LPOracle);\\n}\\n\",\"keccak256\":\"0x186e0f61de8f99cbaa7819d984f1b6b61ce4608d0a8f5102b493eb7234921d56\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNS.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPrimexDNSStorage, IPrimexDNSStorageV3, IPrimexDNSStorageV4} from \\\"./IPrimexDNSStorage.sol\\\";\\n\\ninterface IPrimexDNSV3 is IPrimexDNSStorageV4 {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event TiersManagerchanged(address indexed tiersManager);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    event ChangeProtocolFeeRate(FeeRateType indexed feeRateType, uint256 indexed tier, uint256 feeRate);\\n    event ChangeAverageGasPerAction(TradingOrderType indexed tradingOrderType, uint256 indexed averageGasPerAction);\\n    event ChangeMaxProtocolFee(uint256 indexed maxProtocolFee);\\n    event ChangeProtocolFeeCoefficient(uint256 indexed protocolFeeCoefficient);\\n    event ChangeLiquidationGasAmount(uint256 indexed liquidationGasAmount);\\n    event ChangePmxDiscountMultiplier(uint256 indexed pmxDiscountMultiplier);\\n    event ChangeAdditionalGasSpent(uint256 indexed additionalGasSpent);\\n    event ChangeGasPriceBuffer(uint256 indexed gasPriceBuffer);\\n    event ChangeMinFeeRestrictions(CallingMethod indexed callingMethod, MinFeeRestrictions minFeeRestrictions);\\n    event ChangeLeverageTolerance(uint256 leverageTolerance);\\n\\n    /**\\n     * @param feeRateType The order type for which the rate is set\\n     * @param tier The tier for which the rate is set\\n     * @param feeRate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        FeeRateType feeRateType;\\n        uint256 tier;\\n        uint256 feeRate;\\n    }\\n\\n    struct AverageGasPerActionParams {\\n        TradingOrderType tradingOrderType;\\n        uint256 averageGasPerAction;\\n    }\\n\\n    /**\\n     * @dev Params for initialize() function\\n     * @param registry The address of the PrimexRegistry contract.\\n     * @param pmx The address of the PMX token contract.\\n     * @param treasury The address of the Treasury contract.\\n     * @param delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param feeRateParams An array of structs to set protocol fee rate on the corresponding\\n     * @param averageGasPerActionParams An array of structs to set average amount of gas spent by Keeper on the corresponding action\\n     * @param maxProtocolFee MaxProtocolFee that can be charged. Measured in NATIVE_CURRENCY\\n     * @param liquidationGasAmount Average gas amount spent for a single liquidation, measured in wei.\\n     * @param protocolFeeCoefficient Additional coefficient to calculate minProtocolFee, measured in wei.\\n     * @param additionalGasSpent Gas that will be additionally spend after gasSpent calculation.\\n     * @param pmxDiscountMultiplier Multiplier for PMX discount calculation\\n     * @param gasPriceBuffer Multiplier which protects position from immediate liquidation after gas price changed\\n     */\\n    struct InitParams {\\n        address registry;\\n        address pmx;\\n        address treasury;\\n        uint256 delistingDelay;\\n        uint256 adminWithdrawalDelay;\\n        FeeRateParams[] feeRateParams;\\n        AverageGasPerActionParams[] averageGasPerActionParams;\\n        uint256 maxProtocolFee;\\n        uint256 liquidationGasAmount;\\n        uint256 protocolFeeCoefficient;\\n        uint256 additionalGasSpent;\\n        uint256 pmxDiscountMultiplier;\\n        uint256 gasPriceBuffer;\\n        uint256 leverageTolerance;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     */\\n    function initialize(InitParams calldata _params) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Sets the address of the TiersManager contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _tiersManager The address of the TiersManager token contract.\\n     */\\n    function setTiersManager(address _tiersManager) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @notice Set min protocol fee restrictions for different calling method.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setMinFeeRestrictions(\\n        CallingMethod _callingMethod,\\n        MinFeeRestrictions calldata _minFeeRestrictions\\n    ) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n\\n    /**\\n     * @notice Set the protocol fee rate for one type of order.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setProtocolFeeRate(FeeRateParams[] calldata _feeRateType) external;\\n\\n    /**\\n     * @notice Set average gas amount of gas spent by Keeper on the corresponding action.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setAverageGasPerAction(AverageGasPerActionParams calldata _averageGasPerActionParams) external;\\n\\n    /**\\n     * @notice Set the max protocol fee.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _maxProtocolFee The new max protocol fee.\\n     */\\n    function setMaxProtocolFee(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set protocol fee coefficient. Used to calculate the minProtocol fee\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setProtocolFeeCoefficient(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set liquidation gas amount (average gas amount spent for a single liquidation).\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setLiquidationGasAmount(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set pmxDiscountMultiplier.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     */\\n    function setPmxDiscountMultiplier(uint256 _pmxDiscountMultiplier) external;\\n\\n    /**\\n     * @notice Set new additionalGas. Used to calculate the minProtocol fee\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setAdditionalGasSpent(uint256 _additionalGasSpent) external;\\n\\n    /**\\n     * @notice Set new gasPriceBuffer.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setGasPriceBuffer(uint256 _gasPriceBuffer) external;\\n\\n    /**\\n     * @notice Set new leverageTolerance.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setLeverageTolerance(uint256 _leverageTolerance) external;\\n\\n    /**\\n     * @notice Retrieves pmx, treasury, feeRateType, maxProtocolFee, pmxDiscountMultiplier\\n     */\\n    function getPrimexDNSParams() external view returns (address, address, address, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves protocolFeeRateByTier by the feeRateType and the user tier\\n     */\\n    function getProtocolFeeRateByTier(FeeRateType _feeRateType, uint256 _tier) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves an array of protocolFeeRateByTier by the feeRateType\\n     */\\n\\n    function getProtocolFeeRatesByTier(\\n        FeeRateType _feeRateType,\\n        uint256[] calldata _tiers\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves liquidationGasAmount, protocolFeeCoefficient, additionalGasSpent, maxGasAmount and baseLength\\n     */\\n    function getParamsForMinProtocolFee(\\n        CallingMethod _callingMethod\\n    ) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves baseLength, averageGasPerAction, protocolFeeCoefficient and gasPriceBuffer\\n     */\\n    function getParamsForMinPositionSize(\\n        TradingOrderType _tradingOrderType\\n    ) external view returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves baseLength for L2 chain payment model depending from tradingOrderType\\n     */\\n    function getL1BaseLengthForTradingOrderType(TradingOrderType _tradingOrderType) external view returns (uint256);\\n}\\n\\ninterface IPrimexDNS is IPrimexDNSStorage {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ChangeFeeRate(OrderType orderType, address token, uint256 rate);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    /**\\n     * @param orderType The order type for which the rate is set\\n     * @param feeToken The token address for which the rate is set\\n     * @param rate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        OrderType orderType;\\n        address feeToken;\\n        uint256 rate;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _treasury The address of the Treasury contract.\\n     * @param _delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param _adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param _feeRateParams Initial fee params\\n     */\\n    function initialize(\\n        address _registry,\\n        address _pmx,\\n        address _treasury,\\n        uint256 _delistingDelay,\\n        uint256 _adminWithdrawalDelay,\\n        FeeRateParams[] calldata _feeRateParams\\n    ) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the protocol rate in PMX.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setFeeRate(FeeRateParams calldata _feeRateParams) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n}\\n\",\"keccak256\":\"0xcc4385cbb7d2c105887593e8c7a2db1145b27d5665b821b55ac6a17e9ba53a47\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNSStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {ITiersManager} from \\\"../TiersManager/ITiersManager.sol\\\";\\n\\ninterface IPrimexDNSStorage {\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Deprecated\\n    }\\n\\n    enum OrderType {\\n        MARKET_ORDER,\\n        LIMIT_ORDER,\\n        SWAP_MARKET_ORDER,\\n        SWAP_LIMIT_ORDER\\n    }\\n\\n    struct BucketData {\\n        address bucketAddress;\\n        Status currentStatus;\\n        uint256 delistingDeadline;\\n        // The deadline is for the admin to call Bucket.withdrawAfterDelisting().\\n        uint256 adminDeadline;\\n    }\\n    struct DexData {\\n        address routerAddress;\\n        bool isActive;\\n    }\\n\\n    struct AdapterData {\\n        string[] dexes;\\n        bool isAdded;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function delistingDelay() external view returns (uint256);\\n\\n    function adminWithdrawalDelay() external view returns (uint256);\\n\\n    function buckets(string memory) external view returns (address, Status, uint256, uint256);\\n\\n    function dexes(string memory) external view returns (address, bool);\\n\\n    function cmTypeToAddress(uint256 cmType) external view returns (address);\\n\\n    function dexAdapter() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function aavePool() external view returns (address);\\n\\n    function feeRates(OrderType _orderType, address _token) external view returns (uint256);\\n}\\n\\ninterface IPrimexDNSStorageV2 is IPrimexDNSStorage {\\n    struct FeeRestrictions {\\n        uint256 minProtocolFee;\\n        uint256 maxProtocolFee;\\n    }\\n\\n    function feeRestrictions(\\n        OrderType _orderType\\n    ) external view returns (uint256 minProtocolFee, uint256 maxProtocolFee);\\n}\\n\\ninterface IPrimexDNSStorageV3 is IPrimexDNSStorageV2 {\\n    enum FeeRateType {\\n        MarginPositionClosedByTrader,\\n        SpotPositionClosedByTrader,\\n        MarginPositionClosedByKeeper,\\n        SpotPositionClosedByKeeper,\\n        MarginLimitOrderExecuted,\\n        SpotLimitOrderExecuted,\\n        SwapLimitOrderExecuted,\\n        SwapMarketOrder\\n    }\\n\\n    enum TradingOrderType {\\n        MarginMarketOrder,\\n        SpotMarketOrder,\\n        MarginLimitOrder,\\n        MarginLimitOrderDepositInThirdAsset,\\n        SpotLimitOrder,\\n        SwapLimitOrder\\n    }\\n\\n    enum CallingMethod {\\n        OpenPositionByOrder,\\n        ClosePositionByCondition\\n    }\\n    struct MinFeeRestrictions {\\n        uint256 maxGasAmount;\\n        uint256 baseLength;\\n    }\\n\\n    function protocolFeeRates(FeeRateType _feeRateType) external view returns (uint256);\\n\\n    function averageGasPerAction(TradingOrderType _tradingOrderType) external view returns (uint256);\\n\\n    function minFeeRestrictions(\\n        CallingMethod _callingMethod\\n    ) external view returns (uint256 maxGasAmount, uint256 baseLength);\\n\\n    function maxProtocolFee() external view returns (uint256);\\n\\n    function protocolFeeCoefficient() external view returns (uint256);\\n\\n    function liquidationGasAmount() external view returns (uint256);\\n\\n    function additionalGasSpent() external view returns (uint256);\\n\\n    function pmxDiscountMultiplier() external view returns (uint256);\\n\\n    function gasPriceBuffer() external view returns (uint256);\\n\\n    function leverageTolerance() external view returns (uint256);\\n}\\n\\ninterface IPrimexDNSStorageV4 is IPrimexDNSStorageV3 {\\n    function protocolFeeRatesByTier(FeeRateType _feeRateType, uint256 _tier) external view returns (uint256);\\n\\n    function tiersManager() external view returns (ITiersManager);\\n}\\n\",\"keccak256\":\"0x7ed019ece2b07bc517166ff58f9365105deb46f399e66309085508324593e54f\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserve.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserveStorage} from \\\"./IReserveStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IReserve is IReserveStorage, IPausable {\\n    event BurnAmountCalculated(uint256 burnAmount);\\n    event TransferRestrictionsChanged(address indexed pToken, TransferRestrictions newTransferRestrictions);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param dns The address of PrimexDNS contract\\n     * @param registry The address of Registry contract\\n     */\\n    function initialize(IPrimexDNSV3 dns, address registry) external;\\n\\n    /**\\n     * @dev Burns the permanent loss amount (presented in pTokens) from the Reserve for a particular bucket\\n     * @param bucket The address of a bucket\\n     * Emits BurnAmountCalculated(burnAmount) event\\n     */\\n    function paybackPermanentLoss(IBucketV3 bucket) external;\\n\\n    /**\\n     * @dev Transfers some bonus in pTokens to receiver from Reserve\\n     * Can be called by executor only\\n     * @param _bucketName The bucket where the msg.sender should be a fee decreaser (for debtToken) or\\n     * interest increaser (for pToken)\\n     * @param _to The receiver of bonus pTokens\\n     * @param _amount The amount of bonus pTokens to transfer\\n     */\\n    function payBonus(string memory _bucketName, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @dev Function to transfer tokens to the Treasury. Only MEDIUM_TIMELOCK_ADMIN can call it.\\n     * @param bucket The bucket from which to transfer pTokens\\n     * @param amount The amount of pTokens to transfer\\n     */\\n    function transferToTreasury(address bucket, uint256 amount) external;\\n\\n    /**\\n     * @dev Function to set transfer restrictions for a token.\\n     * @notice Only MEDIUM_TIMELOCK_ADMIN can call it.\\n     * @param pToken pToken to set restrictions for\\n     * @param transferRestrictions Min amount to be left in the Reserve\\n     */\\n    function setTransferRestrictions(address pToken, TransferRestrictions calldata transferRestrictions) external;\\n}\\n\",\"keccak256\":\"0xddae0dbd32d6082d11bb5d6205847b9b919badc8b775584c4a1b7774541f9d5e\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserveStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IReserveStorage {\\n    struct TransferRestrictions {\\n        uint256 minAmountToBeLeft;\\n        uint256 minPercentOfTotalSupplyToBeLeft;\\n    }\\n\\n    event TransferFromReserve(address pToken, address to, uint256 amount);\\n\\n    function transferRestrictions(address pToken) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x2817b7fb7470ca4af938ffe1485caa0b96dd22ac399d22c463f15efd9d6484cc\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ISpotTradingRewardDistributorStorage} from \\\"./ISpotTradingRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISpotTradingRewardDistributorV2 is ISpotTradingRewardDistributorStorage, IPausable {\\n    event SpotTradingClaimReward(address indexed trader, uint256 amount);\\n    event RewardPerPeriodDecreased(uint256 indexed rewardPerPeriod);\\n    event TopUpUndistributedPmxBalance(uint256 indexed amount);\\n    event RewardPerPeriodChanged(uint256 indexed rewardPerPeriod);\\n    event PmxWithdrawn(uint256 indexed amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param registry The address of Registry contract\\n     * @param periodDuration The duration of a reward period\\n     * @param priceOracle The address of PriceOracle contract\\n     * @param pmx The address of PMX token\\n     * @param traderBalanceVault The address of TraderBalanceVault contract\\n     * @param treasury The address of Treasury contract\\n     */\\n    function initialize(\\n        address registry,\\n        uint256 periodDuration,\\n        address priceOracle,\\n        address pmx,\\n        address payable traderBalanceVault,\\n        address treasury\\n    ) external;\\n\\n    /**\\n     * @dev Function to update spot trader activity. Only PM_ROLE can call it.\\n     * @param trader Address of a trader\\n     * @param positionAsset Address of a position asset\\n     * @param positionAmount Amount of a position asset\\n     */\\n    function updateTraderActivity(\\n        address trader,\\n        address positionAsset,\\n        uint256 positionAmount,\\n        bytes calldata positionUsdOracleDataoracleData\\n    ) external;\\n\\n    /**\\n     * @dev Function to claim reward for spot trading activity.\\n     * Transfer rewards on the balance in traderBalanceVault\\n     * Emits SpotTradingClaimReward(address trader, uint256 amount)\\n     */\\n    function claimReward() external;\\n\\n    /**\\n     * @dev Function to set new reward per period. Only MEDIUM_TIMELOCK_ADMIN can call it.\\n     * @param rewardPerPeriod New value for reward per period\\n     */\\n    function setRewardPerPeriod(uint256 rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to decrease reward per period. Only EMERGENCY_ADMIN can call it.\\n     * @param _rewardPerPeriod New value for reward per period, must be less than the current value\\n     */\\n    function decreaseRewardPerPeriod(uint256 _rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to topUp the contract PMX balance\\n     * @param amount PMX amount to add to the contract balance\\n     */\\n    function topUpUndistributedPmxBalance(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to withdraw PMX from the contract to treasury\\n     * @dev Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param amount Amount of PMX to withdraw from the contract\\n     */\\n    function withdrawPmx(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to get SpotTraderActivity\\n     * @param periodNumber Period number\\n     * @param traderAddress Address of a trader\\n     * @return A struct with activity and hasClaimed members\\n     */\\n    function getSpotTraderActivity(uint256 periodNumber, address traderAddress) external view returns (uint256);\\n\\n    /**\\n     * @dev Get information for the period corresponding to the given timestamp\\n     * @param timestamp The timestamp to get information about\\n     * @return totalReward Total reward for the corresponding period\\n     * @return totalActivity Total activity for the corresponding period\\n     */\\n    function getPeriodInfo(uint256 timestamp) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Function to get an array of period numbers when trader had any activity\\n     * @param trader Address of a trader\\n     * @return An array of period numbers with trader activity\\n     */\\n    function getPeriodsWithTraderActivity(address trader) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Function to calculate trader's reward for her activities during periods\\n     * @param trader Address of a trader\\n     * @return reward Amount of reward\\n     * @return currentPeriod The current period\\n     */\\n    function calculateReward(address trader) external view returns (uint256 reward, uint256 currentPeriod);\\n}\\n\",\"keccak256\":\"0x72645c477fa1dd8d809814cab55a09daef3d0171df99dc95205e134f1b40cf7c\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ISpotTradingRewardDistributorStorage {\\n    struct PeriodInfo {\\n        uint256 totalReward;\\n        // map trader address to her activity\\n        mapping(address => uint256) traderActivity;\\n        uint256 totalActivity;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function dns() external view returns (address);\\n\\n    function periodDuration() external view returns (uint256);\\n\\n    function initialPeriodTimestamp() external view returns (uint256);\\n\\n    function rewardPerPeriod() external view returns (uint256);\\n\\n    function pmx() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function traderBalanceVault() external view returns (address payable);\\n\\n    function undistributedPMX() external view returns (uint256);\\n\\n    function periods(uint256 periodNumber) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xe6dc6a5ae48f0cacf886e84c42238f9c7cff42dd4e0e11dd35124ff79bfb87bd\",\"license\":\"BUSL-1.1\"},\"contracts/SwapManager/ISwapManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPrimexDNSV3, IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISwapManager is IPausable {\\n    event SpotSwap(\\n        address indexed trader,\\n        address indexed receiver,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountSold,\\n        uint256 amountBought\\n    );\\n    event PaidProtocolFee(\\n        address indexed trader,\\n        address indexed boughtAsset,\\n        IPrimexDNSStorageV3.FeeRateType indexed feeRateType,\\n        uint256 feeInPositionAsset,\\n        uint256 feeInPmx\\n    );\\n\\n    /**\\n     * @param tokenA The address of the asset to be swapped from.\\n     * @param tokenB The address of the asset to be received in the swap.\\n     * @param amountTokenA The amount of tokenA to be swapped.\\n     * @param amountOutMin The minimum amount of tokenB expected to receive.\\n     * @param routes An array of PrimexPricingLibrary.Route structs representing the routes for the swap.\\n     * @param receiver The address where the swapped tokens will be received.\\n     * @param deadline The deadline for the swap transaction.\\n     * @param isSwapFromWallet A flag indicating whether the swap is perfomed from a wallet or a protocol balance.\\n     * @param isSwapToWallet A flag indicating whether the swapped tokens will be sent to a wallet or a protocol balance.\\n     * @param isSwapFeeInPmx A flag indicating whether the swap fee is paid in PMX or in native token.\\n     */\\n    struct SwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        uint256 amountOutMin;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        address receiver;\\n        uint256 deadline;\\n        bool isSwapFromWallet;\\n        bool isSwapToWallet;\\n        bool isSwapFeeInPmx;\\n        bytes tokenAtokenBOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    /**\\n     * @param depositAsset The address of the deposited asset.\\n     * @param positionAsset The address of the position asset.\\n     * @param depositAmount Amount of tokens in a deposit asset.\\n     * @param megaRoutes An array of PrimexPricingLibrary.Route structs representing the routes for the swap.\\n     * @param trader The trader address, who has created the order.\\n     * @param deadline The deadline for the swap transaction.\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a positionAsset\\n     * @param keeperRewardDistributor The address of KeeperRewardDistributor contract.\\n     * @param gasSpent Gas spent on executing transaction.\\n     */\\n    struct SwapInLimitOrderParams {\\n        address depositAsset;\\n        address positionAsset;\\n        uint256 depositAmount;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        address trader;\\n        uint256 deadline;\\n        address feeToken;\\n        address keeperRewardDistributor;\\n        uint256 gasSpent;\\n        bytes depositPositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativePositionAssetOracleData;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     */\\n    function initialize(address _registry) external;\\n\\n    /**\\n     * @notice Re-initializes the contract with the specified parameters.\\n     * @dev Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initializeAfterUpgrade(\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Executes a swap on dexes defined in routes\\n     * @param params The SwapParams struct containing the details of the swap transaction.\\n     * @param maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * @param needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The resulting amount after the swap.\\n     */\\n    function swap(\\n        SwapParams calldata params,\\n        uint256 maximumOracleTolerableLimit,\\n        bool needOracleTolerableLimitCheck\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Executes a swap on dexes defined in routes\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param params The SwapInLimitOrderParams struct containing the details of the swap transaction.\\n     * @param maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * @return The resulting amount after the swap and feeInPositionAsset.\\n     */\\n    function swapInLimitOrder(\\n        SwapInLimitOrderParams calldata params,\\n        uint256 maximumOracleTolerableLimit\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xd37aefb58f805f2e97681c83ca409569fe2551ddb3716c8fb9e5e94739a95dac\",\"license\":\"BUSL-1.1\"},\"contracts/TiersManager/ITiersManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ITiersManager {\\n    function initialize(\\n        address _pmx,\\n        address _registry,\\n        address _lendingNFT,\\n        address _tradingNFT,\\n        address _farmingNFT,\\n        uint256[] calldata _tiers,\\n        uint256[] calldata _thresholds\\n    ) external;\\n\\n    function initializeAfterUpgrade(address payable _traderBalanceVault) external;\\n\\n    function getTraderTierForAddress(address _userAddress) external view returns (uint256);\\n\\n    function getLenderTierForAddress(address _userAddress) external view returns (uint256);\\n\\n    function addTiers(uint256[] calldata _tiers, uint256[] calldata _thresholds, bool _clearTiers) external;\\n\\n    function changeThresholdForTier(uint256[] calldata _indexes, uint256[] calldata _newThresholds) external;\\n\\n    function getTiers() external view returns (uint256[] memory);\\n\\n    function setPMX(address _pmx) external;\\n\\n    function getTraderTiersForAddresses(address[] memory _userAddresses) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8bddf9a904e067ef36232630e1a6761ae420328df55882c5b251d055b7adb08d\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVault.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITraderBalanceVaultStorage} from \\\"./ITraderBalanceVaultStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITraderBalanceVault is ITraderBalanceVaultStorage, IPausable {\\n    /**\\n     * Types of way to open a position or order\\n     */\\n    enum OpenType {\\n        OPEN_BY_ORDER,\\n        OPEN,\\n        CREATE_LIMIT_ORDER\\n    }\\n\\n    /**\\n     * @param trader The trader, who opens margin deal\\n     * @param depositReceiver the address to which the deposit is transferred when blocked.\\n     * This happens because the trader's deposit is involved in the position\\n     * @param borrowedAsset The token to lock for deal in a borrowed asset\\n     * @param depositAsset The token is a deposit asset\\n     * (it is blocked when creating a limit order\\n     * For others, the operations is transferred to the account of the receiver of the deposit and is swapped )\\n     * @param depositAmount Amount of tokens in a deposit asset\\n     * @param depositInBorrowedAmount Amount of tokens to lock for deal in a borrowed asset\\n     * @param openType Corresponds to the purpose of locking\\n     */\\n    struct LockAssetParams {\\n        address trader;\\n        address depositReceiver;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        OpenType openType;\\n    }\\n\\n    /**\\n     * @param trader The trader who opened the position\\n     * @param receiver The receiver of the rest of trader deposit.\\n     * @param asset Borrowed asset of the position being closed (the need for accrual of profit).\\n     * @param unlockAmount The amount of unlocked collateral for deal\\n     * @param returnToTrader The returned to trader amount when position was closed.\\n     */\\n    struct UnlockAssetParams {\\n        address trader;\\n        address receiver;\\n        address asset;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @param traders An array of traders for which available balance should be increased\\n     * @param amounts An array of amounts corresponding to traders' addresses that should be added to their available balances\\n     * @param asset Asset address which amount will be increased\\n     * @param length The amount of traders in an array\\n     */\\n    struct BatchTopUpAvailableBalanceParams {\\n        address[] traders;\\n        uint256[] amounts;\\n        address asset;\\n        uint256 length;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed asset, uint256 amount);\\n    event Withdraw(address indexed withdrawer, address asset, uint256 amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _registry The address of Registry contract\\n     * @param _whiteBlackList The address of WhiteBlackList contract\\n     */\\n    function initialize(address _registry, address _whiteBlackList) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @dev Deposits trader collateral for margin deal\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Withdraws the rest of trader's deposit after closing deal\\n     * @param _asset The collateral asset for withdraw\\n     * @param _amount The amount of '_asset' to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Traders lock their collateral for the limit order.\\n     * @param _trader The owner of collateral\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function increaseLockedBalance(address _trader, address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Locks deposited trader's assets as collateral for orders.\\n     * Decreases the available balance when opening position.\\n     * Transfers deposited amount to the deposit receiver.\\n     * @param _params parameters necessary to lock asset\\n     */\\n    function useTraderAssets(LockAssetParams calldata _params) external;\\n\\n    /**\\n     * @dev Unlocks trader's collateral when open position by order or update deposit.\\n     * @param _params parameters necessary to unlock asset\\n     */\\n    function unlockAsset(UnlockAssetParams calldata _params) external;\\n\\n    /**\\n     * The function to increase available balance for several traders\\n     * @param _params A struct containing BatchTopUpAvailableBalanceParams\\n     */\\n    function batchTopUpAvailableBalance(BatchTopUpAvailableBalanceParams calldata _params) external;\\n\\n    /**\\n     * Withdraws an asset amount from an asset holder to a receiver\\n     * @param _from Withdraw from address\\n     * @param _to Withdraw to address\\n     * @param _asset Address of an asset\\n     * @param _amount Amount of an asset\\n     * @param fromLocked True if withdraw from locked balance\\n     */\\n    function withdrawFrom(address _from, address _to, address _asset, uint256 _amount, bool fromLocked) external;\\n\\n    /**\\n     * Increases available balance of a receiver in the protocol\\n     * @param receiver The address of an asset receiver\\n     * @param asset The asset address for which available balance will be increased\\n     * @param amount The amount of an asset\\n     */\\n    function topUpAvailableBalance(address receiver, address asset, uint256 amount) external payable;\\n}\\n\\ninterface ITraderBalanceVaultV2 is ITraderBalanceVault {\\n    function getBalancesForAddresses(\\n        address[] calldata _traders,\\n        address _asset\\n    ) external view returns (uint256[] memory availableBalances, uint256[] memory lockedBalances);\\n}\\n\",\"keccak256\":\"0x417b707256772a2304e45ff18a6489f1fe3a4a0d73b6a189d04e322d743ccfdd\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVaultStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ITraderBalanceVaultStorage {\\n    struct TraderBalance {\\n        uint256 availableBalance;\\n        uint256 lockedBalance;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    /**\\n     *\\n     * @param trader Trader's address\\n     * @param asset Asset address\\n     * @return availableBalance availableBalance\\n     * @return lockedBalance lockedBalance\\n     */\\n    function balances(\\n        address trader,\\n        address asset\\n    ) external view returns (uint256 availableBalance, uint256 lockedBalance);\\n}\\n\",\"keccak256\":\"0xc0579c182c55abcfcda0e8092e30b04b13e8a8700d0c92914d086fe482673dec\",\"license\":\"BUSL-1.1\"},\"contracts/UniswapV2LPOracle/IUniswapV2LPOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IUniswapV2LPOracle {\\n    function getQuoteInUsd(\\n        address lpToken,\\n        uint256 amount,\\n        bytes calldata token0UsdOracleData,\\n        bytes calldata token1UsdOracleData\\n    ) external returns (uint256);\\n\\n    function getLPExchangeRate(\\n        IUniswapV2Pair pair,\\n        bytes calldata token0UsdOracleData,\\n        bytes calldata token1UsdOracleData\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1d234b20d5ed0b581aa6c696639c3473287929667ad5f256bfaaf88e509951a\",\"license\":\"BUSL-1.1\"},\"contracts/WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IWhiteBlackList {\\n    enum AccessType {\\n        UNLISTED,\\n        WHITELISTED,\\n        BLACKLISTED\\n    }\\n    event WhitelistedAddressAdded(address indexed addr);\\n    event WhitelistedAddressRemoved(address indexed addr);\\n    event BlacklistedAddressAdded(address indexed addr);\\n    event BlacklistedAddressRemoved(address indexed addr);\\n\\n    function addAddressToWhitelist(address _address) external;\\n\\n    function addAddressesToWhitelist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromWhitelist(address _address) external;\\n\\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external;\\n\\n    function addAddressToBlacklist(address _address) external;\\n\\n    function addAddressesToBlacklist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromBlacklist(address _address) external;\\n\\n    function removeAddressesFromBlacklist(address[] calldata _addresses) external;\\n\\n    function getAccessType(address _address) external view returns (AccessType);\\n\\n    function isBlackListed(address _address) external view returns (bool);\\n\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x785da3d3b2de11abd60ed414f778047d6b216232dbbe6e06d4c1e907805aac85\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `approve` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     */\\n    function approve(address spender, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xd8ed07c2eb87e6e0e774ef1a92e62e6a3bf1e99d1a3cd365efc21011843688a9\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/IArbGasInfo.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exists in every Arbitrum Nitro chain at 0x000000000000000000000000000000000000006c.\\ninterface IArbGasInfo {\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n\\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\\n    /// @return return gas prices in wei\\n    ///        (\\n    ///            per L2 tx,\\n    ///            per L1 calldata byte\\n    ///            per storage allocation,\\n    ///            per ArbGas base,\\n    ///            per ArbGas congestion,\\n    ///            per ArbGas total\\n    ///        )\\n    function getPricesInWei() external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xec7f78ef81a1aee6f7cf835a6dd75313e8f02fc2ef4e4044871bf1ee8fe02080\"},\"contracts/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/** @notice This contract was taken from (https://github.com/balancer-labs/balancer-v2-monorepo) and used for IBalancer*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n\\n}\\n\",\"keccak256\":\"0xd5dded630c33e367b52f7addae46d85cf182436c28680101c2969182556f01df\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAugustusSwapper.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IAugustusSwapper {\\n    function getTokenTransferProxy() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd491e22cd593978c9d2f127ba55185fb7e75a75ac8eea85e9df88f2c04171a27\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBalancer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/** @notice This contract (originally IVault) was taken from (https://github.com/balancer-labs/balancer-v2-monorepo).\\n * Unused methods were removed.\\n */\\n\\npragma solidity ^0.8.18;\\n\\nimport {IAsset} from \\\"./IAsset.sol\\\";\\n\\ninterface IBalancer {\\n    enum PoolSpecialization {\\n        GENERAL,\\n        MINIMAL_SWAP_INFO,\\n        TWO_TOKEN\\n    }\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *f\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(\\n        bytes32 poolId\\n    ) external view returns (IAsset[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x9d4b7f2e9786ce6e4ed270659f867ef4e943ab9c6d77697f9a0d3596a49f692c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConditionalClosingManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalClosingManager {\\n    /**\\n     * @notice Checks if a position can be closed.\\n     * @param _position The position details.\\n     * @param _params The encoded parameters for closing the position.\\n     * @param _additionalParams Additional encoded parameters (not used).\\n     * @param _closeAmount The amount of the position to be closed, measured in the same decimal format as the position's asset.\\n     * @param _borowedAssetAmount The amount of borrowed asset.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosedAfterSwap(\\n        PositionLibrary.Position calldata _position,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _closeAmount,\\n        uint256 _borowedAssetAmount,\\n        bytes calldata _positionSoldAssetOracleData\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc1b4d9a1792ea41bae949d409e212722349967a0bd1af18eaa95cb10867f9358\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IConditionalOpeningManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalOpeningManager {\\n    /**\\n     * @notice Checks if a limit order can be filled based on the exchange rate.\\n     * @dev This function compares the exchange rate with the limit price.\\n     * @param _order The limit order details.\\n     * @param _params Open condition parameters for the order.\\n     * @param _additionalParams Additional parameters for the order.\\n     * @param _exchangeRate The exchange rate in WAD format to compare with the limit price.\\n     * @return A boolean value indicating if the limit order can be filled based on the exchange rate.\\n     */\\n    function canBeFilledAfterSwap(\\n        LimitOrderLibrary.LimitOrder calldata _order,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _exchangeRate\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xcc5d4576d24044a7f45c85b33350a0383fd899aa5a5be1089f2777b1114c0f66\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDexAdapter.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ICurveCalc} from \\\"./routers/ICurveCalc.sol\\\";\\nimport {ICurveRegistry} from \\\"./routers/ICurveRegistry.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IDexAdapter {\\n    /**\\n     * @notice Possible dex types\\n     */\\n    enum DexType {\\n        none, // 0\\n        UniswapV2, // 1  \\\"uniswap\\\", \\\"sushiswap\\\", \\\"quickswap\\\" (v2)\\n        UniswapV3, // 2\\n        Curve, // 3\\n        Balancer, // 4\\n        AlgebraV3, // 5\\n        Meshswap, // 6\\n        Paraswap, //7\\n        Enso //8\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * Encoded differently for different dexes:\\n     * Uniswap v2 - just encoded array of asset addresses\\n     * Uniswap v3 - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes3(uint24(pool1Fee)), bytes20(address(usdc)), bytes3(uint24(pool2Fee)) ...)\\n     * Quickswap - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes20(address(usdc)), bytes20(address(usdt) ...)\\n     * Curve - encoded array of asset addresses and pool addresses\\n     * Balancer - encoded array of asset addresses, pool ids and asset limits\\n     * @param _amountIn TokenA amount in\\n     * @param _amountOutMin Min tokenB amount out\\n     * @param _to Destination address for swap\\n     * @param _deadline Timestamp deadline for swap\\n     * @param _dexRouter Dex router address\\n     */\\n    struct SwapParams {\\n        bytes encodedPath;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOutMin;\\n        address to;\\n        uint256 deadline;\\n        address dexRouter;\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * @param _amountIn TokenA amount in\\n     * @param _dexRouter Dex router address\\n     */\\n    struct GetAmountsParams {\\n        bytes encodedPath;\\n        uint256 amount; // amountIn or amountOut\\n        address dexRouter;\\n    }\\n\\n    struct AmountParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amount;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n    }\\n\\n    struct MegaSwapVars {\\n        uint256 sumOfShares;\\n        uint256 amountOnMegaRoute;\\n        uint256 totalAmount;\\n        uint256 remainder;\\n    }\\n\\n    event QuoterChanged(address indexed dexRouter, address indexed quoter);\\n    event DexTypeChanged(address indexed dexRouter, uint256 indexed dexType);\\n\\n    /**\\n     * @param _dexRouter The router address for which the quoter is set\\n     * @param _quoter The quoter address to set\\n     */\\n    function setQuoter(address _dexRouter, address _quoter) external;\\n\\n    /**\\n     * @notice Set a dex type for a dex router\\n     * @param _dexRouter The dex router address\\n     * @param _dexType The dex type from enum DexType\\n     */\\n    function setDexType(address _dexRouter, uint256 _dexType) external;\\n\\n    /**\\n     * @notice Swap ERC20 tokens\\n     * @param _params SwapParams struct\\n     */\\n    function swapExactTokensForTokens(SwapParams memory _params) external payable returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountOut calculations\\n     * @notice given an input amount of an asset, returns the maximum output amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsOut(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountIn calculations\\n     * @notice given an output amount of an asset, returns the maximum input amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsIn(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Dex type mapping dexRouter => dex type\\n     */\\n    function dexType(address) external view returns (DexType);\\n\\n    /**\\n     * @notice Mapping from the dexRouter to its quoter\\n     */\\n    function quoters(address) external view returns (address);\\n\\n    /**\\n     * @return The address of the Registry contract\\n     */\\n    function registry() external view returns (address);\\n\\n    /**\\n     * @notice Gets the average amount of gas that is required for the swap on some dex\\n     * @param dexRouter The address of a router\\n     */\\n    function getGas(address dexRouter) external view returns (uint256);\\n\\n    /**\\n     * @notice perform swap of ERC20 tokens by Path structs\\n     * @param tokenIn source token\\n     * @param tokenOut destination token\\n     * @param amountIn amount in the source token\\n     * @param receiver destination address for swap\\n     * @param paths Array of Path structs\\n     */\\n    function performPathsSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address receiver,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) external payable returns (uint256);\\n\\n    /**\\n      @notice Performs chained getAmountOut calculations by Path structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountIn amount in the source token\\n     * @param paths Array of Path structs\\n     */\\n\\n    function getAmountsOutByPaths(\\n        uint256 amountIn,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) external returns (uint256);\\n\\n    /**\\n      @notice Performs chained getAmountsIn calculations by Path structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountOut amount in the destination token\\n     * @param paths Array of Path structs\\n     */\\n\\n    function getAmountsInByPaths(\\n        uint256 amountOut,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) external returns (uint256);\\n\\n    /**\\n       @notice perform swap of ERC20 tokens by MegaRoute structs\\n     * @param _params MegaSwapParams struct\\n     */\\n    function performMegaRoutesSwap(\\n        PrimexPricingLibrary.MegaSwapParams calldata _params\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice perform swap of ERC20 tokens by Route structs\\n     * @param tokenIn source token\\n     * @param amountIn amount in the source token\\n     * @param receiver destination address for swap\\n     * @param routes Array of Route structs\\n     */\\n    function performRoutesSwap(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address receiver,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) external payable returns (uint256);\\n\\n    /**\\n    @notice Performs chained getAmountsOut calculations by Route structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountIn amount in the source token\\n     * @param routes Array of Route structs\\n     */\\n\\n    function getAmountsOutByRoutes(\\n        uint256 amountIn,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) external returns (uint256);\\n\\n    /**\\n       @notice Performs chained getAmountsOut calculations by MegaRoute structs\\n       @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param _params AmountParams struct\\n     */\\n    function getAmountOutByMegaRoutes(AmountParams calldata _params) external returns (uint256);\\n\\n    /**\\n      @notice Performs chained  getAmountsIn calculations by Route structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountOut amountin the destination token\\n     * @param routes Array of Route structs\\n     */\\n\\n    function getAmountsInByRoutes(\\n        uint256 amountOut,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) external returns (uint256);\\n\\n    /**\\n       @notice Performs chained getAmountsIn calculations by MegaRoute structs\\n       @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param _params AmountParams struct\\n     */\\n    function getAmountInByMegaRoutes(AmountParams calldata _params) external returns (uint256);\\n\\n    receive() external payable;\\n\\n    /**\\n     * @notice  Initializes the DexAdapter contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     */\\n    function initialize(address _primexDNS) external;\\n}\\n\",\"keccak256\":\"0x07ae2fa31b315ebbddf4cc3d6f2f700b1e49a704de17b42bf1e2f3875a1ce440\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateStrategy.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IInterestRateStrategy {\\n    /**\\n     * @dev parameters for BAR calculation - they differ depending on bucket's underlying asset\\n     */\\n    struct BarCalculationParams {\\n        uint256 urOptimal;\\n        uint256 k0;\\n        uint256 k1;\\n        uint256 b0;\\n        int256 b1;\\n    }\\n\\n    event BarCalculationParamsChanged(\\n        address indexed bucket,\\n        uint256 urOptimal,\\n        uint256 k0,\\n        uint256 k1,\\n        uint256 b0,\\n        int256 b1\\n    );\\n\\n    /**\\n     * @dev Updates bucket's BAR and LAR.\\n     * Calculates using utilization ratio (UR):\\n     * BAR = UR <= URoptimal ? (k0 * UR + b0) : (k1 * UR + b1), where 'b1' may be < 0,\\n     * LAR = BAR * UR,\\n     * if reserveRate != 0, then LAR = LAR * (1 - reserveRate)\\n     * @param ur Utilization ratio\\n     * @param reserveRate The reserve portion of the interest that goes to the Primex reserve\\n     * @return tuple containing BAR and LAR\\n     */\\n\\n    function calculateInterestRates(uint256 ur, uint256 reserveRate) external returns (uint128, uint128);\\n\\n    /**\\n     * @dev Set parameters for BAR calculation.\\n     * @param _params parameters are represented in byte string\\n     */\\n\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Retrieves the calculation parameters for the Bar calculation.\\n     * @param _address an address of the bucket\\n     * @return BarCalculationParams struct containing the parameters.\\n     */\\n    function getBarCalculationParams(address _address) external view returns (BarCalculationParams memory);\\n}\\n\",\"keccak256\":\"0xaffa1ce1d9ea17874bd325829c32f6313ac98f1fc1b15a1e0f739aed02caea3c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOVM_GasPriceOracle.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exist on opBNB chain at 0x420000000000000000000000000000000000000F.\\ninterface IOVM_GasPriceOracle {\\n    /// @notice returns an upper bound for the L1 fee for a given transaction size.\\n    /// It is provided for callers who wish to estimate L1 transaction costs in the\\n    /// write path, and is much more gas efficient than `getL1Fee`.\\n    /// It assumes the worst case of fastlz upper-bound which covers %99.99 txs.\\n    /// @param _unsignedTxSize Unsigned fully RLP-encoded transaction size to get the L1 fee for.\\n    /// @return L1 estimated upper-bound fee that should be paid for the tx\\n    function getL1FeeUpperBound(uint256 _unsignedTxSize) external view returns (uint256);\\n\\n    /// @notice Retrieves the current gas price (base fee).\\n    /// @return Current L2 gas price (base fee).\\n    function gasPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1fc2611c6c185d738d5370fb217f04ecc60b07c299abbc0b04130eb2b085ccce\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// Copyright (c) 2016-2024 zOS Global Limited and contributors\\n// SPDX-License-Identifier: MIT\\n\\n// Interface for OpenZeppelin's Pausable contract from https://github.com/OpenZeppelin/openzeppelin-contracts/\\npragma solidity ^0.8.18;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Triggers stopped state.\\n     * This function can only be called by an address with the EMERGENCY_ADMIN role.\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract.\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xd36ff25b5efe39529dd92bec8aab8fba396c7fc7fed936e64a1de358e52ad2e4\",\"license\":\"MIT\"},\"contracts/interfaces/IStorkVerify.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\n/* solhint-disable */\\n\\ninterface IStorkVerify {\\n    function verifySignature(\\n        address oracle_pubkey,\\n        string memory asset_pair_id,\\n        uint256 timestamp,\\n        uint256 price,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xd37f0c3c2f7862f9a55579ef13c4a5af4e541c935586b05aeca3799de8b0d3d0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISupraOraclePull.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ISupraOraclePull {\\n    //Verified price data\\n    struct PriceData {\\n        // List of pairs\\n        uint256[] pairs;\\n        // List of prices\\n        // prices[i] is the price of pairs[i]\\n        uint256[] prices;\\n        // List of decimals\\n        // decimals[i] is the decimals of pairs[i]\\n        uint256[] decimals;\\n    }\\n\\n    function verifyOracleProof(bytes calldata _bytesproof) external returns (PriceData memory);\\n}\\n\",\"keccak256\":\"0xf38fcd53bef093ff9dee4914a2ac0ccbe383d624ed6a13ee079c0545cae69198\",\"license\":\"MIT\"},\"contracts/interfaces/ISupraSValueFeed.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/* solhint-disable var-name-mixedcase */\\ninterface ISupraSValueFeed {\\n    struct derivedData {\\n        int256 roundDifference;\\n        uint256 derivedPrice;\\n        uint256 decimals;\\n    }\\n\\n    struct priceFeed {\\n        uint256 round;\\n        uint256 decimals;\\n        uint256 time;\\n        uint256 price;\\n    }\\n\\n    function getDerivedSvalue(\\n        uint256 pair_id_1,\\n        uint256 pair_id_2,\\n        uint256 operation\\n    ) external view returns (derivedData memory);\\n\\n    function getSvalue(uint256 _pairIndex) external view returns (priceFeed memory);\\n}\\n\",\"keccak256\":\"0x7b4e9eaabfd4e929d1006ddb1c01684875eeb95a2c64ac8a848e61b91a8ee21f\",\"license\":\"MIT\"},\"contracts/interfaces/ITakeProfitStopLossCCM.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface ITakeProfitStopLossCCM {\\n    struct CanBeClosedParams {\\n        uint256 takeProfitPrice;\\n        uint256 stopLossPrice;\\n    }\\n\\n    /**\\n     * @notice Checks if the take profit has been reached based on the given parameters.\\n     * @dev Used in closeBatchPositions() function.\\n     * @param _params The encoded parameters.\\n     * @param exchangeRate The exchange rate in WAD format.\\n     * @return A boolean indicating whether the take profit has been reached.\\n     */\\n    function isTakeProfitReached(bytes calldata _params, uint256 exchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached for a given position.\\n     * @param _position The position details.\\n     * @param _stopLossPrice The stop loss price in WAD format to compare against.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(\\n        PositionLibrary.Position calldata _position,\\n        uint256 _stopLossPrice,\\n        bytes calldata _positionSoldAssetOracleData\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached on the given parameters.\\n     * @dev The takeProfitPrice and stopLossPrice values can be obtained from the encoded data via CanBeClosedParams struct.\\n     * @param _params The encoded closing condition parameters containing stop loss price.\\n     * @param oracleExchangeRate The current exchange rate from the oracle in WAD format.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(bytes calldata _params, uint256 oracleExchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the take profit and stop loss prices from the given parameters.\\n     * @param _params The encoded parameters for closing a position.\\n     * @return takeProfitPrice The take profit price.\\n     * @return stopLossPrice The stop loss price.\\n     */\\n    function getTakeProfitStopLossPrices(bytes calldata _params) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Initializes the TakeProfitStopLossCCM contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     */\\n    function initialize(address _primexDNS, address _priceOracle) external;\\n}\\n\",\"keccak256\":\"0xc7e14c2e085662f84b2ba41f2918a7722ffcf8d58891e6086add249b65b3ea8d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWNative.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IWNative {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function withdraw(uint) external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31b7f6d36806d10eb85b8e85903cb86748f37ca93fb18f13e822ec00928bca93\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveCalc.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveCalc {\\n    // solhint-disable func-name-mixedcase\\n    function get_dx(\\n        // solhint-disable-next-line var-name-mixedcase\\n        int128 n_coins,\\n        uint256[8] memory balances,\\n        uint256 amp,\\n        uint256 fee,\\n        uint256[8] memory rates,\\n        uint256[8] memory precisions,\\n        bool underlying,\\n        int128 i,\\n        int128 j,\\n        uint256 dy\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xbfe602662763db3d67993fe2d667086526dbed94a52a0ca931a712f47e611507\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveRegistry.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveRegistry {\\n    // solhint-disable func-name-mixedcase\\n    function get_n_coins(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[8] memory);\\n\\n    function get_coin_indices(address _pool, address _from, address _to) external view returns (int128, int128, bool);\\n}\\n\",\"keccak256\":\"0xa27a21ef0c8beef0855a9ecd5f3ca42833fea9f5123562a3b390169f2c139ca2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveRouter.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\n/* solhint-disable func-name-mixedcase */\\ninterface ICurveRouter {\\n    function exchange(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _expected,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    function exchange_with_best_rate(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _expected,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function get_best_rate(address _from, address _to, uint256 _amount) external view returns (address, uint256);\\n\\n    function get_input_amount(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    function get_exchange_amount(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfabfa6e05cdc801efa0c91ca756f6976f64c5306f28f65f3fb9c8ca072bb248a\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    error SWAP_DEADLINE_PASSED();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error INVALID_AMOUNT();\\n    error POOL_CALL_FAILED();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n    error INCORRECT_BORROWED_AMOUNT();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error WRONG_DEADLINE();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error THERE_IS_DIRECT_ROUTE();\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n    error WRONG_ORACLE_ROUTES_LENGTH();\\n    error WRONG_ASSET_B();\\n    error INCORRECT_ROUTE_SEQUENCE();\\n    error INCORRECT_PYTH_PRICE();\\n    error INCORRECT_ORALLY_PRICE();\\n    error TOKEN_PAIR_IS_NOT_TRUSTED();\\n    error INCORRECT_TOKEN_TO();\\n    error INCORRECT_PYTH_ROUTE();\\n    error INCORRECT_CHAINLINK_ROUTE();\\n    error INCORRECT_CURVELP_ROUTE();\\n    error INCORRECT_UNISWAPV2LP_ROUTE();\\n    error ADDRESS_IS_NOT_UNISWAPV2LP_TOKEN();\\n    error NOT_ENOUGH_MSG_VALUE();\\n    error PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME();\\n    error STORK_VERIFY_FAILED();\\n    error NO_TOKEN_SYMBOL_FOUND();\\n    error NO_TOKEN_PAIR_FOUND();\\n    error INCORRECT_EIP4626_ROUTE();\\n    error NO_UNDERLYING_TOKEN_FOUND();\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n    error LEVERAGE_TOLERANCE_IS_NOT_CORRECT();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error LEVERAGE_TOLERANCE_EXCEEDED();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n    error MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error TOKEN_APPROVE_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n    error INCORRECT_OPTIMISM_GAS_COEFFICIENT();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n\\n    //FlashLoan\\n    error INCONSISTENT_FLASHLOAN_PARAMS();\\n    error INVALID_FLASHLOAN_EXECUTOR_RETURN();\\n    error FLASH_LOAN_FEE_RATE_IS_MORE_10_PERCENT();\\n    error FLASH_LOAN_PROTOCOL_RATE_IS_MORE_50_PERCENT();\\n\\n    // DepositManager\\n    error REWARD_PERCENT_SHOULD_BE_GREATER_THAN_ZERO();\\n    error TOKEN_CANNOT_BE_P_TOKEN();\\n    //Curve oracle\\n    error ORACLE_NOT_SUPPORT_LP();\\n    error ZERO_ADDRESS();\\n    error REENTRANCY_RISK();\\n    error ORACLE_DATA_AND_TOKENS_LENGTH_MISMATCH();\\n    error INCORRECT_LIMITS();\\n    error INCORRECT_ORACLE_DATA();\\n    error VALUE_OUT_OF_RANGE();\\n    //UniswapV2LPOracle\\n    error INVALID_RESERVES();\\n    error INVALID_PRICES();\\n\\n    // TiersManager\\n    error INCORRECT_TIERS_ORDER();\\n    error INCORRECT_TIER();\\n}\\n\",\"keccak256\":\"0xa994f6418d472a072bf4cb0e4c124e01a8a89847cc275a0793e474e68484087d\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/LimitOrderLibrary.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalOpeningManager} from \\\"../interfaces/IConditionalOpeningManager.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ISwapManager} from \\\"../SwapManager/ISwapManager.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary LimitOrderLibrary {\\n    using WadRayMath for uint256;\\n\\n    enum CloseReason {\\n        FilledMargin,\\n        FilledSpot,\\n        FilledSwap,\\n        Cancelled\\n    }\\n\\n    struct Condition {\\n        uint256 managerType;\\n        bytes params;\\n    }\\n\\n    /**\\n     * @dev Creates a limit order and locks the deposit asset in the traderBalanceVault\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param positionAsset The address of output token for exchange\\n     * @param depositAsset The address of the deposit token\\n     * @param depositAmount The amount of deposit trader funds for deal\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a positionAsset\\n     * @param trader The trader, who has created the order\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param id The unique id of the order\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition The flag to indicate whether position should be opened\\n     * @param createdAt The timeStamp when the order was created\\n     * @param updatedConditionsAt The timestamp when the open condition was updated\\n     */\\n    struct LimitOrder {\\n        IBucketV3 bucket;\\n        address positionAsset;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address feeToken;\\n        uint256 protocolFee;\\n        address trader;\\n        uint256 deadline;\\n        uint256 id;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        // The byte-encoded params, can be used for future updates\\n        bytes extraParams;\\n    }\\n\\n    /**\\n     * @dev Structure for the \\u0441reateLimitOrder with parameters necessary to create limit order\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition Bool, indicate whether position should be opened\\n     * @param openingManagerAddresses Array of contract addresses that will be called in canBeFilled\\n     * @param openingManagerParams Array of bytes representing params for contracts in openingManagerAddresses\\n     * @param closingManagerAddresses Array of contract addresses that will be called in canBeClosed\\n     * @param closingManagerParams Array of bytes representing params for contracts in closingManagerAddresses\\n     */\\n    struct CreateLimitOrderParams {\\n        string bucket;\\n        uint256 depositAmount;\\n        address depositAsset;\\n        address positionAsset;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        Condition[] openConditions;\\n        Condition[] closeConditions;\\n        bool isProtocolFeeInPmx;\\n        bytes nativeDepositAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    struct CreateLimitOrderVars {\\n        bool isSpot;\\n        IBucketV3 bucket;\\n        uint256 positionSize;\\n        address priceOracle;\\n        uint256 rate;\\n        IPrimexDNSStorageV3.TradingOrderType tradingOrderType;\\n        bool isThirdAsset;\\n    }\\n\\n    /**\\n     * @dev Opens a position on an existing order\\n     * @param orderId order id\\n     * @param com address of ConditionalOpeningManager\\n     * @param comAdditionalParams  params needed for ConditionalOpeningManager to calc canBeFilled\\n     * @param firstAssetMegaRoutes routes to swap first asset\\n     * @param depositInThirdAssetMegaRoutes routes to swap deposit asset\\n     */\\n    struct OpenPositionParams {\\n        uint256 orderId;\\n        uint256 conditionIndex;\\n        bytes comAdditionalParams;\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n        address keeper;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes depositSoldAssetOracleData;\\n        bytes nativePmxOracleData;\\n        bytes positionNativeAssetOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct OpenPositionByOrderVars {\\n        address assetIn;\\n        address assetOut;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        CloseReason closeReason;\\n        uint256 newPositionId;\\n        uint256 exchangeRate;\\n        uint256 feeInPositionAsset;\\n        uint256 feeInPmx;\\n    }\\n\\n    /**\\n     * @dev Params for PositionManager to open position\\n     * @param order order\\n     * @param firstAssetMegaRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositInThirdAssetMegaRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionByOrderParams {\\n        address sender;\\n        LimitOrder order;\\n        Condition[] closeConditions;\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes depositSoldAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        uint256 borrowedAmount;\\n    }\\n\\n    /**\\n     * @dev Structure for the updateOrder with parameters necessary to update limit order\\n     * @param orderId order id to update\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param makeDeposit Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     */\\n    struct UpdateLimitOrderParams {\\n        uint256 orderId;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n        bool isProtocolFeeInPmx;\\n        bool takeDepositFromWallet;\\n        bytes nativeDepositOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    /**\\n     * @notice Updates the leverage of a limit order.\\n     * @param _order The limit order to update.\\n     * @param _leverage The new leverage value in WAD format for the order.\\n     * @param _primexDNS The instance of the PrimexDNS contract\\n     */\\n    function updateLeverage(LimitOrder storage _order, uint256 _leverage, IPrimexDNSV3 _primexDNS) public {\\n        _require(_leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n        _require(_order.leverage != WadRayMath.WAD, Errors.CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN.selector);\\n\\n        _require(\\n            _leverage <\\n                _order.bucket.maxAssetLeverage(\\n                    _order.positionAsset,\\n                    _primexDNS.getProtocolFeeRateByTier(IPrimexDNSStorageV3.FeeRateType.MarginLimitOrderExecuted, 0) // do not consider the tier here\\n                ),\\n            Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n        );\\n        _order.leverage = _leverage;\\n    }\\n\\n    /**\\n     * @notice Updates the deposit details of a LimitOrder.\\n     * @param _order The LimitOrder to update.\\n     * @param _amount The amount of the asset being deposited.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or unlock the deposited asset.\\n     * @param traderBalanceVault The instance of ITraderBalanceVault used for deposit and unlock operations.\\n     */\\n    function updateDeposit(\\n        LimitOrderLibrary.LimitOrder storage _order,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        ITraderBalanceVault traderBalanceVault\\n    ) public {\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            _order.depositAsset,\\n            (_amount > _order.depositAmount) ? _amount - _order.depositAmount : _order.depositAmount - _amount,\\n            _takeDepositFromWallet,\\n            _amount > _order.depositAmount\\n        );\\n        _order.depositAmount = _amount;\\n    }\\n\\n    /**\\n     * @notice Sets the open conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param openConditionsMap The mapping of order IDs to open conditions.\\n     * @param openConditions The array of open conditions.\\n     * @param primexDNS The instance of the Primex DNS contract.\\n     */\\n    function setOpenConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage openConditionsMap,\\n        Condition[] memory openConditions,\\n        IPrimexDNSV3 primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(openConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(openConditions.length > 0, Errors.SHOULD_HAVE_OPEN_CONDITIONS.selector);\\n        if (openConditionsMap[_order.id].length > 0) {\\n            delete openConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < openConditions.length; i++) {\\n            condition = openConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalOpeningManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_COM.selector\\n            );\\n            openConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the close conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param closeConditionsMap The mapping of order IDs to close conditions.\\n     * @param closeConditions The array of close conditions to set.\\n     * @param primexDNS The Primex DNS contract address.\\n     */\\n    function setCloseConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage closeConditionsMap,\\n        Condition[] memory closeConditions,\\n        IPrimexDNSV3 primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(closeConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(\\n            _order.shouldOpenPosition || closeConditions.length == 0,\\n            Errors.SHOULD_NOT_HAVE_CLOSE_CONDITIONS.selector\\n        );\\n\\n        if (closeConditionsMap[_order.id].length > 0) {\\n            delete closeConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n            closeConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a limit order.\\n     * @param _params The struct containing the order parameters.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param primexDNS The instance of the PrimexDNS contract.\\n     * @return The created limit order.\\n     */\\n    function createLimitOrder(\\n        CreateLimitOrderParams calldata _params,\\n        IPositionManagerV2 pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        IPrimexDNSV3 primexDNS\\n    ) public returns (LimitOrder memory) {\\n        _require(_params.leverage >= WadRayMath.WAD, Errors.INCORRECT_LEVERAGE.selector);\\n        _require(_params.deadline > block.timestamp, Errors.INCORRECT_DEADLINE.selector);\\n\\n        CreateLimitOrderVars memory vars;\\n        vars.isSpot = bytes(_params.bucket).length == 0;\\n        vars.positionSize = _params.depositAmount.wmul(_params.leverage);\\n        vars.priceOracle = address(pm.priceOracle());\\n        if (vars.isSpot) {\\n            _require(_params.leverage == WadRayMath.WAD, Errors.LEVERAGE_SHOULD_BE_1.selector);\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            vars.tradingOrderType = _params.shouldOpenPosition\\n                ? IPrimexDNSStorageV3.TradingOrderType.SpotLimitOrder\\n                : IPrimexDNSStorageV3.TradingOrderType.SwapLimitOrder;\\n        } else {\\n            _require(_params.shouldOpenPosition, Errors.SHOULD_OPEN_POSITION.selector);\\n            _require(_params.leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n            vars.bucket = IBucketV3(primexDNS.getBucketAddress(_params.bucket));\\n            _require(vars.bucket.getLiquidityMiningParams().isBucketLaunched, Errors.BUCKET_IS_NOT_LAUNCHED.selector);\\n\\n            (, bool tokenAllowed) = vars.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n            _require(\\n                _params.leverage <\\n                    vars.bucket.maxAssetLeverage(\\n                        _params.positionAsset,\\n                        primexDNS.getProtocolFeeRateByTier(IPrimexDNSStorageV3.FeeRateType.MarginLimitOrderExecuted, 0)\\n                    ),\\n                Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n            );\\n            vars.isThirdAsset =\\n                _params.depositAsset != address(vars.bucket.borrowedAsset()) &&\\n                _params.depositAsset != _params.positionAsset;\\n            vars.tradingOrderType = vars.isThirdAsset\\n                ? IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrderDepositInThirdAsset\\n                : IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrder;\\n        }\\n        LimitOrder memory order = LimitOrder({\\n            bucket: IBucketV3(address(0)),\\n            positionAsset: _params.positionAsset,\\n            depositAsset: _params.depositAsset,\\n            depositAmount: _params.depositAmount,\\n            feeToken: _params.isProtocolFeeInPmx ? primexDNS.pmx() : _params.positionAsset,\\n            protocolFee: 0,\\n            trader: msg.sender,\\n            deadline: _params.deadline,\\n            id: 0,\\n            leverage: _params.leverage,\\n            shouldOpenPosition: _params.shouldOpenPosition,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n        order.bucket = vars.bucket;\\n\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            vars.positionSize,\\n            order.depositAsset,\\n            vars.priceOracle,\\n            pm.keeperRewardDistributor(),\\n            primexDNS,\\n            vars.tradingOrderType,\\n            _params.nativeDepositAssetOracleData\\n        );\\n\\n        // deposit locking\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            order.depositAsset,\\n            order.depositAmount,\\n            _params.takeDepositFromWallet,\\n            true\\n        );\\n\\n        return order;\\n    }\\n\\n    /**\\n     * @notice Opens a position by order.\\n     * @param order The LimitOrder storage containing order details.\\n     * @param _params The OpenPositionParams calldata containing additional position parameters.\\n     * @param _closeConditions The Condition array containing close conditions for the position.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param swapManager The instance of the SwapManager contract.\\n     * @return vars The OpenPositionByOrderVars struct containing the result of the open position operation.\\n     */\\n    function openPositionByOrder(\\n        LimitOrder storage order,\\n        OpenPositionParams calldata _params,\\n        Condition[] memory _closeConditions,\\n        IPositionManagerV2 pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        ISwapManager swapManager,\\n        uint256 _initialGasLeft\\n    ) public returns (OpenPositionByOrderVars memory) {\\n        OpenPositionByOrderVars memory vars;\\n        bool isSpot = address(order.bucket) == address(0);\\n\\n        if (order.protocolFee != 0) {\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams({\\n                    trader: order.trader,\\n                    receiver: order.trader,\\n                    asset: order.feeToken,\\n                    amount: order.protocolFee\\n                })\\n            );\\n            order.protocolFee = 0;\\n            order.feeToken = order.positionAsset;\\n        }\\n\\n        if (order.shouldOpenPosition) {\\n            vars.closeReason = isSpot ? CloseReason.FilledSpot : CloseReason.FilledMargin;\\n            (vars.amountIn, vars.amountOut, vars.newPositionId, vars.exchangeRate, vars.feeInPositionAsset) = pm\\n                .openPositionByOrder(\\n                    OpenPositionByOrderParams({\\n                        sender: msg.sender,\\n                        order: order,\\n                        closeConditions: _closeConditions,\\n                        firstAssetMegaRoutes: _params.firstAssetMegaRoutes,\\n                        depositInThirdAssetMegaRoutes: _params.depositInThirdAssetMegaRoutes,\\n                        firstAssetOracleData: _params.firstAssetOracleData,\\n                        thirdAssetOracleData: _params.thirdAssetOracleData,\\n                        depositSoldAssetOracleData: _params.depositSoldAssetOracleData,\\n                        positionUsdOracleData: _params.positionUsdOracleData,\\n                        nativePositionAssetOracleData: _params.nativePositionAssetOracleData,\\n                        pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n                        nativeSoldAssetOracleData: _params.nativeSoldAssetOracleData,\\n                        borrowedAmount: _params.borrowedAmount\\n                    })\\n                );\\n        } else {\\n            _require(\\n                _params.depositInThirdAssetMegaRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n            vars.closeReason = CloseReason.FilledSwap;\\n            vars.amountIn = order.depositAmount;\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams({\\n                    trader: order.trader,\\n                    receiver: address(this),\\n                    asset: order.depositAsset,\\n                    amount: order.depositAmount\\n                })\\n            );\\n\\n            (vars.amountOut, vars.feeInPositionAsset) = swapManager.swapInLimitOrder(\\n                ISwapManager.SwapInLimitOrderParams({\\n                    depositAsset: order.depositAsset,\\n                    positionAsset: order.positionAsset,\\n                    depositAmount: order.depositAmount,\\n                    megaRoutes: _params.firstAssetMegaRoutes,\\n                    trader: order.trader,\\n                    deadline: order.deadline,\\n                    feeToken: order.feeToken,\\n                    keeperRewardDistributor: address(pm.keeperRewardDistributor()),\\n                    gasSpent: _initialGasLeft - gasleft(),\\n                    depositPositionAssetOracleData: _params.firstAssetOracleData,\\n                    pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n                    nativePositionAssetOracleData: _params.nativePositionAssetOracleData\\n                }),\\n                pm.getOracleTolerableLimit(order.depositAsset, order.positionAsset)\\n            );\\n\\n            uint256 multiplierDepositAsset = 10 ** (18 - IERC20Metadata(order.depositAsset).decimals());\\n            uint256 multiplierPositionAsset = 10 ** (18 - IERC20Metadata(order.positionAsset).decimals());\\n            vars.exchangeRate =\\n                (vars.amountIn * multiplierDepositAsset).wdiv(\\n                    (vars.amountOut + vars.feeInPositionAsset) * multiplierPositionAsset\\n                ) /\\n                multiplierDepositAsset;\\n        }\\n\\n        vars.assetIn = isSpot ? order.depositAsset : address(order.bucket.borrowedAsset());\\n        vars.assetOut = order.positionAsset;\\n        return vars;\\n    }\\n\\n    /**\\n     * @notice Checks if an array of Condition structs has no duplicate manager types.\\n     * @param conditions The array of Condition structs to be checked.\\n     * @return bool Boolean value indicating whether the array has no duplicate manager types.\\n     */\\n    function hasNoConditionManagerTypeDuplicates(Condition[] memory conditions) public pure returns (bool) {\\n        if (conditions.length == 0) {\\n            return true;\\n        }\\n        for (uint256 i; i < conditions.length - 1; i++) {\\n            for (uint256 j = i + 1; j < conditions.length; j++) {\\n                if (conditions[i].managerType == conditions[j].managerType) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This function is used to either deposit or unlock assets in the trader balance vault.\\n     * @param traderBalanceVault The instance of the trader balance vault.\\n     * @param _depositAsset The address of the asset to be deposited or unlocked.\\n     * @param _amount The amount of the asset to be deposited or unlocked.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or not.\\n     * @param _isAdd Boolean indicating whether to lock or unlock asset. Should lock asset, if true.\\n     */\\n    function depositLockOrUnlock(\\n        ITraderBalanceVault traderBalanceVault,\\n        address _depositAsset,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        bool _isAdd\\n    ) internal {\\n        if (!_isAdd) {\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams(msg.sender, msg.sender, _depositAsset, _amount)\\n            );\\n            return;\\n        }\\n        if (_takeDepositFromWallet) {\\n            if (_depositAsset == NATIVE_CURRENCY) {\\n                _require(msg.value >= _amount, Errors.INSUFFICIENT_DEPOSIT.selector);\\n                traderBalanceVault.increaseLockedBalance{value: _amount}(msg.sender, _depositAsset, _amount);\\n                if (msg.value > _amount) {\\n                    uint256 rest = msg.value - _amount;\\n                    traderBalanceVault.topUpAvailableBalance{value: rest}(msg.sender, NATIVE_CURRENCY, rest);\\n                }\\n                return;\\n            }\\n            TokenTransfersLibrary.doTransferFromTo(_depositAsset, msg.sender, address(traderBalanceVault), _amount);\\n            traderBalanceVault.increaseLockedBalance(msg.sender, _depositAsset, _amount);\\n            return;\\n        }\\n        traderBalanceVault.useTraderAssets(\\n            ITraderBalanceVault.LockAssetParams(\\n                msg.sender,\\n                address(0),\\n                _depositAsset,\\n                _amount,\\n                ITraderBalanceVault.OpenType.CREATE_LIMIT_ORDER\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5dd250e91ba2a26d813ebd44c817278a478c380aafc577aa25d29089fab5b196\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PositionLibrary.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"./LimitOrderLibrary.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {ITakeProfitStopLossCCM} from \\\"../interfaces/ITakeProfitStopLossCCM.sol\\\";\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {ITiersManager} from \\\"../TiersManager/ITiersManager.sol\\\";\\n\\nlibrary PositionLibrary {\\n    using WadRayMath for uint256;\\n\\n    event ClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed closedBy,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut,\\n        PositionLibrary.CloseReason reason\\n    );\\n\\n    event PaidProtocolFee(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address paymentAsset,\\n        IPrimexDNSStorageV3.FeeRateType indexed feeRateType,\\n        uint256 feeInPaymentAsset,\\n        uint256 feeInPmx\\n    );\\n\\n    /**\\n     * @notice This struct represents a trading position\\n     * @param id unique identifier for the position\\n     * @param scaledDebtAmount scaled debt amount associated with the position\\n     * @param bucket instance of the Bucket associated for trading\\n     * @param soldAsset bucket asset in the case of margin trading or deposit asset in the case of spot trading\\n     * @param depositAmountInSoldAsset equivalent of trader deposit size (this deposit can be in any asset) in the sold asset\\n     * or just deposit amount for spot trading\\n     * @param positionAsset asset of the trading position\\n     * @param positionAmount amount of the trading position\\n     * @param trader address of the trader holding the position\\n     * @param openBorrowIndex variable borrow index when position was opened\\n     * @param createdAt timestamp when the position was created\\n     * @param updatedConditionsAt timestamp when the close condition was updated\\n     * @param extraParams byte-encoded params, utilized for the feeToken address\\n     */\\n    struct Position {\\n        uint256 id;\\n        uint256 scaledDebtAmount;\\n        IBucketV3 bucket;\\n        address soldAsset;\\n        uint256 depositAmountInSoldAsset;\\n        address positionAsset;\\n        uint256 positionAmount;\\n        address trader;\\n        uint256 openBorrowIndex;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        bytes extraParams;\\n    }\\n\\n    struct IncreaseDepositParams {\\n        uint256 amount;\\n        address asset;\\n        bool takeDepositFromWallet;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 amountOutMin;\\n    }\\n\\n    struct DecreaseDepositParams {\\n        uint256 amount;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        uint256 oracleTolerableLimit;\\n        uint256 maintenanceBuffer;\\n        address keeperRewardDistributor;\\n        bytes positionSoldAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n    }\\n\\n    struct MegaSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        address receiver;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n    }\\n\\n    struct ClosePositionParams {\\n        uint256 closeAmount;\\n        uint256 depositDecrease;\\n        uint256 scaledDebtAmount;\\n        address depositReceiver;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        uint256 amountOutMin;\\n        uint256 oracleTolerableLimit;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        LimitOrderLibrary.Condition closeCondition;\\n        bytes ccmAdditionalParams;\\n        bool borrowedAmountIsNotZero;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        bool needOracleTolerableLimitCheck;\\n        uint256 initialGasLeft;\\n        address keeperRewardDistributor;\\n        bytes positionSoldAssetOracleData;\\n        bytes pmxSoldAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n    }\\n\\n    struct ClosePositionVars {\\n        address payable dexAdapter;\\n        uint256 borowedAssetAmount;\\n        uint256 amountToReturn;\\n        uint256 permanentLoss;\\n        uint256 fee;\\n        uint256 gasSpent;\\n    }\\n\\n    struct ClosePositionEventData {\\n        int256 profit;\\n        uint256 debtAmount;\\n        uint256 amountOut;\\n        uint256 amountOutAfterFee;\\n        IKeeperRewardDistributorStorage.KeeperActionType actionType;\\n        address trader;\\n        address paymentAsset;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        uint256 feeInPaymentAsset;\\n        uint256 feeInPmx;\\n    }\\n\\n    struct OpenPositionVars {\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n        PrimexPricingLibrary.DepositData depositData;\\n        uint256 borrowedAmount;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool isSpot;\\n        bool isThirdAsset;\\n        bool takeDepositFromWallet;\\n        bool byOrder;\\n        uint256 orderLeverage;\\n        address sender;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n        bool needOracleTolerableLimitCheck;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n    }\\n\\n    struct OpenPositionEventData {\\n        uint256 feeInPositionAsset;\\n        uint256 feeInPmx;\\n        uint256 entryPrice;\\n        uint256 leverage;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n    }\\n\\n    /**\\n     * The struct for openPosition function local vars\\n     */\\n    struct OpenPositionLocalData {\\n        uint256 amountToTransfer;\\n        address payable dexAdapter;\\n        address depositReceiver;\\n        uint256 depositInPositionAsset;\\n        bool isSpot;\\n        IPrimexDNSStorageV3.TradingOrderType tradingOrderType;\\n        uint256 positionAmountAfterFeeInSoldAsset;\\n        uint256 borrowedAmountInPositionAsset;\\n        uint256 leverage;\\n        uint256 multiplierBorrowedAsset;\\n        uint256 multiplierPositionAsset;\\n        address positionAsset;\\n        uint256 positionAmount;\\n    }\\n\\n    /**\\n     * @dev Structure for the OpenPositionParams when margin trading is activated\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param borrowedAmount The amount of tokens borrowed to be exchanged\\n     * @param depositInThirdAssetMegaRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionMarginParams {\\n        string bucket;\\n        uint256 borrowedAmount;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n    }\\n\\n    /**\\n     * @dev Structure for the openPosition with parameters necessary to open a position\\n     * @param marginParams margin trading related params\\n     * @param firstAssetMegaRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param amountOutMin The minimum amount of output tokens\\n     * that must be received for the transaction not to revert.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @param takeDepositFromWallet Bool, add a deposit within the current transaction\\n     * @param closeConditions Array of conditions that position can be closed by\\n     */\\n    struct OpenPositionParams {\\n        OpenPositionMarginParams marginParams;\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address positionAsset;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        bool isProtocolFeeInPmx;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes depositSoldAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n    struct PositionManagerParams {\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 oracleTolerableLimit;\\n        uint256 oracleTolerableLimitForThirdAsset;\\n        uint256 maxPositionSize;\\n        uint256 initialGasLeft;\\n        address keeperRewardDistributor;\\n    }\\n\\n    struct ScaledParams {\\n        uint256 decreasePercent;\\n        uint256 scaledDebtAmount;\\n        uint256 depositDecrease;\\n        bool borrowedAmountIsNotZero;\\n    }\\n\\n    enum CloseReason {\\n        CLOSE_BY_TRADER,\\n        RISKY_POSITION,\\n        BUCKET_DELISTED,\\n        LIMIT_CONDITION,\\n        BATCH_LIQUIDATION,\\n        BATCH_STOP_LOSS,\\n        BATCH_TAKE_PROFIT\\n    }\\n\\n    /**\\n     * @dev Increases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for increasing the deposit.\\n     * @return The amount of trader debtTokens burned.\\n     */\\n    function increaseDeposit(Position storage position, IncreaseDepositParams memory params) public returns (uint256) {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.scaledDebtAmount != 0, Errors.BORROWED_AMOUNT_IS_ZERO.selector);\\n        address borrowedAsset = position.soldAsset;\\n\\n        uint256 depositAmountInBorrowed;\\n        address depositReceiver = params.primexDNS.dexAdapter();\\n        if (params.asset == borrowedAsset) {\\n            depositReceiver = address(position.bucket);\\n            depositAmountInBorrowed = params.amount;\\n        }\\n\\n        if (params.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(params.asset, msg.sender, depositReceiver, params.amount);\\n        } else {\\n            params.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams(\\n                    msg.sender,\\n                    depositReceiver,\\n                    params.asset,\\n                    params.amount,\\n                    ITraderBalanceVault.OpenType.OPEN\\n                )\\n            );\\n        }\\n\\n        if (params.asset != borrowedAsset) {\\n            depositAmountInBorrowed = PrimexPricingLibrary.megaSwap(\\n                PrimexPricingLibrary.MegaSwapParams({\\n                    tokenA: params.asset,\\n                    tokenB: borrowedAsset,\\n                    amountTokenA: params.amount,\\n                    megaRoutes: params.megaRoutes,\\n                    receiver: address(position.bucket),\\n                    deadline: block.timestamp\\n                }),\\n                0,\\n                payable(params.primexDNS.dexAdapter()),\\n                address(params.priceOracle),\\n                false,\\n                new bytes(0)\\n            );\\n            _require(depositAmountInBorrowed >= params.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n        }\\n\\n        uint256 debt = getDebt(position);\\n        uint256 amountToTrader;\\n        uint256 debtToBurn = depositAmountInBorrowed;\\n\\n        if (depositAmountInBorrowed >= debt) {\\n            amountToTrader = depositAmountInBorrowed - debt;\\n            debtToBurn = debt;\\n            position.scaledDebtAmount = 0;\\n            if (amountToTrader > 0)\\n                params.traderBalanceVault.topUpAvailableBalance(position.trader, borrowedAsset, amountToTrader);\\n        } else {\\n            position.scaledDebtAmount =\\n                position.scaledDebtAmount -\\n                debtToBurn.rdiv(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        position.depositAmountInSoldAsset += debtToBurn;\\n\\n        position.bucket.decreaseTraderDebt(\\n            position.trader,\\n            debtToBurn,\\n            address(params.traderBalanceVault),\\n            amountToTrader,\\n            0\\n        );\\n        return debtToBurn;\\n    }\\n\\n    /**\\n     * @dev Decreases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for the decrease deposit operation.\\n     */\\n    function decreaseDeposit(Position storage position, DecreaseDepositParams memory params) public {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.bucket != IBucketV3(address(0)), Errors.IS_SPOT_POSITION.selector);\\n        _require(position.bucket.isActive(), Errors.BUCKET_IS_NOT_ACTIVE.selector);\\n        _require(params.amount > 0, Errors.DECREASE_AMOUNT_IS_ZERO.selector);\\n        _require(params.amount <= position.depositAmountInSoldAsset, Errors.AMOUNT_IS_MORE_THAN_DEPOSIT.selector);\\n        position.depositAmountInSoldAsset -= params.amount;\\n        position.scaledDebtAmount =\\n            position.scaledDebtAmount +\\n            params.amount.rdiv(position.bucket.getNormalizedVariableDebt());\\n\\n        params.traderBalanceVault.topUpAvailableBalance(position.trader, position.soldAsset, params.amount);\\n\\n        uint256 feeInPaymentAsset;\\n        if (decodeFeeTokenAddress(position.extraParams) == address(0)) {\\n            feeInPaymentAsset = 0;\\n        } else {\\n            (, , address tierManager, uint256 maxProtocolFee, ) = params.primexDNS.getPrimexDNSParams();\\n            feeInPaymentAsset = PrimexPricingLibrary.calculateFeeInPaymentAsset(\\n                PrimexPricingLibrary.CalculateFeeInPaymentAssetParams({\\n                    primexDNS: params.primexDNS,\\n                    priceOracle: address(params.priceOracle),\\n                    feeRateType: IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper,\\n                    paymentAsset: position.soldAsset,\\n                    paymentAmount: params.amount,\\n                    keeperRewardDistributor: params.keeperRewardDistributor,\\n                    gasSpent: 0,\\n                    isFeeProhibitedInPmx: true,\\n                    nativePaymentAssetOracleData: params.nativeSoldAssetOracleData,\\n                    tierManager: ITiersManager(tierManager),\\n                    maxProtocolFee: maxProtocolFee,\\n                    trader: position.trader\\n                })\\n            );\\n        }\\n        _require(\\n            health(\\n                position,\\n                params.priceOracle,\\n                params.pairPriceDrop,\\n                params.securityBuffer,\\n                params.oracleTolerableLimit,\\n                feeInPaymentAsset,\\n                params.positionSoldAssetOracleData\\n            ) >= WadRayMath.WAD + params.maintenanceBuffer,\\n            Errors.INSUFFICIENT_DEPOSIT_SIZE.selector\\n        );\\n        position.bucket.increaseDebt(position.trader, params.amount, address(params.traderBalanceVault));\\n    }\\n\\n    /**\\n     * @notice Closes a position.\\n     * @param position The position to be closed.\\n     * @param params The parameters for closing the position.\\n     * @param reason The reason for closing the position.\\n     * @return posEventData The event data for the closed position.\\n     */\\n    function closePosition(\\n        Position memory position,\\n        ClosePositionParams memory params,\\n        CloseReason reason\\n    ) public returns (ClosePositionEventData memory) {\\n        ClosePositionEventData memory posEventData;\\n        ClosePositionVars memory vars;\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            posEventData.debtAmount = params.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        vars.dexAdapter = payable(params.primexDNS.dexAdapter());\\n\\n        TokenTransfersLibrary.doTransferOut(position.positionAsset, vars.dexAdapter, params.closeAmount);\\n        posEventData.amountOut = PrimexPricingLibrary.megaSwap(\\n            PrimexPricingLibrary.MegaSwapParams({\\n                tokenA: position.positionAsset,\\n                tokenB: position.soldAsset,\\n                amountTokenA: params.closeAmount,\\n                megaRoutes: params.megaRoutes,\\n                receiver: address(this),\\n                deadline: block.timestamp\\n            }),\\n            params.oracleTolerableLimit,\\n            vars.dexAdapter,\\n            address(params.priceOracle),\\n            params.needOracleTolerableLimitCheck,\\n            params.positionSoldAssetOracleData\\n        );\\n\\n        posEventData.paymentAsset = decodeFeeTokenAddress(position.extraParams);\\n\\n        if (reason == CloseReason.CLOSE_BY_TRADER) {\\n            posEventData.feeRateType = params.borrowedAmountIsNotZero\\n                ? IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByTrader\\n                : IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByTrader;\\n            vars.gasSpent = 0;\\n        } else {\\n            posEventData.feeRateType = params.borrowedAmountIsNotZero\\n                ? IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper\\n                : IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByKeeper;\\n            vars.gasSpent = params.initialGasLeft - gasleft();\\n        }\\n\\n        (posEventData.feeInPaymentAsset, posEventData.feeInPmx) = PrimexPricingLibrary.payProtocolFee(\\n            PrimexPricingLibrary.ProtocolFeeParams({\\n                feeToken: posEventData.paymentAsset,\\n                trader: position.trader,\\n                priceOracle: address(params.priceOracle),\\n                feeRateType: posEventData.feeRateType,\\n                traderBalanceVault: params.traderBalanceVault,\\n                swapManager: address(0),\\n                keeperRewardDistributor: params.keeperRewardDistributor,\\n                primexDNS: params.primexDNS,\\n                paymentAsset: position.soldAsset,\\n                paymentAmount: posEventData.amountOut,\\n                gasSpent: vars.gasSpent,\\n                isFeeProhibitedInPmx: reason == CloseReason.RISKY_POSITION,\\n                pmxPaymentAssetOracleData: params.pmxSoldAssetOracleData,\\n                nativePaymentAssetOracleData: params.nativeSoldAssetOracleData\\n            })\\n        );\\n\\n        posEventData.amountOutAfterFee = posEventData.amountOut - posEventData.feeInPaymentAsset;\\n\\n        TokenTransfersLibrary.doTransferOut({\\n            token: position.soldAsset,\\n            to: params.borrowedAmountIsNotZero ? address(position.bucket) : address(params.traderBalanceVault),\\n            amount: posEventData.amountOutAfterFee\\n        });\\n\\n        _require(\\n            posEventData.amountOut >= params.amountOutMin && posEventData.amountOut > 0,\\n            Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector\\n        );\\n\\n        bool canBeClosed;\\n        if (reason == CloseReason.CLOSE_BY_TRADER) {\\n            canBeClosed = position.trader == msg.sender;\\n        } else if (reason == CloseReason.RISKY_POSITION) {\\n            canBeClosed =\\n                health(\\n                    position,\\n                    params.priceOracle,\\n                    params.pairPriceDrop,\\n                    params.securityBuffer,\\n                    params.oracleTolerableLimit,\\n                    posEventData.feeInPaymentAsset,\\n                    params.positionSoldAssetOracleData\\n                ) <\\n                WadRayMath.WAD;\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.Liquidation;\\n        } else if (reason == CloseReason.LIMIT_CONDITION) {\\n            address cm = params.primexDNS.cmTypeToAddress(params.closeCondition.managerType);\\n            _require(cm != address(0), Errors.INCORRECT_CM_TYPE.selector);\\n\\n            canBeClosed = IConditionalClosingManager(cm).canBeClosedAfterSwap(\\n                position,\\n                params.closeCondition.params,\\n                params.ccmAdditionalParams,\\n                params.closeAmount,\\n                posEventData.amountOut,\\n                params.positionSoldAssetOracleData\\n            );\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.StopLoss;\\n        } else if (reason == CloseReason.BUCKET_DELISTED) {\\n            canBeClosed = position.bucket != IBucketV3(address(0)) && position.bucket.isDelisted();\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.BucketDelisted;\\n        }\\n        _require(canBeClosed, Errors.POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON.selector);\\n\\n        if (posEventData.amountOutAfterFee > posEventData.debtAmount) {\\n            unchecked {\\n                vars.amountToReturn = posEventData.amountOutAfterFee - posEventData.debtAmount;\\n            }\\n        } else {\\n            unchecked {\\n                vars.permanentLoss = posEventData.debtAmount - posEventData.amountOutAfterFee;\\n            }\\n        }\\n\\n        posEventData.profit = -int256(params.depositDecrease);\\n\\n        if (reason != CloseReason.RISKY_POSITION) {\\n            if (vars.amountToReturn > 0) {\\n                posEventData.profit += int256(vars.amountToReturn);\\n                params.traderBalanceVault.topUpAvailableBalance(\\n                    reason == CloseReason.CLOSE_BY_TRADER ? params.depositReceiver : position.trader,\\n                    position.soldAsset,\\n                    vars.amountToReturn\\n                );\\n            }\\n        }\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            position.bucket.decreaseTraderDebt(\\n                position.trader,\\n                posEventData.debtAmount,\\n                reason == CloseReason.RISKY_POSITION ? params.primexDNS.treasury() : address(params.traderBalanceVault),\\n                vars.amountToReturn,\\n                vars.permanentLoss\\n            );\\n        }\\n\\n        // to avoid stack to deep\\n        CloseReason _reason = reason;\\n        if (params.closeAmount == position.positionAmount) {\\n            emit ClosePosition({\\n                positionId: position.id,\\n                trader: position.trader,\\n                closedBy: msg.sender,\\n                bucketAddress: address(position.bucket),\\n                soldAsset: position.soldAsset,\\n                positionAsset: position.positionAsset,\\n                decreasePositionAmount: position.positionAmount,\\n                profit: posEventData.profit,\\n                positionDebt: posEventData.debtAmount,\\n                amountOut: posEventData.amountOutAfterFee,\\n                reason: _reason\\n            });\\n        }\\n        posEventData.trader = position.trader;\\n        return posEventData;\\n    }\\n\\n    /**\\n     * @dev Sets the close conditions for a given position.\\n     * @param position The position for which to set the close conditions.\\n     * @param closeConditionsMap The storage mapping of close conditions for each position ID.\\n     * @param closeConditions The array of close conditions to be set.\\n     * @param primexDNS The address of the IPrimexDNS contract.\\n     */\\n    function setCloseConditions(\\n        Position memory position,\\n        mapping(uint256 => LimitOrderLibrary.Condition[]) storage closeConditionsMap,\\n        LimitOrderLibrary.Condition[] memory closeConditions,\\n        IPrimexDNSV3 primexDNS\\n    ) public {\\n        _require(\\n            LimitOrderLibrary.hasNoConditionManagerTypeDuplicates(closeConditions),\\n            Errors.SHOULD_NOT_HAVE_DUPLICATES.selector\\n        );\\n        if (closeConditionsMap[position.id].length > 0) {\\n            delete closeConditionsMap[position.id];\\n        }\\n        LimitOrderLibrary.Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n\\n            closeConditionsMap[position.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Opens a position by depositing assets and borrowing funds (except when the position is spot)\\n     * @param _position The position to be opened\\n     * @param _vars Variables related to the position opening\\n     * @param _pmParams Parameters for the PositionManager contract\\n     * @return The updated position and event data\\n     */\\n    function openPosition(\\n        Position memory _position,\\n        OpenPositionVars memory _vars,\\n        PositionManagerParams memory _pmParams\\n    ) public returns (Position memory, OpenPositionEventData memory) {\\n        OpenPositionLocalData memory data;\\n        if (_vars.isSpot) {\\n            data.tradingOrderType = _vars.byOrder\\n                ? IPrimexDNSStorageV3.TradingOrderType.SpotLimitOrder\\n                : IPrimexDNSStorageV3.TradingOrderType.SpotMarketOrder;\\n        } else {\\n            if (_vars.byOrder) {\\n                data.tradingOrderType = _vars.isThirdAsset\\n                    ? IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrderDepositInThirdAsset\\n                    : IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrder;\\n            } else {\\n                data.tradingOrderType = IPrimexDNSStorageV3.TradingOrderType.MarginMarketOrder;\\n            }\\n        }\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            _vars.borrowedAmount + _position.depositAmountInSoldAsset,\\n            _position.soldAsset,\\n            address(_pmParams.priceOracle),\\n            IKeeperRewardDistributorV3(_pmParams.keeperRewardDistributor),\\n            _pmParams.primexDNS,\\n            data.tradingOrderType,\\n            _vars.nativeSoldAssetOracleData\\n        );\\n        data.amountToTransfer = _vars.borrowedAmount;\\n        data.dexAdapter = payable(_pmParams.primexDNS.dexAdapter());\\n        data.depositReceiver = data.dexAdapter;\\n        if (_vars.depositData.depositAsset == _position.positionAsset) {\\n            _position.positionAmount = _vars.depositData.depositAmount;\\n            data.depositInPositionAsset = _vars.depositData.depositAmount;\\n            data.depositReceiver = address(this);\\n        } else if (_vars.depositData.depositAsset == _position.soldAsset) {\\n            data.amountToTransfer += _vars.depositData.depositAmount;\\n        }\\n\\n        data.isSpot = _vars.borrowedAmount == 0;\\n        if (data.isSpot) _vars.depositData.depositAsset = _position.soldAsset;\\n\\n        if (_vars.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(\\n                _vars.depositData.depositAsset,\\n                msg.sender,\\n                data.depositReceiver,\\n                _vars.depositData.depositAmount\\n            );\\n        } else {\\n            _pmParams.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams({\\n                    trader: _position.trader,\\n                    depositReceiver: data.depositReceiver,\\n                    depositAsset: _vars.depositData.depositAsset,\\n                    depositAmount: _vars.depositData.depositAmount,\\n                    openType: _vars.byOrder\\n                        ? ITraderBalanceVault.OpenType.OPEN_BY_ORDER\\n                        : ITraderBalanceVault.OpenType.OPEN\\n                })\\n            );\\n        }\\n\\n        if (!data.isSpot) {\\n            _position.bucket.increaseDebt(_position.trader, _vars.borrowedAmount, data.dexAdapter);\\n            // @note You need to write index only after opening a position in bucket.\\n            // Since when opening position in the bucket, index becomes relevant (containing accumulated profit)\\n            _position.openBorrowIndex = _position.bucket.variableBorrowIndex();\\n            _position.scaledDebtAmount = _vars.borrowedAmount.rdiv(_position.openBorrowIndex);\\n        }\\n        if (_vars.isThirdAsset) {\\n            data.depositInPositionAsset = PrimexPricingLibrary.megaSwap(\\n                PrimexPricingLibrary.MegaSwapParams({\\n                    tokenA: _vars.depositData.depositAsset,\\n                    tokenB: _position.positionAsset,\\n                    amountTokenA: _vars.depositData.depositAmount,\\n                    megaRoutes: _vars.depositInThirdAssetMegaRoutes,\\n                    receiver: address(this),\\n                    deadline: _vars.deadline\\n                }),\\n                _pmParams.oracleTolerableLimitForThirdAsset,\\n                data.dexAdapter,\\n                address(_pmParams.priceOracle),\\n                true,\\n                _vars.thirdAssetOracleData\\n            );\\n            _position.positionAmount += data.depositInPositionAsset;\\n        } else {\\n            _require(\\n                _vars.depositInThirdAssetMegaRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n        }\\n\\n        data.borrowedAmountInPositionAsset = PrimexPricingLibrary.megaSwap(\\n            PrimexPricingLibrary.MegaSwapParams({\\n                tokenA: _position.soldAsset,\\n                tokenB: _position.positionAsset,\\n                amountTokenA: data.isSpot ? _vars.depositData.depositAmount : data.amountToTransfer,\\n                megaRoutes: _vars.firstAssetMegaRoutes,\\n                receiver: address(this),\\n                deadline: _vars.deadline\\n            }),\\n            _pmParams.oracleTolerableLimit,\\n            data.dexAdapter,\\n            address(_pmParams.priceOracle),\\n            _vars.needOracleTolerableLimitCheck,\\n            _vars.firstAssetOracleData\\n        );\\n        _position.positionAmount += data.borrowedAmountInPositionAsset;\\n\\n        OpenPositionEventData memory posEventData;\\n\\n        if (_vars.byOrder) {\\n            posEventData.feeRateType = data.isSpot\\n                ? IPrimexDNSStorageV3.FeeRateType.SpotLimitOrderExecuted\\n                : IPrimexDNSStorageV3.FeeRateType.MarginLimitOrderExecuted;\\n            (posEventData.feeInPositionAsset, posEventData.feeInPmx) = PrimexPricingLibrary.payProtocolFee(\\n                PrimexPricingLibrary.ProtocolFeeParams({\\n                    feeToken: decodeFeeTokenAddress(_position.extraParams),\\n                    trader: _position.trader,\\n                    priceOracle: address(_pmParams.priceOracle),\\n                    feeRateType: posEventData.feeRateType,\\n                    traderBalanceVault: _pmParams.traderBalanceVault,\\n                    swapManager: address(0),\\n                    keeperRewardDistributor: _pmParams.keeperRewardDistributor,\\n                    primexDNS: _pmParams.primexDNS,\\n                    paymentAsset: _position.positionAsset,\\n                    paymentAmount: _position.positionAmount,\\n                    gasSpent: _pmParams.initialGasLeft - gasleft(),\\n                    isFeeProhibitedInPmx: false,\\n                    pmxPaymentAssetOracleData: _vars.pmxPositionAssetOracleData,\\n                    nativePaymentAssetOracleData: _vars.nativePositionAssetOracleData\\n                })\\n            );\\n            _position.positionAmount -= posEventData.feeInPositionAsset;\\n        }\\n        _require(_position.positionAmount >= _vars.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n\\n        data.leverage = WadRayMath.WAD;\\n        if (!data.isSpot) {\\n            _require(_pmParams.maxPositionSize >= _position.positionAmount, Errors.POSITION_SIZE_EXCEEDED.selector);\\n            if (_vars.depositData.depositAsset == _position.soldAsset) {\\n                data.positionAmountAfterFeeInSoldAsset =\\n                    (data.amountToTransfer * _position.positionAmount) /\\n                    (_position.positionAmount + posEventData.feeInPositionAsset);\\n                _require(\\n                    data.positionAmountAfterFeeInSoldAsset > _vars.borrowedAmount,\\n                    Errors.INSUFFICIENT_DEPOSIT.selector\\n                );\\n                data.leverage = data.positionAmountAfterFeeInSoldAsset.wdiv(\\n                    data.positionAmountAfterFeeInSoldAsset - _vars.borrowedAmount\\n                );\\n            } else {\\n                _require(\\n                    data.depositInPositionAsset > posEventData.feeInPositionAsset,\\n                    Errors.INSUFFICIENT_DEPOSIT.selector\\n                );\\n                data.leverage = _position.positionAmount.wdiv(\\n                    data.depositInPositionAsset - posEventData.feeInPositionAsset\\n                );\\n            }\\n\\n            // to avoid stack to deep\\n            data.positionAsset = _position.positionAsset;\\n            data.positionAmount = _position.positionAmount;\\n\\n            // protocolFee calculated in position Asset\\n            (, , address tierManager, uint256 maxProtocolFee, ) = _pmParams.primexDNS.getPrimexDNSParams();\\n            _require(\\n                data.leverage <=\\n                    _position.bucket.maxAssetLeverage(\\n                        _position.positionAsset,\\n                        PrimexPricingLibrary\\n                            .calculateFeeInPaymentAsset(\\n                                PrimexPricingLibrary.CalculateFeeInPaymentAssetParams({\\n                                    primexDNS: _pmParams.primexDNS,\\n                                    priceOracle: address(_pmParams.priceOracle),\\n                                    feeRateType: IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper,\\n                                    paymentAsset: data.positionAsset,\\n                                    paymentAmount: data.positionAmount,\\n                                    keeperRewardDistributor: _pmParams.keeperRewardDistributor,\\n                                    gasSpent: 0,\\n                                    isFeeProhibitedInPmx: true,\\n                                    nativePaymentAssetOracleData: _vars.nativePositionAssetOracleData,\\n                                    tierManager: ITiersManager(tierManager),\\n                                    maxProtocolFee: maxProtocolFee,\\n                                    trader: _position.trader\\n                                })\\n                            )\\n                            .wdiv(data.positionAmount)\\n                    ),\\n                Errors.INSUFFICIENT_DEPOSIT.selector\\n            );\\n            if (_vars.byOrder) {\\n                uint256 leverageTolerance = _pmParams.primexDNS.leverageTolerance();\\n                _require(\\n                    data.leverage <= _vars.orderLeverage.wmul(WadRayMath.WAD + leverageTolerance) &&\\n                        data.leverage >= _vars.orderLeverage.wmul(WadRayMath.WAD - leverageTolerance),\\n                    Errors.LEVERAGE_TOLERANCE_EXCEEDED.selector\\n                );\\n            }\\n        }\\n\\n        if (!_vars.byOrder) {\\n            _vars.depositData.leverage = data.leverage;\\n        }\\n\\n        data.multiplierBorrowedAsset = 10 ** (18 - IERC20Metadata(_position.soldAsset).decimals());\\n        data.multiplierPositionAsset = 10 ** (18 - IERC20Metadata(_position.positionAsset).decimals());\\n        posEventData.entryPrice =\\n            ((_vars.borrowedAmount + _position.depositAmountInSoldAsset) * data.multiplierBorrowedAsset).wdiv(\\n                (_position.positionAmount + posEventData.feeInPositionAsset) * data.multiplierPositionAsset\\n            ) /\\n            data.multiplierBorrowedAsset;\\n        posEventData.leverage = _vars.depositData.leverage;\\n        return (_position, posEventData);\\n    }\\n\\n    /**\\n     * @dev Retrieves the debt amount for a given position.\\n     * @param position The Position struct representing the position to get the debt amount for.\\n     * @return The debt amount in debtTokens.\\n     */\\n    function getDebt(Position memory position) public view returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return 0;\\n        return position.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n    }\\n\\n    /**\\n     * @dev Calculates the health of a position.\\n     * @dev health = ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * positionAmountInBorrowedAsset) /\\n     (feeBuffer * debt)\\n     * @param position The position object containing relevant information.\\n     * @param priceOracle The price oracle contract used for obtaining asset prices.\\n     * @param pairPriceDrop The priceDrop in WAD format of the asset pair.\\n     * @param securityBuffer The security buffer in WAD format for the position.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the price oracle.\\n     * @return The health value in WAD format of the position.\\n     */\\n    function health(\\n        Position memory position,\\n        IPriceOracleV2 priceOracle,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit,\\n        uint256 feeInPaymentAsset,\\n        bytes memory positionSoldAssetOracleData\\n    ) public returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return WadRayMath.WAD;\\n        return\\n            health(\\n                PrimexPricingLibrary.getOracleAmountsOut(\\n                    position.positionAsset,\\n                    position.soldAsset,\\n                    position.positionAmount,\\n                    address(priceOracle),\\n                    positionSoldAssetOracleData\\n                ) - feeInPaymentAsset,\\n                pairPriceDrop,\\n                securityBuffer,\\n                oracleTolerableLimit,\\n                getDebt(position),\\n                position.bucket.feeBuffer()\\n            );\\n    }\\n\\n    /**\\n     * @dev Creates a new position based on the given parameters.\\n     * @param _params The input parameters for creating the position.\\n     * @param primexDNS The address of the PrimexDNS contract.\\n     * @param priceOracle The address of the PriceOracle contract.\\n     * @return position The created Position struct.\\n     * @return vars The OpenPositionVars struct.\\n     */\\n    function createPosition(\\n        OpenPositionParams calldata _params,\\n        IPrimexDNSV3 primexDNS,\\n        IPriceOracleV2 priceOracle\\n    ) public returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetMegaRoutes: _params.firstAssetMegaRoutes,\\n            depositInThirdAssetMegaRoutes: _params.marginParams.depositInThirdAssetMegaRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                depositAsset: address(0),\\n                depositAmount: _params.depositAmount,\\n                leverage: 0\\n            }),\\n            borrowedAmount: _params.marginParams.borrowedAmount,\\n            amountOutMin: _params.amountOutMin,\\n            deadline: _params.deadline,\\n            isSpot: _params.marginParams.borrowedAmount == 0,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: _params.takeDepositFromWallet,\\n            byOrder: false,\\n            orderLeverage: 0,\\n            sender: address(0),\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: _params.marginParams.borrowedAmount > 0,\\n            firstAssetOracleData: _params.firstAssetOracleData,\\n            thirdAssetOracleData: _params.thirdAssetOracleData,\\n            positionUsdOracleData: _params.positionUsdOracleData,\\n            nativePositionAssetOracleData: _params.nativePositionAssetOracleData,\\n            pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n            nativeSoldAssetOracleData: _params.nativeSoldAssetOracleData\\n        });\\n\\n        PositionLibrary.Position memory position = PositionLibrary.Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucketV3(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.positionAsset,\\n            positionAmount: 0,\\n            trader: msg.sender,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            _require(bytes(_params.marginParams.bucket).length == 0, Errors.BUCKET_SHOULD_BE_UNDEFINED.selector);\\n            position.soldAsset = _params.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n            vars.depositData.leverage = WadRayMath.WAD;\\n        } else {\\n            position.bucket = IBucketV3(primexDNS.getBucketAddress(_params.marginParams.bucket));\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.depositAsset;\\n            (, bool tokenAllowed) = position.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n\\n            vars.isThirdAsset =\\n                _params.depositAsset != position.soldAsset &&\\n                _params.depositAsset != _params.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.depositAsset,\\n                position.soldAsset,\\n                _params.depositAmount,\\n                address(priceOracle),\\n                _params.depositSoldAssetOracleData\\n            );\\n        }\\n        address feeToken = _params.isProtocolFeeInPmx ? primexDNS.pmx() : position.soldAsset;\\n        position.extraParams = abi.encode(feeToken);\\n\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Creates a position based on the provided order parameters.\\n     * @dev This function calculates and returns a Position and OpenPositionVars struct.\\n     * @param _params The OpenPositionByOrderParams struct containing the order parameters.\\n     * @param priceOracle The price oracle contract used for retrieving asset prices.\\n     * @return position The Position struct representing the created position.\\n     * @return vars The OpenPositionVars struct containing additional variables related to the position.\\n     */\\n    function createPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params,\\n        IPriceOracleV2 priceOracle,\\n        IPrimexDNSV3 primexDNS\\n    ) public returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetMegaRoutes: _params.firstAssetMegaRoutes,\\n            depositInThirdAssetMegaRoutes: _params.depositInThirdAssetMegaRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                depositAsset: address(0),\\n                depositAmount: _params.order.depositAmount,\\n                leverage: _params.order.leverage\\n            }),\\n            borrowedAmount: _params.borrowedAmount,\\n            amountOutMin: 0,\\n            orderLeverage: _params.order.leverage,\\n            deadline: _params.order.deadline,\\n            isSpot: _params.order.leverage == WadRayMath.WAD,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: false,\\n            byOrder: true,\\n            sender: _params.sender,\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: address(_params.order.bucket) != address(0),\\n            firstAssetOracleData: _params.firstAssetOracleData,\\n            thirdAssetOracleData: _params.thirdAssetOracleData,\\n            positionUsdOracleData: _params.positionUsdOracleData,\\n            nativePositionAssetOracleData: _params.nativePositionAssetOracleData,\\n            pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n            nativeSoldAssetOracleData: _params.nativeSoldAssetOracleData\\n        });\\n\\n        Position memory position = Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucketV3(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.order.positionAsset,\\n            positionAmount: 0,\\n            trader: _params.order.trader,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            position.soldAsset = _params.order.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n        } else {\\n            position.bucket = _params.order.bucket;\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.order.depositAsset;\\n            vars.isThirdAsset =\\n                _params.order.depositAsset != position.soldAsset &&\\n                _params.order.depositAsset != _params.order.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.order.depositAsset,\\n                position.soldAsset,\\n                _params.order.depositAmount,\\n                address(priceOracle),\\n                _params.depositSoldAssetOracleData\\n            );\\n            if (_params.order.depositAsset == position.soldAsset) {\\n                _require(\\n                    vars.borrowedAmount == _params.order.depositAmount.wmul(_params.order.leverage - WadRayMath.WAD),\\n                    Errors.INCORRECT_BORROWED_AMOUNT.selector\\n                );\\n            }\\n        }\\n        address feeToken = _params.order.feeToken == primexDNS.pmx() ? primexDNS.pmx() : position.soldAsset;\\n        position.extraParams = abi.encode(feeToken);\\n\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Decodes a fee token address from the provided encoded data.\\n     * @param data The encoded data containing the fee token address.\\n     * @return The decoded fee token address.\\n     */\\n    function decodeFeeTokenAddress(bytes memory data) public pure returns (address) {\\n        // Check if there is data in the bytes extraParams\\n        if (data.length == 0) {\\n            // If there is no data, return address(0)\\n            return address(0);\\n        } else {\\n            // Decode the data into an address and return the result\\n            return abi.decode(data, (address));\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the health score for a position.\\n     * @param positionAmountInBorrowedAsset The position size in borrow asset.\\n     * @param pairPriceDrop The priceDrop in WAD format of the pair.\\n     * @param securityBuffer The security buffer in WAD format.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the oracle.\\n     * @param positionDebt The debt of the position.\\n     * @param feeBuffer The buffer for fees.\\n     * @return The health score of the position.\\n     */\\n    function health(\\n        uint256 positionAmountInBorrowedAsset,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit,\\n        uint256 positionDebt,\\n        uint256 feeBuffer\\n    ) public pure returns (uint256) {\\n        return\\n            (\\n                (WadRayMath.WAD - securityBuffer)\\n                    .wmul(WadRayMath.WAD - oracleTolerableLimit)\\n                    .wmul(WadRayMath.WAD - pairPriceDrop)\\n                    .wmul(positionAmountInBorrowedAsset)\\n            ).wdiv(feeBuffer.wmul(positionDebt));\\n    }\\n}\\n\",\"keccak256\":\"0x66ed4afea278a9f28affad420d9fee4fd8122c7547fcdaf4729610a9e62c6301\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PrimexPricingLibrary.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {BytesLib} from \\\"./utils/BytesLib.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {NATIVE_CURRENCY, USD, USD_MULTIPLIER, ARB_NITRO_ORACLE, OVM_GASPRICEORACLE, GAS_FOR_BYTE, TRANSACTION_METADATA_BYTES} from \\\"../Constants.sol\\\";\\nimport {IDexAdapter} from \\\"../interfaces/IDexAdapter.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {IPrimexDNSV3, IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\nimport {IPriceOracleStorageV2} from \\\"../PriceOracle/IPriceOracleStorage.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {ITiersManager} from \\\"../TiersManager/ITiersManager.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary PrimexPricingLibrary {\\n    using WadRayMath for uint256;\\n    using BytesLib for bytes;\\n\\n    /**\\n     * @param dexName The name of the DEX.\\n     * @param shares the share that will be allocated from the total amount for the route\\n     * @param payload payload data encoded in bytes\\n     */\\n\\n    struct Path {\\n        string dexName;\\n        uint256 shares;\\n        bytes payload;\\n    }\\n\\n    /**\\n     * @param to the destination token of the route\\n     * @param paths path array through which the swap will be made up to the destination token this the route\\n     */\\n\\n    struct Route {\\n        address to;\\n        Path[] paths;\\n    }\\n\\n    /**\\n     * @param shares the share that will be allocated from the total amount for this MegaRoute\\n     * @param routes array of routes through which the swap will be made up to TokenB\\n     */\\n    struct MegaRoute {\\n        uint256 shares;\\n        Route[] routes;\\n    }\\n\\n    struct MegaSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        MegaRoute[] megaRoutes;\\n        address receiver;\\n        uint256 deadline;\\n    }\\n\\n    struct AmountParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amount;\\n        MegaRoute[] megaRoutes;\\n        address dexAdapter;\\n        address primexDNS;\\n    }\\n\\n    struct DepositData {\\n        address depositAsset;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n    }\\n\\n    /**\\n     * @param feeToken An asset in which the fee will be paid.\\n     * @param trader The trader address\\n     * @param priceOracle PriceOracle contract address\\n     * @param orderType Type of possible order in Primex protocol\\n     * @param traderBalanceVault TraderBalanceVault contract address\\n     * @param primexDNS PrimexDNS contract address\\n     */\\n    struct ProtocolFeeParams {\\n        address feeToken;\\n        address trader;\\n        address priceOracle;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        ITraderBalanceVault traderBalanceVault;\\n        address swapManager;\\n        address keeperRewardDistributor;\\n        IPrimexDNSV3 primexDNS;\\n        address paymentAsset;\\n        uint256 paymentAmount;\\n        uint256 gasSpent;\\n        bool isFeeProhibitedInPmx;\\n        bytes pmxPaymentAssetOracleData;\\n        bytes nativePaymentAssetOracleData;\\n    }\\n\\n    struct ProtocolFeeParamsBatchClose {\\n        uint256 numberOfPositions;\\n        address[] feeTokens;\\n        address[] traders;\\n        uint256[] paymentAmounts;\\n        address paymentAsset;\\n        address priceOracle;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        ITraderBalanceVault traderBalanceVault;\\n        address keeperRewardDistributor;\\n        IPrimexDNSV3 primexDNS;\\n        uint256 estimatedGasAmount;\\n        bool isFeeProhibitedInPmx;\\n        uint256 estimatedBaseLength;\\n        bytes nativePaymentAssetOracleData;\\n        bytes pmxPaymentAssetOracleData;\\n    }\\n\\n    struct CalculateFeeInPaymentAssetParams {\\n        IPrimexDNSV3 primexDNS;\\n        address priceOracle;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        address paymentAsset;\\n        uint256 paymentAmount;\\n        address keeperRewardDistributor;\\n        uint256 gasSpent;\\n        bool isFeeProhibitedInPmx;\\n        bytes nativePaymentAssetOracleData;\\n        ITiersManager tierManager;\\n        uint256 maxProtocolFee;\\n        address trader;\\n    }\\n\\n    struct MinProtocolFeeParams {\\n        uint256 restrictedGasSpent;\\n        address paymentAsset;\\n        address priceOracle;\\n        IKeeperRewardDistributorV3 keeperRewardDistributor;\\n        IPrimexDNSV3 primexDNS;\\n        bool isFeeProhibitedInPmx;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        bytes nativePaymentAssetOracleData;\\n    }\\n\\n    /**\\n     * The struct for payProtocolFee function\\n     */\\n    struct ProtocolFeeVars {\\n        address pmx;\\n        address treasury;\\n        address tierManager;\\n        uint256 feeInPaymentAssetWithDiscount;\\n        uint256 pmxTraderBalance;\\n        uint256 pmxTraderBalanceInPaymentAsset;\\n        uint256 pmxDiscountMultiplier;\\n        uint256 maxProtocolFee;\\n    }\\n\\n    /**\\n     * The struct for calculateFeeInPaymentAssetVars function\\n     */\\n    struct FeeInPaymentAssetVars {\\n        uint256 protocolFeeRate;\\n        uint256 feeInPaymentAsset;\\n        uint256 maxProtocolFeeInPaymentAsset;\\n        uint256 minProtocolFeeInPaymentAsset;\\n    }\\n\\n    /**\\n     * The struct for minProtocolFee function\\n     */\\n    struct MinProtocolFeeVars {\\n        uint256 maxGasAmount;\\n        uint256 restrictedGasPrice;\\n        uint256 l1CostWei;\\n        uint256 liquidationGasAmount;\\n        uint256 protocolFeeCoefficient;\\n        uint256 additionalGasSpent;\\n        uint256 minProtocolFeeInNativeAsset;\\n        uint256 totalGasSpent;\\n        uint256 baseLength;\\n        uint256 optimisticGasCoefficient;\\n        IPrimexDNSStorageV3.CallingMethod callingMethod;\\n        IKeeperRewardDistributorStorage.PaymentModel paymentModel;\\n    }\\n\\n    /**\\n     * The struct for calculateFeeInPaymentAssetBatchClose function\\n     */\\n    struct CalculateFeeInPaymentAssetBatchCloseVars {\\n        uint256[] feeInPaymentAsset;\\n        uint256 protocolFeeRate;\\n        uint256 maxProtocolFeeInPaymentAsset;\\n        uint256 minProtocolFeeInPaymentAsset;\\n    }\\n\\n    struct CalculateFeeInPaymentAssetBatchCloseParams {\\n        uint256 numberOfPositions;\\n        IPrimexDNSV3 primexDNS;\\n        address priceOracle;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        address paymentAsset;\\n        uint256[] paymentAmounts;\\n        address keeperRewardDistributor;\\n        uint256 estimatedGasAmount;\\n        uint256 estimatedBaseLength;\\n        ITiersManager tierManager;\\n        uint256 maxProtocolFee;\\n        bool isFeeProhibitedInPmx;\\n    }\\n\\n    /**\\n     * The struct for calculateRestrictedGasPrice function\\n     */\\n    struct RestrictedGasPriceVars {\\n        int256 oracleGasPrice;\\n        uint256 maxGasPrice;\\n        uint256 defaultMaxGasPrice;\\n        uint256 oracleGasPriceTolerance;\\n    }\\n\\n    /**\\n     * The struct for getLiquidationPrice and getLiquidationPriceByOrder functions\\n     */\\n    struct LiquidationPriceData {\\n        IBucketV3 bucket;\\n        IPositionManagerV2 positionManager;\\n        IPriceOracleV2 priceOracle;\\n        IERC20Metadata borrowedAsset;\\n    }\\n\\n    event Withdraw(\\n        address indexed withdrawer,\\n        address borrowAssetReceiver,\\n        address borrowedAsset,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Encodes the given parameters into a bytes array based on the specified DEX type.\\n     * @param path The token path for the swap.\\n     * @param dexRouter The address of the DEX router.\\n     * @param ancillaryData Additional data required for certain DEX types.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @param isAmountToBuy A flag indicating whether it is the path for the swap with fixed amountIn or amountOut.\\n     * Swap with fixed amountIn, if true.\\n     * @return The encoded bytes array.\\n     */\\n    function encodePath(\\n        address[] memory path,\\n        address dexRouter,\\n        bytes32 ancillaryData,\\n        address payable dexAdapter,\\n        bool isAmountToBuy\\n    ) external view returns (bytes memory) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            return abi.encode(path);\\n        }\\n        if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            if (isAmountToBuy)\\n                return bytes.concat(bytes20(path[1]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            if (isAmountToBuy) return bytes.concat(bytes20(path[1]), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.Curve) {\\n            address[] memory pools = new address[](1);\\n            pools[0] = address(uint160(uint256(ancillaryData)));\\n            return abi.encode(path, pools);\\n        }\\n        if (type_ == IDexAdapter.DexType.Balancer) {\\n            int256[] memory limits = new int256[](2);\\n            limits[0] = type(int256).max;\\n            bytes32[] memory pools = new bytes32[](1);\\n            pools[0] = ancillaryData;\\n            return abi.encode(path, pools, limits);\\n        }\\n        _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of deposit assets in borrowed assets.\\n     * @param _params The parameters for the calculation.\\n     * @param _isThirdAsset A flag indicating if deposit is in a third asset.\\n     * @param _priceOracle The address of the price oracle.\\n     * @return The amount of deposit assets is measured in borrowed assets.\\n     */\\n    function getDepositAmountInBorrowed(\\n        IDexAdapter.AmountParams calldata _params,\\n        bool _isThirdAsset,\\n        address payable _dexAdapter,\\n        address _priceOracle,\\n        bytes calldata _oracleData\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracleV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_params.tokenA == _params.tokenB) {\\n            _require(_params.megaRoutes.length == 0, Errors.DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0.selector);\\n            return _params.amount;\\n        }\\n\\n        uint256 depositAmountInBorrowed = IDexAdapter(_dexAdapter).getAmountOutByMegaRoutes(_params);\\n        if (_isThirdAsset) {\\n            uint256 oracleDepositAmountOut = getOracleAmountsOut(\\n                _params.tokenA,\\n                _params.tokenB,\\n                _params.amount,\\n                _priceOracle,\\n                _oracleData\\n            );\\n            if (depositAmountInBorrowed > oracleDepositAmountOut) depositAmountInBorrowed = oracleDepositAmountOut;\\n        }\\n\\n        return depositAmountInBorrowed;\\n    }\\n\\n    /**\\n     * @notice Performs a multi-hop swap transaction using the specified parameters.\\n     * @dev This function executes a series of token swaps on different DEXs based on the provided routes.\\n     * @param _params The struct containing all the necessary parameters for the multi-hop swap.\\n     * @param _maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * for the price difference between DEX and the oracle.\\n     * @param _dexAdapter The address of the Dex adapter contract.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @param _needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The final balance of the _params.tokenB in the receiver's address after the multi-hop swap.\\n     */\\n    function megaSwap(\\n        MegaSwapParams calldata _params,\\n        uint256 _maximumOracleTolerableLimit,\\n        address payable _dexAdapter,\\n        address _priceOracle,\\n        bool _needOracleTolerableLimitCheck,\\n        bytes calldata _oracleData\\n    ) public returns (uint256) {\\n        uint256 balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver);\\n        IDexAdapter(_dexAdapter).performMegaRoutesSwap(_params);\\n\\n        balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver) - balance;\\n        if (_needOracleTolerableLimitCheck) {\\n            _require(\\n                balance >=\\n                    getOracleAmountsOut(_params.tokenA, _params.tokenB, _params.amountTokenA, _priceOracle, _oracleData)\\n                        .wmul(WadRayMath.WAD - _maximumOracleTolerableLimit),\\n                Errors.DIFFERENT_PRICE_DEX_AND_ORACLE.selector\\n            );\\n        }\\n\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Pays the protocol fee.\\n     * @dev This function transfers the protocol fee from the trader to the protocol treasury.\\n     * @param params The parameters for paying the protocol fee.\\n     * @return feeInPaymentAsset The amount of the protocol fee in a payment asset\\n     * (position asset for the limit order execution, sold asset when the position is closed.)\\n     * @return feeInPmx The amount of the protocol fee in pmx asset paid.\\n     */\\n    function payProtocolFee(\\n        ProtocolFeeParams memory params\\n    ) public returns (uint256 feeInPaymentAsset, uint256 feeInPmx) {\\n        // This is done to ensure that after upgrading the contracts, positions that have already been opened\\n        // and had fees paid for them will not incur additional fees upon closure\\n        if (params.feeToken == address(0)) {\\n            return (0, 0);\\n        }\\n\\n        ProtocolFeeVars memory vars;\\n        (vars.pmx, vars.treasury, vars.tierManager, vars.maxProtocolFee, vars.pmxDiscountMultiplier) = params\\n            .primexDNS\\n            .getPrimexDNSParams();\\n        feeInPaymentAsset = calculateFeeInPaymentAsset(\\n            CalculateFeeInPaymentAssetParams({\\n                primexDNS: params.primexDNS,\\n                priceOracle: params.priceOracle,\\n                feeRateType: params.feeRateType,\\n                paymentAsset: params.paymentAsset,\\n                paymentAmount: params.paymentAmount,\\n                keeperRewardDistributor: params.keeperRewardDistributor,\\n                gasSpent: params.gasSpent,\\n                isFeeProhibitedInPmx: params.isFeeProhibitedInPmx,\\n                nativePaymentAssetOracleData: params.nativePaymentAssetOracleData,\\n                tierManager: ITiersManager(vars.tierManager),\\n                maxProtocolFee: vars.maxProtocolFee,\\n                trader: params.trader\\n            })\\n        );\\n        (vars.pmxTraderBalance, ) = params.traderBalanceVault.balances(params.trader, vars.pmx);\\n        if (params.feeToken == vars.pmx && vars.pmxTraderBalance > 0 && !params.isFeeProhibitedInPmx) {\\n            // pmx => payment asset data\\n            uint256 pmxTraderBalanceInPaymentAsset = getOracleAmountsOut(\\n                vars.pmx,\\n                params.paymentAsset,\\n                vars.pmxTraderBalance,\\n                params.priceOracle,\\n                params.pmxPaymentAssetOracleData\\n            );\\n\\n            uint256 feeInPaymentAssetWithDiscount = feeInPaymentAsset.wmul(vars.pmxDiscountMultiplier);\\n\\n            feeInPmx = (feeInPaymentAssetWithDiscount * vars.pmxTraderBalance) / pmxTraderBalanceInPaymentAsset;\\n\\n            if (pmxTraderBalanceInPaymentAsset >= feeInPaymentAssetWithDiscount) {\\n                feeInPaymentAsset = 0;\\n                params.traderBalanceVault.withdrawFrom(params.trader, vars.treasury, vars.pmx, feeInPmx, false);\\n            } else {\\n                feeInPmx = vars.pmxTraderBalance;\\n                feeInPaymentAsset -= pmxTraderBalanceInPaymentAsset.wdiv(vars.pmxDiscountMultiplier);\\n                params.traderBalanceVault.withdrawFrom(\\n                    params.trader,\\n                    vars.treasury,\\n                    vars.pmx,\\n                    vars.pmxTraderBalance,\\n                    false\\n                );\\n                TokenTransfersLibrary.doTransferOut(params.paymentAsset, vars.treasury, feeInPaymentAsset);\\n            }\\n        } else {\\n            TokenTransfersLibrary.doTransferOut(params.paymentAsset, vars.treasury, feeInPaymentAsset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate and return protocol fee\\n     * @return The amount of the protocol fee in '_feeToken' which needs to be paid according to the specified deposit parameters.\\n     */\\n    function calculateFeeInPaymentAsset(CalculateFeeInPaymentAssetParams memory params) public returns (uint256) {\\n        FeeInPaymentAssetVars memory vars;\\n\\n        vars.protocolFeeRate = params.primexDNS.getProtocolFeeRateByTier(\\n            params.feeRateType,\\n            params.isFeeProhibitedInPmx ? 0 : params.tierManager.getTraderTierForAddress(params.trader)\\n        );\\n\\n        // Calculate protocol fee in position asset\\n        vars.feeInPaymentAsset = params.paymentAmount.wmul(vars.protocolFeeRate);\\n\\n        // Calculate max protocol fee in position asset\\n        vars.maxProtocolFeeInPaymentAsset = params.maxProtocolFee == type(uint256).max\\n            ? type(uint256).max\\n            : getOracleAmountsOut(\\n                NATIVE_CURRENCY,\\n                params.paymentAsset,\\n                params.maxProtocolFee,\\n                params.priceOracle,\\n                params.nativePaymentAssetOracleData\\n            );\\n\\n        // The minProtocolFee is applied only if the order/position is processed by Keepers\\n\\n        if (\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByTrader ||\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByTrader ||\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.SwapMarketOrder\\n        ) {\\n            vars.feeInPaymentAsset = min(vars.feeInPaymentAsset, vars.maxProtocolFeeInPaymentAsset);\\n        } else {\\n            vars.minProtocolFeeInPaymentAsset = minProtocolFee(\\n                MinProtocolFeeParams({\\n                    restrictedGasSpent: params.gasSpent,\\n                    paymentAsset: params.paymentAsset,\\n                    priceOracle: params.priceOracle,\\n                    keeperRewardDistributor: IKeeperRewardDistributorV3(params.keeperRewardDistributor),\\n                    primexDNS: params.primexDNS,\\n                    isFeeProhibitedInPmx: params.isFeeProhibitedInPmx,\\n                    feeRateType: params.feeRateType,\\n                    nativePaymentAssetOracleData: params.nativePaymentAssetOracleData\\n                })\\n            );\\n            _require(\\n                vars.minProtocolFeeInPaymentAsset < params.paymentAmount,\\n                Errors.MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT.selector\\n            );\\n\\n            vars.feeInPaymentAsset = min(\\n                max(vars.feeInPaymentAsset, vars.minProtocolFeeInPaymentAsset),\\n                vars.maxProtocolFeeInPaymentAsset\\n            );\\n        }\\n        return vars.feeInPaymentAsset;\\n    }\\n\\n    function payProtocolFeeBatchClose(\\n        ProtocolFeeParamsBatchClose calldata params\\n    ) public returns (uint256[] memory, uint256[] memory) {\\n        ProtocolFeeVars memory vars;\\n        uint256[] memory feeInPaymentAsset = new uint256[](params.numberOfPositions);\\n        uint256[] memory feeInPmx = new uint256[](params.numberOfPositions);\\n\\n        (vars.pmx, vars.treasury, vars.tierManager, vars.maxProtocolFee, vars.pmxDiscountMultiplier) = params\\n            .primexDNS\\n            .getPrimexDNSParams();\\n\\n        feeInPaymentAsset = calculateFeeInPaymentAssetBatchClose(\\n            CalculateFeeInPaymentAssetBatchCloseParams({\\n                numberOfPositions: params.numberOfPositions,\\n                primexDNS: params.primexDNS,\\n                priceOracle: params.priceOracle,\\n                feeRateType: params.feeRateType,\\n                paymentAsset: params.paymentAsset,\\n                paymentAmounts: params.paymentAmounts,\\n                keeperRewardDistributor: params.keeperRewardDistributor,\\n                estimatedGasAmount: params.estimatedGasAmount,\\n                estimatedBaseLength: params.estimatedBaseLength,\\n                tierManager: ITiersManager(vars.tierManager),\\n                maxProtocolFee: vars.maxProtocolFee,\\n                isFeeProhibitedInPmx: params.isFeeProhibitedInPmx\\n            }),\\n            // to keep calldata\\n            params.nativePaymentAssetOracleData,\\n            params.traders\\n        );\\n        for (uint256 i; i < params.numberOfPositions; i++) {\\n            // This is done to ensure that after upgrading the contracts, positions that have already been opened\\n            // and had fees paid for them will not incur additional fees upon closure\\n            if (params.feeTokens[i] == address(0)) {\\n                feeInPaymentAsset[i] = 0;\\n                feeInPmx[i] = 0;\\n                continue;\\n            }\\n\\n            (vars.pmxTraderBalance, ) = params.traderBalanceVault.balances(params.traders[i], vars.pmx);\\n\\n            if (!params.isFeeProhibitedInPmx && params.feeTokens[i] == vars.pmx && vars.pmxTraderBalance > 0) {\\n                vars.pmxTraderBalanceInPaymentAsset = getOracleAmountsOut(\\n                    vars.pmx,\\n                    params.paymentAsset,\\n                    vars.pmxTraderBalance,\\n                    params.priceOracle,\\n                    params.pmxPaymentAssetOracleData\\n                );\\n\\n                vars.feeInPaymentAssetWithDiscount = feeInPaymentAsset[i].wmul(vars.pmxDiscountMultiplier);\\n                feeInPmx[i] =\\n                    (vars.feeInPaymentAssetWithDiscount * vars.pmxTraderBalance) /\\n                    vars.pmxTraderBalanceInPaymentAsset;\\n                if (vars.pmxTraderBalanceInPaymentAsset >= vars.feeInPaymentAssetWithDiscount) {\\n                    feeInPaymentAsset[i] = 0;\\n                    params.traderBalanceVault.withdrawFrom(\\n                        params.traders[i],\\n                        vars.treasury,\\n                        vars.pmx,\\n                        feeInPmx[i],\\n                        false\\n                    );\\n                } else {\\n                    feeInPmx[i] = vars.pmxTraderBalance;\\n                    feeInPaymentAsset[i] -= vars.pmxTraderBalanceInPaymentAsset.wdiv(vars.pmxDiscountMultiplier);\\n                    params.traderBalanceVault.withdrawFrom(\\n                        params.traders[i],\\n                        vars.treasury,\\n                        vars.pmx,\\n                        vars.pmxTraderBalance,\\n                        false\\n                    );\\n                }\\n            }\\n        }\\n        return (feeInPaymentAsset, feeInPmx);\\n    }\\n\\n    /**\\n     * @notice Calculate and return protocol fee\\n     * @return The amount of the protocol fee in '_feeToken' which needs to be paid according to the specified deposit parameters.\\n     */\\n    function calculateFeeInPaymentAssetBatchClose(\\n        CalculateFeeInPaymentAssetBatchCloseParams memory _params,\\n        bytes calldata _nativePaymentAssetOracleData,\\n        address[] calldata _traders\\n    ) public returns (uint256[] memory) {\\n        CalculateFeeInPaymentAssetBatchCloseVars memory vars;\\n        // Calculate max protocol fee in payment (sold) asset\\n        vars.maxProtocolFeeInPaymentAsset = _params.maxProtocolFee == type(uint256).max\\n            ? type(uint256).max\\n            : getOracleAmountsOut(\\n                NATIVE_CURRENCY,\\n                _params.paymentAsset,\\n                _params.maxProtocolFee,\\n                _params.priceOracle,\\n                _nativePaymentAssetOracleData\\n            );\\n        vars.minProtocolFeeInPaymentAsset = minProtocolFeeCloseBatch(\\n            _params.paymentAsset,\\n            _params.priceOracle,\\n            IKeeperRewardDistributorV3(_params.keeperRewardDistributor),\\n            _params.estimatedGasAmount,\\n            _params.estimatedBaseLength,\\n            _params.primexDNS,\\n            _nativePaymentAssetOracleData\\n        );\\n\\n        vars.feeInPaymentAsset = new uint256[](_params.numberOfPositions);\\n\\n        uint256[] memory protocolFeeRates;\\n        if (_params.isFeeProhibitedInPmx) {\\n            vars.protocolFeeRate = _params.primexDNS.getProtocolFeeRateByTier(_params.feeRateType, 0);\\n        } else {\\n            protocolFeeRates = _params.primexDNS.getProtocolFeeRatesByTier(\\n                _params.feeRateType,\\n                _params.tierManager.getTraderTiersForAddresses(_traders)\\n            );\\n        }\\n        // Calculate protocol fee in position asset\\n        for (uint256 i; i < _params.numberOfPositions; i++) {\\n            if (!_params.isFeeProhibitedInPmx) {\\n                vars.protocolFeeRate = protocolFeeRates[i];\\n            }\\n            vars.feeInPaymentAsset[i] = _params.paymentAmounts[i].wmul(vars.protocolFeeRate);\\n            _require(\\n                vars.minProtocolFeeInPaymentAsset < _params.paymentAmounts[i],\\n                Errors.MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT.selector\\n            );\\n            vars.feeInPaymentAsset[i] = min(\\n                max(vars.feeInPaymentAsset[i], vars.minProtocolFeeInPaymentAsset),\\n                vars.maxProtocolFeeInPaymentAsset\\n            );\\n        }\\n        return vars.feeInPaymentAsset;\\n    }\\n\\n    /**\\n     * @notice Calculate minProtocolFee based on the gas price\\n     */\\n    function minProtocolFee(MinProtocolFeeParams memory params) public returns (uint256 minProtocolFeeInPositionAsset) {\\n        MinProtocolFeeVars memory vars;\\n        (vars.restrictedGasPrice) = calculateRestrictedGasPrice(params.priceOracle, params.keeperRewardDistributor);\\n        if (\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper ||\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByKeeper\\n        ) {\\n            vars.callingMethod = IPrimexDNSStorageV3.CallingMethod.ClosePositionByCondition;\\n        } else {\\n            vars.callingMethod = IPrimexDNSStorageV3.CallingMethod.OpenPositionByOrder;\\n        }\\n        (\\n            vars.liquidationGasAmount,\\n            vars.protocolFeeCoefficient,\\n            vars.additionalGasSpent,\\n            vars.maxGasAmount,\\n            vars.baseLength\\n        ) = params.primexDNS.getParamsForMinProtocolFee(vars.callingMethod);\\n\\n        vars.l1CostWei = _calculateL1CostWei(vars.baseLength, params.keeperRewardDistributor);\\n\\n        if (params.isFeeProhibitedInPmx) {\\n            vars.minProtocolFeeInNativeAsset =\\n                vars.liquidationGasAmount *\\n                vars.restrictedGasPrice +\\n                vars.l1CostWei +\\n                vars.protocolFeeCoefficient;\\n        } else {\\n            if (vars.callingMethod == IPrimexDNSStorageV3.CallingMethod.ClosePositionByCondition) {\\n                vars.minProtocolFeeInNativeAsset =\\n                    vars.maxGasAmount *\\n                    vars.restrictedGasPrice +\\n                    vars.l1CostWei +\\n                    vars.protocolFeeCoefficient;\\n            } else {\\n                vars.totalGasSpent = params.restrictedGasSpent + vars.additionalGasSpent;\\n                vars.totalGasSpent = min(vars.totalGasSpent, vars.maxGasAmount);\\n\\n                vars.minProtocolFeeInNativeAsset =\\n                    vars.totalGasSpent *\\n                    vars.restrictedGasPrice +\\n                    vars.l1CostWei +\\n                    vars.protocolFeeCoefficient;\\n            }\\n        }\\n        minProtocolFeeInPositionAsset = getOracleAmountsOut(\\n            NATIVE_CURRENCY,\\n            params.paymentAsset,\\n            vars.minProtocolFeeInNativeAsset,\\n            params.priceOracle,\\n            params.nativePaymentAssetOracleData\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate minProtocolFee based on the gas price in closeBatchPositions\\n     */\\n    function minProtocolFeeCloseBatch(\\n        address _paymentAsset,\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        uint256 _estimatedGasAmount,\\n        uint256 _estimatedBaseLength,\\n        IPrimexDNSV3 primexDNS,\\n        bytes calldata _nativePaymentAssetOracleData\\n    ) public returns (uint256 minProtocolFeeInPositionAsset) {\\n        uint256 restrictedGasPrice = calculateRestrictedGasPrice(_priceOracle, _keeperRewardDistributor);\\n\\n        uint256 l1CostWei = _calculateL1CostWei(_estimatedBaseLength, _keeperRewardDistributor);\\n\\n        uint256 minProtocolFeeInNativeAsset = _estimatedGasAmount *\\n            restrictedGasPrice +\\n            l1CostWei +\\n            primexDNS.protocolFeeCoefficient();\\n\\n        minProtocolFeeInPositionAsset = getOracleAmountsOut(\\n            NATIVE_CURRENCY,\\n            _paymentAsset,\\n            minProtocolFeeInNativeAsset,\\n            _priceOracle,\\n            _nativePaymentAssetOracleData\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate minPositionSize based on the gas price\\n     */\\n    function minPositionSize(\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        IPrimexDNSV3 _primexDNS,\\n        IPrimexDNSStorageV3.TradingOrderType _tradingOrderType\\n    ) public view returns (uint256 minPositionSizeInNativeAsset) {\\n        uint256 restrictedGasPrice = calculateRestrictedGasPrice(_priceOracle, _keeperRewardDistributor);\\n        (\\n            uint256 baseLength,\\n            uint256 averageGasPerAction,\\n            uint256 protocolFeeCoefficient,\\n            uint256 gasPriceBuffer\\n        ) = _primexDNS.getParamsForMinPositionSize(_tradingOrderType);\\n        uint256 l1CostWei = _calculateL1CostWei(baseLength, _keeperRewardDistributor);\\n\\n        minPositionSizeInNativeAsset = (averageGasPerAction * restrictedGasPrice + l1CostWei + protocolFeeCoefficient)\\n            .wmul(gasPriceBuffer);\\n    }\\n\\n    function calculateRestrictedGasPrice(\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor\\n    ) internal view returns (uint256 restrictedGasPrice) {\\n        RestrictedGasPriceVars memory vars;\\n        restrictedGasPrice = tx.gasprice;\\n        vars.oracleGasPrice = IPriceOracle(_priceOracle).getGasPrice();\\n        (vars.oracleGasPriceTolerance, vars.defaultMaxGasPrice, , ) = _keeperRewardDistributor\\n            .getGasCalculationParams();\\n\\n        vars.maxGasPrice = vars.oracleGasPrice > 0\\n            ? uint256(vars.oracleGasPrice).wmul(WadRayMath.WAD + vars.oracleGasPriceTolerance)\\n            : vars.defaultMaxGasPrice;\\n\\n        if (restrictedGasPrice > vars.maxGasPrice || restrictedGasPrice == 0) {\\n            restrictedGasPrice = vars.maxGasPrice;\\n        }\\n    }\\n\\n    function getOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountAssetA,\\n        address _priceOracle,\\n        bytes memory _oracleData\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracleV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountAssetA;\\n        }\\n        uint256 exchangeRate = IPriceOracleV2(_priceOracle).getExchangeRate(_tokenA, _tokenB, _oracleData);\\n        return (_amountAssetA * _getAssetMultiplier(_tokenA)).wmul(exchangeRate) / _getAssetMultiplier(_tokenB);\\n    }\\n\\n    /**\\n     * @param _tokenA asset for sell\\n     * @param _tokenB asset to buy\\n     * @param _amountsAssetA An array of amounts of tokenA to sell\\n     * @param _priceOracle PriceOracle contract address\\n     * @return returns an array of amounts of `tokenB` by the `amountsAssetA` by the price of the oracle\\n     */\\n    function getBatchOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256[] memory _amountsAssetA,\\n        address _priceOracle,\\n        bytes calldata _oracleData\\n    ) public returns (uint256[] memory) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracleV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountsAssetA;\\n        }\\n        uint256[] memory amountsAssetB = new uint256[](_amountsAssetA.length);\\n        uint256 exchangeRate = IPriceOracleV2(_priceOracle).getExchangeRate(_tokenA, _tokenB, _oracleData);\\n        uint256 multiplier1 = 10 ** (18 - IERC20Metadata(_tokenA).decimals());\\n        uint256 multiplier2 = 10 ** (18 - IERC20Metadata(_tokenB).decimals());\\n        for (uint256 i; i < _amountsAssetA.length; i++) {\\n            amountsAssetB[i] = (_amountsAssetA[i] * multiplier1).wmul(exchangeRate) / multiplier2;\\n        }\\n        return amountsAssetB;\\n    }\\n\\n    /**\\n     * @notice Calculates the liquidation price for a position.\\n     * @dev liquidationPrice = (feeBuffer * debt) /\\n     * ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * positionAmount))\\n     * @param _bucket The address of the related bucket.\\n     * @param _positionAsset The address of the position asset.\\n     * @param _positionAmount The size of the opened position.\\n     * @param _positionDebt The debt amount in debtTokens associated with the position.\\n     * @return The calculated liquidation price in borrowed asset.\\n     */\\n    function getLiquidationPrice(\\n        address _bucket,\\n        address _positionAsset,\\n        uint256 _positionAmount,\\n        uint256 _positionDebt,\\n        address _primexDNS\\n    ) public view returns (uint256) {\\n        _require(_positionAsset != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        LiquidationPriceData memory data;\\n        data.bucket = IBucketV3(_bucket);\\n        data.positionManager = data.bucket.positionManager();\\n        data.borrowedAsset = data.bucket.borrowedAsset();\\n        data.priceOracle = data.positionManager.priceOracle();\\n\\n        uint256 multiplier1 = 10 ** (18 - data.borrowedAsset.decimals());\\n        uint256 denominator = (WadRayMath.WAD - data.positionManager.securityBuffer())\\n            .wmul(\\n                WadRayMath.WAD -\\n                    data.positionManager.getOracleTolerableLimit(_positionAsset, address(data.borrowedAsset))\\n            )\\n            .wmul(WadRayMath.WAD - data.priceOracle.getPairPriceDrop(_positionAsset, address(data.borrowedAsset)))\\n            .wmul(_positionAmount)\\n            .wmul(\\n                WadRayMath.WAD -\\n                    IPrimexDNSV3(_primexDNS).getProtocolFeeRateByTier(\\n                        IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper,\\n                        0 // we don't consider the tier in liquidation\\n                    )\\n            ) * 10 ** (18 - IERC20Metadata(_positionAsset).decimals());\\n        // numerator = data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1;\\n        return (data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1).wdiv(denominator) / multiplier1;\\n    }\\n\\n    /**\\n     * @notice Validates if a position meets the minimum size requirement.\\n     * @param _amount The amount of the asset in the position.\\n     * @param _asset The asset associated with the position.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @param _nativeAssetOracleData NativeCurrency => Asset\\n     */\\n    function validateMinPositionSize(\\n        uint256 _amount,\\n        address _asset,\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        IPrimexDNSV3 _primexDNS,\\n        IPrimexDNSStorageV3.TradingOrderType _tradingOrderType,\\n        bytes calldata _nativeAssetOracleData\\n    ) public {\\n        _require(\\n            isGreaterThanMinPositionSize(\\n                _asset,\\n                _amount,\\n                _priceOracle,\\n                _keeperRewardDistributor,\\n                _primexDNS,\\n                _tradingOrderType,\\n                _nativeAssetOracleData\\n            ),\\n            Errors.INSUFFICIENT_POSITION_SIZE.selector\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks if the given amount of _asset corresponds to the minimum position size _minPositionSize,\\n     * based on the _minPositionAsset and the provided _priceOracle.\\n     * Returns true if the amount corresponds to or exceeds the minimum position size, otherwise returns false.\\n     * @param _asset The address of the asset being checked.\\n     * @param _amount The amount of _asset being checked.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @return A boolean value indicating whether the amount corresponds to or exceeds the minimum position size.\\n     */\\n    function isGreaterThanMinPositionSize(\\n        address _asset,\\n        uint256 _amount,\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        IPrimexDNSV3 _primexDNS,\\n        IPrimexDNSStorageV3.TradingOrderType _tradingOrderType,\\n        bytes calldata _nativeAssetOracleData\\n    ) public returns (bool) {\\n        uint256 minPositionSizeInNativeCurrency = minPositionSize(\\n            _priceOracle,\\n            _keeperRewardDistributor,\\n            _primexDNS,\\n            _tradingOrderType\\n        );\\n        uint256 minPositionSizeInAsset = getOracleAmountsOut(\\n            NATIVE_CURRENCY,\\n            _asset,\\n            minPositionSizeInNativeCurrency,\\n            _priceOracle,\\n            _nativeAssetOracleData\\n        );\\n        return _amount >= minPositionSizeInAsset;\\n    }\\n\\n    /**\\n     * @notice Decodes an encoded path and returns an array of addresses.\\n     * @param encodedPath The encoded path to be decoded.\\n     * @param dexRouter The address of the DEX router.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @return path An array of addresses representing the decoded path.\\n     */\\n    function decodePath(\\n        bytes memory encodedPath,\\n        address dexRouter,\\n        address payable dexAdapter\\n    ) public view returns (address[] memory path) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            path = abi.decode(encodedPath, (address[]));\\n        } else if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 23; // address size(20) + fee size(3)\\n            uint256 pathLength = encodedPath.length / offsetSize + 1;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else if (type_ == IDexAdapter.DexType.Curve) {\\n            (path, ) = abi.decode(encodedPath, (address[], address[]));\\n        } else if (type_ == IDexAdapter.DexType.Balancer) {\\n            (path, , ) = abi.decode(encodedPath, (address[], bytes32[], int256[]));\\n        } else if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 20; // address size(20)\\n            uint256 pathLength = encodedPath.length / offsetSize;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else {\\n            _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the asset multiplier for a given asset.\\n     * @dev If the asset is the native currency, the function returns 1.\\n     * If the asset is USD, the function returns the value stored in the constant USD_MULTIPLIER.\\n     * For any other asset, the function calculates the multiplier based on the number of decimals of the token.\\n     * @param _asset The address of the asset.\\n     * @return The asset multiplier. It is a number with 10 raised to a power of decimals of a given asset.\\n     */\\n    function _getAssetMultiplier(address _asset) internal view returns (uint256) {\\n        if (_asset == NATIVE_CURRENCY) return 1;\\n        if (_asset == USD) return USD_MULTIPLIER;\\n\\n        return 10 ** (18 - IERC20Metadata(_asset).decimals());\\n    }\\n\\n    function _calculateL1CostWei(\\n        uint256 _baseLength,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor\\n    ) internal view returns (uint256 l1CostWei) {\\n        (\\n            ,\\n            ,\\n            uint256 optimisticGasCoefficient,\\n            IKeeperRewardDistributorStorage.PaymentModel paymentModel\\n        ) = _keeperRewardDistributor.getGasCalculationParams();\\n        if (paymentModel == IKeeperRewardDistributorStorage.PaymentModel.ARBITRUM) {\\n            return\\n                l1CostWei =\\n                    ARB_NITRO_ORACLE.getL1BaseFeeEstimate() *\\n                    GAS_FOR_BYTE *\\n                    (_baseLength + TRANSACTION_METADATA_BYTES);\\n        }\\n        if (paymentModel == IKeeperRewardDistributorStorage.PaymentModel.OPTIMISTIC) {\\n            return l1CostWei = OVM_GASPRICEORACLE.getL1FeeUpperBound(_baseLength).wmul(optimisticGasCoefficient);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Utility function to get the minimum of two values\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Utility function to get the maximum of two values\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x40f873a6384754a225864dc07314334fa721dcecda7c5725f16cd8d8f9232f88\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TokenApproveLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of approve logic that allows working with non-standart ERC-20 tokens\\npragma solidity 0.8.26;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenApproveLibrary {\\n    function doApprove(address token, address spender, uint256 amount) public returns (uint256) {\\n        //reduce the addresses allowance to zero\\n        _doApprove(token, spender, 0);\\n        // set the new allowance\\n        _doApprove(token, spender, amount);\\n    }\\n\\n    function _doApprove(address token, address spender, uint256 amount) private returns (uint256) {\\n        EIP20NonStandardInterface(token).approve(spender, amount);\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_APPROVE_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xdad7e2091f42142f0e782d605ce70e8c1f241bf9b4bb9264b132fec4ad06fd9b\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/TokenTransfersLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of token transfer logic that allows working with non-standart ERC-20 tokens, added method doTransferFromTo,\\n// modified doTransferIn\\n\\npragma solidity 0.8.26;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenTransfersLibrary {\\n    function doTransferIn(address token, address from, uint256 amount) public returns (uint256) {\\n        return doTransferFromTo(token, from, address(this), amount);\\n    }\\n\\n    function doTransferFromTo(address token, address from, address to, uint256 amount) public returns (uint256) {\\n        uint256 balanceBefore = IERC20(token).balanceOf(to);\\n        // The returned value is checked in the assembly code below.\\n        // Arbitrary `from` should be checked at a higher level. The library function cannot be called by the user.\\n        // slither-disable-next-line unchecked-transfer arbitrary-send-erc20\\n        EIP20NonStandardInterface(token).transferFrom(from, to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_IN_FAILED.selector);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = IERC20(token).balanceOf(to);\\n        _require(balanceAfter >= balanceBefore, Errors.TOKEN_TRANSFER_IN_OVERFLOW.selector);\\n\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    function doTransferOut(address token, address to, uint256 amount) public {\\n        // The returned value is checked in the assembly code below.\\n        // slither-disable-next-line unchecked-transfer\\n        EIP20NonStandardInterface(token).transfer(to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_OUT_FAILED.selector);\\n    }\\n\\n    function doTransferOutETH(address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        _require(success, Errors.NATIVE_TOKEN_TRANSFER_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x1d8585473739875d2f97e984ac6752b121a656bcded82f73c4b06174ab8786d9\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/utils/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// A modified version of BytesLib\\n// Origin: https://github.com/1inch/universal-router/blob/b972662f8d3f0ba55ef99411720f613f77c3fab5/contracts/modules/uniswap/v3/BytesLib.sol\\n// Unused methods and constants were removed\\npragma solidity 0.8.26;\\n\\nlibrary BytesLib {\\n    error ToAddressOverflow();\\n    error ToAddressOutOfBounds();\\n\\n    /// @notice Returns the address starting at byte `_start`\\n    /// @dev _bytesLength must equal _bytes.length for this to function correctly\\n    /// @param _bytes The input bytes string to slice\\n    /// @param _start The starting index of the address\\n    /// @param _bytesLength The length of _bytes\\n    /// @return tempAddress The address starting at _start\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _bytesLength\\n    ) internal pure returns (address tempAddress) {\\n        unchecked {\\n            if (_start + 20 < _start) revert ToAddressOverflow();\\n            if (_bytesLength < _start + 20) revert ToAddressOutOfBounds();\\n        }\\n\\n        assembly {\\n            tempAddress := mload(add(add(_bytes, 0x14), _start))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x895f76434296e715d9b8c32552158963fd65a8a0351ac6d334ec0af7c3b6ccf0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/utils/V3Path.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// A modified version of V3Path library\\n// Origin: https://github.com/1inch/universal-router/blob/b972662f8d3f0ba55ef99411720f613f77c3fab5/contracts/modules/uniswap/v3/V3Path.sol\\n// Unused methods and constants were removed\\n\\npragma solidity 0.8.26;\\n\\nimport {BytesLib} from \\\"./BytesLib.sol\\\";\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary V3Path {\\n    using BytesLib for bytes;\\n\\n    function decodeFirstToken(bytes memory path) internal pure returns (address tokenA) {\\n        tokenA = path.toAddress(0, path.length);\\n    }\\n}\\n\",\"keccak256\":\"0xecb0e22a0ccbd15ab5e60e4661ea9133b048b25905f78a362ded5e76018b4c50\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.26;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x49afef0dbc484e0e513c163ee4ce090a30fa061c47a262046c0a7311092a3756\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c0806040523461015857604081614c90803803809161001f828561015d565b8339810103126101585761003e602061003783610196565b9201610196565b6040516301ffc9a760e01b8152637965db0b60e01b60048201529091906020816024816001600160a01b0386165afa90811561014c5760009161010a575b50156100f8576080526001600160a01b031660a052604051614ae590816101ab823960805181818161098601528181610a1c01528181610aad0152611835015260a051818181610cbb015281816138740152818161398201528181613da401528181613eb6015281816144ba015281816146d501526147dd0152f35b60405163044aa57560e41b8152600490fd5b6020813d602011610144575b816101236020938361015d565b81010312610140575190811515820361013d57503861007c565b80fd5b5080fd5b3d9150610116565b6040513d6000823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761018057604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036101585756fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461017b5780631f5f4cbe146101765780633396c1ba1461017157806336dd6b3d1461016c5780633c9c6ff3146101675780633f4a2d271461016257806340fce5d11461015d578063461dfcd5146101585780634c828b5c146101535780635933dd2b1461014e5780636264257a146101495780637b103999146101445780638677f6361461013f57806396954fb91461013a578063c2909fed14610135578063c4d66de814610130578063eb5251a51461012b578063f1a3d00514610126578063f3ec43c714610121578063f4ef97ea1461011c578063f6f1c4c4146101175763fae89f920361000e57610d9c565b610d38565b610cea565b610ca5565b610c92565b610c79565b610b7f565b610b36565b610af8565b610a4b565b610a06565b61091b565b6108d6565b61078a565b61073e565b610677565b61064e565b61062a565b610598565b6103d9565b6103b0565b346101d15760203660031901126101d15760043563ffffffff60e01b81168091036101d1576020906301ffc9a760e01b81149081156101c0575b506040519015158152f35b633603f73360e21b149050386101b5565b600080fd5b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761020757604052565b6101d6565b90601f801991011681019081106001600160401b0382111761020757604052565b6040519061023d6101008361020c565b565b6040519061023d60808361020c565b6040519061023d60a08361020c565b6040519061023d60c08361020c565b9061023d604051928361020c565b6001600160401b03811161020757601f01601f191660200190565b9291926102a18261027a565b916102af604051938461020c565b8294818452818301116101d1578281602093846000960137010152565b9080601f830112156101d1578160206102e793359101610295565b90565b6001600160a01b038116036101d157565b359061023d826102ea565b60206003198201126101d157600435906001600160401b0382116101d157606082820360031901126101d1576040519161033f836101ec565b80600401356001600160401b0381116101d1576044926004610363928401016102cc565b835260248101356020840152013561037a816102ea565b604082015290565b919060608301926000905b6003821061039a57505050565b602080600192855181520193019101909161038d565b346101d1576103d56103c96103c436610306565b610eaa565b60405191829182610382565b0390f35b60203660031901126101d1576004356001600160401b0381116101d157806004019060c060031982360301126101d15761041960a4820135421115612830565b610421610f9a565b6064820160005b6104328286610fcf565b9050811015610465578061045d61045560019361044f868a610fcf565b9061101a565b35855161106a565b845201610428565b5091909161047583511515612849565b604482013592606081019184835260009260208301926084604082019601945b6104a96104a2858b610fcf565b9050611077565b81101561053557806104e46104da6104d26104cb60019561044f8f8b90610fcf565b358c6110a2565b8551906110b5565b8088528551611095565b845261052d61052688888d61051e6105148761044f8d61050e610506876110d5565b9751986110d5565b95610fcf565b6020810190610fcf565b939092611a0c565b895161106a565b885201610495565b6103d58761058461057d8987898f61051461051e9161055e610556826110d5565b9551966110d5565b936105776104a261056f8385610fcf565b939094610fcf565b9161101a565b825161106a565b809152604051918291829190602083019252565b346101d15760203660031901126101d15760206105bf6004356105ba816102ea565b6110df565b604051908152f35b9181601f840112156101d1578235916001600160401b0383116101d1576020808501948460051b0101116101d157565b9060406003198301126101d15760043591602435906001600160401b0382116101d157610626916004016105c7565b9091565b346101d15760206105bf61063d366105f7565b9161124f565b60009103126101d157565b346101d15760003660031901126101d1576003546040516001600160a01b039091168152602090f35b60203660031901126101d1576004356001600160401b0381116101d15761010060031982360301126101d1576106ab61022d565b8160040135906001600160401b0382116101d15761073460e46103d5946106db6103c995600436918401016102cc565b84526106e9602482016102fb565b60208501526106fa604482016102fb565b6040850152606481013560608501526084810135608085015261071f60a482016102fb565b60a085015260c481013560c0850152016102fb565b60e08201526114a5565b346101d15760206105bf610751366105f7565b91611500565b60206003198201126101d157600435906001600160401b0382116101d15760809082900360031901126101d15760040190565b346101d15761079836610757565b6107d16107a4826110d5565b6107bf6107b3602085016110d5565b6001600160a01b031690565b6001600160a01b039091161415612862565b6107d9610f9a565b60608201919060005b6107ec8484610fcf565b9050811015610819578061081161080960019361044f8888610fcf565b35845161106a565b8352016107e2565b5061082681511515612849565b6040820135916060820193838552600092602081019060408101945b61084f6104a28587610fcf565b8110156108b157806108816108776104d261087060019561044f8a8c610fcf565b358b6110a2565b8086528a51611095565b89526108a96108a2855161089c6105148561044f8b8d610fcf565b916119c9565b885161106a565b875201610842565b6103d58661058461057d8761089c6105148b8f51936105776104a261056f8385610fcf565b346101d15760203660031901126101d1576004356108f3816102ea565b60018060a01b03166000526002602052602060018060a01b0360406000205416604051908152f35b346101d15760403660031901126101d157600435610938816102ea565b602435610944816102ea565b604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b636004820152336024820152916020836044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315610a0157610019936109cd916000916109d2575b5061287b565b61154b565b6109f4915060203d6020116109fa575b6109ec818361020c565b810190611533565b386109c7565b503d6109e2565b611243565b346101d15760003660031901126101d1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101d15760403660031901126101d157600435610a68816102ea565b602435604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b636004820152336024820152916020836044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315610a015761001993610af3916000916109d2575061287b565b6115fa565b346101d15760206105bf610b0b366105f7565b91611654565b634e487b7160e01b600052602160045260246000fd5b60091115610b3157565b610b11565b346101d15760203660031901126101d157600435610b53816102ea565b60018060a01b0316600052600160205260ff604060002054166040516009821015610b31576020918152f35b346101d15760203660031901126101d157600435610b9c816102ea565b610bed60005491610bd1610bbb610bb78560ff9060081c1690565b1590565b80948195610c6b575b8115610c4b575b506117b0565b82610be4600160ff196000541617600055565b610c3257611813565b610bf357005b610c0361ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b610c4661010061ff00196000541617600055565b611813565b303b15915081610c5d575b5038610bcb565b60ff16600114905038610c56565b600160ff8216109150610bc4565b346101d1576103d56103c9610c8d36610306565b6118fb565b346101d15760206105bf61089c366105f7565b346101d15760003660031901126101d1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60803660031901126101d157600435610d02816102ea565b60443590602435610d12836102ea565b606435916001600160401b0383116101d15760209361051e6105bf9436906004016105c7565b60a03660031901126101d157600435610d50816102ea565b60243590610d5d826102ea565b6044359160643591610d6e836102ea565b608435926001600160401b0384116101d157602094610d946105bf9536906004016105c7565b949093611afd565b346101d157610daa36610757565b610db66107a4826110d5565b610dbe610f9a565b60608201919060005b610dd18484610fcf565b9050811015610df65780610dee61080960019361044f8888610fcf565b835201610dc7565b50610e0381511515612849565b6040820135916060820193838552600092602081019060408101945b610e2c6104a28587610fcf565b811015610e705780610e4d6108776104d261087060019561044f8a8c610fcf565b8952610e686108a285516107516105148561044f8b8d610fcf565b875201610e1f565b6103d58661058461057d876107516105148b8f51936105776104a261056f8385610fcf565b604051906060610ea5818461020c565b368337565b610eb2610e95565b50610ebc81611c63565b6040810151610ef490610eed906001600160a01b03165b6001600160a01b0316600090815260016020526040902090565b5460ff1690565b610efd81610b27565b600181148015610f87575b15610f1757506102e79061278a565b610f2081610b27565b60028103610f3257506102e790612626565b610f3b81610b27565b60038103610f4d57506102e79061250b565b610f5681610b27565b60048103610f6857506102e7906122a7565b80610f74600592610b27565b03610f82576102e790611dbf565b611c93565b50610f9181610b27565b60068114610f08565b60405190608082018281106001600160401b038211176102075760405260006060838281528260208201528260408201520152565b903590601e19813603018212156101d157018035906001600160401b0382116101d157602001918160051b360383136101d157565b634e487b7160e01b600052603260045260246000fd5b919081101561103c5760051b81013590603e19813603018212156101d1570190565b611004565b634e487b7160e01b600052601160045260246000fd5b906001820180921161106557565b611041565b9190820180921161106557565b60001981019190821161106557565b60011981019190821161106557565b9190820391821161106557565b8181029291811591840414171561106557565b81156110bf570490565b634e487b7160e01b600052601260045260246000fd5b356102e7816102ea565b6110fb90610eed90610ed36001600160a01b0382161515612894565b61110481610b27565b600181036111145750620254e990565b61111d81610b27565b60028114801561117f575b1561113557506202d0cb90565b61113e81610b27565b6003810361114e57506202cdce90565b61115781610b27565b6004810361116757506203001190565b80611173600692610b27565b03610f82576204229890565b5061118981610b27565b60058114611128565b919081101561103c5760051b81013590605e19813603018212156101d1570190565b604051906111c1826101ec565b6000604083606081528260208201520152565b903590601e19813603018212156101d157018035906001600160401b0382116101d1576020019181360383136101d157565b908160209103126101d157516102e7816102ea565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b6040513d6000823e3d90fd5b91929060009360009160005b82811061147c575061126e861515612849565b84916112786111b4565b95600094602088019160408901955b61129085611077565b8810156113b3576112c8611338916112bf8d6112ba60206112b28e8c8e611192565b0135876110a2565b6110b5565b90818752611095565b926112eb6112e46112da8b898b611192565b60408101906111d4565b3691610295565b8b52600354602090611305906001600160a01b03166107b3565b6113196113138c8a8c611192565b806111d4565b60405163657dcce560e01b81529586939284928392916004840161121b565b03915afa908115610a015761136361137c92600194600091611385575b506001600160a01b03168a52565b61137561136f8d6118fb565b60200190565b519061106a565b97019691611287565b6113a6915060203d81116113ac575b61139e818361020c565b810190611206565b38611355565b503d611394565b61131392989a50611429999750602095915061140a93526113e36112e46112da6113dc87611077565b8785611192565b87526003546113fa906001600160a01b03166107b3565b9361140481611077565b91611192565b60405163657dcce560e01b81529788939284928392916004840161121b565b03915afa918215610a0157610c8d6113759361136f936102e79760009261145b575b506001600160a01b039091169052565b61147591925060203d6020116113ac5761139e818361020c565b903861144b565b9561149b60019160206114938a87879a989a611192565b01359061106a565b960193919361125b565b6060806040516114b5828261020c565b36903760a08201516001600160a01b0316156114ee57810151156114dc576102e790612918565b60405163127973e960e31b8152600490fd5b60405163044aa57560e41b8152600490fd5b91906000915b8083106115135750505090565b90919261152a60019161063d61051487868861101a565b93019190611506565b908160209103126101d1575180151581036101d15790565b6001600160a01b0381166000818152600160205260409020549192909160ff166009811015610b3157156115e8576001600160a01b03169182156115d7576001600160a01b0316600090815260026020526040902080546001600160a01b031916831790557feec77f6322aea766aacea41ca79d2615f5301e0edbcf9bfe766a594d9d95e1db600080a3565b60405162310f9160e31b8152600490fd5b604051636afff5ed60e11b8152600490fd5b6001600160a01b031680156114ee576009821015610b3157806000526001602052604060002060ff1981541660ff84161790557f7955abe00075979fc908f0d63d8bca5922683856a8270d6ecd19958f3f47c339600080a3565b9092919260009360009160005b82811061178f5750611674861515612849565b839161167e6111b4565b94600094602087019160408801955b61169685611077565b881015611720576116b86116e4916112bf8d6112ba60206112b28e8c8e611192565b926116ca6112e46112da8b898b611192565b8a52600354602090611305906001600160a01b03166107b3565b03915afa908115610a015761170e6117179260019460009161138557506001600160a01b03168a52565b6113758b610eaa565b9701969161168d565b611761999a506113139298969750602095915061140a935261174a6112e46112da6113dc87611077565b86526003546113fa906001600160a01b03166107b3565b03915afa938415610a01576102e794611375936103c49260009261145b57506001600160a01b039091169052565b956117a660019160206114938a87879b989b611192565b9601949194611661565b156117b757565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b604051632474521560e21b8152600060048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610a0157611876916000916109d2575061287b565b6040516301ffc9a760e01b8152633f9940a760e11b60048201526001600160a01b039190911690602081602481855afa908115610a01576000916118dc575b50156114ee57600380546001600160a01b0319166001600160a01b03909216919091179055565b6118f5915060203d6020116109fa576109ec818361020c565b386118b5565b611903610e95565b5061190d81611c63565b604081015161192890610eed906001600160a01b0316610ed3565b61193181610b27565b6001811480156119b6575b1561194b57506102e790612ce5565b61195481610b27565b6002810361196657506102e790612c48565b61196f81610b27565b6003810361198157506102e790612be4565b61198a81610b27565b6004810361199c57506102e790612ae1565b806119a8600592610b27565b03610f82576102e790612a1c565b506119c081610b27565b6006811461193c565b918091825b6119d85750505090565b90919260001984019084821161106557610b0b6105146119f993868661101a565b92801561106557600019019190826119ce565b91939290936000935b808510611a2457505050505090565b9091929394851515600014611aa257600019860186811161106557600191611a50611a9092858861101a565b35611a5a816102ea565b611a6589868961101a565b3591611a70836102ea565b611a7986611077565b8a03611a9b5786905b610d946105148c898c61101a565b950193929190611a15565b3090611a82565b611a9060019186611a5a565b6040519061010082018281106001600160401b0382111761020757604052600060e083606081528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b94959390919560009660009460005b838110611c425750611b6b90611b238a1515612849565b611b5b8396611b4b611b33611aae565b4260c08201526001600160a01b03909c1660208d0152565b6001600160a01b031660408b0152565b6001600160a01b031660a0890152565b600094606088019160e08901955b611b8285611077565b881015611be3576112c8611ba4916112bf8d6112ba60206112b28e8c8e611192565b03915afa908115610a0157611bce611bda9260019460009161138557506001600160a01b03168a52565b61137561136f8d612918565b97019691611b79565b61131392989a50611c0c999750602095915061140a93526113e36112e46112da6113dc87611077565b03915afa918215610a0157611c3d6113759361136f936102e79760009261145b57506001600160a01b039091169052565b612918565b98611c5960019160206114938d888a9d9b9d611192565b9901969496611b0c565b60408101516001600160a01b0316156114ee576020015115611c8157565b604051630f6fa54560e41b8152600490fd5b6040516368a1e68f60e11b8152600490fd5b60405163076fc27360e51b8152600490fd5b6001600160401b0381116102075760051b60200190565b91906040838203126101d1578251926020810151906001600160401b0382116101d157019080601f830112156101d157815190611d0a82611cb7565b92611d18604051948561020c565b82845260208085019360051b8201019182116101d157602001915b818310611d405750505090565b825161ffff811681036101d157815260209283019201611d33565b60005b838110611d6e5750506000910152565b8181015183820152602001611d5e565b90602091611d9781518092818552858086019101611d5b565b601f01601f1916010190565b929190611dba602091604086526040860190611d7e565b930152565b611e4390611dcb610e95565b5060408101516000906001600160a01b0390611e0f90611e029083165b6001600160a01b0316600090815260026020526040902090565b546001600160a01b031690565b1691611e1c83151561289b565b6020815191019283519183604051809781958294632f80bb1d60e01b845260048401611da3565b03925af1918215610a0157600092611e74575b50611e61606061026c565b9182525160208201526000604082015290565b611e929192503d806000833e611e8a818361020c565b810190611cce565b509038611e56565b9080601f830112156101d1578151611eb181611cb7565b92611ebf604051948561020c565b81845260208085019260051b8201019283116101d157602001905b828210611ee75750505090565b602080918351611ef6816102ea565b815201910190611eda565b9080601f830112156101d1578151611f1881611cb7565b92611f26604051948561020c565b81845260208085019260051b8201019283116101d157602001905b828210611f4e5750505090565b8151815260209182019101611f41565b916060838303126101d15782516001600160401b0381116101d15782611f85918501611e9a565b9260208101516001600160401b0381116101d157810183601f820112156101d157805190611fb282611cb7565b91611fc0604051938461020c565b80835260208084019160051b830101918683116101d157602001905b828210612004575050509260408201516001600160401b0381116101d1576102e79201611f01565b8151815260209182019101611fdc565b9061201e82611cb7565b61202b604051918261020c565b828152809261203c601f1991611cb7565b0190602036910137565b9061205082611cb7565b61205d604051918261020c565b828152809261206e601f1991611cb7565b0160005b81811061207e57505050565b6040519060a08201918083106001600160401b03841117610207576020926040526000815260008382015260006040820152600060608201526060608082015282828601015201612072565b80511561103c5760200190565b80516001101561103c5760400190565b805182101561103c5760209160051b010190565b6040519061210a60408361020c565b6002825261060f60f31b6020830152565b906020828203126101d15781516001600160401b0381116101d1576102e79201611f01565b906002821015610b315752565b9080602083519182815201916020808360051b8301019401926000915b83831061217957505050505090565b90919293946020806121c6600193601f1986820301875260a060808b5180518452858101518685015260408101516040850152606081015160608501520151918160808201520190611d7e565b9701930193019193929061216a565b906020808351928381520192019060005b8181106121f35750505090565b82516001600160a01b03168452602093840193909201916001016121e6565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b93929061227a61023d9361226c6060936001895260e060208a015260e089019061214d565b9087820360408901526121d5565b940190612212565b93929061227a61023d9361226c6060936000895260e060208a015260e089019061214d565b6122af610e95565b506122c4815160208082518301019101611f5e565b50926122d08251612014565b936122db8151612046565b916122e461023f565b308152600060208201523060408201526000606082015260005b6123088651611077565b8110156123b8578061234b6123326107b36123256001958b6120e7565b516001600160a01b031690565b61233c838c6120e7565b6001600160a01b039091169052565b6123b161235882876120e7565b5161236283611057565b61236a61024e565b9182528360208301526040820152600060608201526123876120fb565b608082015261239f8361239a8b51611086565b611095565b906123aa828a6120e7565b52876120e7565b50016122fe565b5091509491600092836124226107b36107b360406124409a612414602082019b8c5160606123e58c6120ca565b51015261233c61240e6124076107b36123256124018651611077565b866120e7565b9251611077565b8a6120e7565b01516001600160a01b031690565b9260405197889586948593637c26833760e11b855260048501612247565b03925af1918215610a0157600092612490575b5061246a6000612462846120ca565b5112156128b4565b61247d612477606061026c565b926120ca565b5182525160208201526000604082015290565b6124ae9192503d806000833e6124a6818361020c565b81019061211b565b9038612453565b9190916040818403126101d15780516001600160401b0381116101d157836124de918301611e9a565b9260208201516001600160401b0381116101d1576102e79201611e9a565b60001981146110655760010190565b612513610e95565b506125288151602080825183010191016124b5565b60208301805160409094018051939491939091612561916001600160a01b031661255187612d9e565b9061255b86612d9e565b92612e26565b9161257461256e84612f06565b93612f7c565b906000956000925b6064841115612596575b505050505050611e61606061026c565b9091929394966125af6125a9838a61106a565b60011c90565b90808214612610575080976125d585856125cf8a5160018060a01b031690565b85612e26565b8851908082036125e757505050612586565b101561260357506125f890946124fc565b92919094939461257c565b9491506125f890916124fc565b9750612586565b908160209103126101d1575190565b61268790612632610e95565b5060408101516020906001600160a01b039061265390611e02908316611de8565b169161266083151561289b565b8181519101928351916000604051809781958294632f80bb1d60e01b845260048401611da3565b03925af1918215610a01576000926126a45750611e61606061026c565b6126c791925060203d6020116126ce575b6126bf818361020c565b810190612617565b9038611e56565b503d6126b5565b906020828203126101d15781516001600160401b0381116101d1576102e79201611e9a565b6020818303126101d1578051906001600160401b0382116101d157019080601f830112156101d157815161272d81611cb7565b9261273b604051948561020c565b81845260208085019260051b8201019283116101d157602001905b8282106127635750505090565b8151815260209182019101612756565b6040906102e79392815281602082015201906121d5565b6127ea90612796610e95565b5060006127ad8251602080825183010191016126d5565b60408301516020906127c9906107b3906001600160a01b031681565b93019283516040518096819482936307c0329d60e21b845260048401612773565b03915afa918215610a015760009261280b575b5061247d612477606061026c565b6128299192503d806000833e612821818361020c565b8101906126fa565b90386127fd565b1561283757565b60405163883bf0db60e01b8152600490fd5b1561285057565b604051635269639360e01b8152600490fd5b1561286957565b604051631aa5e6a560e21b8152600490fd5b1561288257565b60405163036be76f60e61b8152600490fd5b156114ee57565b156128a257565b6040516339028fcd60e21b8152600490fd5b156128bb57565b6040516301f9d96160e71b8152600490fd5b156128d457565b604051630279891960e11b8152600490fd5b156128ed57565b604051637974230960e11b8152600490fd5b1561290657565b6040516367678b8760e11b8152600490fd5b612920610e95565b5060e081015161293c90610eed906001600160a01b0316610ed3565b61294581610b27565b600181148015612a09575b1561295f57506102e790614560565b61296881610b27565b6002810361297a57506102e7906142f6565b61298381610b27565b6003810361299557506102e790613f23565b61299e81610b27565b600481036129b057506102e790613afa565b6129b981610b27565b600581036129cb57506102e7906136ed565b6129d481610b27565b600781036129e657506102e79061354f565b806129f2600892610b27565b03612a00576102e790613359565b6102e7906130fe565b50612a1381610b27565b60068114612950565b612a24610e95565b506040810151612a7d906000906001600160a01b0390612a4990611e02908316611de8565b1692612a5684151561289b565b602081519101938451918360405180968195829463cdca175360e01b845260048401611da3565b03925af1908115610a0157600091612aae575b50612a9b606061026c565b9151825260208201526000604082015290565b612ac391503d806000833e611e8a818361020c565b5038612a90565b908160000391808305600019149015171561106557565b612b6f6000612b1792612af2610e95565b50612b07815160208082518301019101611f5e565b509490602083019586519161484a565b9083612b516107b36107b36040612b2c61023f565b308152976020890186905230828a01526060890186905201516001600160a01b031690565b9260405196879586948593637c26833760e11b855260048501612282565b03925af1908115610a0157612bc191612bbb91600091612bcb575b50612bab6000612ba3612b9d8451611077565b846120e7565b5113156128cd565b612bb58151611077565b906120e7565b51612aca565b612a9b606061026c565b612bde913d8091833e6124a6818361020c565b38612b8a565b6060604051612bf3828261020c565b369037612c29612c0d8251602080825183010191016124b5565b906020840193845190604060018060a01b039101511690612e26565b60405191612c36836101ec565b51825260208201526000604082015290565b612c50610e95565b506040810151612ca9906020906001600160a01b0390612c7590611e02908316611de8565b1692612c8284151561289b565b818151910193845191600060405180968195829463cdca175360e01b845260048401611da3565b03925af1908115610a0157600091612cc65750612a9b606061026c565b612cdf915060203d6020116126ce576126bf818361020c565b38612a90565b612ced610e95565b50612d446000612d078351602080825183010191016126d5565b6040840151602090612d23906107b3906001600160a01b031681565b940193845160405180958194829363d06ca61f60e01b845260048401612773565b03915afa8015610a0157612d7391600091612d83575b50612d65606061026c565b92518352612bb58151611077565b5160208201526000604082015290565b612d9891503d806000833e612821818361020c565b38612d5a565b8051612da981611cb7565b91612db7604051938461020c565b818352601f19612dc683611cb7565b013660208501376000198201918083119060005b818110612de957505050505090565b82906001600160a01b03612dfd82876120e7565b51169161106557808303600019019186831161106557612e1f600193896120e7565b5201612dda565b9391909293926000935b612e3a8351611077565b851015612efd576020612e5061232587896120e7565b612e5d61232588876120e7565b90612eb7612e76612325612e708b611057565b896120e7565b604051630e5cfa0d60e21b81526001600160a01b03938416600482015293831660248501529091166044830152606482019390935291829081906084820190565b03816001600160a01b0386165afa8015610a0157600191600091612edf575b50940193612e30565b612ef7915060203d81116126ce576126bf818361020c565b38612ed6565b93505050915090565b60006706f05b59d3b200008202918083046706f05b59d3b200001481151715611065576706f05b59d3b20000915081830403612f6b57810190818111611065578110612f5a57670de0b6b3a7640000900490565b630a77254f60e01b60005260046000fd5b631550e8b760e01b60005260046000fd5b6000906714d1120d7b1600008102918183046714d1120d7b160000148215171561106557506714d1120d7b160000820403612f6b576706f05b59d3b20000810190818111611065578110612f5a57670de0b6b3a7640000900490565b6020818303126101d1578051906001600160401b0382116101d157019080601f830112156101d15781519161300c83611cb7565b9261301a604051948561020c565b80845260208085019160051b830101918383116101d15760208101915b83831061304657505050505090565b82516001600160401b0381116101d1578201906060828703601f1901126101d15760405190613074826101ec565b6020830151613082816102ea565b825260408301516001600160401b0381116101d1576020908401019187601f840112156101d15782516130b48161027a565b946130c2604051968761020c565b81865289602083870101116101d157856130e8606093602098978980809a019101611d5b565b8584015201516040820152815201920191613037565b90613107610e95565b506040820180519091906000906001600160a01b0316600080516020614a908339815191528190036132b657505060a08301516001600160a01b031631925b61315a815160208082518301019101612fd8565b9360005b85518110156131b357806131ac61318861317a6001948a6120e7565b51516001600160a01b031690565b6020613194848b6120e7565b51015160406131a3858c6120e7565b5101519161496c565b500161315e565b50925191935091906131cd906001600160a01b03166107b3565b90600080516020614a90833981519152820361322b5760a08301516131fc92506001600160a01b031631611095565b61320c60808301518210156128e6565b60606132178161026c565b920151825260208201526000604082015290565b613276916020906001600160a01b031660a08501516001600160a01b03165b6040516370a0823160e01b81526001600160a01b03909116600482015293849190829081906024820190565b03915afa8015610a015761329292600091613297575b50611095565b6131fc565b6132b0915060203d6020116126ce576126bf818361020c565b3861328c565b613300906020906132cf906001600160a01b03166107b3565b60a08701516040516370a0823160e01b81526001600160a01b03909116600482015292839190829081906024820190565b03915afa918215610a015791613318575b5092613146565b613331915060203d6020116126ce576126bf818361020c565b38613311565b6001600160a01b03918216815291166020820152604081019190915260600190565b613361610e95565b5060408101805161339a90613380906107b3906001600160a01b031681565b60a0840180519093916020916001600160a01b031661324a565b03915afa918215610a015760009261352e575b506020840180518591906001600160a01b03167399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9d198101613487575b506134566107b36107b36020956134488661324a96600080516020614a9083398151915261342e6107b361341e6134649f9c60e0015160018060a01b031690565b945193516001600160a01b031690565b0361347f5760608d0151905b61344261491f565b9261499b565b50516001600160a01b031690565b91516001600160a01b031690565b03915afa8015610a01576131fc926000916132975750611095565b60009061343a565b60e092909201516060870151604051636fe2528b60e11b81529692949293602092889283926134c3926001600160a01b03169060048501613337565b038173d63A1F3b359449812C0FD732895dcc18d6e551955af4948515610a01576107b36107b361324a936134488a602098613456966134649c613511575b50965096995050955050506133dd565b613527908b3d8d116126ce576126bf818361020c565b5038613501565b61354891925060203d6020116126ce576126bf818361020c565b90386133ad565b613557610e95565b5060408101805161357690613380906107b3906001600160a01b031681565b03915afa918215610a0157600092613682575b506020840180518591906001600160a01b03167399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9d1981016135f957506134566107b36107b36020956134488661324a96600080516020614a9083398151915261342e6107b361341e6134649f9c60e0015160018060a01b031690565b9491602061361b6107b36107b360e0600495989698015160018060a01b031690565b604051631a5896b360e31b815292839182905afa8015610a0157602091600091613665575b506060880151966134c36040519889938493636fe2528b60e11b855260048501613337565b61367c9150823d84116113ac5761139e818361020c565b38613640565b61369c91925060203d6020116126ce576126bf818361020c565b9038613589565b6020815260a060806136c0845183602086015260c0850190611d7e565b93600180841b03602082015116604085015260408101516060850152606081015182850152015191015290565b6136f5610e95565b5060208101516001600160a01b0316600080516020614a908339815191521461397b575b613723815161497a565b60e082018051919290916001600160a01b0316926020606083019485519261375f6040519485938493636fe2528b60e11b855260048501613337565b038173d63A1F3b359449812C0FD732895dcc18d6e551955af48015610a015760009360209261380e92613960575b50835160a085015190916137f1916107b39182916001600160a01b031660c08901518b51906137d560808c0151936137c361024e565b998a526001600160a01b03168b8a0152565b604088015260608701526080860152516001600160a01b031690565b9060405195868094819363c04b8d5960e01b8352600483016136a3565b03925af1918215610a0157600092613924575b5060400151600080516020614a9083398151915290613848906001600160a01b03166107b3565b1461385757612a9b606061026c565b6040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602082602481845afa918215610a0157600092613903575b50803b156101d157604051632e1a7d4d60e01b815260048101929092526000908290602490829084905af18015610a01576138e8575b50612bc1565b806138f760006138fd9361020c565b80610643565b386138e2565b61391d91925060203d6020116126ce576126bf818361020c565b90386138ac565b600080516020614a908339815191529192506107b360406139566138489360203d6020116126ce576126bf818361020c565b9493505050613821565b61397690843d86116126ce576126bf818361020c565b61378d565b60608101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156101d157600090600460405180948193630d0e30db60e41b83525af18015610a01576139da575b50613719565b806138f760006139e99361020c565b386139d4565b95949391613a2a90613a1c613a3593613a098a6000612140565b61012060208b01526101208a019061214d565b9088820360408a01526121d5565b926060870190612212565b84820360e08601526020808251938481520191019160005b818110613a605750506101009150930152565b8351835260209384019390920191600101613a4d565b9092613af1613ae660a060c09598979660e08652805160e0870152613aa46020820151610100880190612140565b60408101516000196001841b019081166101208801526060820151166101408701526080810151610160870152015161018085018690526101a0850190611d7e565b966020840190612212565b60a08201520152565b613b02610e95565b50613b17815160208082518301019101611f5e565b613b286002849593955110156128ff565b60208201516001600160a01b0316600080516020614a9083398151915214613eaf575b613b57612325846120ca565b60e083018051919590916001600160a01b03169560206060860197885192613b936040519485938493636fe2528b60e11b855260048501613337565b038173d63A1F3b359449812C0FD732895dcc18d6e551955af48015610a0157613e92575b5060a0840151613bcf906001600160a01b03166107b3565b92613bf6613bdb61023f565b30815294600060208701526001600160a01b03166040860152565b600060608501526002865111613cc457506107b36107b360209493613c1d613c96946120ca565b5197613c77613c406107b3612325613c3a6107b3612325876120ca565b946120d7565b613c678c519360008b613c5161025d565b9e8f528e01526001600160a01b031660408d0152565b6001600160a01b031660608b0152565b6080890152613c846120fb565b60a0890152516001600160a01b031690565b608084015191600060c08601519661380e604051988996879586946352bbbe2960e01b865260048601613a76565b94916000613cf26107b3613ce08397966107b3968c519161484a565b9451949590946001600160a01b031690565b92613d1860c0880151604051998a978896879563945bcec960e01b8752600487016139ef565b03925af1918215610a0157600092613e5a575b5060400151600080516020614a9083398151915290613d52906001600160a01b03166107b3565b14613d86575b612bbb613d7791613d69606061026c565b93518452612bb58151611077565b60208201526000604082015290565b6040516370a0823160e01b8152306004820152906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602083602481845afa928315610a0157600093613e39575b50803b156101d157604051632e1a7d4d60e01b815260048101939093526000908390602490829084905af1908115610a0157613d7792612bbb92613e24575b50915050613d58565b806138f76000613e339361020c565b38613e1b565b613e5391935060203d6020116126ce576126bf818361020c565b9138613ddc565b600080516020614a908339815191529192506107b36040613e88613d52933d806000833e6124a6818361020c565b9493505050613d2b565b613eaa9060203d6020116126ce576126bf818361020c565b613bb7565b60608201517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156101d157600090600460405180948193630d0e30db60e41b83525af18015610a0157613f0e575b50613b4b565b806138f76000613f1d9361020c565b38613f08565b613f2b610e95565b50613f3c60c0820151421115612830565b613f508151602080825183010191016124b5565b606083929301928351946000955b613f688351611077565b8710156142145773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee613f946107b36123258a876120e7565b036140c65760e0850151602090613fb5906107b3906001600160a01b031681565b613fc26123258a886120e7565b908984613fe161232561240e613fdb612325868d6120e7565b94611057565b93613fec8951611086565b8d148d8c6000926000146140bc5761407792506080810151915b6140108d51611086565b036140b45760a001516001600160a01b03165b905b604051631a4c1ca360e01b8152998a9889978896600488016001600160a01b0391821681529181166020830152918216604082015260608101929092526080820192909252911660a082015260c00190565b03925af18015610a0157600191600091614096575b50965b0195613f5e565b6140ae915060203d81116126ce576126bf818361020c565b3861408c565b503090614025565b6140779291614006565b806140d461232589866120e7565b60e08701805190916020916001600160a01b0316604051636fe2528b60e11b81529485928392614108929160048501613337565b038173d63A1F3b359449812C0FD732895dcc18d6e551955af4918215610a01576107b3614148926107b3926020956141f95750516001600160a01b031690565b6141556123258a886120e7565b9089600061416f61232561240e613fdb612325868d6120e7565b9361417a8951611086565b8d148d8c849285146141ef576141b592506080810151915b61419c8d51611086565b1485146140b45760a001516001600160a01b0316614023565b03925af18015610a01576001916000916141d1575b509661408f565b6141e9915060203d81116126ce576126bf818361020c565b386141ca565b6141b59291614192565b61420f90863d81116126ce576126bf818361020c565b613448565b935094505050612a9b606061026c565b60009060033d1161423157565b905060046000803e60005160e01c90565b600060443d106102e7576040513d600319016004823e8051913d60248401116001600160401b038411176142af57828201928351916001600160401b0383116142a7573d840160031901858401602001116142a757506102e79291016020019061020c565b949350505050565b92915050565b9060206102e7928181520190611d7e565b3d156142f1573d906142d78261027a565b916142e5604051938461020c565b82523d6000602084013e565b606090565b6142fe610e95565b5060208101516001600160a01b0316600080516020614a90833981519152146144b3575b61432c815161497a565b60e0820180519192916001600160a01b031692602060608401948551926143676040519485938493636fe2528b60e11b855260048501613337565b038173d63A1F3b359449812C0FD732895dcc18d6e551955af48015610a01576000926020926143e892614498575b50845160a086015190916143cb916107b39182916001600160a01b031660c08a01518b51906137d560808d0151936137c361024e565b9060405194858094819363c04b8d5960e01b8352600483016136a3565b03925af160009181614477575b5061444e57614402614224565b6308c379a01461441b575b6144156142c6565b50611ca5565b614423614242565b8061442e575061440d565b60405162461bcd60e51b815290819061444a90600483016142b5565b0390fd5b60409190910151600080516020614a9083398151915290613848906001600160a01b03166107b3565b61449191925060203d6020116126ce576126bf818361020c565b90386143f5565b6144ae90843d86116126ce576126bf818361020c565b614395565b60608101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156101d157600090600460405180948193630d0e30db60e41b83525af18015610a0157614512575b50614322565b806138f760006145219361020c565b3861450c565b919260809361454c92979695978452602084015260a0604084015260a08301906121d5565b6001600160a01b0390951660608201520152565b614568610e95565b5060208101516001600160a01b0316600080516020614a90833981519152146147d6575b6145a08151602080825183010191016126d5565b6145ac612325826120ca565b60e083018051909391906001600160a01b031693602060608401958651936145e86040519586938493636fe2528b60e11b855260048501613337565b038173d63A1F3b359449812C0FD732895dcc18d6e551955af4918215610a01576107b3614628926107b3926000956147be5750516001600160a01b031690565b8451608084015160a08501519195929184906001600160a01b03169661466960c0880151604051998a97889687956338ed173960e01b875260048701614527565b03925af1918215610a0157600092614786575b5060400151600080516020614a90833981519152906146a3906001600160a01b03166107b3565b146146b7575b612d7390612d65606061026c565b6040516370a0823160e01b8152306004820152906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602083602481845afa928315610a0157600093614765575b50803b156101d157604051632e1a7d4d60e01b815260048101939093526000908390602490829084905af1918215610a0157612d7392614750575b5090506146a9565b806138f7600061475f9361020c565b38614748565b61477f91935060203d6020116126ce576126bf818361020c565b913861470d565b600080516020614a908339815191529192506107b360406147b46146a3933d806000833e612821818361020c565b949350505061467c565b61420f9060203d6020116126ce576126bf818361020c565b60608101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156101d157600090600460405180948193630d0e30db60e41b83525af18015610a0157614835575b5061458c565b806138f760006148449361020c565b3861482f565b92906148568451612014565b936148618251612046565b9260005b61486f8351611077565b8110156148f0578061489661488c6107b3612325600195886120e7565b61233c838b6120e7565b6148a081866120e7565b516148aa82611057565b6148b261024e565b9182528260208301526040820152600060608201526148cf6120fb565b60808201526148de82886120e7565b526148e981876120e7565b5001614865565b50929361023d92506060614903866120ca565b51015261233c6124016124076107b36123256124018651611077565b6040519061492e60608361020c565b60298252681d594819985a5b195960ba1b6040837f416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c60208201520152565b90916102e79261344261491f565b601481511061498a576014015190565b63a78aa27f60e01b60005260046000fd5b909291928347106149c6576000816102e7956020839451920190855af16149c06142c6565b91614a1a565b60405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608490fd5b91929015614a7c5750815115614a2e575090565b3b15614a375790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561442e5750805190602001fdfe00000000000000000000000099ec76235f8a5a52611b0da5f0c6b09e1dcd2c9ea2646970667358221220a77d5396d775a2ee3dad2739900fd13ccb38d196bbf5011414257d6dbe5dd20b64736f6c634300081a0033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461017b5780631f5f4cbe146101765780633396c1ba1461017157806336dd6b3d1461016c5780633c9c6ff3146101675780633f4a2d271461016257806340fce5d11461015d578063461dfcd5146101585780634c828b5c146101535780635933dd2b1461014e5780636264257a146101495780637b103999146101445780638677f6361461013f57806396954fb91461013a578063c2909fed14610135578063c4d66de814610130578063eb5251a51461012b578063f1a3d00514610126578063f3ec43c714610121578063f4ef97ea1461011c578063f6f1c4c4146101175763fae89f920361000e57610d9c565b610d38565b610cea565b610ca5565b610c92565b610c79565b610b7f565b610b36565b610af8565b610a4b565b610a06565b61091b565b6108d6565b61078a565b61073e565b610677565b61064e565b61062a565b610598565b6103d9565b6103b0565b346101d15760203660031901126101d15760043563ffffffff60e01b81168091036101d1576020906301ffc9a760e01b81149081156101c0575b506040519015158152f35b633603f73360e21b149050386101b5565b600080fd5b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761020757604052565b6101d6565b90601f801991011681019081106001600160401b0382111761020757604052565b6040519061023d6101008361020c565b565b6040519061023d60808361020c565b6040519061023d60a08361020c565b6040519061023d60c08361020c565b9061023d604051928361020c565b6001600160401b03811161020757601f01601f191660200190565b9291926102a18261027a565b916102af604051938461020c565b8294818452818301116101d1578281602093846000960137010152565b9080601f830112156101d1578160206102e793359101610295565b90565b6001600160a01b038116036101d157565b359061023d826102ea565b60206003198201126101d157600435906001600160401b0382116101d157606082820360031901126101d1576040519161033f836101ec565b80600401356001600160401b0381116101d1576044926004610363928401016102cc565b835260248101356020840152013561037a816102ea565b604082015290565b919060608301926000905b6003821061039a57505050565b602080600192855181520193019101909161038d565b346101d1576103d56103c96103c436610306565b610eaa565b60405191829182610382565b0390f35b60203660031901126101d1576004356001600160401b0381116101d157806004019060c060031982360301126101d15761041960a4820135421115612830565b610421610f9a565b6064820160005b6104328286610fcf565b9050811015610465578061045d61045560019361044f868a610fcf565b9061101a565b35855161106a565b845201610428565b5091909161047583511515612849565b604482013592606081019184835260009260208301926084604082019601945b6104a96104a2858b610fcf565b9050611077565b81101561053557806104e46104da6104d26104cb60019561044f8f8b90610fcf565b358c6110a2565b8551906110b5565b8088528551611095565b845261052d61052688888d61051e6105148761044f8d61050e610506876110d5565b9751986110d5565b95610fcf565b6020810190610fcf565b939092611a0c565b895161106a565b885201610495565b6103d58761058461057d8987898f61051461051e9161055e610556826110d5565b9551966110d5565b936105776104a261056f8385610fcf565b939094610fcf565b9161101a565b825161106a565b809152604051918291829190602083019252565b346101d15760203660031901126101d15760206105bf6004356105ba816102ea565b6110df565b604051908152f35b9181601f840112156101d1578235916001600160401b0383116101d1576020808501948460051b0101116101d157565b9060406003198301126101d15760043591602435906001600160401b0382116101d157610626916004016105c7565b9091565b346101d15760206105bf61063d366105f7565b9161124f565b60009103126101d157565b346101d15760003660031901126101d1576003546040516001600160a01b039091168152602090f35b60203660031901126101d1576004356001600160401b0381116101d15761010060031982360301126101d1576106ab61022d565b8160040135906001600160401b0382116101d15761073460e46103d5946106db6103c995600436918401016102cc565b84526106e9602482016102fb565b60208501526106fa604482016102fb565b6040850152606481013560608501526084810135608085015261071f60a482016102fb565b60a085015260c481013560c0850152016102fb565b60e08201526114a5565b346101d15760206105bf610751366105f7565b91611500565b60206003198201126101d157600435906001600160401b0382116101d15760809082900360031901126101d15760040190565b346101d15761079836610757565b6107d16107a4826110d5565b6107bf6107b3602085016110d5565b6001600160a01b031690565b6001600160a01b039091161415612862565b6107d9610f9a565b60608201919060005b6107ec8484610fcf565b9050811015610819578061081161080960019361044f8888610fcf565b35845161106a565b8352016107e2565b5061082681511515612849565b6040820135916060820193838552600092602081019060408101945b61084f6104a28587610fcf565b8110156108b157806108816108776104d261087060019561044f8a8c610fcf565b358b6110a2565b8086528a51611095565b89526108a96108a2855161089c6105148561044f8b8d610fcf565b916119c9565b885161106a565b875201610842565b6103d58661058461057d8761089c6105148b8f51936105776104a261056f8385610fcf565b346101d15760203660031901126101d1576004356108f3816102ea565b60018060a01b03166000526002602052602060018060a01b0360406000205416604051908152f35b346101d15760403660031901126101d157600435610938816102ea565b602435610944816102ea565b604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b636004820152336024820152916020836044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315610a0157610019936109cd916000916109d2575b5061287b565b61154b565b6109f4915060203d6020116109fa575b6109ec818361020c565b810190611533565b386109c7565b503d6109e2565b611243565b346101d15760003660031901126101d1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101d15760403660031901126101d157600435610a68816102ea565b602435604051632474521560e21b81527fc0fc8e4dc5cff6febdf550b80d566f654e2baf1a02ea1060208c2f8ab2dd1b636004820152336024820152916020836044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315610a015761001993610af3916000916109d2575061287b565b6115fa565b346101d15760206105bf610b0b366105f7565b91611654565b634e487b7160e01b600052602160045260246000fd5b60091115610b3157565b610b11565b346101d15760203660031901126101d157600435610b53816102ea565b60018060a01b0316600052600160205260ff604060002054166040516009821015610b31576020918152f35b346101d15760203660031901126101d157600435610b9c816102ea565b610bed60005491610bd1610bbb610bb78560ff9060081c1690565b1590565b80948195610c6b575b8115610c4b575b506117b0565b82610be4600160ff196000541617600055565b610c3257611813565b610bf357005b610c0361ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b610c4661010061ff00196000541617600055565b611813565b303b15915081610c5d575b5038610bcb565b60ff16600114905038610c56565b600160ff8216109150610bc4565b346101d1576103d56103c9610c8d36610306565b6118fb565b346101d15760206105bf61089c366105f7565b346101d15760003660031901126101d1576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60803660031901126101d157600435610d02816102ea565b60443590602435610d12836102ea565b606435916001600160401b0383116101d15760209361051e6105bf9436906004016105c7565b60a03660031901126101d157600435610d50816102ea565b60243590610d5d826102ea565b6044359160643591610d6e836102ea565b608435926001600160401b0384116101d157602094610d946105bf9536906004016105c7565b949093611afd565b346101d157610daa36610757565b610db66107a4826110d5565b610dbe610f9a565b60608201919060005b610dd18484610fcf565b9050811015610df65780610dee61080960019361044f8888610fcf565b835201610dc7565b50610e0381511515612849565b6040820135916060820193838552600092602081019060408101945b610e2c6104a28587610fcf565b811015610e705780610e4d6108776104d261087060019561044f8a8c610fcf565b8952610e686108a285516107516105148561044f8b8d610fcf565b875201610e1f565b6103d58661058461057d876107516105148b8f51936105776104a261056f8385610fcf565b604051906060610ea5818461020c565b368337565b610eb2610e95565b50610ebc81611c63565b6040810151610ef490610eed906001600160a01b03165b6001600160a01b0316600090815260016020526040902090565b5460ff1690565b610efd81610b27565b600181148015610f87575b15610f1757506102e79061278a565b610f2081610b27565b60028103610f3257506102e790612626565b610f3b81610b27565b60038103610f4d57506102e79061250b565b610f5681610b27565b60048103610f6857506102e7906122a7565b80610f74600592610b27565b03610f82576102e790611dbf565b611c93565b50610f9181610b27565b60068114610f08565b60405190608082018281106001600160401b038211176102075760405260006060838281528260208201528260408201520152565b903590601e19813603018212156101d157018035906001600160401b0382116101d157602001918160051b360383136101d157565b634e487b7160e01b600052603260045260246000fd5b919081101561103c5760051b81013590603e19813603018212156101d1570190565b611004565b634e487b7160e01b600052601160045260246000fd5b906001820180921161106557565b611041565b9190820180921161106557565b60001981019190821161106557565b60011981019190821161106557565b9190820391821161106557565b8181029291811591840414171561106557565b81156110bf570490565b634e487b7160e01b600052601260045260246000fd5b356102e7816102ea565b6110fb90610eed90610ed36001600160a01b0382161515612894565b61110481610b27565b600181036111145750620254e990565b61111d81610b27565b60028114801561117f575b1561113557506202d0cb90565b61113e81610b27565b6003810361114e57506202cdce90565b61115781610b27565b6004810361116757506203001190565b80611173600692610b27565b03610f82576204229890565b5061118981610b27565b60058114611128565b919081101561103c5760051b81013590605e19813603018212156101d1570190565b604051906111c1826101ec565b6000604083606081528260208201520152565b903590601e19813603018212156101d157018035906001600160401b0382116101d1576020019181360383136101d157565b908160209103126101d157516102e7816102ea565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b6040513d6000823e3d90fd5b91929060009360009160005b82811061147c575061126e861515612849565b84916112786111b4565b95600094602088019160408901955b61129085611077565b8810156113b3576112c8611338916112bf8d6112ba60206112b28e8c8e611192565b0135876110a2565b6110b5565b90818752611095565b926112eb6112e46112da8b898b611192565b60408101906111d4565b3691610295565b8b52600354602090611305906001600160a01b03166107b3565b6113196113138c8a8c611192565b806111d4565b60405163657dcce560e01b81529586939284928392916004840161121b565b03915afa908115610a015761136361137c92600194600091611385575b506001600160a01b03168a52565b61137561136f8d6118fb565b60200190565b519061106a565b97019691611287565b6113a6915060203d81116113ac575b61139e818361020c565b810190611206565b38611355565b503d611394565b61131392989a50611429999750602095915061140a93526113e36112e46112da6113dc87611077565b8785611192565b87526003546113fa906001600160a01b03166107b3565b9361140481611077565b91611192565b60405163657dcce560e01b81529788939284928392916004840161121b565b03915afa918215610a0157610c8d6113759361136f936102e79760009261145b575b506001600160a01b039091169052565b61147591925060203d6020116113ac5761139e818361020c565b903861144b565b9561149b60019160206114938a87879a989a611192565b01359061106a565b960193919361125b565b6060806040516114b5828261020c565b36903760a08201516001600160a01b0316156114ee57810151156114dc576102e790612918565b60405163127973e960e31b8152600490fd5b60405163044aa57560e41b8152600490fd5b91906000915b8083106115135750505090565b90919261152a60019161063d61051487868861101a565b93019190611506565b908160209103126101d1575180151581036101d15790565b6001600160a01b0381166000818152600160205260409020549192909160ff166009811015610b3157156115e8576001600160a01b03169182156115d7576001600160a01b0316600090815260026020526040902080546001600160a01b031916831790557feec77f6322aea766aacea41ca79d2615f5301e0edbcf9bfe766a594d9d95e1db600080a3565b60405162310f9160e31b8152600490fd5b604051636afff5ed60e11b8152600490fd5b6001600160a01b031680156114ee576009821015610b3157806000526001602052604060002060ff1981541660ff84161790557f7955abe00075979fc908f0d63d8bca5922683856a8270d6ecd19958f3f47c339600080a3565b9092919260009360009160005b82811061178f5750611674861515612849565b839161167e6111b4565b94600094602087019160408801955b61169685611077565b881015611720576116b86116e4916112bf8d6112ba60206112b28e8c8e611192565b926116ca6112e46112da8b898b611192565b8a52600354602090611305906001600160a01b03166107b3565b03915afa908115610a015761170e6117179260019460009161138557506001600160a01b03168a52565b6113758b610eaa565b9701969161168d565b611761999a506113139298969750602095915061140a935261174a6112e46112da6113dc87611077565b86526003546113fa906001600160a01b03166107b3565b03915afa938415610a01576102e794611375936103c49260009261145b57506001600160a01b039091169052565b956117a660019160206114938a87879b989b611192565b9601949194611661565b156117b757565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b604051632474521560e21b8152600060048201523360248201526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015610a0157611876916000916109d2575061287b565b6040516301ffc9a760e01b8152633f9940a760e11b60048201526001600160a01b039190911690602081602481855afa908115610a01576000916118dc575b50156114ee57600380546001600160a01b0319166001600160a01b03909216919091179055565b6118f5915060203d6020116109fa576109ec818361020c565b386118b5565b611903610e95565b5061190d81611c63565b604081015161192890610eed906001600160a01b0316610ed3565b61193181610b27565b6001811480156119b6575b1561194b57506102e790612ce5565b61195481610b27565b6002810361196657506102e790612c48565b61196f81610b27565b6003810361198157506102e790612be4565b61198a81610b27565b6004810361199c57506102e790612ae1565b806119a8600592610b27565b03610f82576102e790612a1c565b506119c081610b27565b6006811461193c565b918091825b6119d85750505090565b90919260001984019084821161106557610b0b6105146119f993868661101a565b92801561106557600019019190826119ce565b91939290936000935b808510611a2457505050505090565b9091929394851515600014611aa257600019860186811161106557600191611a50611a9092858861101a565b35611a5a816102ea565b611a6589868961101a565b3591611a70836102ea565b611a7986611077565b8a03611a9b5786905b610d946105148c898c61101a565b950193929190611a15565b3090611a82565b611a9060019186611a5a565b6040519061010082018281106001600160401b0382111761020757604052600060e083606081528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b94959390919560009660009460005b838110611c425750611b6b90611b238a1515612849565b611b5b8396611b4b611b33611aae565b4260c08201526001600160a01b03909c1660208d0152565b6001600160a01b031660408b0152565b6001600160a01b031660a0890152565b600094606088019160e08901955b611b8285611077565b881015611be3576112c8611ba4916112bf8d6112ba60206112b28e8c8e611192565b03915afa908115610a0157611bce611bda9260019460009161138557506001600160a01b03168a52565b61137561136f8d612918565b97019691611b79565b61131392989a50611c0c999750602095915061140a93526113e36112e46112da6113dc87611077565b03915afa918215610a0157611c3d6113759361136f936102e79760009261145b57506001600160a01b039091169052565b612918565b98611c5960019160206114938d888a9d9b9d611192565b9901969496611b0c565b60408101516001600160a01b0316156114ee576020015115611c8157565b604051630f6fa54560e41b8152600490fd5b6040516368a1e68f60e11b8152600490fd5b60405163076fc27360e51b8152600490fd5b6001600160401b0381116102075760051b60200190565b91906040838203126101d1578251926020810151906001600160401b0382116101d157019080601f830112156101d157815190611d0a82611cb7565b92611d18604051948561020c565b82845260208085019360051b8201019182116101d157602001915b818310611d405750505090565b825161ffff811681036101d157815260209283019201611d33565b60005b838110611d6e5750506000910152565b8181015183820152602001611d5e565b90602091611d9781518092818552858086019101611d5b565b601f01601f1916010190565b929190611dba602091604086526040860190611d7e565b930152565b611e4390611dcb610e95565b5060408101516000906001600160a01b0390611e0f90611e029083165b6001600160a01b0316600090815260026020526040902090565b546001600160a01b031690565b1691611e1c83151561289b565b6020815191019283519183604051809781958294632f80bb1d60e01b845260048401611da3565b03925af1918215610a0157600092611e74575b50611e61606061026c565b9182525160208201526000604082015290565b611e929192503d806000833e611e8a818361020c565b810190611cce565b509038611e56565b9080601f830112156101d1578151611eb181611cb7565b92611ebf604051948561020c565b81845260208085019260051b8201019283116101d157602001905b828210611ee75750505090565b602080918351611ef6816102ea565b815201910190611eda565b9080601f830112156101d1578151611f1881611cb7565b92611f26604051948561020c565b81845260208085019260051b8201019283116101d157602001905b828210611f4e5750505090565b8151815260209182019101611f41565b916060838303126101d15782516001600160401b0381116101d15782611f85918501611e9a565b9260208101516001600160401b0381116101d157810183601f820112156101d157805190611fb282611cb7565b91611fc0604051938461020c565b80835260208084019160051b830101918683116101d157602001905b828210612004575050509260408201516001600160401b0381116101d1576102e79201611f01565b8151815260209182019101611fdc565b9061201e82611cb7565b61202b604051918261020c565b828152809261203c601f1991611cb7565b0190602036910137565b9061205082611cb7565b61205d604051918261020c565b828152809261206e601f1991611cb7565b0160005b81811061207e57505050565b6040519060a08201918083106001600160401b03841117610207576020926040526000815260008382015260006040820152600060608201526060608082015282828601015201612072565b80511561103c5760200190565b80516001101561103c5760400190565b805182101561103c5760209160051b010190565b6040519061210a60408361020c565b6002825261060f60f31b6020830152565b906020828203126101d15781516001600160401b0381116101d1576102e79201611f01565b906002821015610b315752565b9080602083519182815201916020808360051b8301019401926000915b83831061217957505050505090565b90919293946020806121c6600193601f1986820301875260a060808b5180518452858101518685015260408101516040850152606081015160608501520151918160808201520190611d7e565b9701930193019193929061216a565b906020808351928381520192019060005b8181106121f35750505090565b82516001600160a01b03168452602093840193909201916001016121e6565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b93929061227a61023d9361226c6060936001895260e060208a015260e089019061214d565b9087820360408901526121d5565b940190612212565b93929061227a61023d9361226c6060936000895260e060208a015260e089019061214d565b6122af610e95565b506122c4815160208082518301019101611f5e565b50926122d08251612014565b936122db8151612046565b916122e461023f565b308152600060208201523060408201526000606082015260005b6123088651611077565b8110156123b8578061234b6123326107b36123256001958b6120e7565b516001600160a01b031690565b61233c838c6120e7565b6001600160a01b039091169052565b6123b161235882876120e7565b5161236283611057565b61236a61024e565b9182528360208301526040820152600060608201526123876120fb565b608082015261239f8361239a8b51611086565b611095565b906123aa828a6120e7565b52876120e7565b50016122fe565b5091509491600092836124226107b36107b360406124409a612414602082019b8c5160606123e58c6120ca565b51015261233c61240e6124076107b36123256124018651611077565b866120e7565b9251611077565b8a6120e7565b01516001600160a01b031690565b9260405197889586948593637c26833760e11b855260048501612247565b03925af1918215610a0157600092612490575b5061246a6000612462846120ca565b5112156128b4565b61247d612477606061026c565b926120ca565b5182525160208201526000604082015290565b6124ae9192503d806000833e6124a6818361020c565b81019061211b565b9038612453565b9190916040818403126101d15780516001600160401b0381116101d157836124de918301611e9a565b9260208201516001600160401b0381116101d1576102e79201611e9a565b60001981146110655760010190565b612513610e95565b506125288151602080825183010191016124b5565b60208301805160409094018051939491939091612561916001600160a01b031661255187612d9e565b9061255b86612d9e565b92612e26565b9161257461256e84612f06565b93612f7c565b906000956000925b6064841115612596575b505050505050611e61606061026c565b9091929394966125af6125a9838a61106a565b60011c90565b90808214612610575080976125d585856125cf8a5160018060a01b031690565b85612e26565b8851908082036125e757505050612586565b101561260357506125f890946124fc565b92919094939461257c565b9491506125f890916124fc565b9750612586565b908160209103126101d1575190565b61268790612632610e95565b5060408101516020906001600160a01b039061265390611e02908316611de8565b169161266083151561289b565b8181519101928351916000604051809781958294632f80bb1d60e01b845260048401611da3565b03925af1918215610a01576000926126a45750611e61606061026c565b6126c791925060203d6020116126ce575b6126bf818361020c565b810190612617565b9038611e56565b503d6126b5565b906020828203126101d15781516001600160401b0381116101d1576102e79201611e9a565b6020818303126101d1578051906001600160401b0382116101d157019080601f830112156101d157815161272d81611cb7565b9261273b604051948561020c565b81845260208085019260051b8201019283116101d157602001905b8282106127635750505090565b8151815260209182019101612756565b6040906102e79392815281602082015201906121d5565b6127ea90612796610e95565b5060006127ad8251602080825183010191016126d5565b60408301516020906127c9906107b3906001600160a01b031681565b93019283516040518096819482936307c0329d60e21b845260048401612773565b03915afa918215610a015760009261280b575b5061247d612477606061026c565b6128299192503d806000833e612821818361020c565b8101906126fa565b90386127fd565b1561283757565b60405163883bf0db60e01b8152600490fd5b1561285057565b604051635269639360e01b8152600490fd5b1561286957565b604051631aa5e6a560e21b8152600490fd5b1561288257565b60405163036be76f60e61b8152600490fd5b156114ee57565b156128a257565b6040516339028fcd60e21b8152600490fd5b156128bb57565b6040516301f9d96160e71b8152600490fd5b156128d457565b604051630279891960e11b8152600490fd5b156128ed57565b604051637974230960e11b8152600490fd5b1561290657565b6040516367678b8760e11b8152600490fd5b612920610e95565b5060e081015161293c90610eed906001600160a01b0316610ed3565b61294581610b27565b600181148015612a09575b1561295f57506102e790614560565b61296881610b27565b6002810361297a57506102e7906142f6565b61298381610b27565b6003810361299557506102e790613f23565b61299e81610b27565b600481036129b057506102e790613afa565b6129b981610b27565b600581036129cb57506102e7906136ed565b6129d481610b27565b600781036129e657506102e79061354f565b806129f2600892610b27565b03612a00576102e790613359565b6102e7906130fe565b50612a1381610b27565b60068114612950565b612a24610e95565b506040810151612a7d906000906001600160a01b0390612a4990611e02908316611de8565b1692612a5684151561289b565b602081519101938451918360405180968195829463cdca175360e01b845260048401611da3565b03925af1908115610a0157600091612aae575b50612a9b606061026c565b9151825260208201526000604082015290565b612ac391503d806000833e611e8a818361020c565b5038612a90565b908160000391808305600019149015171561106557565b612b6f6000612b1792612af2610e95565b50612b07815160208082518301019101611f5e565b509490602083019586519161484a565b9083612b516107b36107b36040612b2c61023f565b308152976020890186905230828a01526060890186905201516001600160a01b031690565b9260405196879586948593637c26833760e11b855260048501612282565b03925af1908115610a0157612bc191612bbb91600091612bcb575b50612bab6000612ba3612b9d8451611077565b846120e7565b5113156128cd565b612bb58151611077565b906120e7565b51612aca565b612a9b606061026c565b612bde913d8091833e6124a6818361020c565b38612b8a565b6060604051612bf3828261020c565b369037612c29612c0d8251602080825183010191016124b5565b906020840193845190604060018060a01b039101511690612e26565b60405191612c36836101ec565b51825260208201526000604082015290565b612c50610e95565b506040810151612ca9906020906001600160a01b0390612c7590611e02908316611de8565b1692612c8284151561289b565b818151910193845191600060405180968195829463cdca175360e01b845260048401611da3565b03925af1908115610a0157600091612cc65750612a9b606061026c565b612cdf915060203d6020116126ce576126bf818361020c565b38612a90565b612ced610e95565b50612d446000612d078351602080825183010191016126d5565b6040840151602090612d23906107b3906001600160a01b031681565b940193845160405180958194829363d06ca61f60e01b845260048401612773565b03915afa8015610a0157612d7391600091612d83575b50612d65606061026c565b92518352612bb58151611077565b5160208201526000604082015290565b612d9891503d806000833e612821818361020c565b38612d5a565b8051612da981611cb7565b91612db7604051938461020c565b818352601f19612dc683611cb7565b013660208501376000198201918083119060005b818110612de957505050505090565b82906001600160a01b03612dfd82876120e7565b51169161106557808303600019019186831161106557612e1f600193896120e7565b5201612dda565b9391909293926000935b612e3a8351611077565b851015612efd576020612e5061232587896120e7565b612e5d61232588876120e7565b90612eb7612e76612325612e708b611057565b896120e7565b604051630e5cfa0d60e21b81526001600160a01b03938416600482015293831660248501529091166044830152606482019390935291829081906084820190565b03816001600160a01b0386165afa8015610a0157600191600091612edf575b50940193612e30565b612ef7915060203d81116126ce576126bf818361020c565b38612ed6565b93505050915090565b60006706f05b59d3b200008202918083046706f05b59d3b200001481151715611065576706f05b59d3b20000915081830403612f6b57810190818111611065578110612f5a57670de0b6b3a7640000900490565b630a77254f60e01b60005260046000fd5b631550e8b760e01b60005260046000fd5b6000906714d1120d7b1600008102918183046714d1120d7b160000148215171561106557506714d1120d7b160000820403612f6b576706f05b59d3b20000810190818111611065578110612f5a57670de0b6b3a7640000900490565b6020818303126101d1578051906001600160401b0382116101d157019080601f830112156101d15781519161300c83611cb7565b9261301a604051948561020c565b80845260208085019160051b830101918383116101d15760208101915b83831061304657505050505090565b82516001600160401b0381116101d1578201906060828703601f1901126101d15760405190613074826101ec565b6020830151613082816102ea565b825260408301516001600160401b0381116101d1576020908401019187601f840112156101d15782516130b48161027a565b946130c2604051968761020c565b81865289602083870101116101d157856130e8606093602098978980809a019101611d5b565b8584015201516040820152815201920191613037565b90613107610e95565b506040820180519091906000906001600160a01b0316600080516020614a908339815191528190036132b657505060a08301516001600160a01b031631925b61315a815160208082518301019101612fd8565b9360005b85518110156131b357806131ac61318861317a6001948a6120e7565b51516001600160a01b031690565b6020613194848b6120e7565b51015160406131a3858c6120e7565b5101519161496c565b500161315e565b50925191935091906131cd906001600160a01b03166107b3565b90600080516020614a90833981519152820361322b5760a08301516131fc92506001600160a01b031631611095565b61320c60808301518210156128e6565b60606132178161026c565b920151825260208201526000604082015290565b613276916020906001600160a01b031660a08501516001600160a01b03165b6040516370a0823160e01b81526001600160a01b03909116600482015293849190829081906024820190565b03915afa8015610a015761329292600091613297575b50611095565b6131fc565b6132b0915060203d6020116126ce576126bf818361020c565b3861328c565b613300906020906132cf906001600160a01b03166107b3565b60a08701516040516370a0823160e01b81526001600160a01b03909116600482015292839190829081906024820190565b03915afa918215610a015791613318575b5092613146565b613331915060203d6020116126ce576126bf818361020c565b38613311565b6001600160a01b03918216815291166020820152604081019190915260600190565b613361610e95565b5060408101805161339a90613380906107b3906001600160a01b031681565b60a0840180519093916020916001600160a01b031661324a565b03915afa918215610a015760009261352e575b506020840180518591906001600160a01b03167399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9d198101613487575b506134566107b36107b36020956134488661324a96600080516020614a9083398151915261342e6107b361341e6134649f9c60e0015160018060a01b031690565b945193516001600160a01b031690565b0361347f5760608d0151905b61344261491f565b9261499b565b50516001600160a01b031690565b91516001600160a01b031690565b03915afa8015610a01576131fc926000916132975750611095565b60009061343a565b60e092909201516060870151604051636fe2528b60e11b81529692949293602092889283926134c3926001600160a01b03169060048501613337565b038173__$d13cb5064fc43aa5afb84d8e93c86c1222$__5af4948515610a01576107b36107b361324a936134488a602098613456966134649c613511575b50965096995050955050506133dd565b613527908b3d8d116126ce576126bf818361020c565b5038613501565b61354891925060203d6020116126ce576126bf818361020c565b90386133ad565b613557610e95565b5060408101805161357690613380906107b3906001600160a01b031681565b03915afa918215610a0157600092613682575b506020840180518591906001600160a01b03167399ec76235f8a5a52611b0da5f0c6b09e1dcd2c9d1981016135f957506134566107b36107b36020956134488661324a96600080516020614a9083398151915261342e6107b361341e6134649f9c60e0015160018060a01b031690565b9491602061361b6107b36107b360e0600495989698015160018060a01b031690565b604051631a5896b360e31b815292839182905afa8015610a0157602091600091613665575b506060880151966134c36040519889938493636fe2528b60e11b855260048501613337565b61367c9150823d84116113ac5761139e818361020c565b38613640565b61369c91925060203d6020116126ce576126bf818361020c565b9038613589565b6020815260a060806136c0845183602086015260c0850190611d7e565b93600180841b03602082015116604085015260408101516060850152606081015182850152015191015290565b6136f5610e95565b5060208101516001600160a01b0316600080516020614a908339815191521461397b575b613723815161497a565b60e082018051919290916001600160a01b0316926020606083019485519261375f6040519485938493636fe2528b60e11b855260048501613337565b038173__$d13cb5064fc43aa5afb84d8e93c86c1222$__5af48015610a015760009360209261380e92613960575b50835160a085015190916137f1916107b39182916001600160a01b031660c08901518b51906137d560808c0151936137c361024e565b998a526001600160a01b03168b8a0152565b604088015260608701526080860152516001600160a01b031690565b9060405195868094819363c04b8d5960e01b8352600483016136a3565b03925af1918215610a0157600092613924575b5060400151600080516020614a9083398151915290613848906001600160a01b03166107b3565b1461385757612a9b606061026c565b6040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602082602481845afa918215610a0157600092613903575b50803b156101d157604051632e1a7d4d60e01b815260048101929092526000908290602490829084905af18015610a01576138e8575b50612bc1565b806138f760006138fd9361020c565b80610643565b386138e2565b61391d91925060203d6020116126ce576126bf818361020c565b90386138ac565b600080516020614a908339815191529192506107b360406139566138489360203d6020116126ce576126bf818361020c565b9493505050613821565b61397690843d86116126ce576126bf818361020c565b61378d565b60608101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156101d157600090600460405180948193630d0e30db60e41b83525af18015610a01576139da575b50613719565b806138f760006139e99361020c565b386139d4565b95949391613a2a90613a1c613a3593613a098a6000612140565b61012060208b01526101208a019061214d565b9088820360408a01526121d5565b926060870190612212565b84820360e08601526020808251938481520191019160005b818110613a605750506101009150930152565b8351835260209384019390920191600101613a4d565b9092613af1613ae660a060c09598979660e08652805160e0870152613aa46020820151610100880190612140565b60408101516000196001841b019081166101208801526060820151166101408701526080810151610160870152015161018085018690526101a0850190611d7e565b966020840190612212565b60a08201520152565b613b02610e95565b50613b17815160208082518301019101611f5e565b613b286002849593955110156128ff565b60208201516001600160a01b0316600080516020614a9083398151915214613eaf575b613b57612325846120ca565b60e083018051919590916001600160a01b03169560206060860197885192613b936040519485938493636fe2528b60e11b855260048501613337565b038173__$d13cb5064fc43aa5afb84d8e93c86c1222$__5af48015610a0157613e92575b5060a0840151613bcf906001600160a01b03166107b3565b92613bf6613bdb61023f565b30815294600060208701526001600160a01b03166040860152565b600060608501526002865111613cc457506107b36107b360209493613c1d613c96946120ca565b5197613c77613c406107b3612325613c3a6107b3612325876120ca565b946120d7565b613c678c519360008b613c5161025d565b9e8f528e01526001600160a01b031660408d0152565b6001600160a01b031660608b0152565b6080890152613c846120fb565b60a0890152516001600160a01b031690565b608084015191600060c08601519661380e604051988996879586946352bbbe2960e01b865260048601613a76565b94916000613cf26107b3613ce08397966107b3968c519161484a565b9451949590946001600160a01b031690565b92613d1860c0880151604051998a978896879563945bcec960e01b8752600487016139ef565b03925af1918215610a0157600092613e5a575b5060400151600080516020614a9083398151915290613d52906001600160a01b03166107b3565b14613d86575b612bbb613d7791613d69606061026c565b93518452612bb58151611077565b60208201526000604082015290565b6040516370a0823160e01b8152306004820152906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602083602481845afa928315610a0157600093613e39575b50803b156101d157604051632e1a7d4d60e01b815260048101939093526000908390602490829084905af1908115610a0157613d7792612bbb92613e24575b50915050613d58565b806138f76000613e339361020c565b38613e1b565b613e5391935060203d6020116126ce576126bf818361020c565b9138613ddc565b600080516020614a908339815191529192506107b36040613e88613d52933d806000833e6124a6818361020c565b9493505050613d2b565b613eaa9060203d6020116126ce576126bf818361020c565b613bb7565b60608201517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156101d157600090600460405180948193630d0e30db60e41b83525af18015610a0157613f0e575b50613b4b565b806138f76000613f1d9361020c565b38613f08565b613f2b610e95565b50613f3c60c0820151421115612830565b613f508151602080825183010191016124b5565b606083929301928351946000955b613f688351611077565b8710156142145773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee613f946107b36123258a876120e7565b036140c65760e0850151602090613fb5906107b3906001600160a01b031681565b613fc26123258a886120e7565b908984613fe161232561240e613fdb612325868d6120e7565b94611057565b93613fec8951611086565b8d148d8c6000926000146140bc5761407792506080810151915b6140108d51611086565b036140b45760a001516001600160a01b03165b905b604051631a4c1ca360e01b8152998a9889978896600488016001600160a01b0391821681529181166020830152918216604082015260608101929092526080820192909252911660a082015260c00190565b03925af18015610a0157600191600091614096575b50965b0195613f5e565b6140ae915060203d81116126ce576126bf818361020c565b3861408c565b503090614025565b6140779291614006565b806140d461232589866120e7565b60e08701805190916020916001600160a01b0316604051636fe2528b60e11b81529485928392614108929160048501613337565b038173__$d13cb5064fc43aa5afb84d8e93c86c1222$__5af4918215610a01576107b3614148926107b3926020956141f95750516001600160a01b031690565b6141556123258a886120e7565b9089600061416f61232561240e613fdb612325868d6120e7565b9361417a8951611086565b8d148d8c849285146141ef576141b592506080810151915b61419c8d51611086565b1485146140b45760a001516001600160a01b0316614023565b03925af18015610a01576001916000916141d1575b509661408f565b6141e9915060203d81116126ce576126bf818361020c565b386141ca565b6141b59291614192565b61420f90863d81116126ce576126bf818361020c565b613448565b935094505050612a9b606061026c565b60009060033d1161423157565b905060046000803e60005160e01c90565b600060443d106102e7576040513d600319016004823e8051913d60248401116001600160401b038411176142af57828201928351916001600160401b0383116142a7573d840160031901858401602001116142a757506102e79291016020019061020c565b949350505050565b92915050565b9060206102e7928181520190611d7e565b3d156142f1573d906142d78261027a565b916142e5604051938461020c565b82523d6000602084013e565b606090565b6142fe610e95565b5060208101516001600160a01b0316600080516020614a90833981519152146144b3575b61432c815161497a565b60e0820180519192916001600160a01b031692602060608401948551926143676040519485938493636fe2528b60e11b855260048501613337565b038173__$d13cb5064fc43aa5afb84d8e93c86c1222$__5af48015610a01576000926020926143e892614498575b50845160a086015190916143cb916107b39182916001600160a01b031660c08a01518b51906137d560808d0151936137c361024e565b9060405194858094819363c04b8d5960e01b8352600483016136a3565b03925af160009181614477575b5061444e57614402614224565b6308c379a01461441b575b6144156142c6565b50611ca5565b614423614242565b8061442e575061440d565b60405162461bcd60e51b815290819061444a90600483016142b5565b0390fd5b60409190910151600080516020614a9083398151915290613848906001600160a01b03166107b3565b61449191925060203d6020116126ce576126bf818361020c565b90386143f5565b6144ae90843d86116126ce576126bf818361020c565b614395565b60608101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156101d157600090600460405180948193630d0e30db60e41b83525af18015610a0157614512575b50614322565b806138f760006145219361020c565b3861450c565b919260809361454c92979695978452602084015260a0604084015260a08301906121d5565b6001600160a01b0390951660608201520152565b614568610e95565b5060208101516001600160a01b0316600080516020614a90833981519152146147d6575b6145a08151602080825183010191016126d5565b6145ac612325826120ca565b60e083018051909391906001600160a01b031693602060608401958651936145e86040519586938493636fe2528b60e11b855260048501613337565b038173__$d13cb5064fc43aa5afb84d8e93c86c1222$__5af4918215610a01576107b3614628926107b3926000956147be5750516001600160a01b031690565b8451608084015160a08501519195929184906001600160a01b03169661466960c0880151604051998a97889687956338ed173960e01b875260048701614527565b03925af1918215610a0157600092614786575b5060400151600080516020614a90833981519152906146a3906001600160a01b03166107b3565b146146b7575b612d7390612d65606061026c565b6040516370a0823160e01b8152306004820152906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602083602481845afa928315610a0157600093614765575b50803b156101d157604051632e1a7d4d60e01b815260048101939093526000908390602490829084905af1918215610a0157612d7392614750575b5090506146a9565b806138f7600061475f9361020c565b38614748565b61477f91935060203d6020116126ce576126bf818361020c565b913861470d565b600080516020614a908339815191529192506107b360406147b46146a3933d806000833e612821818361020c565b949350505061467c565b61420f9060203d6020116126ce576126bf818361020c565b60608101517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156101d157600090600460405180948193630d0e30db60e41b83525af18015610a0157614835575b5061458c565b806138f760006148449361020c565b3861482f565b92906148568451612014565b936148618251612046565b9260005b61486f8351611077565b8110156148f0578061489661488c6107b3612325600195886120e7565b61233c838b6120e7565b6148a081866120e7565b516148aa82611057565b6148b261024e565b9182528260208301526040820152600060608201526148cf6120fb565b60808201526148de82886120e7565b526148e981876120e7565b5001614865565b50929361023d92506060614903866120ca565b51015261233c6124016124076107b36123256124018651611077565b6040519061492e60608361020c565b60298252681d594819985a5b195960ba1b6040837f416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c60208201520152565b90916102e79261344261491f565b601481511061498a576014015190565b63a78aa27f60e01b60005260046000fd5b909291928347106149c6576000816102e7956020839451920190855af16149c06142c6565b91614a1a565b60405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608490fd5b91929015614a7c5750815115614a2e575090565b3b15614a375790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561442e5750805190602001fdfe00000000000000000000000099ec76235f8a5a52611b0da5f0c6b09e1dcd2c9ea2646970667358221220a77d5396d775a2ee3dad2739900fd13ccb38d196bbf5011414257d6dbe5dd20b64736f6c634300081a0033",
  "libraries": {
    "TokenApproveLibrary": "0xd63A1F3b359449812C0FD732895dcc18d6e55195"
  },
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "getAmountInByMegaRoutes((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]))": {
        "details": "The function may not support some types of dex, e.g. the Paraswap",
        "params": {
          "_params": "AmountParams struct"
        }
      },
      "getAmountOutByMegaRoutes((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]))": {
        "details": "The function may not support some types of dex, e.g. the Paraswap",
        "params": {
          "_params": "AmountParams struct"
        }
      },
      "getAmountsIn((bytes,uint256,address))": {
        "params": {
          "_params": "GetAmountsParams struct"
        }
      },
      "getAmountsInByPaths(uint256,(string,uint256,bytes)[])": {
        "details": "The function may not support some types of dex, e.g. the Paraswap",
        "params": {
          "amountOut": "amount in the destination token",
          "paths": "Array of Path structs"
        }
      },
      "getAmountsInByRoutes(uint256,(address,(string,uint256,bytes)[])[])": {
        "details": "The function may not support some types of dex, e.g. the Paraswap",
        "params": {
          "amountOut": "amountin the destination token",
          "routes": "Array of Route structs"
        }
      },
      "getAmountsOut((bytes,uint256,address))": {
        "params": {
          "_params": "GetAmountsParams struct"
        }
      },
      "getAmountsOutByPaths(uint256,(string,uint256,bytes)[])": {
        "details": "The function may not support some types of dex, e.g. the Paraswap",
        "params": {
          "amountIn": "amount in the source token",
          "paths": "Array of Path structs"
        }
      },
      "getAmountsOutByRoutes(uint256,(address,(string,uint256,bytes)[])[])": {
        "details": "The function may not support some types of dex, e.g. the Paraswap",
        "params": {
          "amountIn": "amount in the source token",
          "routes": "Array of Route structs"
        }
      },
      "getGas(address)": {
        "params": {
          "dexRouter": "The address of a router"
        }
      },
      "initialize(address)": {
        "details": "This function should only be called once during the initial setup of the contract.",
        "params": {
          "_primexDNS": "The address of the PrimexDNS contract."
        }
      },
      "performMegaRoutesSwap((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[],address,uint256))": {
        "params": {
          "_params": "MegaSwapParams struct"
        }
      },
      "performPathsSwap(address,address,uint256,address,(string,uint256,bytes)[])": {
        "params": {
          "amountIn": "amount in the source token",
          "paths": "Array of Path structs",
          "receiver": "destination address for swap",
          "tokenIn": "source token",
          "tokenOut": "destination token"
        }
      },
      "performRoutesSwap(address,uint256,address,(address,(string,uint256,bytes)[])[])": {
        "params": {
          "amountIn": "amount in the source token",
          "receiver": "destination address for swap",
          "routes": "Array of Route structs",
          "tokenIn": "source token"
        }
      },
      "setDexType(address,uint256)": {
        "params": {
          "_dexRouter": "The dex router address",
          "_dexType": "The dex type from enum DexType"
        }
      },
      "setQuoter(address,address)": {
        "params": {
          "_dexRouter": "The router address for which the quoter is set",
          "_quoter": "The quoter address to set"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "The interface id to check"
        }
      },
      "swapExactTokensForTokens((bytes,address,address,uint256,uint256,address,uint256,address))": {
        "params": {
          "_params": "SwapParams struct"
        }
      }
    },
    "stateVariables": {
      "WNative": {
        "details": "e.g WETH or WMATIC"
      },
      "registry": {
        "return": "The address of the Registry contract",
        "returns": {
          "_0": "The address of the Registry contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "dexType(address)": {
        "notice": "Dex type mapping dexRouter => dex type"
      },
      "getAmountInByMegaRoutes((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]))": {
        "notice": "Performs chained getAmountsIn calculations by MegaRoute structs"
      },
      "getAmountOutByMegaRoutes((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[]))": {
        "notice": "Performs chained getAmountsOut calculations by MegaRoute structs"
      },
      "getAmountsIn((bytes,uint256,address))": {
        "notice": "Performs chained getAmountIn calculationsgiven an output amount of an asset, returns the maximum input amount of the other asset"
      },
      "getAmountsInByPaths(uint256,(string,uint256,bytes)[])": {
        "notice": "Performs chained getAmountsIn calculations by Path structs"
      },
      "getAmountsInByRoutes(uint256,(address,(string,uint256,bytes)[])[])": {
        "notice": "Performs chained  getAmountsIn calculations by Route structs"
      },
      "getAmountsOut((bytes,uint256,address))": {
        "notice": "Performs chained getAmountOut calculationsgiven an input amount of an asset, returns the maximum output amount of the other asset"
      },
      "getAmountsOutByPaths(uint256,(string,uint256,bytes)[])": {
        "notice": "Performs chained getAmountOut calculations by Path structs"
      },
      "getAmountsOutByRoutes(uint256,(address,(string,uint256,bytes)[])[])": {
        "notice": "Performs chained getAmountsOut calculations by Route structs"
      },
      "getGas(address)": {
        "notice": "Gets the average amount of gas that is required for the swap on some dex"
      },
      "initialize(address)": {
        "notice": "Initializes the DexAdapter contract."
      },
      "performMegaRoutesSwap((address,address,uint256,(uint256,(address,(string,uint256,bytes)[])[])[],address,uint256))": {
        "notice": "perform swap of ERC20 tokens by MegaRoute structs"
      },
      "performPathsSwap(address,address,uint256,address,(string,uint256,bytes)[])": {
        "notice": "perform swap of ERC20 tokens by Path structs"
      },
      "performRoutesSwap(address,uint256,address,(address,(string,uint256,bytes)[])[])": {
        "notice": "perform swap of ERC20 tokens by Route structs"
      },
      "quoters(address)": {
        "notice": "Mapping from the dexRouter to its quoter"
      },
      "setDexType(address,uint256)": {
        "notice": "Set a dex type for a dex router"
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      },
      "swapExactTokensForTokens((bytes,address,address,uint256,uint256,address,uint256,address))": {
        "notice": "Swap ERC20 tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10278,
        "contract": "contracts/DexAdapter.sol:DexAdapter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 10281,
        "contract": "contracts/DexAdapter.sol:DexAdapter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 37577,
        "contract": "contracts/DexAdapter.sol:DexAdapter",
        "label": "dexType",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_enum(DexType)76899)"
      },
      {
        "astId": 37583,
        "contract": "contracts/DexAdapter.sol:DexAdapter",
        "label": "quoters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 37590,
        "contract": "contracts/DexAdapter.sol:DexAdapter",
        "label": "primexDNS",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPrimexDNSV3)60258"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPrimexDNSV3)60258": {
        "encoding": "inplace",
        "label": "contract IPrimexDNSV3",
        "numberOfBytes": "20"
      },
      "t_enum(DexType)76899": {
        "encoding": "inplace",
        "label": "enum IDexAdapter.DexType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_enum(DexType)76899)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IDexAdapter.DexType)",
        "numberOfBytes": "32",
        "value": "t_enum(DexType)76899"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}