{
  "address": "0xcAcb684FC4AB38A024B985c90c6a2A1798Ac8cc1",
  "abi": [
    {
      "inputs": [],
      "name": "DS_MATH_ADD_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DS_MATH_MUL_OVERFLOW",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IPositionManagerV2",
              "name": "positionManager",
              "type": "address"
            },
            {
              "internalType": "contract ILimitOrderManager",
              "name": "limitOrderManager",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "firstAssetShares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "depositInThirdAssetShares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "depositToBorrowedShares",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBestDexLens.Shares",
              "name": "shares",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dex",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "ancillaryData",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IBestDexLens.DexWithAncillaryData[]",
              "name": "dexes",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes",
              "name": "depositBorrowedAssetOracleData",
              "type": "bytes"
            },
            {
              "internalType": "bytes[][]",
              "name": "pullOracleData",
              "type": "bytes[][]"
            },
            {
              "internalType": "uint256[]",
              "name": "pullOracleTypes",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IBestDexLens.BestDexByOrderParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "getBestDexByOrder",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "returnAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "estimateGasAmount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "shares",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "to",
                          "type": "address"
                        },
                        {
                          "components": [
                            {
                              "internalType": "string",
                              "name": "dexName",
                              "type": "string"
                            },
                            {
                              "internalType": "uint256",
                              "name": "shares",
                              "type": "uint256"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ],
                          "internalType": "struct PrimexPricingLibrary.Path[]",
                          "name": "paths",
                          "type": "tuple[]"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Route[]",
                      "name": "routes",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
                  "name": "megaRoutes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IBestDexLens.GetBestMultipleDexesReturnParams",
              "name": "firstAssetReturnParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "returnAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "estimateGasAmount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "shares",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "to",
                          "type": "address"
                        },
                        {
                          "components": [
                            {
                              "internalType": "string",
                              "name": "dexName",
                              "type": "string"
                            },
                            {
                              "internalType": "uint256",
                              "name": "shares",
                              "type": "uint256"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ],
                          "internalType": "struct PrimexPricingLibrary.Path[]",
                          "name": "paths",
                          "type": "tuple[]"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Route[]",
                      "name": "routes",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
                  "name": "megaRoutes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IBestDexLens.GetBestMultipleDexesReturnParams",
              "name": "depositInThirdAssetReturnParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "returnAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "estimateGasAmount",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "shares",
                      "type": "uint256"
                    },
                    {
                      "components": [
                        {
                          "internalType": "address",
                          "name": "to",
                          "type": "address"
                        },
                        {
                          "components": [
                            {
                              "internalType": "string",
                              "name": "dexName",
                              "type": "string"
                            },
                            {
                              "internalType": "uint256",
                              "name": "shares",
                              "type": "uint256"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ],
                          "internalType": "struct PrimexPricingLibrary.Path[]",
                          "name": "paths",
                          "type": "tuple[]"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Route[]",
                      "name": "routes",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
                  "name": "megaRoutes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IBestDexLens.GetBestMultipleDexesReturnParams",
              "name": "depositToBorrowedReturnParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct IBestDexLens.GetBestDexByOrderReturnParams",
          "name": "_returnParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPositionManagerV2",
          "name": "_positionManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "dex",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "ancillaryData",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IBestDexLens.DexWithAncillaryData[]",
          "name": "_dexesWithAncillaryData",
          "type": "tuple[]"
        }
      ],
      "name": "getBestDexByPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "returnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimateGasAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "megaRoutes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBestDexLens.GetBestMultipleDexesReturnParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IPositionManagerV2",
              "name": "positionManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrowedAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "depositAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "depositAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "positionAsset",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "firstAssetShares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "depositInThirdAssetShares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "depositToBorrowedShares",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBestDexLens.Shares",
              "name": "shares",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dex",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "ancillaryData",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IBestDexLens.DexWithAncillaryData[]",
              "name": "dexes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBestDexLens.BestDexForOpenablePositionParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "getBestDexForOpenablePosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "returnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimateGasAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "megaRoutes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBestDexLens.GetBestMultipleDexesReturnParams",
          "name": "_firstAssetReturnParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "returnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimateGasAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "megaRoutes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBestDexLens.GetBestMultipleDexesReturnParams",
          "name": "_depositInThirdAssetReturnParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "returnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimateGasAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "megaRoutes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBestDexLens.GetBestMultipleDexesReturnParams",
          "name": "_depositToBorrowedReturnParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IPositionManagerV2",
              "name": "positionManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetToBuy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetToSell",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAmountToBuy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasPriceInCheckedAsset",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dex",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "ancillaryData",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IBestDexLens.DexWithAncillaryData[]",
              "name": "dexes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBestDexLens.GetBestMultipleDexesParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "getBestMultipleDexes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "returnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "estimateGasAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "dexName",
                          "type": "string"
                        },
                        {
                          "internalType": "uint256",
                          "name": "shares",
                          "type": "uint256"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct PrimexPricingLibrary.Path[]",
                      "name": "paths",
                      "type": "tuple[]"
                    }
                  ],
                  "internalType": "struct PrimexPricingLibrary.Route[]",
                  "name": "routes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct PrimexPricingLibrary.MegaRoute[]",
              "name": "megaRoutes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBestDexLens.GetBestMultipleDexesReturnParams",
          "name": "_returnParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c4a20452f0218815cfec29dd9baa97e9c28e64f52092fe2d4e2ae89974553a0",
  "receipt": {
    "to": null,
    "from": "0xC110b6e93a51ACF1f3DEd19c754789E7A2304F07",
    "contractAddress": "0xcAcb684FC4AB38A024B985c90c6a2A1798Ac8cc1",
    "transactionIndex": 13,
    "gasUsed": "2805710",
    "logsBloom": "0x
    "blockHash": "0x925285b50d4db68ab9dba578a91e8a80e8b8b9ef6aece5e1c589d05dd09bf9a7",
    "transactionHash": "0x9c4a20452f0218815cfec29dd9baa97e9c28e64f52092fe2d4e2ae89974553a0",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 63714700,
        "transactionHash": "0x9c4a20452f0218815cfec29dd9baa97e9c28e64f52092fe2d4e2ae89974553a0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c110b6e93a51acf1f3ded19c754789e7a2304f07",
          "0x0000000000000000000000001b0840519a581f3779d0a10b77593d6d3894a76a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003c9a80e122d075e00000000000000000000000000000000000000000000000575d932c14ade753a0000000000000000000000000000000000000000000051bbddab08f9425ae85f000000000000000000000000000000000000000000000005720f8ab338b16ddc0000000000000000000000000000000000000000000051bbe174b1075487efbd",
        "logIndex": 148,
        "blockHash": "0x925285b50d4db68ab9dba578a91e8a80e8b8b9ef6aece5e1c589d05dd09bf9a7"
      }
    ],
    "blockNumber": 63714700,
    "cumulativeGasUsed": "6586834",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "89aabf2fa537de3869c847bae20cae69",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DS_MATH_ADD_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DS_MATH_MUL_OVERFLOW\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IPositionManagerV2\",\"name\":\"positionManager\",\"type\":\"address\"},{\"internalType\":\"contract ILimitOrderManager\",\"name\":\"limitOrderManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"firstAssetShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositInThirdAssetShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositToBorrowedShares\",\"type\":\"uint256\"}],\"internalType\":\"struct IBestDexLens.Shares\",\"name\":\"shares\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dex\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"ancillaryData\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBestDexLens.DexWithAncillaryData[]\",\"name\":\"dexes\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"depositBorrowedAssetOracleData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[][]\",\"name\":\"pullOracleData\",\"type\":\"bytes[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"pullOracleTypes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IBestDexLens.BestDexByOrderParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"getBestDexByOrder\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBestDexLens.GetBestMultipleDexesReturnParams\",\"name\":\"firstAssetReturnParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBestDexLens.GetBestMultipleDexesReturnParams\",\"name\":\"depositInThirdAssetReturnParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBestDexLens.GetBestMultipleDexesReturnParams\",\"name\":\"depositToBorrowedReturnParams\",\"type\":\"tuple\"}],\"internalType\":\"struct IBestDexLens.GetBestDexByOrderReturnParams\",\"name\":\"_returnParams\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPositionManagerV2\",\"name\":\"_positionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dex\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"ancillaryData\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBestDexLens.DexWithAncillaryData[]\",\"name\":\"_dexesWithAncillaryData\",\"type\":\"tuple[]\"}],\"name\":\"getBestDexByPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBestDexLens.GetBestMultipleDexesReturnParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IPositionManagerV2\",\"name\":\"positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowedAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"positionAsset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"firstAssetShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositInThirdAssetShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositToBorrowedShares\",\"type\":\"uint256\"}],\"internalType\":\"struct IBestDexLens.Shares\",\"name\":\"shares\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dex\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"ancillaryData\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBestDexLens.DexWithAncillaryData[]\",\"name\":\"dexes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBestDexLens.BestDexForOpenablePositionParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"getBestDexForOpenablePosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBestDexLens.GetBestMultipleDexesReturnParams\",\"name\":\"_firstAssetReturnParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBestDexLens.GetBestMultipleDexesReturnParams\",\"name\":\"_depositInThirdAssetReturnParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBestDexLens.GetBestMultipleDexesReturnParams\",\"name\":\"_depositToBorrowedReturnParams\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IPositionManagerV2\",\"name\":\"positionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAmountToBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceInCheckedAsset\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dex\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"ancillaryData\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBestDexLens.DexWithAncillaryData[]\",\"name\":\"dexes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBestDexLens.GetBestMultipleDexesParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"getBestMultipleDexes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimateGasAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct PrimexPricingLibrary.Path[]\",\"name\":\"paths\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.Route[]\",\"name\":\"routes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PrimexPricingLibrary.MegaRoute[]\",\"name\":\"megaRoutes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBestDexLens.GetBestMultipleDexesReturnParams\",\"name\":\"_returnParams\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All functions in this contract are intended to be called off-chain. Do not call functions from other contracts to avoid an out-of-gas error.\",\"kind\":\"dev\",\"methods\":{\"getBestDexByOrder((address,address,uint256,(uint256,uint256,uint256),(string,bytes32)[],bytes,bytes[][],uint256[]))\":{\"params\":{\"_params\":\"The BestDexByOrderParams struct specifying the order parameters.\"},\"returns\":{\"_returnParams\":\"The GetBestDexByOrderReturnParams struct\"}},\"getBestDexByPosition(address,uint256,uint256,(string,bytes32)[])\":{\"details\":\"This function calculates the best DEX to use for a given position based on various parameters.\",\"params\":{\"_dexesWithAncillaryData\":\"An array of DEXes along with their ancillary data.\",\"_positionId\":\"The ID of the position.\",\"_positionManager\":\"The instance of the PositionManager contract.\",\"_shares\":\"The number of shares for dexes.\"},\"returns\":{\"_0\":\"A GetBestMultipleDexesReturnParams struct.\"}},\"getBestDexForOpenablePosition((address,address,uint256,address,uint256,address,(uint256,uint256,uint256),(string,bytes32)[]))\":{\"params\":{\"_params\":\"The parameters for the function.\"},\"returns\":{\"_depositInThirdAssetReturnParams\":\"The return parameters includes routes for converting a third asset (i.e. an asset which is not either underlying asset or position asset) to a position asset.\",\"_depositToBorrowedReturnParams\":\"The return parameters for converting deposit asset (which is a position asset or third asset) to borrowed asset (i.e. underlying asset).\",\"_firstAssetReturnParams\":\"The return parameters for the first asset.\"}},\"getBestMultipleDexes((address,address,address,uint256,bool,uint256,uint256,(string,bytes32)[]))\":{\"params\":{\"_params\":\"GetBestMultipleDexesParams params\"},\"returns\":{\"_returnParams\":\"- the array of best dexes at the moment to open a position with the specified parameters\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interface id to check\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBestDexByOrder((address,address,uint256,(uint256,uint256,uint256),(string,bytes32)[],bytes,bytes[][],uint256[]))\":{\"notice\":\"Selects the best dex to open position by order.\"},\"getBestDexByPosition(address,uint256,uint256,(string,bytes32)[])\":{\"notice\":\"Returns swap paths on best dexes, expected amount and estimateGasAmount.\"},\"getBestDexForOpenablePosition((address,address,uint256,address,uint256,address,(uint256,uint256,uint256),(string,bytes32)[]))\":{\"notice\":\"Returns the best DEXes for opening a position.\"},\"getBestMultipleDexes((address,address,address,uint256,bool,uint256,uint256,(string,bytes32)[]))\":{\"notice\":\"Selects the best multiple dexes to open a position\"},\"supportsInterface(bytes4)\":{\"notice\":\"Interface checker\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lens/BestDexLens.sol\":\"BestDexLens\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n\\n    /// @dev Emitted when a batch price update is processed successfully.\\n    /// @param chainId ID of the source chain that the batch price update comes from.\\n    /// @param sequenceNumber Sequence number of the batch price update.\\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\\n}\\n\",\"keccak256\":\"0x048a35526c2e77d107d43ba336f1dcf31f64cef25ba429ae1f7a0fbc11c23320\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Quoter Interface\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\ninterface IQuoter {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountIn The desired input amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountOut);\\n\\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\\n    /// @param amountOut The amount of the last token to receive\\n    /// @return amountIn The amount of first token required to be paid\\n    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\\n\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\n    /// @param tokenIn The token being swapped in\\n    /// @param tokenOut The token being swapped out\\n    /// @param fee The fee of the token pool to consider for the pair\\n    /// @param amountOut The desired output amount\\n    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\n    function quoteExactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x124b4334f058f70afd8f3b04315cc0812961d400957225d0875872b2a31afbff\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IActivityRewardDistributorStorage, IERC20, IPrimexDNSV3, ITraderBalanceVault} from \\\"./IActivityRewardDistributorStorage.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IActivityRewardDistributor is IActivityRewardDistributorStorage, IPausable {\\n    enum Role {\\n        LENDER,\\n        TRADER\\n    }\\n\\n    struct BucketWithRole {\\n        address bucketAddress;\\n        Role role;\\n    }\\n\\n    /**\\n     * @notice Emitted on claimReward()\\n     * @param user The address of the user who claimed reward\\n     * @param bucket The address of the bucket this reward is related to\\n     * @param role User role - TRADER or LENDER\\n     * @param amount Claimed amount\\n     */\\n    event ClaimReward(address indexed user, address indexed bucket, Role indexed role, uint256 amount);\\n\\n    /**\\n     * @notice  Initializes the ActivityRewardDistributor contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _pmx The address of the PMXToken contract.\\n     * @param _dns The address of the PrimexDNS contract.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _treasury The address of the treasury where fees will be collected.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IERC20 _pmx,\\n        IPrimexDNSV3 _dns,\\n        address _registry,\\n        address _treasury,\\n        ITraderBalanceVault _traderBalanceVault,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice  Saves user activity in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   user  User address\\n     * @param   newBalance  User balance after action\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUserActivity(IBucketV3 bucket, address user, uint256 newBalance, Role role) external;\\n\\n    /**\\n     * @notice  Saves activity of multiple users in the protocol for reward calculation\\n     * @param   bucket  The address of the bucket\\n     * @param   users  Array of user addresses\\n     * @param   newBalances  Array of users balances after action\\n     * @param   length  The length of the users and oldBalances arrays\\n     * @param   role  User role - TRADER or LENDER\\n     */\\n    function updateUsersActivities(\\n        IBucketV3 bucket,\\n        address[] calldata users,\\n        uint256[] calldata newBalances,\\n        uint256 length,\\n        Role role\\n    ) external;\\n\\n    /**\\n     * @notice Allows the caller to claim their accumulated reward from the specified buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets from which to claim the rewards.\\n     */\\n    function claimReward(BucketWithRole[] calldata bucketsArray) external;\\n\\n    /**\\n     * @notice Sets up activity rewards distribution in bucket with the specified role and reward parameters.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket to set up.\\n     * @param role The role associated with the bucket.\\n     * @param increaseAmount The amount by which to increase the total reward for the bucket (in PMX).\\n     * Adds specified amount to totalReward of the bucket. Initial value of totalReward is 0.\\n     * @param rewardPerDay The reward amount per day for the bucket.\\n     */\\n    function setupBucket(address bucket, Role role, uint256 increaseAmount, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Allows the caller to withdraw PMX tokens from a specific bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param bucket The address of the bucket from which to withdraw PMX tokens.\\n     * @param role The role associated with the bucket.\\n     * @param amount The amount of PMX tokens to withdraw.\\n     */\\n    function withdrawPmx(address bucket, Role role, uint256 amount) external;\\n\\n    /**\\n     * @notice Decreases the reward per day for a bucket and role.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param bucket The address of the bucket for which to decrease the reward per day.\\n     * @param role The role associated with the bucket.\\n     * @param rewardPerDay The amount by which to decrease the reward per day.\\n     */\\n    function decreaseRewardPerDay(address bucket, Role role, uint256 rewardPerDay) external;\\n\\n    /**\\n     * @notice Returns the accumulated reward for a specific bucket and role.\\n     * @param bucket The address of the bucket for which to retrieve the accumulated reward.\\n     * @param role The role associated with the bucket.\\n     * @return The accumulated reward for the specified bucket and role.\\n     */\\n    function getBucketAccumulatedReward(address bucket, Role role) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the claimable reward for a user across multiple buckets.\\n     * @param bucketsArray The array of BucketWithRole objects containing the buckets to check for claimable rewards.\\n     * @param user The address of the user for whom to calculate the claimable reward.\\n     * @return The total claimable reward for the specified user across all provided buckets.\\n     */\\n    function getClaimableReward(BucketWithRole[] calldata bucketsArray, address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the user information from a specific bucket and role.\\n     * @param bucket The address of the bucket from which to retrieve the user information.\\n     * @param role The role associated with the bucket.\\n     * @param user The address of the user for whom to retrieve the information.\\n     * @return A UserInfo struct containing the user information.\\n     */\\n    function getUserInfoFromBucket(address bucket, Role role, address user) external view returns (UserInfo memory);\\n}\\n\",\"keccak256\":\"0xeec30381ae5c694a65a51d831704f2f2d9a969ae6c7ff1901a89c1bc2e668cb3\",\"license\":\"BUSL-1.1\"},\"contracts/ActivityRewardDistributor/IActivityRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface IActivityRewardDistributorStorage {\\n    /*\\n     * @param oldBalance last updated balance for user\\n     * @param fixedReward the accumulated value of the reward at the time lastUpdatedRewardIndex\\n     * @param lastUpdatedRewardIndex last index with which the user's reward was accumulated\\n     */\\n    struct UserInfo {\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardIndex;\\n        uint256 oldBalance;\\n    }\\n\\n    /*\\n     * @param users data to calculate users rewards in this bucket\\n     * @param rewardIndex an index that accumulates user rewards\\n     * @param lastUpdatedTimestamp timestamp of the last update of user activity\\n     * @param rewardPerToken current reward for one token(PToken or DebtToken of bucket)\\n     * @param isFinished Shows that the bucket has distributed all the rewards\\n     * @param fixedReward reward distributed by a bucket over the past period\\n     * with a certain reward per day or with the entire reward fully distributed\\n     * @param lastUpdatedRewardTimestamp timestamp of last fixed reward update\\n     * @param rewardPerDay current reward distributed for 1 day\\n     * @param totalReward Full distributable reward\\n     * @param endTimestamp end time of the distribution of rewards, which is calculated relative to the rewardPerDay and totalReward\\n     */\\n    struct BucketInfo {\\n        mapping(address => UserInfo) users;\\n        //accumulated reward per token\\n        uint256 rewardIndex;\\n        uint256 lastUpdatedTimestamp;\\n        uint256 rewardPerToken;\\n        uint256 scaledTotalSupply;\\n        bool isFinished;\\n        // setted by admin's actions\\n        uint256 fixedReward;\\n        uint256 lastUpdatedRewardTimestamp;\\n        uint256 rewardPerDay;\\n        uint256 totalReward;\\n        uint256 endTimestamp;\\n    }\\n\\n    function pmx() external returns (IERC20);\\n\\n    function dns() external returns (IPrimexDNSV3);\\n\\n    function registry() external returns (address);\\n\\n    function traderBalanceVault() external returns (ITraderBalanceVault);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc93484ae76ebd5ec509e1fb1b5efee69159abcbee241f97c04579770d0573287\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IFeeExecutorStorage} from \\\"./IFeeExecutorStorage.sol\\\";\\n\\ninterface IFeeExecutor is IFeeExecutorStorage {\\n    /**\\n     * @dev Sets tier bonuses for a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @param _tiers The array of tier values.\\n     * @param _bonuses The array of NFT bonus parameters.\\n     */\\n    function setTierBonus(address _bucket, uint256[] calldata _tiers, NFTBonusParams[] calldata _bonuses) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the Debt-Token\\n     * @param _user User for which the bonus will be updated. If user doesn't have the bonus for paused\\n     * @param _oldScaledBalance Balance of the user before the operation at which the updateBonus function was called (e.g mint/burn)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonus(address _user, uint256 _oldScaledBalance, address _bucket, uint256 _currentIndex) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called directly by the user\\n     * @param _nftId Id of activated token\\n     **/\\n    function updateBonus(uint256 _nftId) external;\\n\\n    /**\\n     * @dev Updates the accumulatedAmount and the lastUpdatedIndex of the existing ActivatedBonus. Called by the P-Token or Debt-Token\\n     * @param _users Array of the users for whom the bonus will be updated.\\n     * @param _oldBalances Array of the balances before the operation at which the updateBonus function was called (e.g mint/transfer)\\n     * @param _bucket The Bucket to which the ActivatedBonus relates\\n     **/\\n    function updateBonuses(\\n        address[] memory _users,\\n        uint256[] memory _oldBalances,\\n        address _bucket,\\n        uint256 _currentIndex\\n    ) external;\\n\\n    /**\\n     * @dev Returns accumulated amount of p-tokens at the moment\\n     * @param _user The user for which the accumatedAmount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     * @return The accumulated amount.\\n     */\\n    function getAccumulatedAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the available amount (accumulated - claimedAmount) of p-tokens at the moment.\\n     * @param _user The user for which the available amount will return. If the bonus does not exist will return 0.\\n     * If the NFT does not exist will throw an error\\n     * @param _nftId Id of activated token\\n     **/\\n    function getAvailableAmount(address _user, uint256 _nftId) external returns (uint256);\\n\\n    /**\\n     * @dev Retrieves the bonus information for a user and NFT.\\n     * @param _user The address of the user.\\n     * @param _nftId The ID of the NFT.\\n     * @return bonus The activated bonus information.\\n     */\\n    function getBonus(address _user, uint256 _nftId) external view returns (ActivatedBonus memory);\\n}\\n\",\"keccak256\":\"0x53e9c9edcec4c00b7cbac171770da68af43b39a4c7a36d1813c3ea03588e81e1\",\"license\":\"BUSL-1.1\"},\"contracts/BonusExecutor/IFeeExecutorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\n\\ninterface IFeeExecutorStorage {\\n    struct ActivatedBonus {\\n        uint256 nftId;\\n        IBucketV3 bucket;\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 accumulatedAmount;\\n        uint256 lastUpdatedIndex;\\n        uint256 deadline;\\n        //if we allow to claim funds before the end of the bonus\\n        uint256 claimedAmount;\\n    }\\n\\n    struct NFTBonusParams {\\n        uint256 percent;\\n        uint256 maxAmount;\\n        uint256 duration;\\n    }\\n}\\n\",\"keccak256\":\"0x0e7e8db0434b1c208e47cea395f710edbbcf70bc97d4ce363a8b9c36a8a91205\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucket.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManager, IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNS, IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\nimport {ISwapManager} from \\\"../SwapManager/ISwapManager.sol\\\";\\nimport {IBucketStorage} from \\\"./IBucketStorage.sol\\\";\\nimport {IBucketEvents} from \\\"./IBucketEvents.sol\\\";\\n\\ninterface IBucket is IBucketStorage, IBucketEvents {\\n    struct ConstructorParams {\\n        string name;\\n        IPToken pToken;\\n        IDebtToken debtToken;\\n        IPositionManager positionManager;\\n        IPriceOracle priceOracle;\\n        IPrimexDNS dns;\\n        IReserve reserve;\\n        IWhiteBlackList whiteBlackList;\\n        address[] assets;\\n        IERC20Metadata borrowedAsset;\\n        uint256 feeBuffer;\\n        uint256 withdrawalFeeRate;\\n        uint256 reserveRate;\\n        // liquidityMining params\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        uint256 liquidityMiningAmount;\\n        uint256 liquidityMiningDeadline;\\n        uint256 stabilizationDuration;\\n        IInterestRateStrategy interestRateStrategy;\\n        uint128 estimatedBar;\\n        uint128 estimatedLar;\\n        uint256 maxAmountPerUser;\\n        bool isReinvestToAaveEnabled;\\n        bytes barCalcParams;\\n        uint256 maxTotalDeposit;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed pTokenReceiver, uint256 amount);\\n\\n    event DepositToAave(address indexed pool, uint256 amount);\\n\\n    event FeeBufferChanged(uint256 feeBuffer);\\n\\n    event ReserveRateChanged(uint256 reserveRate);\\n\\n    event RatesIndexesUpdated(\\n        uint128 bar,\\n        uint128 lar,\\n        uint128 variableBorrowIndex,\\n        uint128 liquidityIndex,\\n        uint256 timestamp\\n    );\\n\\n    event WithdrawalFeeChanged(uint256 withdrawalFeeRate);\\n\\n    event InterestRateStrategyChanged(address interestRateStrategy);\\n\\n    event AddAsset(address addedAsset);\\n\\n    event RemoveAsset(address deletedAsset);\\n\\n    event MaxTotalDepositChanged(uint256 maxTotalDeposit);\\n\\n    event BarCalculationParamsChanged(bytes params);\\n\\n    event BucketLaunched();\\n\\n    /**\\n     * @dev Initializes the contract with the given parameters.\\n     * @param _params The ConstructorParams struct containing initialization parameters.\\n     * @param _registry The address of the registry contract.\\n     */\\n    function initialize(ConstructorParams memory _params, address _registry) external;\\n\\n    /**\\n     * @dev Function to add new trading asset for this bucket\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _newAsset The address of trading asset\\n     */\\n    function addAsset(address _newAsset) external;\\n\\n    /**\\n     * @notice Removes a trading asset from this bucket.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _assetToDelete The address of the asset to be removed.\\n     */\\n    function removeAsset(address _assetToDelete) external;\\n\\n    /**\\n     * @dev Sets barCalculationParams (urOptimal, k0, k1, b0, b1)\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Sets the reserve rate.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _reserveRate The new reserve rate value.\\n     */\\n    function setReserveRate(uint256 _reserveRate) external;\\n\\n    /**\\n     * @dev Sets the new fee buffer.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _feeBuffer The new fee buffer value.\\n     */\\n    function setFeeBuffer(uint256 _feeBuffer) external;\\n\\n    /**\\n     * @dev Sets the withdrawal fee.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _withdrawalFee The new withdrawal fee value.\\n     */\\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\\n\\n    /**\\n     * @dev Sets the interest rate strategy contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _interestRateStrategy The address of the interest rate strategy contract.\\n     */\\n    function setInterestRateStrategy(address _interestRateStrategy) external;\\n\\n    /**\\n     * @notice The function sets the max total deposit for the particular bucket\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _maxTotalDeposit The amount of max total deposit for the bucket\\n     */\\n    function setMaxTotalDeposit(uint256 _maxTotalDeposit) external;\\n\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraws the 'amount' of underlying asset from the bucket. The 'amount' of overlying pTokens will be burned.\\n     * @param _borrowAssetReceiver The address of receiver of the borrowed asset.\\n     * @param amount The amount of underlying tokens to be withdrawn.\\n     */\\n    function withdraw(address _borrowAssetReceiver, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the BIG_TIMELOCK_ADMIN role to withdraw a specified amount of tokens after delisting.\\n     * @param _amount The amount of tokens to withdraw.\\n     */\\n    function withdrawAfterDelisting(uint256 _amount) external;\\n\\n    /**\\n     * @dev Receives a deposit and distributes it to the specified pToken receiver.\\n     * @dev Can be called only by another bucket.\\n     * @param _pTokenReceiver The address of the recipient of the pToken.\\n     * @param _amount The amount of tokens being deposited.\\n     * @param _duration The blocking time for a fixed-term deposit (if it's 0, then it will be a usual deposit)\\n     * @param _bucketFrom The name of the bucket from which the deposit is being made.\\n     */\\n    function receiveDeposit(\\n        address _pTokenReceiver,\\n        uint256 _amount,\\n        uint256 _duration,\\n        string memory _bucketFrom\\n    ) external;\\n\\n    /**\\n     * @notice Deposits (reinvests) funds from a bucket to another bucket.\\n     * Used only in the case of failed liquidity mining in the bucket from where the transfer happens.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _swapManager The address of the swap manager.\\n     * @param _megaRoutes The array of routes for swapping tokens.\\n     * @param _amountOutMin The minimum amount of tokens to receive from the swap.\\n     */\\n    function depositFromBucket(\\n        string calldata _bucketTo,\\n        ISwapManager _swapManager,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @dev Allows the SMALL_TIMELOCK_ADMIN to withdraw all liquidity from Aave to Bucket.\\n     */\\n    function returnLiquidityFromAaveToBucket() external;\\n\\n    /**\\n     * @dev Function to update rates and indexes when a trader opens a trading position.\\n     * Mints debt tokens to trader. Calls only by positionManager contract.\\n     * @param _trader The address of the trader, who opens position.\\n     * @param _amount The 'amount' for which the deal is open, and 'amount' of debtTokens will be minted to the trader.\\n     * @param _to The address to transfer the borrowed asset to.\\n     */\\n\\n    function increaseDebt(address _trader, uint256 _amount, address _to) external;\\n\\n    /**\\n     * @dev Function to update rates and indexes.\\n     * Burns debt tokens of trader. Called only by positionManager contract.\\n     * @param _trader The address of the trader, who opened position.\\n     * @param _debtToBurn The 'amount' of trader's debtTokens will be burned by the trader.\\n     * @param _receiverOfAmountToReturn Treasury in case of liquidation. TraderBalanceVault in other cases\\n     * @param _amountToReturn Amount to transfer from bucket\\n     * @param _permanentLossAmount The amount of the protocol's debt to creditors accrued for this position\\n     */\\n    function decreaseTraderDebt(\\n        address _trader,\\n        uint256 _debtToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount\\n    ) external;\\n\\n    /**\\n     * @notice Batch decreases the debt of multiple traders.\\n     * @dev This function can only be called by the BATCH_MANAGER_ROLE.\\n     * @param _traders An array of addresses representing the traders.\\n     * @param _debtsToBurn An array of uint256 values representing the debts to burn for each trader.\\n     * @param _receiverOfAmountToReturn The address that will receive the amount to be returned.\\n     * @param _amountToReturn The amount to be returned.\\n     * @param _permanentLossAmount The amount of permanent loss.\\n     * @param _length The length of the traders array.\\n     */\\n    function batchDecreaseTradersDebt(\\n        address[] memory _traders,\\n        uint256[] memory _debtsToBurn,\\n        address _receiverOfAmountToReturn,\\n        uint256 _amountToReturn,\\n        uint256 _permanentLossAmount,\\n        uint256 _length\\n    ) external;\\n\\n    /**\\n     * @notice This function allows a user to pay back a permanent loss by burning his pTokens.\\n     * @param amount The amount of pTokens to be burned to pay back the permanent loss.\\n     */\\n    function paybackPermanentLoss(uint256 amount) external;\\n\\n    /**\\n     * @dev Calculates the permanent loss based on the scaled permanent loss and the normalized income.\\n     * @return The amount of permanent loss.\\n     */\\n    function permanentLoss() external view returns (uint256);\\n\\n    /**\\n     * @dev Checks if the bucket is deprecated in the protocol.\\n     * @return Whether the bucket is deprecated or not.\\n     */\\n    function isDeprecated() external view returns (bool);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is delisted.\\n     * @return True if the bucket is delisted, otherwise false.\\n     */\\n    function isDelisted() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if an admin can withdraw from the bucket after delisting.\\n     * @return A boolean indicating whether withdrawal is available.\\n     */\\n    function isWithdrawAfterDelistingAvailable() external view returns (bool);\\n\\n    /**\\n     * @dev Checks if this bucket is active in the protocol.\\n     * @return bool True if the bucket is active, false otherwise.\\n     */\\n    function isActive() external view returns (bool);\\n\\n    /**\\n     * @dev Returns the parameters for liquidity mining.\\n     * @return LMparams The liquidity mining parameters.\\n     */\\n    function getLiquidityMiningParams() external view returns (LiquidityMiningParams memory);\\n\\n    /**\\n     * @dev Returns a boolean value indicating whether the bucket is stable in the liquidity mining event.\\n     * @return A boolean value representing the stability of the bucket.\\n     */\\n    function isBucketStable() external view returns (bool);\\n\\n    /**\\n     * @dev Calculates the max leverage according to the following formula:\\n     * ((1 + maintenanceBuffer) * feeBuffer) / ((1 + maintenanceBuffer) * feeBuffer - (1 - securityBuffer) *\\n     * (1 - pairPriceDropBA) * (1 - oracleTolerableLimitAB) * (1 - oracleTolerableLimitBA))\\n     * @param _asset The address of trading asset\\n     * @return The maximum leverage as a uint256 value.\\n     */\\n    function maxAssetLeverage(address _asset) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized income per unit of underlying asset, expressed in ray\\n     * @return The normalized income per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedIncome() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of underlying asset, expressed in ray\\n     */\\n    function getNormalizedVariableDebt() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns allowed trading assets for current bucket\\n     * @return List of addresses of allowed assets\\n     */\\n    function getAllowedAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns current avalable liquidity of borrowedAsset for trading.\\n     * @return The amount of available borrowedAsset\\n     */\\n    function availableLiquidity() external view returns (uint256);\\n}\\n\\ninterface IBucketV2 is IBucket {\\n    /**\\n     * @dev Deposits the 'amount' of underlying asset into the bucket. The 'PTokenReceiver' receives overlying pTokens.\\n     * @param _pTokenReceiver The address to receive the deposited pTokens.\\n     * @param _amount The amount of underlying tokens to be deposited\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit from user wallet\\n     */\\n    function deposit(address _pTokenReceiver, uint256 _amount, bool _takeDepositFromWallet) external;\\n}\\n\\ninterface IBucketV3 is IBucketV2 {\\n    event ChangedBucketExtension(address newBucketExtension);\\n\\n    /**\\n     * @dev Calculates the max leverage according to the following formula:\\n     * ((1 + maintenanceBuffer) * feeBuffer) / ((1 + maintenanceBuffer) * feeBuffer - (1 - securityBuffer) *\\n     * (1 - pairPriceDropBA) * (1 - oracleTolerableLimitAB) * (1 - oracleTolerableLimitBA) + protocolFeeInPositiontAsset / positionSize)\\n     * @param _asset The address of trading asset\\n     * @param _feeRate The ratio of protocolFeeInPositionAsset to positionSize\\n     * @return The maximum leverage as a uint256 value.\\n     */\\n    function maxAssetLeverage(address _asset, uint256 _feeRate) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the bucketExtension.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newBucketExtension The address of BucketExtension contract.\\n     */\\n    function setBucketExtension(address _newBucketExtension) external;\\n}\\n\\ninterface IBucketV4 is IBucketV3 {\\n    /**\\n     * @notice Performs a flash loan transfer of a specified amount to a receiver address.\\n     * @dev Only callable by the FLASH_LOAN_MANAGER_ROLE role.\\n     * @param _to The address to which the flash loan amount will be transferred.\\n     * @param _amount The amount of tokens to transfer in the flash loan.\\n     */\\n    function performFlashLoanTransfer(address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Accumulates a predefined amount of asset to the bucket as a fixed, instantaneous income. Used\\n     * to accumulate the flashloan fee to the bucket, and spread it between all the suppliers.\\n     * @dev Only callable by the FLASH_LOAN_MANAGER_ROLE role.\\n     * @param amount The amount to accumulate\\n     * @param availableLiquidity The availableLiquidity before flashLoan\\n     */\\n    function cumulateToLiquidityIndex(uint256 amount, uint256 availableLiquidity) external;\\n\\n    /**\\n     * @notice Updates bucket's BAR and LAR.\\n     * @dev Only callable by the FLASH_LOAN_MANAGER_ROLE role.\\n     */\\n    function updateRates() external;\\n}\\n\",\"keccak256\":\"0x2b9127c5ba8e7c9ceb708d1490b85d8c3552fd05d531a74df8ad5dae8e9ec5e3\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucketEvents.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IBucketEvents {\\n    event WithdrawFromAave(address indexed pool, uint256 amount);\\n    event Withdraw(address indexed withdrawer, address indexed borrowAssetReceiver, uint256 amount);\\n    event TopUpTreasury(address indexed sender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xefe6ff5ba4275599f84dff3e9accda189d62681a99c2851a843925c287a045ba\",\"license\":\"BUSL-1.1\"},\"contracts/Bucket/IBucketStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {IPToken} from \\\"../PToken/IPToken.sol\\\";\\nimport {IDebtToken} from \\\"../DebtToken/IDebtToken.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserve} from \\\"../Reserve/IReserve.sol\\\";\\nimport {ILiquidityMiningRewardDistributor} from \\\"../LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {IInterestRateStrategy} from \\\"../interfaces/IInterestRateStrategy.sol\\\";\\n\\ninterface IBucketStorage {\\n    /**\\n     * @dev Parameters of liquidity mining\\n     */\\n    struct LiquidityMiningParams {\\n        ILiquidityMiningRewardDistributor liquidityMiningRewardDistributor;\\n        bool isBucketLaunched;\\n        uint256 accumulatingAmount;\\n        uint256 deadlineTimestamp;\\n        uint256 stabilizationDuration;\\n        uint256 stabilizationEndTimestamp;\\n        uint256 maxAmountPerUser; // if maxAmountPerUser is >= accumulatingAmount then check on maxAmountPerUser is off\\n        // Constant max variables are used for calculating users' points.\\n        // These intervals are used for fair distribution of points among Lenders.\\n        // Lenders who brought liquidity earlier receive more than the ones who deposited later.\\n        // To get maximum points per token, a Lender should deposit immediately after the Bucket deployment.\\n        uint256 maxDuration;\\n        uint256 maxStabilizationEndTimestamp;\\n    }\\n    //                                        1. Corner case of bucket launch\\n    //\\n    //                                              maxDuration\\n    //       ------------------------------------------------------------------------------------------------\\n    //      |                                                                                               |\\n    //      |                                                                        stabilizationDuration  |\\n    //      |                                                                      -------------------------|\\n    //      |                                                                     | bucket launch           |\\n    //   +--+---------------------------------------------------------------------+-------------------------+------> time\\n    //      bucket deploy                                                         deadlineTimestamp         maxStabilizationEndTimestamp\\n    //                                                                                                       (=stabilizationEndTimestamp here)\\n    //                                  (corner case of bucket launch)\\n\\n    //                                        2. One of cases of bucket launch\\n    //\\n    //      |                     stabilizationDuration\\n    //      |                   -------------------------\\n    //      |                  |                         |\\n    //   +--+------------------+-------------------------+------------------------+-------------------------+------> time\\n    //      bucket deploy      bucket launch            stabilizationEndTimestamp  deadlineTimestamp        maxStabilizationEndTimestamp\\n    //                                                                            (after deadline bucket can't be launched)\\n\\n    struct Asset {\\n        uint256 index;\\n        bool isSupported;\\n    }\\n\\n    function liquidityIndex() external returns (uint128);\\n\\n    function variableBorrowIndex() external returns (uint128);\\n\\n    function name() external view returns (string memory);\\n\\n    function registry() external view returns (address);\\n\\n    function positionManager() external view returns (IPositionManagerV2);\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function permanentLossScaled() external view returns (uint256);\\n\\n    function pToken() external view returns (IPToken);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowedAsset() external view returns (IERC20Metadata);\\n\\n    function feeBuffer() external view returns (uint256);\\n\\n    function withdrawalFeeRate() external view returns (uint256);\\n\\n    /**\\n     * @notice bar = borrowing annual rate (originally APR)\\n     */\\n    function bar() external view returns (uint128);\\n\\n    /**\\n     * @notice lar = lending annual rate (originally APY)\\n     */\\n    function lar() external view returns (uint128);\\n\\n    function interestRateStrategy() external view returns (IInterestRateStrategy);\\n\\n    function estimatedBar() external view returns (uint128);\\n\\n    function estimatedLar() external view returns (uint128);\\n\\n    function allowedAssets(address _asset) external view returns (uint256, bool);\\n\\n    function whiteBlackList() external view returns (IWhiteBlackList);\\n\\n    function maxTotalDeposit() external view returns (uint256);\\n}\\n\\ninterface IBucketStorageV2 {\\n    function bucketExtension() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d992b76b9281db2418f75de141b8f002edb793224bbe265decd3433bc2fce3a\",\"license\":\"BUSL-1.1\"},\"contracts/Constants.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\nimport {IArbGasInfo} from \\\"./interfaces/IArbGasInfo.sol\\\";\\nimport {IOVM_GasPriceOracle} from \\\"./interfaces/IOVM_GasPriceOracle.sol\\\";\\n\\n// admin roles\\nbytes32 constant BIG_TIMELOCK_ADMIN = 0x00; // It's primary admin.\\nbytes32 constant MEDIUM_TIMELOCK_ADMIN = keccak256(\\\"MEDIUM_TIMELOCK_ADMIN\\\");\\nbytes32 constant SMALL_TIMELOCK_ADMIN = keccak256(\\\"SMALL_TIMELOCK_ADMIN\\\");\\nbytes32 constant EMERGENCY_ADMIN = keccak256(\\\"EMERGENCY_ADMIN\\\");\\nbytes32 constant GUARDIAN_ADMIN = keccak256(\\\"GUARDIAN_ADMIN\\\");\\nbytes32 constant NFT_MINTER = keccak256(\\\"NFT_MINTER\\\");\\nbytes32 constant TRUSTED_TOLERABLE_LIMIT_ROLE = keccak256(\\\"TRUSTED_TOLERABLE_LIMIT_ROLE\\\");\\n\\n// inter-contract interactions roles\\nbytes32 constant NO_FEE_ROLE = keccak256(\\\"NO_FEE_ROLE\\\");\\nbytes32 constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\nbytes32 constant PM_ROLE = keccak256(\\\"PM_ROLE\\\");\\nbytes32 constant LOM_ROLE = keccak256(\\\"LOM_ROLE\\\");\\nbytes32 constant BATCH_MANAGER_ROLE = keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_MANAGER_ROLE = keccak256(\\\"FLASH_LOAN_MANAGER_ROLE\\\");\\nbytes32 constant FLASH_LOAN_FREE_BORROWER_ROLE = keccak256(\\\"FLASH_LOAN_FREE_BORROWER_ROLE\\\");\\n\\n// token constants\\naddress constant NATIVE_CURRENCY = address(uint160(bytes20(keccak256(\\\"NATIVE_CURRENCY\\\"))));\\naddress constant USD = 0x0000000000000000000000000000000000000348;\\naddress constant NATIVE_CURRENCY_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\nuint256 constant USD_MULTIPLIER = 10 ** (18 - 8); // usd decimals in chainlink is 8\\nuint8 constant MAX_ASSET_DECIMALS = 18;\\n\\n// time constants\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_DAY = 1 days;\\nuint256 constant HOUR = 1 hours;\\nuint256 constant TEN_WAD = 10 ether;\\n\\n// constants for Arbitrum payment model\\nIArbGasInfo constant ARB_NITRO_ORACLE = IArbGasInfo(0x000000000000000000000000000000000000006C);\\nuint256 constant TRANSACTION_METADATA_BYTES = 140;\\n\\nIOVM_GasPriceOracle constant OVM_GASPRICEORACLE = IOVM_GasPriceOracle(0x420000000000000000000000000000000000000F);\\n\\nuint256 constant GAS_FOR_BYTE = 16;\\n\",\"keccak256\":\"0x877c0b0df911dc5658c824d17ca011aa9480696630e326a4f1a046d2db4f2ea1\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtToken.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IDebtTokenStorage, IBucket, IFeeExecutor, IERC20Upgradeable, IActivityRewardDistributor} from \\\"./IDebtTokenStorage.sol\\\";\\n\\ninterface IDebtToken is IDebtTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     **/\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after DebtTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     **/\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the FeeDecreaser for current DebtToken.\\n     * @param _feeDecreaser The interest increaser address.\\n     */\\n    function setFeeDecreaser(IFeeExecutor _feeDecreaser) external;\\n\\n    /**\\n     * @dev Sets the trader reward distributor contract address.\\n     * @param _traderRewardDistributor The address of the trader reward distributor contract.\\n     * Only the BIG_TIMELOCK_ADMIN role can call this function.\\n     */\\n    function setTraderRewardDistributor(IActivityRewardDistributor _traderRewardDistributor) external;\\n\\n    /**\\n     * @dev Mints `amount` DebtTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current variableBorrowIndex\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns DebtTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the DebtTokens, getting them burned\\n     * @param _amount The amount being burned\\n     * @param _index The current variableBorrowIndex\\n     **/\\n    function burn(address _user, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns a batch of tokens from multiple users.\\n     * @param _users An array of user addresses whose tokens will be burned.\\n     * @param _amounts An array of token amounts to be burned for each user.\\n     * @param _index The index used to calculate the scaled amounts.\\n     * @param _length The length of the user and amounts arrays.\\n     */\\n    function batchBurn(address[] memory _users, uint256[] memory _amounts, uint256 _index, uint256 _length) external;\\n\\n    /**\\n     * @dev Returns the principal debt balance of the user\\n     * @param _user The address of the user.\\n     * @return The scaled balance of the user.\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled total supply of debtToken.\\n     * @return The scaled total supply of the debtToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xeb40ae51d2d32f11c8db3712dadffb01789ef30e2cb92643f707afcdc2223af1\",\"license\":\"BUSL-1.1\"},\"contracts/DebtToken/IDebtTokenStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {IBucket, IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IDebtTokenStorage is IERC20Upgradeable {\\n    function bucket() external view returns (IBucketV3);\\n\\n    function feeDecreaser() external view returns (IFeeExecutor);\\n\\n    function traderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0x3839c065a8b034a56bcaf23d06be78df5d042f699944d5435d202eddab39e6ef\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorStorageV2} from \\\"./IKeeperRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IKeeperRewardDistributorV3 is IKeeperRewardDistributorStorageV2, IPausable {\\n    struct DecreasingGasByReasonParams {\\n        DecreasingReason reason;\\n        uint256 amount;\\n    }\\n    struct MaxGasPerPositionParams {\\n        KeeperActionType actionType;\\n        KeeperActionRewardConfig config;\\n    }\\n\\n    /**\\n     * @dev     Params for initialize() function\\n     * @param   priceOracle Address of the PriceOracle contract\\n     * @param   registry Address of the Registry contract\\n     * @param   pmx Address of PMXToken\\n     * @param   treasury Address of the Treasury contract\\n     * @param   pmxPartInReward Percentage of PMX in reward (in WAD)\\n     * @param   nativePartInReward  Percentage of native token in reward (in WAD)\\n     * @param   positionSizeCoefficient The reward param which is needed to calculate rewards, in WAD\\n     * @param   additionalGas Additional gas added to actual gas spent\\n     * @param   defaultMaxGasPrice Max gas price allowed during reward calculation (used when no oracle price found)\\n     * @param   oracleGasPriceTolerance Percentage by which oracle gas price can be exceeded (in WAD)\\n     * @param   paymentModel The model of payment for gas in the network\\n     * @param   maxGasPerPositionParams Parameters for the setMaxGasPerPosition function\\n     * @param   decreasingGasByReasonParams Parameters for the setDecreasingGasByReason function\\n     */\\n    struct InitParams {\\n        address priceOracle;\\n        address registry;\\n        address pmx;\\n        address treasury;\\n        address whiteBlackList;\\n        uint256 pmxPartInReward;\\n        uint256 nativePartInReward;\\n        uint256 positionSizeCoefficient;\\n        uint256 additionalGas;\\n        uint256 defaultMaxGasPrice;\\n        uint256 oracleGasPriceTolerance;\\n        PaymentModel paymentModel;\\n        MaxGasPerPositionParams[] maxGasPerPositionParams;\\n        DecreasingGasByReasonParams[] decreasingGasByReasonParams;\\n    }\\n\\n    event ClaimFees(address indexed keeper, address indexed asset, uint256 amount);\\n    event DefaultMaxGasPriceChanged(uint256 indexed defaultMaxGasPrice);\\n    event OracleGasPriceToleranceChanged(uint256 indexed oracleGasPriceTolerance);\\n    event MaxGasPerPositionChanged(KeeperActionType indexed actionType, KeeperActionRewardConfig config);\\n    event DataLengthRestrictionsChanged(KeeperCallingMethod callingMethod, uint256 maxRoutesLength, uint256 baseLength);\\n    event DecreasingGasByReasonChanged(DecreasingReason indexed reason, uint256 amount);\\n    event PmxPartInRewardChanged(uint256 indexed pmxPartInReward);\\n    event NativePartInRewardChanged(uint256 indexed nativePartInReward);\\n    event PositionSizeCoefficientChanged(uint256 indexed positionSizeCoefficient);\\n    event AdditionalGasChanged(uint256 indexed additionalGas);\\n    event KeeperRewardUpdated(address indexed keeper, uint256 rewardInPmx, uint256 rewardInNativeCurrency);\\n    event MinPositionSizeAddendChanged(uint256 newMinPositionSizeAddend);\\n    event OptimisticGasCoefficientChanged(uint256 newOptimismGasCoefficient);\\n\\n    /**\\n     * @notice Initializes the KeeperRewardDistributor contract.\\n     * @param _params  Parameters for initialization\\n     */\\n    function initialize(InitParams calldata _params) external;\\n\\n    /**\\n     * @dev Params for the updateReward function\\n     * @param keeper  Address of the keeper\\n     * @param positionAsset  Address of the position asset\\n     * @param positionSize  Size of the position\\n     * @param action  The action that was performed by the keeper\\n     * @param numberOfActions  Number of actions performed by the keeper\\n     * @param gasSpent Gas spent on executing transaction\\n     * @param decreasingCounter An array where each index contains the number of decreasing reasons according to the DecreasingReason enum\\n     * @param routesLength  The length of routes provided as input to the protocol function,\\n     * subject to an additional commission in the ARBITRUM payment model.\\n     */\\n\\n    struct UpdateRewardParams {\\n        address keeper;\\n        address positionAsset;\\n        uint256 positionSize;\\n        KeeperActionType action;\\n        uint256 numberOfActions;\\n        uint256 gasSpent;\\n        uint256[] decreasingCounter;\\n        uint256 routesLength;\\n        bytes nativePmxOracleData;\\n        bytes positionNativeAssetOracleData;\\n    }\\n\\n    /**\\n     * @notice Updates reward for keeper for closing position or executing order\\n     * @dev Only callable by the PM_ROLE, LOM_ROLE, BATCH_MANAGER_ROLE roles.\\n     * @param _params The UpdateRewardParams params\\n     */\\n    function updateReward(UpdateRewardParams calldata _params) external;\\n\\n    /**\\n     * @notice Claims earned reward of the keeper\\n     * @param _pmxAmount  Amount of PMX token to claim\\n     * @param _nativeAmount  Amount of native token to claim\\n     */\\n    function claim(uint256 _pmxAmount, uint256 _nativeAmount) external;\\n\\n    /**\\n     * @notice Sets the default maximum gas price allowed.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _defaultMaxGasPrice The new default maximum gas price value.\\n     */\\n    function setDefaultMaxGasPrice(uint256 _defaultMaxGasPrice) external;\\n\\n    /**\\n     * @notice Sets the amount of gas to be removed for the specified reason\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _reason The reason for which an amount is set\\n     * @param _amount Gas amount.\\n     */\\n    function setDecreasingGasByReason(DecreasingReason _reason, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the KeeperActionRewardConfig for the specified action type\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _actionType The action type for which the config is set\\n     * @param _config The KeeperActionRewardConfig struct\\n     */\\n\\n    function setMaxGasPerPosition(KeeperActionType _actionType, KeeperActionRewardConfig calldata _config) external;\\n\\n    /**\\n     * @notice Sets the dataLengthRestrictions for the specified KeeperCallingMethod.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _callingMethod The calling method for which dataLengthRestrictions is set\\n     * @param _maxRoutesLength The maximum routes length for which an additional fee will be paid in the ARBITRUM payment model, in bytes\\n     * @param _baseLength The length of the data entering the protocol function including method signature\\n     * and excluding dynamic types(e.g, routesLength), in bytes\\n     */\\n    function setDataLengthRestrictions(\\n        KeeperCallingMethod _callingMethod,\\n        uint256 _maxRoutesLength,\\n        uint256 _baseLength\\n    ) external;\\n\\n    /**\\n     * @notice Sets the tolerance for gas price fluctuations from the oracle price.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _oracleGasPriceTolerance The new oracle gas price tolerance value (percent expressed as WAD).\\n     */\\n    function setOracleGasPriceTolerance(uint256 _oracleGasPriceTolerance) external;\\n\\n    /**\\n     * @notice Sets the PMX token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _pmxPartInReward The new PMX token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setPmxPartInReward(uint256 _pmxPartInReward) external;\\n\\n    /**\\n     * @notice Sets the native token's portion in the reward calculation.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _nativePartInReward The new native token's portion in the reward calculation (percent expressed as WAD).\\n     */\\n    function setNativePartInReward(uint256 _nativePartInReward) external;\\n\\n    /**\\n     * @notice Sets the position size coefficients for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _positionSizeCoefficient The new positionSizeCoefficient value (in WAD).\\n     */\\n    function setPositionSizeCoefficient(uint256 _positionSizeCoefficient) external;\\n\\n    /**\\n     * @notice Sets the additional gas value for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _additionalGas The new additionalGas value.\\n     */\\n    function setAdditionalGas(uint256 _additionalGas) external;\\n\\n    /**\\n     * @notice Sets the minPositionSizeAddend for reward calculations.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _minPositionSizeAddend The new minPositionSizeAddend value (in WAD).\\n     */\\n\\n    function setMinPositionSizeAddend(uint256 _minPositionSizeAddend) external;\\n\\n    /**\\n     * @notice Retrieves gas calculation params.\\n     *\\n     * @return oracleGasPriceTolerance The tolerance for gas price fluctuations based on the oracle.\\n     * @return defaultMaxGasPrice The default maximum gas price allowed.\\n     */\\n    function getGasCalculationParams() external view returns (uint256, uint256, uint256, PaymentModel);\\n\\n    /**\\n     * @notice Sets the optimisticGasCoefficient for optimism paymentModel.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _newOptimisticGasCoefficient The new optimisticGasCoefficient value (in WAD).\\n     */\\n    function setOptimisticGasCoefficient(uint256 _newOptimisticGasCoefficient) external;\\n}\\n\",\"keccak256\":\"0xe7e8ed68096946966302efb5863878bf7cc40ae6aa353d995da1f4116efc04b0\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperRewardDistributor/IKeeperRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IKeeperRewardDistributorStorage {\\n    enum DecreasingReason {\\n        NonExistentIdForLiquidation,\\n        NonExistentIdForSLOrTP,\\n        IncorrectConditionForLiquidation,\\n        IncorrectConditionForSL,\\n        ClosePostionInTheSameBlock\\n    }\\n\\n    enum KeeperActionType {\\n        OpenByOrder,\\n        StopLoss,\\n        TakeProfit,\\n        Liquidation,\\n        BucketDelisted\\n    }\\n\\n    enum KeeperCallingMethod {\\n        ClosePositionByCondition,\\n        OpenPositionByOrder,\\n        CloseBatchPositions\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of keeper rewards in the ARBITRUM payment model\\n     * @param maxRoutesLength The maximum length of routes for which will be paid keeper rewards, depending on KeeperCallingMethod\\n     * @param baseLength The static length of the data entering the protocol function, depending on KeeperCallingMethod\\n     */\\n    struct DataLengthRestrictions {\\n        uint256 maxRoutesLength;\\n        uint256 baseLength;\\n    }\\n\\n    /**\\n     * @dev Structure used in the calculation of maximum gas per position\\n     * @param baseMaxGas1 Base gas amount that used to calculate max gas amount\\n     * @param baseMaxGas2 Base gas amount that used to calculate max gas amount when number of keeper actions > inflectionPoint\\n     * @param multiplier2 The multiplier which is multiplied by the number of keeper actions when number of keeper actions > inflectionPoint\\n     * @param inflectionPoint Number of actions after which the multiplier2 takes effect\\n     */\\n    struct KeeperActionRewardConfig {\\n        uint256 baseMaxGas1;\\n        uint256 baseMaxGas2;\\n        uint256 multiplier1;\\n        uint256 multiplier2;\\n        uint256 inflectionPoint;\\n    }\\n\\n    struct KeeperBalance {\\n        uint256 pmxBalance;\\n        uint256 nativeBalance;\\n    }\\n    enum PaymentModel {\\n        DEFAULT,\\n        ARBITRUM,\\n        OPTIMISTIC\\n    }\\n\\n    function priceOracle() external view returns (address);\\n\\n    function registry() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address payable);\\n\\n    function pmxPartInReward() external view returns (uint256);\\n\\n    function nativePartInReward() external view returns (uint256);\\n\\n    function positionSizeCoefficient() external view returns (uint256);\\n\\n    function positionSizeCoefficientB() external view returns (int256);\\n\\n    function additionalGas() external view returns (uint256);\\n\\n    function defaultMaxGasPrice() external view returns (uint256);\\n\\n    function oracleGasPriceTolerance() external view returns (uint256);\\n\\n    function paymentModel() external view returns (PaymentModel);\\n\\n    function keeperBalance(address) external view returns (uint256, uint256);\\n\\n    function maxGasPerPosition(KeeperActionType) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function dataLengthRestrictions(KeeperCallingMethod) external view returns (uint256, uint256);\\n\\n    function decreasingGasByReason(DecreasingReason) external view returns (uint256);\\n\\n    function totalBalance() external view returns (uint256, uint256);\\n}\\n\\ninterface IKeeperRewardDistributorStorageV2 is IKeeperRewardDistributorStorage {\\n    function minPositionSizeAddend() external view returns (uint256);\\n\\n    function optimisticGasCoefficient() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3dac4088b459dcbc1475222cbc8be0c0f5f9dcc3568ea78d8752ddaacea9f938\",\"license\":\"BUSL-1.1\"},\"contracts/LimitOrderManager/ILimitOrderManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {ILimitOrderManagerStorage} from \\\"./ILimitOrderManagerStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ILimitOrderManager is ILimitOrderManagerStorage, IPausable {\\n    enum LimitOrderType {\\n        Margin,\\n        Spot,\\n        Swap\\n    }\\n\\n    struct UpdateOrderConditionsParams {\\n        uint256 orderId;\\n        LimitOrderLibrary.Condition[] openConditions;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n    }\\n\\n    event CreateLimitOrder(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        LimitOrderLibrary.LimitOrder order,\\n        LimitOrderLibrary.Condition[] openConditions,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event CloseLimitOrder(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        address indexed closedBy,\\n        LimitOrderLibrary.CloseReason reason,\\n        uint256 positionId,\\n        // TODO: can delete args below when front be ready for it\\n        string bucket,\\n        address borrowedAsset,\\n        address positionAsset,\\n        uint256 leverage,\\n        address depositAsset,\\n        uint256 depositAmount\\n    );\\n\\n    event UpdateOrder(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        uint256 depositAmount,\\n        uint256 leverage,\\n        address feeToken\\n    );\\n\\n    event UpdateOrderConditions(\\n        uint256 indexed orderId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] openConditions,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    /**\\n     * @notice Initializes the LimitOrderManager contract.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _pm The address of the PositionManager contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _swapManager The address of the SwapManager contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address _pm,\\n        address payable _traderBalanceVault,\\n        address _swapManager,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Creates a limit order.\\n     * @dev This function allows users to create a limit order and locks the deposit asset in the traderBalanceVault\\n     * @param _params The parameters necessary to create limit order\\n     */\\n    function createLimitOrder(LimitOrderLibrary.CreateLimitOrderParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Cancels the order. Can only be called by the trader\\n     * @param _orderId order id\\n     */\\n    function cancelLimitOrder(uint256 _orderId) external;\\n\\n    /**\\n     * @notice Removes expired limit orders\\n     * @param _orderIds The array of order IDs to remove.\\n     */\\n    function cancelExpiredLimitOrders(uint256[] calldata _orderIds) external;\\n\\n    /**\\n     * @notice Opens a position by an existing order.\\n     * @dev This function is called to open a position based on the given order parameters.\\n     * @param _params The OpenPositionParams struct containing the necessary parameters for opening the position.\\n     */\\n    function openPositionByOrder(LimitOrderLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Updates an existing limit order.\\n     * @dev Edits prices on an existing order\\n     * @param _params The parameters for updating the limit order.\\n     */\\n    function updateOrder(LimitOrderLibrary.UpdateLimitOrderParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Updates the open and close conditions of an order.\\n     * @dev Only the trader of the order can update the conditions.\\n     * @param _params The parameters for updating the order conditions.\\n     */\\n    function updateOrderConditions(UpdateOrderConditionsParams memory _params) external;\\n\\n    /**\\n     * @notice Function to set new swapManager.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _swapManager Address of the new swapManager.\\n     */\\n    function setSwapManager(address _swapManager) external;\\n\\n    /**\\n     * @notice Retrieves the details of a limit order based on its ID.\\n     * @param _id The ID of the limit order to retrieve.\\n     * @return The LimitOrder struct representing the limit order.\\n     */\\n    function getOrder(uint256 _id) external view returns (LimitOrderLibrary.LimitOrder memory);\\n\\n    /**\\n     * @notice Retrieves the limit order at the specified index.\\n     * @param _index The index of the limit order to retrieve.\\n     * @return The limit order at the specified index.\\n     */\\n    function getOrderByIndex(uint256 _index) external view returns (LimitOrderLibrary.LimitOrder memory);\\n\\n    /**\\n     * @notice Retrieves the close conditions associated with the given order ID.\\n     * @param _orderId The ID of the order.\\n     * @return An array of Condition representing the close conditions.\\n     */\\n    function getCloseConditions(uint256 _orderId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the open conditions associated with a given order ID.\\n     * @param _orderId The ID of the order.\\n     * @return An array of Condition structs representing the open conditions.\\n     */\\n    function getOpenConditions(uint256 _orderId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Returns the length of the orders array.\\n     * @return The number of orders in the array.\\n     */\\n    function getOrdersLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the order array for a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The length of the order array.\\n     */\\n    function getTraderOrdersLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns an array of LimitOrder structures representing the orders placed by a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return traderOrders An array of LimitOrder structures representing the orders placed by the trader.\\n     */\\n    function getTraderOrders(address _trader) external view returns (LimitOrderLibrary.LimitOrder[] memory);\\n\\n    /**\\n     * @notice Returns the length of orders in a bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of orders in the bucket.\\n     */\\n    function getBucketOrdersLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves all limit orders associated with a given bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return An array of LimitOrder structs representing the bucket's orders.\\n     */\\n    function getBucketOrders(address _bucket) external view returns (LimitOrderLibrary.LimitOrder[] memory);\\n}\\n\\ninterface ILimitOrderManagerV2 is ILimitOrderManager {\\n    event ChangeSwapManager(address swapManager);\\n}\\n\",\"keccak256\":\"0xec3ca8f04600f0ea976100706c9ff8881cea9ea77e987326b667ab7318a01457\",\"license\":\"BUSL-1.1\"},\"contracts/LimitOrderManager/ILimitOrderManagerStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ISwapManager} from \\\"../SwapManager/ISwapManager.sol\\\";\\n\\ninterface ILimitOrderManagerStorage {\\n    function ordersId() external view returns (uint256);\\n\\n    function orderIndexes(uint256) external view returns (uint256);\\n\\n    function traderOrderIndexes(uint256) external view returns (uint256);\\n\\n    function traderOrderIds(address _trader, uint256 _index) external view returns (uint256);\\n\\n    function bucketOrderIndexes(uint256) external view returns (uint256);\\n\\n    function bucketOrderIds(address _bucket, uint256 _index) external view returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function primexDNS() external view returns (IPrimexDNSV3);\\n\\n    function pm() external view returns (IPositionManagerV2);\\n\\n    function swapManager() external view returns (ISwapManager);\\n}\\n\",\"keccak256\":\"0x013245257f25e09b29cce44ca82bde8dcc6baa604164d473ba270d486c9037a9\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IWhiteBlackList} from \\\"../WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\\\";\\nimport {ILiquidityMiningRewardDistributorStorage} from \\\"./ILiquidityMiningRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributor is ILiquidityMiningRewardDistributorStorage, IPausable {\\n    struct RewardsInPMX {\\n        uint256 minReward;\\n        uint256 maxReward;\\n        uint256 extraReward;\\n    }\\n\\n    /**\\n     * @notice Emitted when a reward is claimed by a receiver from a specific bucket.\\n     * @param receiver The address of the receiver.\\n     * @param bucket The address of the bucket from which the reward is claimed.\\n     * @param amount The amount of the claimed reward.\\n     */\\n    event ClaimedReward(address indexed receiver, address indexed bucket, uint256 amount);\\n    /**\\n     * @notice Emitted when PMX tokens are withdrawn by an admin.\\n     * @param amount The amount of PMX tokens withdrawn.\\n     */\\n    event WithdrawPmxByAdmin(uint256 indexed amount);\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _primexDNS The address of the IPrimexDNS contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _registry The address of the registry contract.\\n     * @param _treasury The address of the treasury contract.\\n     * @param _reinvestmentRate The rate at which rewards are reinvested.\\n     * @param _reinvestmentDuration The duration for which rewards are reinvested.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initialize(\\n        IPrimexDNSV3 _primexDNS,\\n        IERC20 _pmx,\\n        ITraderBalanceVault _traderBalanceVault,\\n        address _registry,\\n        address _treasury,\\n        uint256 _reinvestmentRate,\\n        uint256 _reinvestmentDuration,\\n        IWhiteBlackList _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Updates the reward amount for a specific bucket.\\n     * @dev Only callable by the PrimexDNS contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _pmxRewardsAmount The amount of PMX rewards to be allocated to the bucket.\\n     */\\n    function updateBucketReward(string memory _bucketName, uint256 _pmxRewardsAmount) external;\\n\\n    /**\\n     * @notice Adds points for a user for future reward distribution.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketName The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _miningAmount The amount of mining points to be added.\\n     * @param _maxStabilizationPeriodEnd The maximum end timestamp of the stabilization period.\\n     * @param _maxPeriodTime The maximum period time.\\n     * @param _currentTimestamp The current timestamp.\\n     */\\n    function addPoints(\\n        string memory _bucketName,\\n        address _user,\\n        uint256 _miningAmount,\\n        uint256 _maxStabilizationPeriodEnd,\\n        uint256 _maxPeriodTime,\\n        uint256 _currentTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Removes points for a user.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _name The name of the bucket.\\n     * @param _user The address of the user.\\n     * @param _amount The amount of mining points to be removed.\\n     */\\n    function removePoints(string memory _name, address _user, uint256 _amount) external;\\n\\n    /**\\n     * @notice Claims the accumulated rewards for a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     */\\n    function claimReward(string memory _bucketName) external;\\n\\n    /**\\n     * @notice Moves rewards from one bucket to another.\\n     * @dev Only callable by the Bucket contract.\\n     * @param _bucketFrom The name of the source bucket.\\n     * @param _bucketTo The name of the destination bucket.\\n     * @param _user The address of the user.\\n     * @param _isBucketLaunched A flag indicating if the destination bucket is launched.\\n     * @param _liquidityMiningDeadline The deadline for liquidity mining\\n     */\\n    function reinvest(\\n        string memory _bucketFrom,\\n        string memory _bucketTo,\\n        address _user,\\n        bool _isBucketLaunched,\\n        uint256 _liquidityMiningDeadline\\n    ) external;\\n\\n    /**\\n     * @dev The function to withdraw PMX from a delisted bucket or a bucket where liquidity mining failed (after reinvesting period).\\n     * Emits WithdrawPmxByAdmin event.\\n     * @param _bucketFrom Name of the bucket with failed liquidity mining event.\\n     */\\n    function withdrawPmxByAdmin(string memory _bucketFrom) external;\\n\\n    /**\\n     * @notice Retrieves information about a lender in a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @param _timestamp The timestamp for which the information is queried.\\n     * @return amountInMining The amount of tokens the lender has in mining for the given bucket.\\n     * @return currentPercent The current percentage of rewards the lender is eligible to receive for the given bucket.\\n     * Measured in WAD (1 WAD = 100%).\\n     * @return rewardsInPMX An object containing information about the lender's rewards in PMX for the given bucket.\\n     */\\n    function getLenderInfo(\\n        string calldata _bucketName,\\n        address _lender,\\n        uint256 _timestamp\\n    ) external view returns (uint256 amountInMining, uint256 currentPercent, RewardsInPMX memory rewardsInPMX);\\n\\n    /**\\n     * @notice Retrieves rewards information about a specific bucket.\\n     * @param _bucketName The name of the bucket.\\n     * @return totalPmxReward The total amount of PMX reward in the bucket.\\n     * @return withdrawnRewards The total amount of withdrawn rewards from the bucket.\\n     * @return totalPoints The total number of mining points in the bucket.\\n     */\\n    function getBucketInfo(\\n        string calldata _bucketName\\n    ) external view returns (uint256 totalPmxReward, uint256 withdrawnRewards, uint256 totalPoints);\\n\\n    /**\\n     * @notice Retrieves the amount of tokens a lender has in mining for a specific bucket.\\n     * @param _bucket The name of the bucket.\\n     * @param _lender The address of the lender.\\n     * @return The amount of tokens the lender has in mining for the given bucket.\\n     */\\n    function getLenderAmountInMining(string calldata _bucket, address _lender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20c7cd863230da4fc92831e99263814c285a45cc4779525b5433222d2370c264\",\"license\":\"BUSL-1.1\"},\"contracts/LiquidityMiningRewardDistributor/ILiquidityMiningRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\n\\ninterface ILiquidityMiningRewardDistributorStorage {\\n    struct LenderInfo {\\n        uint256 points;\\n        uint256 depositedAmount;\\n    }\\n\\n    struct BucketInfo {\\n        uint256 totalPoints;\\n        uint256 totalPmxReward;\\n        uint256 withdrawnRewards;\\n        mapping(address => LenderInfo) lendersInfo;\\n    }\\n\\n    function primexDNS() external view returns (IPrimexDNSV3);\\n\\n    function pmx() external view returns (IERC20);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function registry() external view returns (address);\\n\\n    function reinvestmentRate() external view returns (uint256);\\n\\n    function reinvestmentDuration() external view returns (uint256);\\n\\n    function extraRewards(address, string calldata) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb89b62cf6cc5c1fdeb7209b86973b46610ff7b48b114c9b0cd850507c45e3c2a\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPToken.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\nimport {IPTokenStorage, IBucket, IBucketV3, IFeeExecutor, IERC20MetadataUpgradeable, IActivityRewardDistributor} from \\\"./IPTokenStorage.sol\\\";\\n\\ninterface IPToken is IPTokenStorage {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param from The address performing the mint\\n     * @param value The amount being\\n     */\\n    event Mint(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted after pTokens are burned\\n     * @param from The owner of the aTokens, getting them burned\\n     * @param value The amount being burned\\n     */\\n    event Burn(address indexed from, uint256 value);\\n\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param amount The amount being transferred\\n     * @param index The new liquidity index of the reserve\\n     */\\n    event BalanceTransfer(address indexed from, address indexed to, uint256 amount, uint256 index);\\n\\n    event LockDeposit(address indexed user, uint256 indexed id, uint256 deadline, uint256 amount);\\n    event UnlockDeposit(address indexed user, uint256 indexed id);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _name The name of the ERC20 token.\\n     * @param _symbol The symbol of the ERC20 token.\\n     * @param _decimals The number of decimals for the ERC20 token.\\n     * @param _bucketsFactory Address of the buckets factory that will call the setBucket fucntion\\n     */\\n    function initialize(string memory _name, string memory _symbol, uint8 _decimals, address _bucketsFactory) external;\\n\\n    /**\\n     * @dev Sets the bucket for the contract.\\n     * @param _bucket The address of the bucket to set.\\n     */\\n    function setBucket(IBucket _bucket) external;\\n\\n    /**\\n     * @dev Sets the InterestIncreaser for current PToken.\\n     * @param _interestIncreaser The interest increaser address.\\n     */\\n    function setInterestIncreaser(IFeeExecutor _interestIncreaser) external;\\n\\n    /**\\n     * @dev Sets the lender reward distributor contract address.\\n     * @param _lenderRewardDistributor The address of the lender reward distributor contract.\\n     */\\n    function setLenderRewardDistributor(IActivityRewardDistributor _lenderRewardDistributor) external;\\n\\n    /**\\n     * @notice Locks a deposit for a specified user.\\n     * @param _user The address of the user for whom the deposit is being locked.\\n     * @param _amount The amount to be locked as a deposit.\\n     * @param _duration The duration for which the deposit will be locked.\\n     * @dev This function can only be called externally and overrides the corresponding function in the parent contract.\\n     * @dev The user must not be blacklisted.\\n     */\\n    function lockDeposit(address _user, uint256 _amount, uint256 _duration) external;\\n\\n    /**\\n     * @dev Unlocks a specific deposit.\\n     * @param _depositId The ID of the deposit to be unlocked.\\n     */\\n    function unlockDeposit(uint256 _depositId) external;\\n\\n    /**\\n     * @dev Mints `amount` pTokens to `user`\\n     * @param _user The address receiving the minted tokens\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     * @return Minted amount of PTokens\\n     */\\n    function mint(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Mints pTokens to the reserve address\\n     * Compared to the normal mint, we don't revert when the amountScaled is equal to the zero. Additional checks were also removed\\n     * Only callable by the Bucket\\n     * @param _reserve The address of the reserve\\n     * @param _amount The amount of tokens getting minted\\n     * @param _index The current liquidityIndex\\n     */\\n    function mintToReserve(address _reserve, uint256 _amount, uint256 _index) external;\\n\\n    /**\\n     * @dev Burns pTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @param _user The owner of the pTokens, getting them burned\\n     * @param _amount The amount of underlying token being returned to receiver\\n     * @param _index The current liquidityIndex\\n     * @return Burned amount of PTokens\\n     */\\n    function burn(address _user, uint256 _amount, uint256 _index) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The scaled balances of the user\\n     */\\n    function scaledBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns available balance of the user.\\n     * @param _user The owner of pToken\\n     * @return The available balance of the user\\n     */\\n    function availableBalanceOf(address _user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns locked deposits and balance of user\\n     * @param _user The owner of locked deposits\\n     * @return Structure with deposits and total locked balance of user\\n     */\\n    function getUserLockedBalance(address _user) external view returns (LockedBalance memory);\\n\\n    /**\\n     * @dev Returns the scaled total supply of pToken.\\n     * @return The scaled total supply of the pToken.\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Function to get a deposit index in user's deposit array.\\n     * @param id Deposit id.\\n     * @return index Deposit index in user's 'deposit' array.\\n     */\\n    function getDepositIndexById(uint256 id) external returns (uint256 index);\\n}\\n\",\"keccak256\":\"0x180185e60157be84a899b0f6201aae3af5e9a98c5f016054658d14fc2559d70e\",\"license\":\"BUSL-1.1\"},\"contracts/PToken/IPTokenStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\nimport {IBucket, IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IFeeExecutor} from \\\"../BonusExecutor/IFeeExecutor.sol\\\";\\nimport {IActivityRewardDistributor} from \\\"../ActivityRewardDistributor/IActivityRewardDistributor.sol\\\";\\n\\ninterface IPTokenStorage is IERC20MetadataUpgradeable {\\n    struct Deposit {\\n        uint256 lockedBalance;\\n        uint256 deadline;\\n        uint256 id;\\n    }\\n\\n    struct LockedBalance {\\n        uint256 totalLockedBalance;\\n        Deposit[] deposits;\\n    }\\n\\n    function bucket() external view returns (IBucketV3);\\n\\n    function interestIncreaser() external view returns (IFeeExecutor);\\n\\n    function lenderRewardDistributor() external view returns (IActivityRewardDistributor);\\n}\\n\",\"keccak256\":\"0xc3156264a851ed48f66e8099fb7595ea9c99c2eaed9ad6790b0d5412dd1fcf69\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\n\\nimport {IPositionManagerStorage, IPositionManagerStorageV2, IKeeperRewardDistributorV3} from \\\"./IPositionManagerStorage.sol\\\";\\nimport {IPositionManagerEvents} from \\\"./IPositionManagerEvents.sol\\\";\\nimport {IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IPositionManagerV2 is IPositionManagerStorageV2, IPositionManagerStorage, IPositionManagerEvents, IPausable {\\n    struct ClosePositionVars {\\n        PositionLibrary.Position position;\\n        bool borrowedAmountIsNotZero;\\n        uint256 oracleTolerableLimit;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    event ChangePositionManagerExtension(address indexed newPositionManagerExtension);\\n\\n    event IncreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    struct ClosePositionByConditionParams {\\n        uint256 id;\\n        address keeper;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        uint256 conditionIndex;\\n        bytes ccmAdditionalParams;\\n        PositionLibrary.CloseReason closeReason;\\n        bytes positionSoldAssetOracleData;\\n        bytes nativePmxOracleData;\\n        bytes positionNativeAssetOracleData;\\n        bytes pmxSoldAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified addresses and initializes inherited contracts.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     * @param _positionManagerExtension The address of the PositionManagerExtension contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _keeperRewardDistributor,\\n        address _whiteBlackList,\\n        address _positionManagerExtension\\n    ) external;\\n\\n    /**\\n     * @notice Sets the positionManagerExtension.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newPositionManagerExtension The address of PositionManagerExtension contract.\\n     */\\n    function setPositionManagerExtension(address _newPositionManagerExtension) external;\\n\\n    /**\\n     * @notice Sets protocol parameters through an administrative delegatecall.\\n     * @dev This function allows an admin to update protocol parameters using a delegatecall to the PositionManagerExtension contract.\\n     * @param _data The data containing the encoded function call to be executed by the delegatecall.\\n     */\\n    function setProtocolParamsByAdmin(bytes calldata _data) external;\\n\\n    /**\\n     * @notice Opens a position based on the provided order parameters.\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param _params The parameters for opening a position.\\n     * @return The total borrowed amount, position amount, position ID, and entry price of the new position.\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Opens margin position.\\n     * @dev Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal.\\n     * Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'.\\n     * Mints debtToken for trader (msg.sender)\\n     * @param _params The parameters required to open a position.\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Close trader's active position or liquidate risky position.\\n     * @dev Protocol will fall down (revert) if two conditions occur both:\\n     * 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1,\\n     * so position will make loss for Protocol.\\n     * 2. Not enough liquidity in bucket to pay that loss.\\n     * @param _id Position id for `msg.sender`.\\n     * @param _dealReceiver The receiver of the rest of trader's deposit.\\n     * @param _megaRoutes swap routes on dexes\\n     * @param _amountOutMin minimum allowed amount out for position\\n     */\\n    function closePosition(\\n        uint256 _id,\\n        address _dealReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _pmxSoldAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    // /**\\n    //  * @notice Closes trader's active position by closing condition\\n    //  * @param _id Position id.\\n    //  * @param _keeper The address of the keeper or the recipient of the reward.\\n    //  * @param _megaRoutes An array of routes for executing trades, swap routes on dexes.\\n    //  * @param _conditionIndex The index of the condition to be used for closing the position.\\n    //  * @param _ccmAdditionalParams Additional params needed for canBeClosedAfterSwap of the ConditionalClosingManager.\\n    //  * @param _closeReason The reason for closing the position.\\n    //  */\\n    function closePositionByCondition(ClosePositionByConditionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Updates the position with the given position ID by setting new close conditions.\\n     * @param _positionId The ID of the position to update.\\n     * @param _closeConditions An array of close conditions for the position.\\n     * @dev The caller of this function must be the trader who owns the position.\\n     * @dev Emits an `UpdatePositionConditions` event upon successful update.\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external;\\n\\n    /**\\n     * @notice Increases the deposit amount for a given position.\\n     * @param _positionId The ID of the position to increase the deposit for.\\n     * @param _amount The amount to increase the deposit by.\\n     * @param _asset The address of the asset to deposit.\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit immediately.\\n     * @param _megaRoutes An array of routes to use for trading.\\n     * @param _amountOutMin The minimum amount of the output asset to receive from trading.\\n     */\\n    function increaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _asset,\\n        bool _takeDepositFromWallet,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Decreases the deposit amount for a given position.\\n     * @param _positionId The ID of the position.\\n     * @param _amount The amount to decrease the deposit by.\\n     */\\n    function decreaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    /**\\n     * @notice Deletes a positions by their IDs from a specific bucket for a given traders.\\n     * @param _ids The IDs of the positions to be deleted.\\n     * @param _traders The addresses of the traders who owns the position.\\n     * @param _length The length of the traders array.\\n     * @param _bucket The address of the bucket from which the position is to be deleted.\\n     */\\n    function deletePositions(\\n        uint256[] calldata _ids,\\n        address[] calldata _traders,\\n        uint256 _length,\\n        address _bucket\\n    ) external;\\n\\n    /**\\n     * @notice Allows the trader to partially close a position.\\n     * @param _positionId The ID of the position to be partially closed.\\n     * @param _amount The amount of the position asset to be closed from the position.\\n     * @param _depositReceiver The address where the remaining deposit will be sent.\\n     * @param _megaRoutes The routing information for swapping assets.\\n     * @param _amountOutMin The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin,\\n        bytes calldata _positionSoldAssetOracleData,\\n        bytes calldata _nativePositionAssetOracleData,\\n        bytes calldata _nativeSoldAssetOracleData,\\n        bytes calldata _pmxSoldAssetOracleData,\\n        bytes[][] calldata _pullOracleData,\\n        uint256[] calldata _pullOracleTypes\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfers a specified amount of tokens from the contract to a specified address.\\n     * @dev Only callable by the BATCH_MANAGER_ROLE role.\\n     * @param _token The address of the token to be transferred.\\n     * @param _to The address to which the tokens will be transferred.\\n     * @param _amount The amount of tokens to be transferred.\\n     */\\n    function doTransferOut(address _token, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Returns the oracle tolerable limit for the given asset pair.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the position information for a given ID.\\n     * @param _id The ID of the position to retrieve.\\n     * @return position The position information associated with the given ID.\\n     */\\n    function getPosition(uint256 _id) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Retrieves the position at the specified index.\\n     * @param _index The index of the position to retrieve.\\n     * @return The Position struct at the specified index.\\n     */\\n    function getPositionByIndex(uint256 _index) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Returns the length of the positions array.\\n     * @return The length of the positions array.\\n     */\\n    function getAllPositionsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The number of positions the trader has.\\n     */\\n    function getTraderPositionsLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of positions the bucket has.\\n     */\\n    function getBucketPositionsLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt of a position with the given ID.\\n     * @param _id The ID of the position.\\n     * @return The debt of the position, measured in the same decimal format as debtTokens.\\n     */\\n    function getPositionDebt(uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the close conditions for a specific position.\\n     * @param _positionId The ID of the position.\\n     * @return An array of close conditions associated with the position.\\n     */\\n    function getCloseConditions(uint256 _positionId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the close condition for a given position and index.\\n     * @param _positionId The identifier of the position.\\n     * @param _index The index of the close condition.\\n     * @return The close condition at the specified position and index.\\n     */\\n    function getCloseCondition(\\n        uint256 _positionId,\\n        uint256 _index\\n    ) external view returns (LimitOrderLibrary.Condition memory);\\n\\n    /**\\n     * @notice Checks if a position with the given ID is delisted.\\n     * @param _id The ID of the position.\\n     * @return A boolean indicating whether the position is delisted or not.\\n     */\\n    function isDelistedPosition(uint256 _id) external view returns (bool);\\n}\\n\\ninterface IPositionManager is IPositionManagerStorage, IPausable {\\n    struct ClosePositionVars {\\n        PositionLibrary.Position position;\\n        bool borrowedAmountIsNotZero;\\n        uint256 oracleTolerableLimit;\\n        bool needOracleTolerableLimitCheck;\\n    }\\n\\n    event SetMaxPositionSize(address token0, address token1, uint256 amountInToken0, uint256 amountInToken1);\\n    event SetDefaultOracleTolerableLimit(uint256 indexed oracleTolerableLimit);\\n    event SecurityBufferChanged(uint256 indexed securityBuffer);\\n    event MaintenanceBufferChanged(uint256 indexed maintenanceBuffer);\\n    event SetOracleTolerableLimit(address indexed assetA, address indexed assetB, uint256 oracleTolerableLimit);\\n    event KeeperRewardDistributorChanged(address indexed _keeperRewardDistributor);\\n    event MinPositionSizeAndAssetChanged(uint256 indexed _minPositionSize, address indexed _minPositionAsset);\\n    event OracleTolerableLimitMultiplierChanged(uint256 indexed newMultiplier);\\n\\n    event OpenPosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed openedBy,\\n        PositionLibrary.Position position,\\n        address feeToken,\\n        uint256 protocolFee,\\n        uint256 entryPrice,\\n        uint256 leverage,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event PartialClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        uint256 depositedAmount,\\n        uint256 scaledDebtAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut\\n    );\\n\\n    event IncreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event DecreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event UpdatePositionConditions(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    /**\\n     * @notice Initializes the contract with the specified addresses and initializes inherited contracts.\\n     * @param _registry The address of the Registry contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     * @param _whiteBlackList The address of the WhiteBlacklist contract.\\n     */\\n    function initialize(\\n        address _registry,\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _keeperRewardDistributor,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Sets the maximum position size for a pair of tokens.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _token0 The address of the first token in the pair.\\n     * @param _token1 The address of the second token in the pair.\\n     * @param _amountInToken0 The maximum amount of token0 allowed in the position.\\n     * @param _amountInToken1 The maximum amount of token1 allowed in the position.\\n     */\\n    function setMaxPositionSize(\\n        address _token0,\\n        address _token1,\\n        uint256 _amountInToken0,\\n        uint256 _amountInToken1\\n    ) external;\\n\\n    /**\\n     * @notice Sets the default oracle tolerable limit for the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _percent The new value for the default oracle tolerable limit. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setDefaultOracleTolerableLimit(uint256 _percent) external;\\n\\n    /**\\n     * @notice Sets the oracle tolerable limit between two assets.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _assetA The address of the first asset.\\n     * @param _assetB The address of the second asset.\\n     * @param _percent The new value for the oracle tolerable limit between two assets. Measured in WAD (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(address _assetA, address _assetB, uint256 _percent) external;\\n\\n    /**\\n     * @notice Function to set oracleTolerableLimitMultiplier.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param newMultiplier New multiplier in WAD format.\\n     */\\n    function setOracleTolerableLimitMultiplier(uint256 newMultiplier) external;\\n\\n    /**\\n     * @notice Sets the security buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * 0 <= newSecurityBuffer < 1.\\n     * Buffer security parameter is used in calculating the liquidation conditions\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.i9v508hvrv42\\n     * @param newSecurityBuffer The new value of the security buffer in WAD format.\\n     */\\n    function setSecurityBuffer(uint256 newSecurityBuffer) external;\\n\\n    /**\\n     * @notice Sets the maintenance buffer value.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * The new maintenance buffer value should be greater than zero and less than one.\\n     * Maintenance buffer is used in calculating the maximum leverage\\n     * https://docs.google.com/document/d/1kR8eaqV4289MAbLKgIfKsZ2NgjFpeC0vpVL7jVUTvho/edit#bookmark=id.87oc1j1s9z21\\n     * @param newMaintenanceBuffer The new value of the maintenance buffer in WAD format.\\n     */\\n    function setMaintenanceBuffer(uint256 newMaintenanceBuffer) external;\\n\\n    /**\\n     * @notice Sets the address of the SpotTradingRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _spotTradingRewardDistributor The address of the SpotTradingRewardDistributor contract.\\n     */\\n    function setSpotTradingRewardDistributor(address _spotTradingRewardDistributor) external;\\n\\n    /**\\n     * @notice Sets the KeeperRewardDistributor contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _keeperRewardDistributor The address of the KeeperRewardDistributor contract.\\n     */\\n    function setKeeperRewardDistributor(IKeeperRewardDistributorV3 _keeperRewardDistributor) external;\\n\\n    /**\\n     * @notice Opens a position based on the provided order parameters.\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param _params The parameters for opening a position.\\n     * @return The total borrowed amount, position amount, position ID, and entry price of the new position.\\n     */\\n    function openPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params\\n    ) external returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Opens margin position.\\n     * @dev Locks trader's collateral in TraderBalanceVault. Takes loan from bucket for deal.\\n     * Makes swap bucket borrowedAsset amount on '_dex'. Updates rates and indexes in the '_bucket'.\\n     * Mints debtToken for trader (msg.sender)\\n     * @param _params The parameters required to open a position.\\n     */\\n    function openPosition(PositionLibrary.OpenPositionParams calldata _params) external payable;\\n\\n    /**\\n     * @notice Close trader's active position or liquidate risky position.\\n     * @dev Protocol will fall down (revert) if two conditions occur both:\\n     * 1. (token1Price + position.depositedAmount).wdiv(positionDebt) will become lower than 1,\\n     * so position will make loss for Protocol.\\n     * 2. Not enough liquidity in bucket to pay that loss.\\n     * @param _id Position id for `msg.sender`.\\n     * @param _dealReceiver The receiver of the rest of trader's deposit.\\n     * @param _megaRoutes swap routes on dexes\\n     * @param _amountOutMin minimum allowed amount out for position\\n     */\\n    function closePosition(\\n        uint256 _id,\\n        address _dealReceiver,\\n        PrimexPricingLibrary.MegaRoute[] memory _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Closes trader's active position by closing condition\\n     * @param _id Position id.\\n     * @param _keeper The address of the keeper or the recipient of the reward.\\n     * @param _megaRoutes An array of routes for executing trades, swap routes on dexes.\\n     * @param _conditionIndex The index of the condition to be used for closing the position.\\n     * @param _ccmAdditionalParams Additional params needed for canBeClosedAfterSwap of the ConditionalClosingManager.\\n     * @param _closeReason The reason for closing the position.\\n     */\\n    function closePositionByCondition(\\n        uint256 _id,\\n        address _keeper,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _conditionIndex,\\n        bytes calldata _ccmAdditionalParams,\\n        PositionLibrary.CloseReason _closeReason\\n    ) external;\\n\\n    /**\\n     * @notice Allows the trader to partially close a position.\\n     * @param _positionId The ID of the position to be partially closed.\\n     * @param _amount The amount of the position asset to be closed from the position.\\n     * @param _depositReceiver The address where the remaining deposit will be sent.\\n     * @param _megaRoutes The routing information for swapping assets.\\n     * @param _amountOutMin The minimum amount to be received after swapping, measured in the same decimal format as the position's asset.\\n     */\\n    function partiallyClosePosition(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _depositReceiver,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Updates the position with the given position ID by setting new close conditions.\\n     * @param _positionId The ID of the position to update.\\n     * @param _closeConditions An array of close conditions for the position.\\n     * @dev The caller of this function must be the trader who owns the position.\\n     * @dev Emits an `UpdatePositionConditions` event upon successful update.\\n     */\\n    function updatePositionConditions(\\n        uint256 _positionId,\\n        LimitOrderLibrary.Condition[] calldata _closeConditions\\n    ) external;\\n\\n    /**\\n     * @notice Increases the deposit amount for a given position.\\n     * @param _positionId The ID of the position to increase the deposit for.\\n     * @param _amount The amount to increase the deposit by.\\n     * @param _asset The address of the asset to deposit.\\n     * @param _takeDepositFromWallet A flag indicating whether to make the deposit immediately.\\n     * @param _megaRoutes An array of routes to use for trading.\\n     * @param _amountOutMin The minimum amount of the output asset to receive from trading.\\n     */\\n    function increaseDeposit(\\n        uint256 _positionId,\\n        uint256 _amount,\\n        address _asset,\\n        bool _takeDepositFromWallet,\\n        PrimexPricingLibrary.MegaRoute[] calldata _megaRoutes,\\n        uint256 _amountOutMin\\n    ) external;\\n\\n    /**\\n     * @notice Decreases the deposit amount for a given position.\\n     * @param _positionId The ID of the position.\\n     * @param _amount The amount to decrease the deposit by.\\n     */\\n    function decreaseDeposit(uint256 _positionId, uint256 _amount) external;\\n\\n    /**\\n     * @notice Sets the minimum position size and the corresponding asset for positions.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _minPositionSize The new minimum position size.\\n     * @param _minPositionAsset The address of the asset associated with the minimum position size.\\n     */\\n    function setMinPositionSize(uint256 _minPositionSize, address _minPositionAsset) external;\\n\\n    /**\\n     * @notice Deletes a positions by their IDs from a specific bucket for a given traders.\\n     * @param _ids The IDs of the positions to be deleted.\\n     * @param _traders The addresses of the traders who owns the position.\\n     * @param _length The length of the traders array.\\n     * @param _bucket The address of the bucket from which the position is to be deleted.\\n     */\\n    function deletePositions(\\n        uint256[] calldata _ids,\\n        address[] calldata _traders,\\n        uint256 _length,\\n        address _bucket\\n    ) external;\\n\\n    /**\\n     * @notice Transfers a specified amount of tokens from the contract to a specified address.\\n     * @dev Only callable by the BATCH_MANAGER_ROLE role.\\n     * @param _token The address of the token to be transferred.\\n     * @param _to The address to which the tokens will be transferred.\\n     * @param _amount The amount of tokens to be transferred.\\n     */\\n    function doTransferOut(address _token, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @notice Returns the oracle tolerable limit for the given asset pair.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return The oracle tolerable limit in WAD format (1 WAD = 100%) for the asset pair.\\n     */\\n    function getOracleTolerableLimit(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the position information for a given ID.\\n     * @param _id The ID of the position to retrieve.\\n     * @return position The position information associated with the given ID.\\n     */\\n    function getPosition(uint256 _id) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Retrieves the position at the specified index.\\n     * @param _index The index of the position to retrieve.\\n     * @return The Position struct at the specified index.\\n     */\\n    function getPositionByIndex(uint256 _index) external view returns (PositionLibrary.Position memory);\\n\\n    /**\\n     * @notice Returns the length of the positions array.\\n     * @return The length of the positions array.\\n     */\\n    function getAllPositionsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific trader.\\n     * @param _trader The address of the trader.\\n     * @return The number of positions the trader has.\\n     */\\n    function getTraderPositionsLength(address _trader) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the length of the array containing the positions of a specific bucket.\\n     * @param _bucket The address of the bucket.\\n     * @return The number of positions the bucket has.\\n     */\\n    function getBucketPositionsLength(address _bucket) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt of a position with the given ID.\\n     * @param _id The ID of the position.\\n     * @return The debt of the position, measured in the same decimal format as debtTokens.\\n     */\\n    function getPositionDebt(uint256 _id) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the close conditions for a specific position.\\n     * @param _positionId The ID of the position.\\n     * @return An array of close conditions associated with the position.\\n     */\\n    function getCloseConditions(uint256 _positionId) external view returns (LimitOrderLibrary.Condition[] memory);\\n\\n    /**\\n     * @notice Retrieves the close condition for a given position and index.\\n     * @param _positionId The identifier of the position.\\n     * @param _index The index of the close condition.\\n     * @return The close condition at the specified position and index.\\n     */\\n    function getCloseCondition(\\n        uint256 _positionId,\\n        uint256 _index\\n    ) external view returns (LimitOrderLibrary.Condition memory);\\n\\n    /**\\n     * @notice Checks if a position with the given ID is delisted.\\n     * @param _id The ID of the position.\\n     * @return A boolean indicating whether the position is delisted or not.\\n     */\\n    function isDelistedPosition(uint256 _id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb1069a961bc115256679dcc62a7870c70163ebeb2269bf9e1ab9486a45484ee1\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManagerEvents.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\n\\ninterface IPositionManagerEvents {\\n    event SetMaxPositionSize(address token0, address token1, uint256 amountInToken0, uint256 amountInToken1);\\n    event SetDefaultOracleTolerableLimit(uint256 indexed oracleTolerableLimit);\\n    event SecurityBufferChanged(uint256 indexed securityBuffer);\\n    event MaintenanceBufferChanged(uint256 indexed maintenanceBuffer);\\n    event SetOracleTolerableLimit(address indexed assetA, address indexed assetB, uint256 oracleTolerableLimit);\\n    event KeeperRewardDistributorChanged(address indexed _keeperRewardDistributor);\\n    event OracleTolerableLimitMultiplierChanged(uint256 indexed newMultiplier);\\n\\n    event OpenPosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed openedBy,\\n        PositionLibrary.Position position,\\n        uint256 entryPrice,\\n        uint256 leverage,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n\\n    event PartialClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        uint256 depositedAmount,\\n        uint256 scaledDebtAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut\\n    );\\n\\n    event DecreaseDeposit(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        uint256 depositDelta,\\n        uint256 scaledDebtAmount\\n    );\\n\\n    event UpdatePositionConditions(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        LimitOrderLibrary.Condition[] closeConditions\\n    );\\n}\\n\",\"keccak256\":\"0x568630183883e5b6bee9e1d3ee6fba6f707dc33496111a4892cca839ad6a9f05\",\"license\":\"BUSL-1.1\"},\"contracts/PositionManager/IPositionManagerStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {ISpotTradingRewardDistributorV2} from \\\"../SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\\\";\\n\\ninterface IPositionManagerStorage {\\n    function maxPositionSize(address, address) external returns (uint256);\\n\\n    function defaultOracleTolerableLimit() external returns (uint256);\\n\\n    function securityBuffer() external view returns (uint256);\\n\\n    function maintenanceBuffer() external view returns (uint256);\\n\\n    function positionsId() external view returns (uint256);\\n\\n    function traderPositionIds(address _trader, uint256 _index) external view returns (uint256);\\n\\n    function bucketPositionIds(address _bucket, uint256 _index) external view returns (uint256);\\n\\n    function registry() external view returns (IAccessControl);\\n\\n    function traderBalanceVault() external view returns (ITraderBalanceVault);\\n\\n    function primexDNS() external view returns (IPrimexDNSV3);\\n\\n    function priceOracle() external view returns (IPriceOracleV2);\\n\\n    function keeperRewardDistributor() external view returns (IKeeperRewardDistributorV3);\\n\\n    function spotTradingRewardDistributor() external view returns (ISpotTradingRewardDistributorV2);\\n\\n    function minPositionSize() external view returns (uint256);\\n\\n    function minPositionAsset() external view returns (address);\\n}\\n\\ninterface IPositionManagerStorageV2 {\\n    function positionManagerExtension() external view returns (address);\\n}\\n\",\"keccak256\":\"0x01ffe4757883c6cb129e22d7cfd1b40fe0191f498c28eff60a4d7ca14e774acb\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracle.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPriceOracleStorage, IPriceOracleStorageV3} from \\\"./IPriceOracleStorage.sol\\\";\\n\\ninterface IPriceOracleV2 is IPriceOracleStorageV3 {\\n    event ChainlinkPriceFeedUpdated(address indexed token, address indexed priceFeed);\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n    event PythPairIdUpdated(address indexed token, bytes32 indexed priceFeedId);\\n    event Univ3OracleUpdated(uint256 indexed oracleType, address indexed oracle);\\n    event TimeToleranceUpdated(uint256 timeTolerance);\\n    event SupraDataFeedUpdated(address indexed tokenA, address indexed tokenB, uint256 id);\\n\\n    event Univ3TrustedPairUpdated(\\n        uint256 indexed oracleType,\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        bool isTrusted\\n    );\\n\\n    struct UpdateUniv3TrustedPairParams {\\n        uint256 oracleType;\\n        address tokenA;\\n        address tokenB;\\n        bool isTrusted;\\n    }\\n\\n    enum UpdatePullOracle {\\n        Pyth,\\n        Supra\\n    }\\n\\n    struct UpdateSupraDataFeedParams {\\n        address tokenA;\\n        address tokenB;\\n        SupraDataFeedId feedData;\\n    }\\n\\n    /**\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    struct UpdatePriceDropFeedsParams {\\n        address assetA;\\n        address assetB;\\n        address priceDropFeed;\\n    }\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     * @param _usdt Address of the USDT token\\n     * @param _treasury Address of the Treasury\\n     */\\n    function initialize(address _registry, address _eth, address _usdt, address _treasury) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _updateParams The array of the UpdatePriceDropFeedsParams structs\\n     */\\n    function updatePriceDropFeeds(UpdatePriceDropFeedsParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Calculates exchange rate of one token to another according to the specific oracle route\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param oracleData The list of oracles to use for price calculations\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality\\n     */\\n    function getExchangeRate(\\n        address assetA,\\n        address assetB,\\n        bytes calldata oracleData\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Sets or updates the Chainlink price feed for the list of tokens to usd.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _feeds Array of price feeds.\\n     */\\n    function updateChainlinkPriceFeedsUsd(address[] calldata _tokens, address[] calldata _feeds) external;\\n\\n    /**\\n     * @notice Sets or updates the Pyth pair ids for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _tokens Array of token addresses.\\n     * @param _priceFeedIds Array of pair ids.\\n     */\\n    function updatePythPairId(address[] calldata _tokens, bytes32[] calldata _priceFeedIds) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _params Array of token pairs and Supra ids.\\n     */\\n    function updateSupraDataFeed(UpdateSupraDataFeedParams[] calldata _params) external;\\n\\n    /**\\n     * @notice Sets Uni v3-based TWAP price oracle contracts.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _oracleTypes Array of ids of TWAP contracts.\\n     * @param _oracles Array of TWAP contract addresses.\\n     */\\n    function updateUniv3TypeOracle(uint256[] calldata _oracleTypes, address[] calldata _oracles) external;\\n\\n    /**\\n     * @notice Sets or updates the Supra price feeds for the list of tokens.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _updateParams Array of token pairs, their DEXs and new trusted status.\\n     */\\n    function updateUniv3TrustedPair(UpdateUniv3TrustedPairParams[] calldata _updateParams) external;\\n\\n    /**\\n     * @notice Sets the Pyth address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pyth the address of the Pyth oracle\\n     */\\n\\n    function setPyth(address _pyth) external;\\n\\n    /**\\n     * @notice Sets the Supra pull oracle address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraPullOracle the address of the Supra pull oracle\\n     */\\n    function setSupraPullOracle(address _supraPullOracle) external;\\n\\n    /**\\n     * @notice Sets the Supra storage address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _supraStorageOracle the address of the Supra storage\\n     */\\n    function setSupraStorageOracle(address _supraStorageOracle) external;\\n\\n    /**\\n     * @notice Updates pull oracle data for passed oracle types\\n     * @param _data An array of update data for passed oracles\\n     * @param _pullOracleTypes An array of oracle types  (Must conform to the UpdatePullOracle struct)\\n     */\\n\\n    function updatePullOracle(bytes[][] calldata _data, uint256[] calldata _pullOracleTypes) external payable;\\n\\n    /**\\n     * @notice Sets the time tolerance\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _timeTolerance Time tolerance in seconds\\n     */\\n\\n    function setTimeTolerance(uint256 _timeTolerance) external;\\n\\n    /**\\n     * @notice Sets the usdt address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _usdt the address of the USDT\\n     */\\n\\n    function setUSDT(address _usdt) external;\\n\\n    /**\\n     * @notice Sets the treasury address\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _treasury the address of the treasury\\n     */\\n    function setTreasury(address _treasury) external;\\n}\\n\\ninterface IPriceOracle is IPriceOracleStorage {\\n    event PairPriceDropChanged(address indexed assetA, address indexed assetB, uint256 pairPriceDrop);\\n    event PriceFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceFeed);\\n    event PriceDropFeedUpdated(address indexed assetA, address indexed assetB, address indexed priceDropFeed);\\n    event GasPriceFeedChanged(address priceFeed);\\n\\n    /**\\n     * @param _registry The address of PrimexRegistry contract\\n     * @param _eth Weth address if eth isn't native token of network. Otherwise set to zero address.\\n     */\\n    function initialize(address _registry, address _eth) external;\\n\\n    /**\\n     * @notice Function to set (change) the pair priceDrop of the trading assets\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN.\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The pair priceDrop (in wad)\\n     */\\n    function setPairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Increases the priceDrop of a pair of assets in the system.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * The _pairPriceDrop value must be greater than the current priceDrop value for the pair\\n     * and less than the maximum allowed priceDrop (WadRayMath.WAD / 2).\\n     * @param _assetA The address of position asset\\n     * @param _assetB The address of borrowed asset\\n     * @param _pairPriceDrop The new priceDrop value for the pair (in wad)\\n     */\\n    function increasePairPriceDrop(address _assetA, address _assetB, uint256 _pairPriceDrop) external;\\n\\n    /**\\n     * @notice Add or update price feed for assets pair. For only the admin role.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @param priceFeed The chain link price feed address for the pair assetA/assetB\\n     */\\n    function updatePriceFeed(address assetA, address assetB, address priceFeed) external;\\n\\n    /**\\n     * @notice Sets the gas price feed contract address.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param priceFeed The address of the gas price feed contract.\\n     */\\n    function setGasPriceFeed(address priceFeed) external;\\n\\n    /**\\n     * @notice Updates the priceDrop feed for a specific pair of assets.\\n     * @dev Add or update priceDrop feed for assets pair.\\n     * Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @param priceDropFeed The chain link priceDrop feed address for the pair assetA/assetB\\n     */\\n    function updatePriceDropFeed(address assetA, address assetB, address priceDropFeed) external;\\n\\n    /**\\n     * @notice Requests two priceFeeds - assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * @dev If there is no price feed found, the code will return a message that no price feed found.\\n     * @param baseAsset The first currency within the currency pair quotation (the base currency).\\n     * @param quoteAsset The second currency within the currency pair quotation (the quote currency).\\n     * @return A tuple of basePriceFeed and quotePriceFeed. The addresses of the price feed for the base asset and quote asset respectively.\\n     */\\n    function getPriceFeedsPair(address baseAsset, address quoteAsset) external view returns (address, address);\\n\\n    /**\\n     * @notice Requests priceFeed for the actual exchange rate for an assetA/assetB pair.\\n     * @dev If no price feed for the pair found, USD and ETH are used as intermediate tokens.\\n     * A price for assetA/assetB can be derived if two data feeds exist:\\n     * assetA/ETH and assetB/ETH (or assetA/USD and assetB/USD).\\n     * If there is no price feed found, the code will return a message that no price feed found.\\n     * @param assetA The first currency within the currency pair quotation (the base currency).\\n     * @param assetB The second currency within the currency pair quotation (the quote currency).\\n     * @return exchangeRate for assetA/assetB in 10**18 decimality which will be recalucaled in PrimexPricingLibrary.\\n     * @return direction of a pair as it stored in chainLinkPriceFeeds (i.e. returns 'true' for assetA/assetB, and 'false' for assetB/assetA).\\n     * Throws if priceFeed wasn't found or priceFeed hasn't answer is 0.\\n     */\\n    function getExchangeRate(address assetA, address assetB) external view returns (uint256, bool);\\n\\n    /**\\n     * @notice Retrieves the direct price feed for the given asset pair.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return priceFeed The address of the direct price feed.\\n     */\\n    function getDirectPriceFeed(address assetA, address assetB) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the current gas price from the specified gas price feed.\\n     * @return The current gas price.\\n     */\\n    function getGasPrice() external view returns (int256);\\n\\n    /**\\n     * @notice For a given asset pair retrieves the priceDrop rate which is the higher\\n     * of the oracle pair priceDrop and the historical pair priceDrop.\\n     * @param _assetA The address of asset A.\\n     * @param _assetB The address of asset B.\\n     * @return The priceDrop rate.\\n     */\\n    function getPairPriceDrop(address _assetA, address _assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the priceDrop rate between two assets based on the oracle pair priceDrop.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @return The priceDrop rate as a uint256 value.\\n     */\\n    function getOraclePriceDrop(address assetA, address assetB) external view returns (uint256);\\n\\n    /**\\n     * @notice Retreives a priceDrop feed address from the oraclePriceDropFeeds mapping\\n     * @param assetA The address of the first asset in the pair.\\n     * @param assetB The address of the second asset in the pair.\\n     * @return priceDropFeed The address of the priceDrop feed associated with the asset pair.\\n     */\\n    function getOraclePriceDropFeed(address assetA, address assetB) external view returns (address);\\n}\\n\",\"keccak256\":\"0xa06035e07986c71922230772c7855e2ad6d404f949a2233b61a65c086735fb80\",\"license\":\"BUSL-1.1\"},\"contracts/PriceOracle/IPriceOracleStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {ISupraOraclePull} from \\\"../interfaces/ISupraOraclePull.sol\\\";\\nimport {ISupraSValueFeed} from \\\"../interfaces/ISupraSValueFeed.sol\\\";\\n\\ninterface IPriceOracleStorage {\\n    function registry() external view returns (address);\\n\\n    function eth() external view returns (address);\\n\\n    function gasPriceFeed() external view returns (address);\\n\\n    function pairPriceDrops(address, address) external view returns (uint256);\\n}\\n\\ninterface IPriceOracleStorageV2 is IPriceOracleStorage {\\n    enum OracleType {\\n        Pyth,\\n        Chainlink,\\n        Uniswapv3,\\n        Supra\\n    }\\n\\n    struct OracleRoute {\\n        address tokenTo;\\n        OracleType oracleType;\\n        bytes oracleData;\\n    }\\n\\n    function pyth() external view returns (IPyth);\\n\\n    function timeTolerance() external view returns (uint256);\\n\\n    function chainlinkPriceFeedsUsd(address) external view returns (address);\\n\\n    function pythPairIds(address) external view returns (bytes32);\\n\\n    function univ3TypeOracles(uint256) external view returns (address);\\n\\n    function univ3TrustedPairs(uint256, address, address) external view returns (bool);\\n}\\n\\ninterface IPriceOracleStorageV3 is IPriceOracleStorageV2 {\\n    struct SupraDataFeedId {\\n        uint256 id;\\n        bool initialize;\\n    }\\n\\n    function supraPullOracle() external view returns (ISupraOraclePull);\\n\\n    function supraStorageOracle() external view returns (ISupraSValueFeed);\\n\\n    function supraDataFeedID(address, address) external view returns (uint256, bool);\\n\\n    function usdt() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc45289c8f39e7c6dc4b18d04faf98c6b0400995f8a1954d9e6cffb2fe83746ef\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNS.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IPrimexDNSStorage, IPrimexDNSStorageV3} from \\\"./IPrimexDNSStorage.sol\\\";\\n\\ninterface IPrimexDNSV3 is IPrimexDNSStorageV3 {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    event ChangeProtocolFeeRate(FeeRateType indexed feeRateType, uint256 indexed feeRate);\\n    event ChangeAverageGasPerAction(TradingOrderType indexed tradingOrderType, uint256 indexed averageGasPerAction);\\n    event ChangeMaxProtocolFee(uint256 indexed maxProtocolFee);\\n    event ChangeProtocolFeeCoefficient(uint256 indexed protocolFeeCoefficient);\\n    event ChangeLiquidationGasAmount(uint256 indexed liquidationGasAmount);\\n    event ChangePmxDiscountMultiplier(uint256 indexed pmxDiscountMultiplier);\\n    event ChangeAdditionalGasSpent(uint256 indexed additionalGasSpent);\\n    event ChangeGasPriceBuffer(uint256 indexed gasPriceBuffer);\\n    event ChangeMinFeeRestrictions(CallingMethod indexed callingMethod, MinFeeRestrictions minFeeRestrictions);\\n    event ChangeLeverageTolerance(uint256 leverageTolerance);\\n\\n    /**\\n     * @param feeRateType The order type for which the rate is set\\n     * @param feeRate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        FeeRateType feeRateType;\\n        uint256 feeRate;\\n    }\\n\\n    struct AverageGasPerActionParams {\\n        TradingOrderType tradingOrderType;\\n        uint256 averageGasPerAction;\\n    }\\n\\n    /**\\n     * @dev Params for initialize() function\\n     * @param registry The address of the PrimexRegistry contract.\\n     * @param pmx The address of the PMX token contract.\\n     * @param treasury The address of the Treasury contract.\\n     * @param delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param feeRateParams An array of structs to set protocol fee rate on the corresponding\\n     * @param averageGasPerActionParams An array of structs to set average amount of gas spent by Keeper on the corresponding action\\n     * @param maxProtocolFee MaxProtocolFee that can be charged. Measured in NATIVE_CURRENCY\\n     * @param liquidationGasAmount Average gas amount spent for a single liquidation, measured in wei.\\n     * @param protocolFeeCoefficient Additional coefficient to calculate minProtocolFee, measured in wei.\\n     * @param additionalGasSpent Gas that will be additionally spend after gasSpent calculation.\\n     * @param pmxDiscountMultiplier Multiplier for PMX discount calculation\\n     * @param gasPriceBuffer Multiplier which protects position from immediate liquidation after gas price changed\\n     */\\n    struct InitParams {\\n        address registry;\\n        address pmx;\\n        address treasury;\\n        uint256 delistingDelay;\\n        uint256 adminWithdrawalDelay;\\n        FeeRateParams[] feeRateParams;\\n        AverageGasPerActionParams[] averageGasPerActionParams;\\n        uint256 maxProtocolFee;\\n        uint256 liquidationGasAmount;\\n        uint256 protocolFeeCoefficient;\\n        uint256 additionalGasSpent;\\n        uint256 pmxDiscountMultiplier;\\n        uint256 gasPriceBuffer;\\n        uint256 leverageTolerance;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     */\\n    function initialize(InitParams calldata _params) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @notice Set min protocol fee restrictions for different calling method.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setMinFeeRestrictions(\\n        CallingMethod _callingMethod,\\n        MinFeeRestrictions calldata _minFeeRestrictions\\n    ) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n\\n    /**\\n     * @notice Set the protocol fee rate for one type of order.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setProtocolFeeRate(FeeRateParams calldata _feeRateType) external;\\n\\n    /**\\n     * @notice Set average gas amount of gas spent by Keeper on the corresponding action.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setAverageGasPerAction(AverageGasPerActionParams calldata _averageGasPerActionParams) external;\\n\\n    /**\\n     * @notice Set the max protocol fee.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _maxProtocolFee The new max protocol fee.\\n     */\\n    function setMaxProtocolFee(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set protocol fee coefficient. Used to calculate the minProtocol fee\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setProtocolFeeCoefficient(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set liquidation gas amount (average gas amount spent for a single liquidation).\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setLiquidationGasAmount(uint256 _maxProtocolFee) external;\\n\\n    /**\\n     * @notice Set pmxDiscountMultiplier.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     */\\n    function setPmxDiscountMultiplier(uint256 _pmxDiscountMultiplier) external;\\n\\n    /**\\n     * @notice Set new additionalGas. Used to calculate the minProtocol fee\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setAdditionalGasSpent(uint256 _additionalGasSpent) external;\\n\\n    /**\\n     * @notice Set new gasPriceBuffer.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setGasPriceBuffer(uint256 _gasPriceBuffer) external;\\n\\n    /**\\n     * @notice Set new leverageTolerance.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     */\\n    function setLeverageTolerance(uint256 _leverageTolerance) external;\\n\\n    /**\\n     * @notice Retrieves pmx, treasury, feeRateType, maxProtocolFee, pmxDiscountMultiplier\\n     */\\n    function getPrimexDNSParams(\\n        FeeRateType _feeRateType\\n    ) external view returns (address, address, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves liquidationGasAmount, protocolFeeCoefficient, additionalGasSpent, maxGasAmount and baseLength\\n     */\\n    function getParamsForMinProtocolFee(\\n        CallingMethod _callingMethod\\n    ) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves baseLength, averageGasPerAction, protocolFeeCoefficient and gasPriceBuffer\\n     */\\n    function getParamsForMinPositionSize(\\n        TradingOrderType _tradingOrderType\\n    ) external view returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @notice Retrieves baseLength for L2 chain payment model depending from tradingOrderType\\n     */\\n    function getL1BaseLengthForTradingOrderType(TradingOrderType _tradingOrderType) external view returns (uint256);\\n}\\n\\ninterface IPrimexDNS is IPrimexDNSStorage {\\n    event AddNewBucket(BucketData newBucketData);\\n    event BucketDeprecated(address bucketAddress, uint256 delistingTime);\\n    event AddNewDex(DexData newDexData);\\n    event ChangeFeeRate(OrderType orderType, address token, uint256 rate);\\n    event ConditionalManagerChanged(uint256 indexed cmType, address indexed cmAddress);\\n    event PMXchanged(address indexed pmx);\\n    event AavePoolChanged(address indexed aavePool);\\n    event BucketActivated(address indexed bucketAddress);\\n    event BucketFrozen(address indexed bucketAddress);\\n    event DexAdapterChanged(address indexed newAdapterAddress);\\n    event DexActivated(address indexed routerAddress);\\n    event DexFrozen(address indexed routerAddress);\\n\\n    /**\\n     * @param orderType The order type for which the rate is set\\n     * @param feeToken The token address for which the rate is set\\n     * @param rate Setting rate in WAD format (1 WAD = 100%)\\n     */\\n    struct FeeRateParams {\\n        OrderType orderType;\\n        address feeToken;\\n        uint256 rate;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     * @param _pmx The address of the PMX token contract.\\n     * @param _treasury The address of the Treasury contract.\\n     * @param _delistingDelay The time (in seconds) between deprecation and delisting of a bucket.\\n     * @param _adminWithdrawalDelay The time (in seconds) between delisting of a bucket and an adminDeadline.\\n     * @param _feeRateParams Initial fee params\\n     */\\n    function initialize(\\n        address _registry,\\n        address _pmx,\\n        address _treasury,\\n        uint256 _delistingDelay,\\n        uint256 _adminWithdrawalDelay,\\n        FeeRateParams[] calldata _feeRateParams\\n    ) external;\\n\\n    /**\\n     * @notice Deprecates a bucket.\\n     * @dev This function is used to deprecate a bucket by changing its current status to \\\"Deprecated\\\".\\n     * Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _bucket The name of the bucket to deprecate.\\n     * Emits a BucketDeprecated event with the bucket address and the delisting time.\\n     */\\n    function deprecateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice This function is used to set the address of the Aave pool contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _aavePool The address of the Aave pool contract to be set.\\n     */\\n    function setAavePool(address _aavePool) external;\\n\\n    /**\\n     * @notice Sets the protocol rate in PMX.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     */\\n    function setFeeRate(FeeRateParams calldata _feeRateParams) external;\\n\\n    /**\\n     * @notice Sets the address of the PMX token contract.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _pmx The address of the PMX token contract.\\n     */\\n    function setPMX(address _pmx) external;\\n\\n    /**\\n     * @notice Activates a bucket by changing its status from inactive to active.\\n     * @dev Only callable by the SMALL_TIMELOCK_ADMIN role.\\n     * @param _bucket The bucket to activate.\\n     */\\n    function activateBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Freezes a bucket, preventing further operations on it,\\n     * by changing its status from active to inactive.\\n     * @dev Only callable by the EMERGENCY_ADMIN role.\\n     * @param _bucket The bucket to be frozen.\\n     */\\n    function freezeBucket(string memory _bucket) external;\\n\\n    /**\\n     * @notice Adds a new bucket.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param _newBucket The address of the new bucket to be added.\\n     * @param _pmxRewardAmount The amount of PMX tokens to be rewarded from the bucket.\\n     * Emits a AddNewBucket event with the struct BucketData of the newly added bucket.\\n     */\\n    function addBucket(address _newBucket, uint256 _pmxRewardAmount) external;\\n\\n    /**\\n     * @notice Activates a DEX by changing flag isActive on to true.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to activate.\\n     */\\n    function activateDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Freezes a DEX by changing flag isActive to false.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _dex The name of the DEX to be frozen.\\n     */\\n    function freezeDEX(string memory _dex) external;\\n\\n    /**\\n     * @notice Adds a new DEX to the protocol.\\n     * @dev Only callable by the MEDIUM_TIMELOCK_ADMIN role.\\n     * @param _name The name of the DEX.\\n     * @param _routerAddress The address of the DEX router.\\n     */\\n    function addDEX(string memory _name, address _routerAddress) external;\\n\\n    /**\\n     * @notice Sets the address of the DEX adapter.\\n     * @dev Only callable by the BIG_TIMELOCK_ADMIN role.\\n     * @param newAdapterAddress The address of the new DEX adapter.\\n     */\\n    function setDexAdapter(address newAdapterAddress) external;\\n\\n    /**\\n     * @dev The function to specify the address of conditional manager of some type\\n     * 1 => LimitPriceCOM\\n     * 2 => TakeProfitStopLossCCM\\n     * @param _address Address to be set for a conditional manager\\n     * @param _cmType The type of a conditional manager\\n     */\\n    function setConditionalManager(uint256 _cmType, address _address) external;\\n\\n    /**\\n     * @notice Retrieves the address of a bucket by its name.\\n     * @param _name The name of the bucket.\\n     * @return The address of the bucket.\\n     */\\n    function getBucketAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the address of the DEX router based on the given DEX name.\\n     * @param _name The name of the DEX.\\n     * @return The address of the DEX router.\\n     */\\n    function getDexAddress(string memory _name) external view returns (address);\\n\\n    /**\\n     * @notice Retrieves the names of Dexes registered in the protocol.\\n     * @return An array of strings containing the names of all Dexes.\\n     */\\n    function getAllDexes() external view returns (string[] memory);\\n}\\n\",\"keccak256\":\"0x5e500a2a8ba04df74e7f510ea09676b3541b1c16b818022bba0cabad6ab9b9c2\",\"license\":\"BUSL-1.1\"},\"contracts/PrimexDNS/IPrimexDNSStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IPrimexDNSStorage {\\n    enum Status {\\n        Inactive,\\n        Active,\\n        Deprecated\\n    }\\n\\n    enum OrderType {\\n        MARKET_ORDER,\\n        LIMIT_ORDER,\\n        SWAP_MARKET_ORDER,\\n        SWAP_LIMIT_ORDER\\n    }\\n\\n    struct BucketData {\\n        address bucketAddress;\\n        Status currentStatus;\\n        uint256 delistingDeadline;\\n        // The deadline is for the admin to call Bucket.withdrawAfterDelisting().\\n        uint256 adminDeadline;\\n    }\\n    struct DexData {\\n        address routerAddress;\\n        bool isActive;\\n    }\\n\\n    struct AdapterData {\\n        string[] dexes;\\n        bool isAdded;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function delistingDelay() external view returns (uint256);\\n\\n    function adminWithdrawalDelay() external view returns (uint256);\\n\\n    function buckets(string memory) external view returns (address, Status, uint256, uint256);\\n\\n    function dexes(string memory) external view returns (address, bool);\\n\\n    function cmTypeToAddress(uint256 cmType) external view returns (address);\\n\\n    function dexAdapter() external view returns (address);\\n\\n    function pmx() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function aavePool() external view returns (address);\\n\\n    function feeRates(OrderType _orderType, address _token) external view returns (uint256);\\n}\\n\\ninterface IPrimexDNSStorageV2 is IPrimexDNSStorage {\\n    struct FeeRestrictions {\\n        uint256 minProtocolFee;\\n        uint256 maxProtocolFee;\\n    }\\n\\n    function feeRestrictions(\\n        OrderType _orderType\\n    ) external view returns (uint256 minProtocolFee, uint256 maxProtocolFee);\\n}\\n\\ninterface IPrimexDNSStorageV3 is IPrimexDNSStorageV2 {\\n    enum FeeRateType {\\n        MarginPositionClosedByTrader,\\n        SpotPositionClosedByTrader,\\n        MarginPositionClosedByKeeper,\\n        SpotPositionClosedByKeeper,\\n        MarginLimitOrderExecuted,\\n        SpotLimitOrderExecuted,\\n        SwapLimitOrderExecuted,\\n        SwapMarketOrder\\n    }\\n\\n    enum TradingOrderType {\\n        MarginMarketOrder,\\n        SpotMarketOrder,\\n        MarginLimitOrder,\\n        MarginLimitOrderDepositInThirdAsset,\\n        SpotLimitOrder,\\n        SwapLimitOrder\\n    }\\n\\n    enum CallingMethod {\\n        OpenPositionByOrder,\\n        ClosePositionByCondition\\n    }\\n    struct MinFeeRestrictions {\\n        uint256 maxGasAmount;\\n        uint256 baseLength;\\n    }\\n\\n    function protocolFeeRates(FeeRateType _feeRateType) external view returns (uint256);\\n\\n    function averageGasPerAction(TradingOrderType _tradingOrderType) external view returns (uint256);\\n\\n    function minFeeRestrictions(\\n        CallingMethod _callingMethod\\n    ) external view returns (uint256 maxGasAmount, uint256 baseLength);\\n\\n    function maxProtocolFee() external view returns (uint256);\\n\\n    function protocolFeeCoefficient() external view returns (uint256);\\n\\n    function liquidationGasAmount() external view returns (uint256);\\n\\n    function additionalGasSpent() external view returns (uint256);\\n\\n    function pmxDiscountMultiplier() external view returns (uint256);\\n\\n    function gasPriceBuffer() external view returns (uint256);\\n\\n    function leverageTolerance() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa88f81229c920c8523e707f01e95516c26ebba3a7020463d215ed141f1727544\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserve.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IReserveStorage} from \\\"./IReserveStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface IReserve is IReserveStorage, IPausable {\\n    event BurnAmountCalculated(uint256 burnAmount);\\n    event TransferRestrictionsChanged(address indexed pToken, TransferRestrictions newTransferRestrictions);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param dns The address of PrimexDNS contract\\n     * @param registry The address of Registry contract\\n     */\\n    function initialize(IPrimexDNSV3 dns, address registry) external;\\n\\n    /**\\n     * @dev Burns the permanent loss amount (presented in pTokens) from the Reserve for a particular bucket\\n     * @param bucket The address of a bucket\\n     * Emits BurnAmountCalculated(burnAmount) event\\n     */\\n    function paybackPermanentLoss(IBucketV3 bucket) external;\\n\\n    /**\\n     * @dev Transfers some bonus in pTokens to receiver from Reserve\\n     * Can be called by executor only\\n     * @param _bucketName The bucket where the msg.sender should be a fee decreaser (for debtToken) or\\n     * interest increaser (for pToken)\\n     * @param _to The receiver of bonus pTokens\\n     * @param _amount The amount of bonus pTokens to transfer\\n     */\\n    function payBonus(string memory _bucketName, address _to, uint256 _amount) external;\\n\\n    /**\\n     * @dev Function to transfer tokens to the Treasury. Only MEDIUM_TIMELOCK_ADMIN can call it.\\n     * @param bucket The bucket from which to transfer pTokens\\n     * @param amount The amount of pTokens to transfer\\n     */\\n    function transferToTreasury(address bucket, uint256 amount) external;\\n\\n    /**\\n     * @dev Function to set transfer restrictions for a token.\\n     * @notice Only MEDIUM_TIMELOCK_ADMIN can call it.\\n     * @param pToken pToken to set restrictions for\\n     * @param transferRestrictions Min amount to be left in the Reserve\\n     */\\n    function setTransferRestrictions(address pToken, TransferRestrictions calldata transferRestrictions) external;\\n}\\n\",\"keccak256\":\"0xddae0dbd32d6082d11bb5d6205847b9b919badc8b775584c4a1b7774541f9d5e\",\"license\":\"BUSL-1.1\"},\"contracts/Reserve/IReserveStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IReserveStorage {\\n    struct TransferRestrictions {\\n        uint256 minAmountToBeLeft;\\n        uint256 minPercentOfTotalSupplyToBeLeft;\\n    }\\n\\n    event TransferFromReserve(address pToken, address to, uint256 amount);\\n\\n    function transferRestrictions(address pToken) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x2817b7fb7470ca4af938ffe1485caa0b96dd22ac399d22c463f15efd9d6484cc\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributor.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ISpotTradingRewardDistributorStorage} from \\\"./ISpotTradingRewardDistributorStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISpotTradingRewardDistributorV2 is ISpotTradingRewardDistributorStorage, IPausable {\\n    event SpotTradingClaimReward(address indexed trader, uint256 amount);\\n    event RewardPerPeriodDecreased(uint256 indexed rewardPerPeriod);\\n    event TopUpUndistributedPmxBalance(uint256 indexed amount);\\n    event RewardPerPeriodChanged(uint256 indexed rewardPerPeriod);\\n    event PmxWithdrawn(uint256 indexed amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param registry The address of Registry contract\\n     * @param periodDuration The duration of a reward period\\n     * @param priceOracle The address of PriceOracle contract\\n     * @param pmx The address of PMX token\\n     * @param traderBalanceVault The address of TraderBalanceVault contract\\n     * @param treasury The address of Treasury contract\\n     */\\n    function initialize(\\n        address registry,\\n        uint256 periodDuration,\\n        address priceOracle,\\n        address pmx,\\n        address payable traderBalanceVault,\\n        address treasury\\n    ) external;\\n\\n    /**\\n     * @dev Function to update spot trader activity. Only PM_ROLE can call it.\\n     * @param trader Address of a trader\\n     * @param positionAsset Address of a position asset\\n     * @param positionAmount Amount of a position asset\\n     */\\n    function updateTraderActivity(\\n        address trader,\\n        address positionAsset,\\n        uint256 positionAmount,\\n        bytes calldata positionUsdOracleDataoracleData\\n    ) external;\\n\\n    /**\\n     * @dev Function to claim reward for spot trading activity.\\n     * Transfer rewards on the balance in traderBalanceVault\\n     * Emits SpotTradingClaimReward(address trader, uint256 amount)\\n     */\\n    function claimReward() external;\\n\\n    /**\\n     * @dev Function to set new reward per period. Only MEDIUM_TIMELOCK_ADMIN can call it.\\n     * @param rewardPerPeriod New value for reward per period\\n     */\\n    function setRewardPerPeriod(uint256 rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to decrease reward per period. Only EMERGENCY_ADMIN can call it.\\n     * @param _rewardPerPeriod New value for reward per period, must be less than the current value\\n     */\\n    function decreaseRewardPerPeriod(uint256 _rewardPerPeriod) external;\\n\\n    /**\\n     * @dev Function to topUp the contract PMX balance\\n     * @param amount PMX amount to add to the contract balance\\n     */\\n    function topUpUndistributedPmxBalance(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to withdraw PMX from the contract to treasury\\n     * @dev Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param amount Amount of PMX to withdraw from the contract\\n     */\\n    function withdrawPmx(uint256 amount) external;\\n\\n    /**\\n     * @dev Function to get SpotTraderActivity\\n     * @param periodNumber Period number\\n     * @param traderAddress Address of a trader\\n     * @return A struct with activity and hasClaimed members\\n     */\\n    function getSpotTraderActivity(uint256 periodNumber, address traderAddress) external view returns (uint256);\\n\\n    /**\\n     * @dev Get information for the period corresponding to the given timestamp\\n     * @param timestamp The timestamp to get information about\\n     * @return totalReward Total reward for the corresponding period\\n     * @return totalActivity Total activity for the corresponding period\\n     */\\n    function getPeriodInfo(uint256 timestamp) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Function to get an array of period numbers when trader had any activity\\n     * @param trader Address of a trader\\n     * @return An array of period numbers with trader activity\\n     */\\n    function getPeriodsWithTraderActivity(address trader) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Function to calculate trader's reward for her activities during periods\\n     * @param trader Address of a trader\\n     * @return reward Amount of reward\\n     * @return currentPeriod The current period\\n     */\\n    function calculateReward(address trader) external view returns (uint256 reward, uint256 currentPeriod);\\n}\\n\",\"keccak256\":\"0x72645c477fa1dd8d809814cab55a09daef3d0171df99dc95205e134f1b40cf7c\",\"license\":\"BUSL-1.1\"},\"contracts/SpotTradingRewardDistributor/ISpotTradingRewardDistributorStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ISpotTradingRewardDistributorStorage {\\n    struct PeriodInfo {\\n        uint256 totalReward;\\n        // map trader address to her activity\\n        mapping(address => uint256) traderActivity;\\n        uint256 totalActivity;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    function dns() external view returns (address);\\n\\n    function periodDuration() external view returns (uint256);\\n\\n    function initialPeriodTimestamp() external view returns (uint256);\\n\\n    function rewardPerPeriod() external view returns (uint256);\\n\\n    function pmx() external view returns (address);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function traderBalanceVault() external view returns (address payable);\\n\\n    function undistributedPMX() external view returns (uint256);\\n\\n    function periods(uint256 periodNumber) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xe6dc6a5ae48f0cacf886e84c42238f9c7cff42dd4e0e11dd35124ff79bfb87bd\",\"license\":\"BUSL-1.1\"},\"contracts/SwapManager/ISwapManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPrimexDNSV3, IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ISwapManager is IPausable {\\n    event SpotSwap(\\n        address indexed trader,\\n        address indexed receiver,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountSold,\\n        uint256 amountBought\\n    );\\n    event PaidProtocolFee(\\n        address indexed trader,\\n        address indexed boughtAsset,\\n        IPrimexDNSStorageV3.FeeRateType indexed feeRateType,\\n        uint256 feeInPositionAsset,\\n        uint256 feeInPmx\\n    );\\n\\n    /**\\n     * @param tokenA The address of the asset to be swapped from.\\n     * @param tokenB The address of the asset to be received in the swap.\\n     * @param amountTokenA The amount of tokenA to be swapped.\\n     * @param amountOutMin The minimum amount of tokenB expected to receive.\\n     * @param routes An array of PrimexPricingLibrary.Route structs representing the routes for the swap.\\n     * @param receiver The address where the swapped tokens will be received.\\n     * @param deadline The deadline for the swap transaction.\\n     * @param isSwapFromWallet A flag indicating whether the swap is perfomed from a wallet or a protocol balance.\\n     * @param isSwapToWallet A flag indicating whether the swapped tokens will be sent to a wallet or a protocol balance.\\n     * @param isSwapFeeInPmx A flag indicating whether the swap fee is paid in PMX or in native token.\\n     */\\n    struct SwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        uint256 amountOutMin;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        address receiver;\\n        uint256 deadline;\\n        bool isSwapFromWallet;\\n        bool isSwapToWallet;\\n        bool isSwapFeeInPmx;\\n        bytes tokenAtokenBOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    /**\\n     * @param depositAsset The address of the deposited asset.\\n     * @param positionAsset The address of the position asset.\\n     * @param depositAmount Amount of tokens in a deposit asset.\\n     * @param megaRoutes An array of PrimexPricingLibrary.Route structs representing the routes for the swap.\\n     * @param trader The trader address, who has created the order.\\n     * @param deadline The deadline for the swap transaction.\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a positionAsset\\n     * @param keeperRewardDistributor The address of KeeperRewardDistributor contract.\\n     * @param gasSpent Gas spent on executing transaction.\\n     */\\n    struct SwapInLimitOrderParams {\\n        address depositAsset;\\n        address positionAsset;\\n        uint256 depositAmount;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        address trader;\\n        uint256 deadline;\\n        address feeToken;\\n        address keeperRewardDistributor;\\n        uint256 gasSpent;\\n        bytes depositPositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativePositionAssetOracleData;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract with the specified parameters.\\n     * @param _registry The address of the PrimexRegistry contract.\\n     */\\n    function initialize(address _registry) external;\\n\\n    /**\\n     * @notice Re-initializes the contract with the specified parameters.\\n     * @dev Only BIG_TIMELOCK_ADMIN can call it.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _traderBalanceVault The address of the TraderBalanceVault contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     * @param _whiteBlackList The address of the WhiteBlackList contract.\\n     */\\n    function initializeAfterUpgrade(\\n        address _primexDNS,\\n        address payable _traderBalanceVault,\\n        address _priceOracle,\\n        address _whiteBlackList\\n    ) external;\\n\\n    /**\\n     * @notice Executes a swap on dexes defined in routes\\n     * @param params The SwapParams struct containing the details of the swap transaction.\\n     * @param maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * @param needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The resulting amount after the swap.\\n     */\\n    function swap(\\n        SwapParams calldata params,\\n        uint256 maximumOracleTolerableLimit,\\n        bool needOracleTolerableLimitCheck\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Executes a swap on dexes defined in routes\\n     * @dev Only callable by the LOM_ROLE role.\\n     * @param params The SwapInLimitOrderParams struct containing the details of the swap transaction.\\n     * @param maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * @return The resulting amount after the swap and feeInPositionAsset.\\n     */\\n    function swapInLimitOrder(\\n        SwapInLimitOrderParams calldata params,\\n        uint256 maximumOracleTolerableLimit\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xd37aefb58f805f2e97681c83ca409569fe2551ddb3716c8fb9e5e94739a95dac\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVault.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ITraderBalanceVaultStorage} from \\\"./ITraderBalanceVaultStorage.sol\\\";\\nimport {IPausable} from \\\"../interfaces/IPausable.sol\\\";\\n\\ninterface ITraderBalanceVault is ITraderBalanceVaultStorage, IPausable {\\n    /**\\n     * Types of way to open a position or order\\n     */\\n    enum OpenType {\\n        OPEN_BY_ORDER,\\n        OPEN,\\n        CREATE_LIMIT_ORDER\\n    }\\n\\n    /**\\n     * @param trader The trader, who opens margin deal\\n     * @param depositReceiver the address to which the deposit is transferred when blocked.\\n     * This happens because the trader's deposit is involved in the position\\n     * @param borrowedAsset The token to lock for deal in a borrowed asset\\n     * @param depositAsset The token is a deposit asset\\n     * (it is blocked when creating a limit order\\n     * For others, the operations is transferred to the account of the receiver of the deposit and is swapped )\\n     * @param depositAmount Amount of tokens in a deposit asset\\n     * @param depositInBorrowedAmount Amount of tokens to lock for deal in a borrowed asset\\n     * @param openType Corresponds to the purpose of locking\\n     */\\n    struct LockAssetParams {\\n        address trader;\\n        address depositReceiver;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        OpenType openType;\\n    }\\n\\n    /**\\n     * @param trader The trader who opened the position\\n     * @param receiver The receiver of the rest of trader deposit.\\n     * @param asset Borrowed asset of the position being closed (the need for accrual of profit).\\n     * @param unlockAmount The amount of unlocked collateral for deal\\n     * @param returnToTrader The returned to trader amount when position was closed.\\n     */\\n    struct UnlockAssetParams {\\n        address trader;\\n        address receiver;\\n        address asset;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @param traders An array of traders for which available balance should be increased\\n     * @param amounts An array of amounts corresponding to traders' addresses that should be added to their available balances\\n     * @param asset Asset address which amount will be increased\\n     * @param length The amount of traders in an array\\n     */\\n    struct BatchTopUpAvailableBalanceParams {\\n        address[] traders;\\n        uint256[] amounts;\\n        address asset;\\n        uint256 length;\\n    }\\n\\n    event Deposit(address indexed depositer, address indexed asset, uint256 amount);\\n    event Withdraw(address indexed withdrawer, address asset, uint256 amount);\\n\\n    /**\\n     * @dev contract initializer\\n     * @param _registry The address of Registry contract\\n     * @param _whiteBlackList The address of WhiteBlackList contract\\n     */\\n    function initialize(address _registry, address _whiteBlackList) external;\\n\\n    receive() external payable;\\n\\n    /**\\n     * @dev Deposits trader collateral for margin deal\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Withdraws the rest of trader's deposit after closing deal\\n     * @param _asset The collateral asset for withdraw\\n     * @param _amount The amount of '_asset' to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Traders lock their collateral for the limit order.\\n     * @param _trader The owner of collateral\\n     * @param _asset The collateral asset for deal\\n     * @param _amount The amount of '_asset' to deposit\\n     */\\n    function increaseLockedBalance(address _trader, address _asset, uint256 _amount) external payable;\\n\\n    /**\\n     * @dev Locks deposited trader's assets as collateral for orders.\\n     * Decreases the available balance when opening position.\\n     * Transfers deposited amount to the deposit receiver.\\n     * @param _params parameters necessary to lock asset\\n     */\\n    function useTraderAssets(LockAssetParams calldata _params) external;\\n\\n    /**\\n     * @dev Unlocks trader's collateral when open position by order or update deposit.\\n     * @param _params parameters necessary to unlock asset\\n     */\\n    function unlockAsset(UnlockAssetParams calldata _params) external;\\n\\n    /**\\n     * The function to increase available balance for several traders\\n     * @param _params A struct containing BatchTopUpAvailableBalanceParams\\n     */\\n    function batchTopUpAvailableBalance(BatchTopUpAvailableBalanceParams calldata _params) external;\\n\\n    /**\\n     * Withdraws an asset amount from an asset holder to a receiver\\n     * @param _from Withdraw from address\\n     * @param _to Withdraw to address\\n     * @param _asset Address of an asset\\n     * @param _amount Amount of an asset\\n     * @param fromLocked True if withdraw from locked balance\\n     */\\n    function withdrawFrom(address _from, address _to, address _asset, uint256 _amount, bool fromLocked) external;\\n\\n    /**\\n     * Increases available balance of a receiver in the protocol\\n     * @param receiver The address of an asset receiver\\n     * @param asset The asset address for which available balance will be increased\\n     * @param amount The amount of an asset\\n     */\\n    function topUpAvailableBalance(address receiver, address asset, uint256 amount) external payable;\\n}\\n\",\"keccak256\":\"0x86843a23a40801c8f71455f2d993730976d318579ca0ee83d8377b802d51db2f\",\"license\":\"BUSL-1.1\"},\"contracts/TraderBalanceVault/ITraderBalanceVaultStorage.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ITraderBalanceVaultStorage {\\n    struct TraderBalance {\\n        uint256 availableBalance;\\n        uint256 lockedBalance;\\n    }\\n\\n    function registry() external view returns (address);\\n\\n    /**\\n     *\\n     * @param trader Trader's address\\n     * @param asset Asset address\\n     * @return availableBalance availableBalance\\n     * @return lockedBalance lockedBalance\\n     */\\n    function balances(\\n        address trader,\\n        address asset\\n    ) external view returns (uint256 availableBalance, uint256 lockedBalance);\\n}\\n\",\"keccak256\":\"0xc0579c182c55abcfcda0e8092e30b04b13e8a8700d0c92914d086fe482673dec\",\"license\":\"BUSL-1.1\"},\"contracts/WhiteBlackList/WhiteBlackList/IWhiteBlackList.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IWhiteBlackList {\\n    enum AccessType {\\n        UNLISTED,\\n        WHITELISTED,\\n        BLACKLISTED\\n    }\\n    event WhitelistedAddressAdded(address indexed addr);\\n    event WhitelistedAddressRemoved(address indexed addr);\\n    event BlacklistedAddressAdded(address indexed addr);\\n    event BlacklistedAddressRemoved(address indexed addr);\\n\\n    function addAddressToWhitelist(address _address) external;\\n\\n    function addAddressesToWhitelist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromWhitelist(address _address) external;\\n\\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external;\\n\\n    function addAddressToBlacklist(address _address) external;\\n\\n    function addAddressesToBlacklist(address[] calldata _addresses) external;\\n\\n    function removeAddressFromBlacklist(address _address) external;\\n\\n    function removeAddressesFromBlacklist(address[] calldata _addresses) external;\\n\\n    function getAccessType(address _address) external view returns (AccessType);\\n\\n    function isBlackListed(address _address) external view returns (bool);\\n\\n    function registry() external view returns (address);\\n}\\n\",\"keccak256\":\"0x785da3d3b2de11abd60ed414f778047d6b216232dbbe6e06d4c1e907805aac85\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `approve` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     */\\n    function approve(address spender, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xd8ed07c2eb87e6e0e774ef1a92e62e6a3bf1e99d1a3cd365efc21011843688a9\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/IArbGasInfo.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exists in every Arbitrum Nitro chain at 0x000000000000000000000000000000000000006c.\\ninterface IArbGasInfo {\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n\\n    /// @notice Get gas prices. Uses the caller's preferred aggregator, or the default if the caller doesn't have a preferred one.\\n    /// @return return gas prices in wei\\n    ///        (\\n    ///            per L2 tx,\\n    ///            per L1 calldata byte\\n    ///            per storage allocation,\\n    ///            per ArbGas base,\\n    ///            per ArbGas congestion,\\n    ///            per ArbGas total\\n    ///        )\\n    function getPricesInWei() external view returns (uint256, uint256, uint256, uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xec7f78ef81a1aee6f7cf835a6dd75313e8f02fc2ef4e4044871bf1ee8fe02080\"},\"contracts/interfaces/IBestDexLens.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ILimitOrderManager} from \\\"../LimitOrderManager/ILimitOrderManager.sol\\\";\\n\\ninterface IBestDexLens {\\n    /**\\n     * @dev Structure for the getBestDexForOpenablePosition function\\n     * @param positionManager Instance of the PositionManager\\n     * @param borrowedAsset The address of the borrowed asset of this `bucket`\\n     * @param borrowedAmount The amount of borrowed token in this position\\n     * @param depositAsset The address of the deposited asset\\n     * @param depositAmount The amount of deposited trader funds of open position\\n     * @param positionAsset The address of the bought asset of open position\\n     * @param shares The number of parts into which the swap will be divided\\n     * @param dexes An array with dexes by which the algorithm will iterate\\n     */\\n    struct BestDexForOpenablePositionParams {\\n        IPositionManagerV2 positionManager;\\n        address borrowedAsset;\\n        uint256 borrowedAmount;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address positionAsset;\\n        Shares shares;\\n        DexWithAncillaryData[] dexes;\\n    }\\n\\n    /**\\n     * @dev Structure for different shares for swap\\n     * @param firstAssetShares Shares for swap first asset to position asset\\n     * @param depositInThirdAssetShares Shares for swap deposit asset to third asset\\n     * @param depositToBorrowedShares Shares for swap deposit asset to borrowed asset\\n     */\\n    struct Shares {\\n        uint256 firstAssetShares;\\n        uint256 depositInThirdAssetShares;\\n        uint256 depositToBorrowedShares;\\n    }\\n\\n    /**\\n     * @param dex The name of dex\\n     * @param ancillaryData Additional data required for certain dex type.\\n     */\\n    struct DexWithAncillaryData {\\n        string dex;\\n        bytes32 ancillaryData;\\n    }\\n\\n    /**\\n     * @dev Structure for the getBestDexByOrderParams function\\n     * @param positionManager instance of the PositionManager\\n     * @param limitOrderManager instance of the LimitOrderManager\\n     * @param orderId order id\\n     * @param dexes dexes with ancillary data\\n     */\\n    struct BestDexByOrderParams {\\n        IPositionManagerV2 positionManager;\\n        ILimitOrderManager limitOrderManager;\\n        uint256 orderId;\\n        Shares shares;\\n        DexWithAncillaryData[] dexes;\\n        bytes depositBorrowedAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    /**\\n     * @dev Structure for the input params for getBestMultipleDexes\\n     * @param positionManager instance of the PositionManager\\n     * @param assetToBuy address\\n     * @param assetToSell address\\n     * @param amount amount to sell or amount to buy depending on the isAmountToBuy\\n     * @param isAmountToBuy if true, then the best value, found via getAmountsIn\\n     * @param shares The number of parts into which the swap will be divided\\n     * @param gasPriceInCheckedAsset gas Price in asset to sell or asset to buy depending on the isAmountToBuy\\n     * @param dexes An array with dexes by which the algorithm will iterate\\n     */\\n    struct GetBestMultipleDexesParams {\\n        IPositionManagerV2 positionManager;\\n        address assetToBuy;\\n        address assetToSell;\\n        uint256 amount;\\n        bool isAmountToBuy;\\n        uint256 shares;\\n        uint256 gasPriceInCheckedAsset;\\n        DexWithAncillaryData[] dexes;\\n    }\\n\\n    /**\\n     * @dev Structure for the getBestMultipleDexes function\\n     * @param shareCount Number of shares\\n     * @param filledRoutes Number of filled routes\\n     * @param path Path of assets\\n     * @param activeDexesLength Count of active dexes\\n     * @param gasInCheckedAsset The paid price for gas in the purchase token\\n     * @param gases Estimated gas to perform swap on each dex\\n     */\\n    struct GetBestMultipleDexesVars {\\n        uint256 shareCount;\\n        uint256 filledRoutes;\\n        address[] path;\\n        uint256 activeDexesLength;\\n        int256 gasInCheckedAsset;\\n        uint256[] gases;\\n    }\\n\\n    /**\\n     * @dev Structure for the return params for getBestMultipleDexes\\n     * @param returnAmount expected return amount\\n     * @param estimateGasAmount expected fee amount\\n     * @param routes swap routes on dexes\\n     */\\n    struct GetBestMultipleDexesReturnParams {\\n        uint256 returnAmount;\\n        uint256 estimateGasAmount;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n    }\\n\\n    /**\\n     * @dev Structure for the function getBestDex through the buy parameters\\n     * @param assetToBuy Asset to buy on the dex(=_positionAsset in function openPosition)\\n     * @param assetToSell Asset for sell on the dex(= an asset borrowed from a bucket)\\n     * @param amountToSell Amount `assetToSell`(=borrowedAmount in function openPosition)\\n     */\\n    struct BuyData {\\n        address assetToBuy;\\n        address assetToSell;\\n        uint256 amountToSell;\\n    }\\n\\n    /**\\n     * @dev Structure for the getBestDexByOrder function\\n     * @param firstAssetReturnParams GetBestMultipleDexesReturnParams for the first asset to position asset\\n     * @param depositInThirdAssetReturnParams GetBestMultipleDexesReturnParams for deposit asset to third asset\\n     * @param depositToBorrowedReturnParams GetBestMultipleDexesReturnParams for deposit asset to borrowed asset\\n     */\\n    struct GetBestDexByOrderReturnParams {\\n        GetBestMultipleDexesReturnParams firstAssetReturnParams;\\n        GetBestMultipleDexesReturnParams depositInThirdAssetReturnParams;\\n        GetBestMultipleDexesReturnParams depositToBorrowedReturnParams;\\n    }\\n\\n    /**\\n     * @notice Returns swap paths on best dexes, expected amount and estimateGasAmount.\\n     * @dev This function calculates the best DEX to use for a given position based on various parameters.\\n     * @param _positionManager The instance of the PositionManager contract.\\n     * @param _positionId The ID of the position.\\n     * @param _shares The number of shares for dexes.\\n     * @param _dexesWithAncillaryData An array of DEXes along with their ancillary data.\\n     * @return A GetBestMultipleDexesReturnParams struct.\\n     */\\n    function getBestDexByPosition(\\n        IPositionManagerV2 _positionManager,\\n        uint256 _positionId,\\n        uint256 _shares,\\n        DexWithAncillaryData[] memory _dexesWithAncillaryData\\n    ) external returns (GetBestMultipleDexesReturnParams memory);\\n\\n    /**\\n     * @notice Selects the best dex to open position by order.\\n     * @param _params The BestDexByOrderParams struct specifying the order parameters.\\n     * @return _returnParams The GetBestDexByOrderReturnParams struct\\n     */\\n    function getBestDexByOrder(\\n        BestDexByOrderParams memory _params\\n    ) external payable returns (GetBestDexByOrderReturnParams memory _returnParams);\\n\\n    /**\\n     * @notice Selects the best multiple dexes to open a position\\n     * @param _params GetBestMultipleDexesParams params\\n     * @return _returnParams - the array of best dexes at the moment to open a position with the specified parameters\\n     */\\n    function getBestMultipleDexes(\\n        GetBestMultipleDexesParams memory _params\\n    ) external returns (GetBestMultipleDexesReturnParams memory _returnParams);\\n\\n    /**\\n     * @notice Returns the best DEXes for opening a position.\\n     * @param _params The parameters for the function.\\n     * @return _firstAssetReturnParams The return parameters for the first asset.\\n     * @return _depositInThirdAssetReturnParams The return parameters includes routes for converting a third asset\\n     * (i.e. an asset which is not either underlying asset or position asset) to a position asset.\\n     * @return _depositToBorrowedReturnParams The return parameters for converting deposit asset (which is a position\\n     * asset or third asset) to borrowed asset (i.e. underlying asset).\\n     */\\n    function getBestDexForOpenablePosition(\\n        BestDexForOpenablePositionParams memory _params\\n    )\\n        external\\n        returns (\\n            GetBestMultipleDexesReturnParams memory _firstAssetReturnParams,\\n            GetBestMultipleDexesReturnParams memory _depositInThirdAssetReturnParams,\\n            GetBestMultipleDexesReturnParams memory _depositToBorrowedReturnParams\\n        );\\n}\\n\",\"keccak256\":\"0x54fe253be15baa3d31d424bb14764949089e7a12526afe1e8f2ee74d9cc10423\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IConditionalClosingManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalClosingManager {\\n    /**\\n     * @notice Checks if a position can be closed.\\n     * @param _position The position details.\\n     * @param _params The encoded parameters for closing the position.\\n     * @param _additionalParams Additional encoded parameters (not used).\\n     * @param _closeAmount The amount of the position to be closed, measured in the same decimal format as the position's asset.\\n     * @param _borowedAssetAmount The amount of borrowed asset.\\n     * @return A boolean indicating whether the position can be closed.\\n     */\\n    function canBeClosedAfterSwap(\\n        PositionLibrary.Position calldata _position,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _closeAmount,\\n        uint256 _borowedAssetAmount,\\n        bytes calldata _positionSoldAssetOracleData\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xc1b4d9a1792ea41bae949d409e212722349967a0bd1af18eaa95cb10867f9358\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IConditionalOpeningManager.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IConditionalOpeningManager {\\n    /**\\n     * @notice Checks if a limit order can be filled based on the exchange rate.\\n     * @dev This function compares the exchange rate with the limit price.\\n     * @param _order The limit order details.\\n     * @param _params Open condition parameters for the order.\\n     * @param _additionalParams Additional parameters for the order.\\n     * @param _exchangeRate The exchange rate in WAD format to compare with the limit price.\\n     * @return A boolean value indicating if the limit order can be filled based on the exchange rate.\\n     */\\n    function canBeFilledAfterSwap(\\n        LimitOrderLibrary.LimitOrder calldata _order,\\n        bytes calldata _params,\\n        bytes calldata _additionalParams,\\n        uint256 _exchangeRate\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xcc5d4576d24044a7f45c85b33350a0383fd899aa5a5be1089f2777b1114c0f66\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDexAdapter.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IQuoter} from \\\"@uniswap/v3-periphery/contracts/interfaces/IQuoter.sol\\\";\\n\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ICurveCalc} from \\\"./routers/ICurveCalc.sol\\\";\\nimport {ICurveRegistry} from \\\"./routers/ICurveRegistry.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface IDexAdapter {\\n    /**\\n     * @notice Possible dex types\\n     */\\n    enum DexType {\\n        none, // 0\\n        UniswapV2, // 1  \\\"uniswap\\\", \\\"sushiswap\\\", \\\"quickswap\\\" (v2)\\n        UniswapV3, // 2\\n        Curve, // 3\\n        Balancer, // 4\\n        AlgebraV3, // 5\\n        Meshswap, // 6\\n        Paraswap, //7\\n        Enso //8\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * Encoded differently for different dexes:\\n     * Uniswap v2 - just encoded array of asset addresses\\n     * Uniswap v3 - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes3(uint24(pool1Fee)), bytes20(address(usdc)), bytes3(uint24(pool2Fee)) ...)\\n     * Quickswap - swap path is a sequence of bytes. In Solidity, a path can be built like that:\\n     *      bytes.concat(bytes20(address(weth)), bytes20(address(usdc)), bytes20(address(usdt) ...)\\n     * Curve - encoded array of asset addresses and pool addresses\\n     * Balancer - encoded array of asset addresses, pool ids and asset limits\\n     * @param _amountIn TokenA amount in\\n     * @param _amountOutMin Min tokenB amount out\\n     * @param _to Destination address for swap\\n     * @param _deadline Timestamp deadline for swap\\n     * @param _dexRouter Dex router address\\n     */\\n    struct SwapParams {\\n        bytes encodedPath;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOutMin;\\n        address to;\\n        uint256 deadline;\\n        address dexRouter;\\n    }\\n\\n    /*\\n     * @param encodedPath Swap path encoded in bytes\\n     * @param _amountIn TokenA amount in\\n     * @param _dexRouter Dex router address\\n     */\\n    struct GetAmountsParams {\\n        bytes encodedPath;\\n        uint256 amount; // amountIn or amountOut\\n        address dexRouter;\\n    }\\n\\n    struct AmountParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amount;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n    }\\n\\n    struct MegaSwapVars {\\n        uint256 sumOfShares;\\n        uint256 amountOnMegaRoute;\\n        uint256 totalAmount;\\n        uint256 remainder;\\n    }\\n\\n    event QuoterChanged(address indexed dexRouter, address indexed quoter);\\n    event DexTypeChanged(address indexed dexRouter, uint256 indexed dexType);\\n\\n    /**\\n     * @param _dexRouter The router address for which the quoter is set\\n     * @param _quoter The quoter address to set\\n     */\\n    function setQuoter(address _dexRouter, address _quoter) external;\\n\\n    /**\\n     * @notice Set a dex type for a dex router\\n     * @param _dexRouter The dex router address\\n     * @param _dexType The dex type from enum DexType\\n     */\\n    function setDexType(address _dexRouter, uint256 _dexType) external;\\n\\n    /**\\n     * @notice Swap ERC20 tokens\\n     * @param _params SwapParams struct\\n     */\\n    function swapExactTokensForTokens(SwapParams memory _params) external payable returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountOut calculations\\n     * @notice given an input amount of an asset, returns the maximum output amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsOut(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Performs chained getAmountIn calculations\\n     * @notice given an output amount of an asset, returns the maximum input amount of the other asset\\n     * @param _params GetAmountsParams struct\\n     */\\n    function getAmountsIn(GetAmountsParams memory _params) external returns (uint256[3] memory);\\n\\n    /**\\n     * @notice Dex type mapping dexRouter => dex type\\n     */\\n    function dexType(address) external view returns (DexType);\\n\\n    /**\\n     * @notice Mapping from the dexRouter to its quoter\\n     */\\n    function quoters(address) external view returns (address);\\n\\n    /**\\n     * @return The address of the Registry contract\\n     */\\n    function registry() external view returns (address);\\n\\n    /**\\n     * @notice Gets the average amount of gas that is required for the swap on some dex\\n     * @param dexRouter The address of a router\\n     */\\n    function getGas(address dexRouter) external view returns (uint256);\\n\\n    /**\\n     * @notice perform swap of ERC20 tokens by Path structs\\n     * @param tokenIn source token\\n     * @param tokenOut destination token\\n     * @param amountIn amount in the source token\\n     * @param receiver destination address for swap\\n     * @param paths Array of Path structs\\n     */\\n    function performPathsSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address receiver,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) external payable returns (uint256);\\n\\n    /**\\n      @notice Performs chained getAmountOut calculations by Path structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountIn amount in the source token\\n     * @param paths Array of Path structs\\n     */\\n\\n    function getAmountsOutByPaths(\\n        uint256 amountIn,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) external returns (uint256);\\n\\n    /**\\n      @notice Performs chained getAmountsIn calculations by Path structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountOut amount in the destination token\\n     * @param paths Array of Path structs\\n     */\\n\\n    function getAmountsInByPaths(\\n        uint256 amountOut,\\n        PrimexPricingLibrary.Path[] calldata paths\\n    ) external returns (uint256);\\n\\n    /**\\n       @notice perform swap of ERC20 tokens by MegaRoute structs\\n     * @param _params MegaSwapParams struct\\n     */\\n    function performMegaRoutesSwap(\\n        PrimexPricingLibrary.MegaSwapParams calldata _params\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice perform swap of ERC20 tokens by Route structs\\n     * @param tokenIn source token\\n     * @param amountIn amount in the source token\\n     * @param receiver destination address for swap\\n     * @param routes Array of Route structs\\n     */\\n    function performRoutesSwap(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address receiver,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) external payable returns (uint256);\\n\\n    /**\\n    @notice Performs chained getAmountsOut calculations by Route structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountIn amount in the source token\\n     * @param routes Array of Route structs\\n     */\\n\\n    function getAmountsOutByRoutes(\\n        uint256 amountIn,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) external returns (uint256);\\n\\n    /**\\n       @notice Performs chained getAmountsOut calculations by MegaRoute structs\\n       @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param _params AmountParams struct\\n     */\\n    function getAmountOutByMegaRoutes(AmountParams calldata _params) external returns (uint256);\\n\\n    /**\\n      @notice Performs chained  getAmountsIn calculations by Route structs\\n      @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param amountOut amountin the destination token\\n     * @param routes Array of Route structs\\n     */\\n\\n    function getAmountsInByRoutes(\\n        uint256 amountOut,\\n        PrimexPricingLibrary.Route[] calldata routes\\n    ) external returns (uint256);\\n\\n    /**\\n       @notice Performs chained getAmountsIn calculations by MegaRoute structs\\n       @dev The function may not support some types of dex, e.g. the Paraswap\\n     * @param _params AmountParams struct\\n     */\\n    function getAmountInByMegaRoutes(AmountParams calldata _params) external returns (uint256);\\n\\n    receive() external payable;\\n\\n    /**\\n     * @notice  Initializes the DexAdapter contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     */\\n    function initialize(address _primexDNS) external;\\n}\\n\",\"keccak256\":\"0x07ae2fa31b315ebbddf4cc3d6f2f700b1e49a704de17b42bf1e2f3875a1ce440\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IInterestRateStrategy.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IInterestRateStrategy {\\n    /**\\n     * @dev parameters for BAR calculation - they differ depending on bucket's underlying asset\\n     */\\n    struct BarCalculationParams {\\n        uint256 urOptimal;\\n        uint256 k0;\\n        uint256 k1;\\n        uint256 b0;\\n        int256 b1;\\n    }\\n\\n    event BarCalculationParamsChanged(\\n        address indexed bucket,\\n        uint256 urOptimal,\\n        uint256 k0,\\n        uint256 k1,\\n        uint256 b0,\\n        int256 b1\\n    );\\n\\n    /**\\n     * @dev Updates bucket's BAR and LAR.\\n     * Calculates using utilization ratio (UR):\\n     * BAR = UR <= URoptimal ? (k0 * UR + b0) : (k1 * UR + b1), where 'b1' may be < 0,\\n     * LAR = BAR * UR,\\n     * if reserveRate != 0, then LAR = LAR * (1 - reserveRate)\\n     * @param ur Utilization ratio\\n     * @param reserveRate The reserve portion of the interest that goes to the Primex reserve\\n     * @return tuple containing BAR and LAR\\n     */\\n\\n    function calculateInterestRates(uint256 ur, uint256 reserveRate) external returns (uint128, uint128);\\n\\n    /**\\n     * @dev Set parameters for BAR calculation.\\n     * @param _params parameters are represented in byte string\\n     */\\n\\n    function setBarCalculationParams(bytes memory _params) external;\\n\\n    /**\\n     * @dev Retrieves the calculation parameters for the Bar calculation.\\n     * @param _address an address of the bucket\\n     * @return BarCalculationParams struct containing the parameters.\\n     */\\n    function getBarCalculationParams(address _address) external view returns (BarCalculationParams memory);\\n}\\n\",\"keccak256\":\"0xaffa1ce1d9ea17874bd325829c32f6313ac98f1fc1b15a1e0f739aed02caea3c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOVM_GasPriceOracle.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n/// Precompiled contract that exist on opBNB chain at 0x420000000000000000000000000000000000000F.\\ninterface IOVM_GasPriceOracle {\\n    /// @notice Retrieves the latest known L1 base fee.\\n    /// @return Latest known L1 base fee.\\n    function l1BaseFee() external view returns (uint256);\\n\\n    /// @notice Retrieves the current fee overhead.\\n    /// @return Current fee overhead.\\n    function overhead() external view returns (uint256);\\n\\n    /// @notice Retrieves the current fee scalar.\\n    /// @return Current fee scalar.\\n    function scalar() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c38a19fdde45c93a9469ae3d09a03aba4b08ebce84400b91b41f5d6914a52b2\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// Copyright (c) 2016-2024 zOS Global Limited and contributors\\n// SPDX-License-Identifier: MIT\\n\\n// Interface for OpenZeppelin's Pausable contract from https://github.com/OpenZeppelin/openzeppelin-contracts/\\npragma solidity ^0.8.18;\\n\\ninterface IPausable {\\n    /**\\n     * @dev Triggers stopped state.\\n     * This function can only be called by an address with the EMERGENCY_ADMIN role.\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * This function can only be called by an address with the SMALL_TIMELOCK_ADMIN or MEDIUM_TIMELOCK_ADMIN role depending on the contract.\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0xd36ff25b5efe39529dd92bec8aab8fba396c7fc7fed936e64a1de358e52ad2e4\",\"license\":\"MIT\"},\"contracts/interfaces/ISupraOraclePull.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ISupraOraclePull {\\n    //Verified price data\\n    struct PriceData {\\n        // List of pairs\\n        uint256[] pairs;\\n        // List of prices\\n        // prices[i] is the price of pairs[i]\\n        uint256[] prices;\\n        // List of decimals\\n        // decimals[i] is the decimals of pairs[i]\\n        uint256[] decimals;\\n    }\\n\\n    function verifyOracleProof(bytes calldata _bytesproof) external returns (PriceData memory);\\n}\\n\",\"keccak256\":\"0xf38fcd53bef093ff9dee4914a2ac0ccbe383d624ed6a13ee079c0545cae69198\",\"license\":\"MIT\"},\"contracts/interfaces/ISupraSValueFeed.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/* solhint-disable var-name-mixedcase */\\ninterface ISupraSValueFeed {\\n    struct derivedData {\\n        int256 roundDifference;\\n        uint256 derivedPrice;\\n        uint256 decimals;\\n    }\\n\\n    struct priceFeed {\\n        uint256 round;\\n        uint256 decimals;\\n        uint256 time;\\n        uint256 price;\\n    }\\n\\n    function getDerivedSvalue(\\n        uint256 pair_id_1,\\n        uint256 pair_id_2,\\n        uint256 operation\\n    ) external view returns (derivedData memory);\\n\\n    function getSvalue(uint256 _pairIndex) external view returns (priceFeed memory);\\n}\\n\",\"keccak256\":\"0x7b4e9eaabfd4e929d1006ddb1c01684875eeb95a2c64ac8a848e61b91a8ee21f\",\"license\":\"MIT\"},\"contracts/interfaces/ITakeProfitStopLossCCM.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\n\\ninterface ITakeProfitStopLossCCM {\\n    struct CanBeClosedParams {\\n        uint256 takeProfitPrice;\\n        uint256 stopLossPrice;\\n    }\\n\\n    /**\\n     * @notice Checks if the take profit has been reached based on the given parameters.\\n     * @dev Used in closeBatchPositions() function.\\n     * @param _params The encoded parameters.\\n     * @param exchangeRate The exchange rate in WAD format.\\n     * @return A boolean indicating whether the take profit has been reached.\\n     */\\n    function isTakeProfitReached(bytes calldata _params, uint256 exchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached for a given position.\\n     * @param _position The position details.\\n     * @param _stopLossPrice The stop loss price in WAD format to compare against.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(\\n        PositionLibrary.Position calldata _position,\\n        uint256 _stopLossPrice,\\n        bytes calldata _positionSoldAssetOracleData\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Checks if the stop loss price has been reached on the given parameters.\\n     * @dev The takeProfitPrice and stopLossPrice values can be obtained from the encoded data via CanBeClosedParams struct.\\n     * @param _params The encoded closing condition parameters containing stop loss price.\\n     * @param oracleExchangeRate The current exchange rate from the oracle in WAD format.\\n     * @return True if the stop loss price is reached, false otherwise.\\n     */\\n    function isStopLossReached(bytes calldata _params, uint256 oracleExchangeRate) external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the take profit and stop loss prices from the given parameters.\\n     * @param _params The encoded parameters for closing a position.\\n     * @return takeProfitPrice The take profit price.\\n     * @return stopLossPrice The stop loss price.\\n     */\\n    function getTakeProfitStopLossPrices(bytes calldata _params) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Initializes the TakeProfitStopLossCCM contract.\\n     * @dev This function should only be called once during the initial setup of the contract.\\n     * @param _primexDNS The address of the PrimexDNS contract.\\n     * @param _priceOracle The address of the PriceOracle contract.\\n     */\\n    function initialize(address _primexDNS, address _priceOracle) external;\\n}\\n\",\"keccak256\":\"0xc7e14c2e085662f84b2ba41f2918a7722ffcf8d58891e6086add249b65b3ea8d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveCalc.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveCalc {\\n    // solhint-disable func-name-mixedcase\\n    function get_dx(\\n        // solhint-disable-next-line var-name-mixedcase\\n        int128 n_coins,\\n        uint256[8] memory balances,\\n        uint256 amp,\\n        uint256 fee,\\n        uint256[8] memory rates,\\n        uint256[8] memory precisions,\\n        bool underlying,\\n        int128 i,\\n        int128 j,\\n        uint256 dy\\n    ) external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0xbfe602662763db3d67993fe2d667086526dbed94a52a0ca931a712f47e611507\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/routers/ICurveRegistry.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICurveRegistry {\\n    // solhint-disable func-name-mixedcase\\n    function get_n_coins(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[8] memory);\\n\\n    function get_coin_indices(address _pool, address _from, address _to) external view returns (int128, int128, bool);\\n}\\n\",\"keccak256\":\"0xa27a21ef0c8beef0855a9ecd5f3ca42833fea9f5123562a3b390169f2c139ca2\",\"license\":\"BUSL-1.1\"},\"contracts/lens/BestDexLens.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/utils/WadRayMath.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport {LimitOrderLibrary} from \\\"../libraries/LimitOrderLibrary.sol\\\";\\nimport {PrimexPricingLibrary} from \\\"../libraries/PrimexPricingLibrary.sol\\\";\\nimport {PositionLibrary} from \\\"../libraries/PositionLibrary.sol\\\";\\nimport \\\"./../libraries/Errors.sol\\\";\\n\\nimport {IBestDexLens} from \\\"../interfaces/IBestDexLens.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {ILimitOrderManager} from \\\"../LimitOrderManager/ILimitOrderManager.sol\\\";\\nimport {IDexAdapter} from \\\"../interfaces/IDexAdapter.sol\\\";\\n\\n/**\\n * @dev  All functions in this contract are intended to be called off-chain. Do not call functions from other contracts to avoid an out-of-gas error.\\n */\\ncontract BestDexLens is IBestDexLens, IERC165 {\\n    using WadRayMath for uint256;\\n    using SafeCast for uint256;\\n\\n    int256 internal constant VERY_NEGATIVE_VALUE = -1e72;\\n    int256 internal constant VERY_POSITIVE_VALUE = 1e72;\\n\\n    /**\\n     * @inheritdoc IBestDexLens\\n     */\\n    function getBestDexByOrder(\\n        BestDexByOrderParams memory _params\\n    ) external payable override returns (GetBestDexByOrderReturnParams memory _returnParams) {\\n        _require(\\n            IERC165(address(_params.positionManager)).supportsInterface(type(IPositionManagerV2).interfaceId) &&\\n                IERC165(address(_params.limitOrderManager)).supportsInterface(type(ILimitOrderManager).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        _params.positionManager.priceOracle().updatePullOracle{value: msg.value}(\\n            _params.pullOracleData,\\n            _params.pullOracleTypes\\n        );\\n\\n        LimitOrderLibrary.LimitOrder memory order = _params.limitOrderManager.getOrder(_params.orderId);\\n        address borrowedAsset = order.leverage == WadRayMath.WAD\\n            ? order.depositAsset\\n            : address(order.bucket.borrowedAsset());\\n        IPrimexDNSV3 primexDns = _params.positionManager.primexDNS();\\n\\n        bool isBorrowedAsset = borrowedAsset == order.depositAsset;\\n        bool isThirdAsset = !isBorrowedAsset && order.depositAsset != order.positionAsset;\\n\\n        if (!isBorrowedAsset) {\\n            _returnParams.depositToBorrowedReturnParams = getBestMultipleDexes(\\n                GetBestMultipleDexesParams({\\n                    positionManager: _params.positionManager,\\n                    assetToBuy: borrowedAsset,\\n                    assetToSell: order.depositAsset,\\n                    amount: order.depositAmount,\\n                    isAmountToBuy: false,\\n                    shares: _params.shares.depositToBorrowedShares,\\n                    gasPriceInCheckedAsset: 0,\\n                    dexes: _params.dexes\\n                })\\n            );\\n        }\\n\\n        uint256 depositAmountInBorrowed = PrimexPricingLibrary.getDepositAmountInBorrowed(\\n            IDexAdapter.AmountParams({\\n                tokenA: order.depositAsset,\\n                tokenB: borrowedAsset,\\n                amount: order.depositAmount,\\n                megaRoutes: _returnParams.depositToBorrowedReturnParams.megaRoutes\\n            }),\\n            isThirdAsset,\\n            payable(primexDns.dexAdapter()),\\n            address(_params.positionManager.priceOracle()),\\n            _params.depositBorrowedAssetOracleData\\n        );\\n\\n        uint256 amountToTransfer = depositAmountInBorrowed.wmul(order.leverage - WadRayMath.WAD);\\n\\n        if (isBorrowedAsset) {\\n            amountToTransfer += depositAmountInBorrowed;\\n        } else if (isThirdAsset) {\\n            _returnParams.depositInThirdAssetReturnParams = getBestMultipleDexes(\\n                GetBestMultipleDexesParams({\\n                    positionManager: _params.positionManager,\\n                    assetToBuy: order.positionAsset,\\n                    assetToSell: order.depositAsset,\\n                    amount: order.depositAmount,\\n                    isAmountToBuy: false,\\n                    shares: _params.shares.depositInThirdAssetShares,\\n                    gasPriceInCheckedAsset: 0,\\n                    dexes: _params.dexes\\n                })\\n            );\\n        }\\n\\n        _returnParams.firstAssetReturnParams = getBestMultipleDexes(\\n            GetBestMultipleDexesParams({\\n                positionManager: _params.positionManager,\\n                assetToBuy: order.positionAsset,\\n                assetToSell: borrowedAsset,\\n                amount: amountToTransfer,\\n                isAmountToBuy: false,\\n                shares: _params.shares.firstAssetShares,\\n                gasPriceInCheckedAsset: 0,\\n                dexes: _params.dexes\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IBestDexLens\\n     */\\n    function getBestDexByPosition(\\n        IPositionManagerV2 _positionManager,\\n        uint256 _positionId,\\n        uint256 _shares,\\n        DexWithAncillaryData[] memory _dexesWithAncillaryData\\n    ) public override returns (GetBestMultipleDexesReturnParams memory) {\\n        _require(\\n            IERC165(address(_positionManager)).supportsInterface(type(IPositionManagerV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        PositionLibrary.Position memory position = _positionManager.getPosition(_positionId);\\n\\n        return\\n            getBestMultipleDexes(\\n                GetBestMultipleDexesParams({\\n                    positionManager: _positionManager,\\n                    assetToBuy: position.soldAsset,\\n                    assetToSell: position.positionAsset,\\n                    amount: position.positionAmount,\\n                    isAmountToBuy: false,\\n                    shares: _shares,\\n                    gasPriceInCheckedAsset: 0,\\n                    dexes: _dexesWithAncillaryData\\n                })\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IBestDexLens\\n     */\\n    function getBestDexForOpenablePosition(\\n        BestDexForOpenablePositionParams memory _params\\n    )\\n        public\\n        override\\n        returns (\\n            GetBestMultipleDexesReturnParams memory _firstAssetReturnParams,\\n            GetBestMultipleDexesReturnParams memory _depositInThirdAssetReturnParams,\\n            GetBestMultipleDexesReturnParams memory _depositToBorrowedReturnParams\\n        )\\n    {\\n        _require(\\n            IERC165(address(_params.positionManager)).supportsInterface(type(IPositionManagerV2).interfaceId) &&\\n                _params.borrowedAsset != address(0) &&\\n                _params.depositAsset != address(0) &&\\n                _params.positionAsset != address(0),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        _require(_params.depositAmount != 0, Errors.DEPOSITED_AMOUNT_IS_0.selector);\\n\\n        _require(\\n            _params.borrowedAmount != 0 || _params.borrowedAsset == _params.depositAsset,\\n            Errors.SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET.selector\\n        );\\n\\n        bool isBorrowedAsset = _params.borrowedAsset == _params.depositAsset;\\n        bool isThirdAsset = !isBorrowedAsset && _params.depositAsset != _params.positionAsset;\\n        if (!isBorrowedAsset) {\\n            _depositToBorrowedReturnParams = getBestMultipleDexes(\\n                GetBestMultipleDexesParams({\\n                    positionManager: _params.positionManager,\\n                    assetToBuy: _params.borrowedAsset,\\n                    assetToSell: _params.depositAsset,\\n                    amount: _params.depositAmount,\\n                    isAmountToBuy: false,\\n                    shares: _params.shares.depositToBorrowedShares,\\n                    gasPriceInCheckedAsset: 0,\\n                    dexes: _params.dexes\\n                })\\n            );\\n        }\\n        if (isThirdAsset) {\\n            _depositInThirdAssetReturnParams = getBestMultipleDexes(\\n                GetBestMultipleDexesParams({\\n                    positionManager: _params.positionManager,\\n                    assetToBuy: _params.positionAsset,\\n                    assetToSell: _params.depositAsset,\\n                    amount: _params.depositAmount,\\n                    isAmountToBuy: false,\\n                    shares: _params.shares.depositInThirdAssetShares,\\n                    gasPriceInCheckedAsset: 0,\\n                    dexes: _params.dexes\\n                })\\n            );\\n        }\\n        _firstAssetReturnParams = getBestMultipleDexes(\\n            GetBestMultipleDexesParams({\\n                positionManager: _params.positionManager,\\n                assetToBuy: _params.positionAsset,\\n                assetToSell: _params.borrowedAsset,\\n                amount: _params.borrowedAmount + (isBorrowedAsset ? _params.depositAmount : 0),\\n                isAmountToBuy: false,\\n                shares: _params.shares.firstAssetShares,\\n                gasPriceInCheckedAsset: 0,\\n                dexes: _params.dexes\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IBestDexLens\\n     */\\n    function getBestMultipleDexes(\\n        GetBestMultipleDexesParams memory _params\\n    ) public override returns (GetBestMultipleDexesReturnParams memory _returnParams) {\\n        _require(\\n            _params.assetToBuy != address(0) && _params.assetToSell != address(0),\\n            Errors.ZERO_ASSET_ADDRESS.selector\\n        );\\n        _require(_params.assetToBuy != _params.assetToSell, Errors.ASSETS_SHOULD_BE_DIFFERENT.selector);\\n        _require(_params.shares > 0, Errors.ZERO_SHARES.selector);\\n        _require(_params.amount >= _params.shares, Errors.SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL.selector);\\n\\n        GetBestMultipleDexesVars memory vars;\\n        DexWithAncillaryData[] memory activeDexes = new DexWithAncillaryData[](_params.dexes.length);\\n        vars.shareCount = _params.shares;\\n\\n        // stores estimated gas to perform swap on each DEX\\n        vars.gases = new uint256[](_params.dexes.length);\\n\\n        // matrix [allDexes.length][shareCount] containing the swapped amount\\n        // on each DEX (rows) for each share (columns) minus estimated gas to perform the swap\\n        int256[][] memory amountByDexByShare = new int256[][](_params.dexes.length);\\n\\n        vars.path = new address[](2);\\n        vars.path[0] = _params.assetToSell;\\n        vars.path[1] = _params.assetToBuy;\\n\\n        // filter out inactive DEXes and collect their outputs for all possible share splits\\n        {\\n            IDexAdapter.GetAmountsParams memory amountParams;\\n\\n            for (uint256 i; i < _params.dexes.length; i++) {\\n                // if DEX is not supported or deactivated - set expected gas to a very large number\\n                // slither-disable-next-line unused-return\\n                try _params.positionManager.primexDNS().getDexAddress(_params.dexes[i].dex) returns (\\n                    // slither-disable-next-line unused-return,variable-scope\\n                    address currentRouter\\n                ) {\\n                    uint256 returnGas = IDexAdapter(payable(_params.positionManager.primexDNS().dexAdapter())).getGas(\\n                        currentRouter\\n                    );\\n                    amountParams.amount = _params.amount / vars.shareCount;\\n                    amountParams.dexRouter = currentRouter;\\n\\n                    amountParams.encodedPath = PrimexPricingLibrary.encodePath(\\n                        vars.path,\\n                        currentRouter,\\n                        _params.dexes[i].ancillaryData,\\n                        payable(_params.positionManager.primexDNS().dexAdapter()),\\n                        _params.isAmountToBuy\\n                    );\\n\\n                    uint256 amount = _getAmountsFromAdapter(\\n                        amountParams,\\n                        IDexAdapter(payable(_params.positionManager.primexDNS().dexAdapter())),\\n                        _params.isAmountToBuy\\n                    );\\n                    if (amount == type(uint256).max) continue;\\n                    // add DEX to active list\\n                    activeDexes[vars.activeDexesLength] = _params.dexes[i];\\n                    amountByDexByShare[vars.activeDexesLength] = new int256[](vars.shareCount);\\n                    // store estimated gas\\n                    vars.gases[vars.activeDexesLength] = returnGas;\\n                    vars.gasInCheckedAsset = ((returnGas * _params.gasPriceInCheckedAsset) / 1e18).toInt256();\\n                    amountByDexByShare[vars.activeDexesLength][0] = _params.isAmountToBuy\\n                        ? amount.toInt256() + vars.gasInCheckedAsset\\n                        : amount.toInt256() - vars.gasInCheckedAsset;\\n                } catch {\\n                    continue;\\n                }\\n                for (uint256 j = 1; j < vars.shareCount; j++) {\\n                    amountParams.amount = (_params.amount * (j + 1)) / vars.shareCount;\\n                    uint256 amount = _getAmountsFromAdapter(\\n                        amountParams,\\n                        IDexAdapter(payable(_params.positionManager.primexDNS().dexAdapter())),\\n                        _params.isAmountToBuy\\n                    );\\n\\n                    amountByDexByShare[vars.activeDexesLength][j] = _params.isAmountToBuy\\n                        ? (\\n                            amount == type(uint256).max\\n                                ? VERY_POSITIVE_VALUE\\n                                : amount.toInt256() + vars.gasInCheckedAsset\\n                        )\\n                        : (\\n                            amount == type(uint256).max\\n                                ? VERY_NEGATIVE_VALUE\\n                                : amount.toInt256() - vars.gasInCheckedAsset\\n                        );\\n                }\\n\\n                // we should get here if first _getAmountsFromAdapter is successful and DEX is active\\n                vars.activeDexesLength++;\\n            }\\n        }\\n\\n        _require(vars.activeDexesLength > 0, Errors.NO_ACTIVE_DEXES.selector);\\n\\n        // array with best splitting route\\n        uint256[] memory distribution = new uint256[](vars.activeDexesLength);\\n        uint256 involvedDexesLength;\\n\\n        {\\n            // matrix [activeDexesLength][shareCount] containing the maximum amount you receive for swapping\\n            // j parts of asset for each DEX\\n            int256[][] memory answer = new int256[][](vars.activeDexesLength);\\n            // matrix [activeDexesLength][shareCount] containing the amount of parts you should swap on previous DEXes\\n            // if you swap j parts on current DEX\\n            uint256[][] memory parentParts = new uint256[][](vars.activeDexesLength);\\n\\n            for (uint256 i; i < vars.activeDexesLength; i++) {\\n                answer[i] = new int256[](vars.shareCount);\\n                parentParts[i] = new uint256[](vars.shareCount);\\n            }\\n\\n            // copy first DEX from `amountByDexByShare` to the `answer` first row\\n            for (uint256 j; j < vars.shareCount; j++) {\\n                answer[0][j] = amountByDexByShare[0][j];\\n            }\\n\\n            for (uint256 i = 1; i < vars.activeDexesLength; i++) {\\n                for (uint256 j; j < vars.shareCount; j++) {\\n                    // choose the value from the previous DEX as a max value\\n                    int256 bestValue = answer[i - 1][j];\\n                    // save current shares count\\n                    parentParts[i][j] = j + 1;\\n                    // current value is a sum of previous max shares so that total shares count is j + 1\\n                    int256 currentValue = amountByDexByShare[i][j];\\n                    if (\\n                        _params.isAmountToBuy ? (currentValue < bestValue || bestValue == 0) : currentValue > bestValue\\n                    ) {\\n                        bestValue = currentValue;\\n                        parentParts[i][j] = 0;\\n                    }\\n\\n                    for (uint256 k; k < j; k++) {\\n                        currentValue = answer[i - 1][j - k - 1] + amountByDexByShare[i][k];\\n\\n                        // if current value of DEX + previous value of previous DEX is higher than max value\\n                        // update max value and save previous shares count\\n                        if (\\n                            _params.isAmountToBuy\\n                                ? (currentValue < bestValue || bestValue == 0)\\n                                : currentValue > bestValue\\n                        ) {\\n                            bestValue = currentValue;\\n                            parentParts[i][j] = j - k;\\n                        }\\n                    }\\n                    answer[i][j] = bestValue;\\n                }\\n            }\\n\\n            // iterate over `parentParts` backwards and collect the parts of the shares to get the resulting maximum amount\\n            {\\n                uint256 partsLeft = vars.shareCount;\\n                for (uint256 i; i < vars.activeDexesLength; i++) {\\n                    if (partsLeft == 0) break;\\n                    uint256 curExchange = vars.activeDexesLength - i - 1;\\n                    distribution[curExchange] = partsLeft - parentParts[curExchange][partsLeft - 1];\\n                    partsLeft = parentParts[curExchange][partsLeft - 1];\\n                    if (distribution[curExchange] > 0) {\\n                        involvedDexesLength++;\\n                    }\\n                }\\n            }\\n        }\\n        if (involvedDexesLength == 0) return _returnParams;\\n        _returnParams.megaRoutes = new PrimexPricingLibrary.MegaRoute[](1);\\n\\n        _returnParams.megaRoutes[0] = PrimexPricingLibrary.MegaRoute({\\n            shares: 1, // 100%\\n            routes: new PrimexPricingLibrary.Route[](1)\\n        });\\n\\n        _returnParams.megaRoutes[0].routes[0] = PrimexPricingLibrary.Route({\\n            to: _params.assetToBuy,\\n            paths: new PrimexPricingLibrary.Path[](involvedDexesLength)\\n        });\\n\\n        for (uint256 i; i < vars.activeDexesLength; i++) {\\n            if (distribution[i] == 0) continue;\\n\\n            _returnParams.megaRoutes[0].routes[0].paths[vars.filledRoutes] = PrimexPricingLibrary.Path({\\n                shares: distribution[i],\\n                dexName: activeDexes[i].dex,\\n                payload: PrimexPricingLibrary.encodePath(\\n                    vars.path,\\n                    _params.positionManager.primexDNS().getDexAddress(activeDexes[i].dex),\\n                    activeDexes[i].ancillaryData,\\n                    payable(_params.positionManager.primexDNS().dexAdapter()),\\n                    _params.isAmountToBuy\\n                )\\n            });\\n            vars.filledRoutes++;\\n            // collect some additional statistics: total return amount, estimate gas spending\\n            _returnParams.estimateGasAmount = _returnParams.estimateGasAmount.add(vars.gases[i]);\\n            int256 value = amountByDexByShare[i][distribution[i] - 1];\\n            _returnParams.returnAmount =\\n                _returnParams.returnAmount +\\n                uint256(\\n                    (\\n                        value == 0 ? int256(0) : _params.isAmountToBuy\\n                            ? (value - ((vars.gases[i] * _params.gasPriceInCheckedAsset) / 1e18).toInt256())\\n                            : (value + ((vars.gases[i] * _params.gasPriceInCheckedAsset) / 1e18).toInt256())\\n                    )\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Interface checker\\n     * @param interfaceId The interface id to check\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IBestDexLens).interfaceId || interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    /**\\n     * @notice Retrieves the amounts from a DEX adapter contract.\\n     * @param _params The parameters for getting amounts from the adapter.\\n     * @param _adapter The DEX adapter contract.\\n     * @param _isAmountToBuy A flag indicating whether the amount to retrieve is for buying or selling.\\n     * @return The retrieved amount.\\n     */\\n    function _getAmountsFromAdapter(\\n        IDexAdapter.GetAmountsParams memory _params,\\n        IDexAdapter _adapter,\\n        bool _isAmountToBuy\\n    ) internal returns (uint256) {\\n        if (_isAmountToBuy) {\\n            try _adapter.getAmountsIn(_params) returns (uint256[3] memory answersList) {\\n                return answersList[0];\\n            } catch {\\n                return type(uint256).max;\\n            }\\n        }\\n        try _adapter.getAmountsOut(_params) returns (uint256[3] memory answersList) {\\n            return answersList[1];\\n        } catch {\\n            return type(uint256).max;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77307c21d7d7b0bed50c1f620a082037da290ec20d739201f4958ee4961334b4\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    error SWAP_DEADLINE_PASSED();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error INVALID_AMOUNT();\\n    error POOL_CALL_FAILED();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n    error INCORRECT_BORROWED_AMOUNT();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error THERE_IS_DIRECT_ROUTE();\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n    error WRONG_ORACLE_ROUTES_LENGTH();\\n    error WRONG_ASSET_B();\\n    error INCORRECT_ROUTE_SEQUENCE();\\n    error INCORRECT_PYTH_PRICE();\\n    error TOKEN_PAIR_IS_NOT_TRUSTED();\\n    error INCORRECT_TOKEN_TO();\\n    error INCORRECT_PYTH_ROUTE();\\n    error INCORRECT_CHAINLINK_ROUTE();\\n    error NOT_ENOUGH_MSG_VALUE();\\n    error PUBLISH_TIME_EXCEEDS_THRESHOLD_TIME();\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n    error LEVERAGE_TOLERANCE_IS_NOT_CORRECT();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error LEVERAGE_TOLERANCE_EXCEEDED();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n    error MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error TOKEN_APPROVE_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n    error INCORRECT_OPTIMISM_GAS_COEFFICIENT();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n\\n    //FlashLoan\\n    error INCONSISTENT_FLASHLOAN_PARAMS();\\n    error INVALID_FLASHLOAN_EXECUTOR_RETURN();\\n    error FLASH_LOAN_FEE_RATE_IS_MORE_10_PERCENT();\\n    error FLASH_LOAN_PROTOCOL_RATE_IS_MORE_50_PERCENT();\\n\\n    // DepositManager\\n    error REWARD_PERCENT_SHOULD_BE_GREATER_THAN_ZERO();\\n    error TOKEN_CANNOT_BE_P_TOKEN();\\n}\\n\",\"keccak256\":\"0xe51b2018b7a236e4977fd971fb615ea73c9d07ce6a647725352da8b9158ce48a\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/LimitOrderLibrary.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalOpeningManager} from \\\"../interfaces/IConditionalOpeningManager.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ISwapManager} from \\\"../SwapManager/ISwapManager.sol\\\";\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary LimitOrderLibrary {\\n    using WadRayMath for uint256;\\n\\n    enum CloseReason {\\n        FilledMargin,\\n        FilledSpot,\\n        FilledSwap,\\n        Cancelled\\n    }\\n\\n    struct Condition {\\n        uint256 managerType;\\n        bytes params;\\n    }\\n\\n    /**\\n     * @dev Creates a limit order and locks the deposit asset in the traderBalanceVault\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param positionAsset The address of output token for exchange\\n     * @param depositAsset The address of the deposit token\\n     * @param depositAmount The amount of deposit trader funds for deal\\n     * @param feeToken An asset in which the fee will be paid. At this point it could be the pmx, the epmx or a positionAsset\\n     * @param trader The trader, who has created the order\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param id The unique id of the order\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition The flag to indicate whether position should be opened\\n     * @param createdAt The timeStamp when the order was created\\n     * @param updatedConditionsAt The timestamp when the open condition was updated\\n     */\\n    struct LimitOrder {\\n        IBucketV3 bucket;\\n        address positionAsset;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address feeToken;\\n        uint256 protocolFee;\\n        address trader;\\n        uint256 deadline;\\n        uint256 id;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        // The byte-encoded params, can be used for future updates\\n        bytes extraParams;\\n    }\\n\\n    /**\\n     * @dev Structure for the \\u0441reateLimitOrder with parameters necessary to create limit order\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param deadline Unix timestamp after which the order will not be filled\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param shouldOpenPosition Bool, indicate whether position should be opened\\n     * @param openingManagerAddresses Array of contract addresses that will be called in canBeFilled\\n     * @param openingManagerParams Array of bytes representing params for contracts in openingManagerAddresses\\n     * @param closingManagerAddresses Array of contract addresses that will be called in canBeClosed\\n     * @param closingManagerParams Array of bytes representing params for contracts in closingManagerAddresses\\n     */\\n    struct CreateLimitOrderParams {\\n        string bucket;\\n        uint256 depositAmount;\\n        address depositAsset;\\n        address positionAsset;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        uint256 leverage;\\n        bool shouldOpenPosition;\\n        Condition[] openConditions;\\n        Condition[] closeConditions;\\n        bool isProtocolFeeInPmx;\\n        bytes nativeDepositAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    struct CreateLimitOrderVars {\\n        bool isSpot;\\n        IBucketV3 bucket;\\n        uint256 positionSize;\\n        address priceOracle;\\n        uint256 rate;\\n        IPrimexDNSStorageV3.TradingOrderType tradingOrderType;\\n        bool isThirdAsset;\\n    }\\n\\n    /**\\n     * @dev Opens a position on an existing order\\n     * @param orderId order id\\n     * @param com address of ConditionalOpeningManager\\n     * @param comAdditionalParams  params needed for ConditionalOpeningManager to calc canBeFilled\\n     * @param firstAssetMegaRoutes routes to swap first asset\\n     * @param depositInThirdAssetMegaRoutes routes to swap deposit asset\\n     */\\n    struct OpenPositionParams {\\n        uint256 orderId;\\n        uint256 conditionIndex;\\n        bytes comAdditionalParams;\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n        address keeper;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes depositSoldAssetOracleData;\\n        bytes nativePmxOracleData;\\n        bytes positionNativeAssetOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct OpenPositionByOrderVars {\\n        address assetIn;\\n        address assetOut;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        CloseReason closeReason;\\n        uint256 newPositionId;\\n        uint256 exchangeRate;\\n        uint256 feeInPositionAsset;\\n        uint256 feeInPmx;\\n    }\\n\\n    /**\\n     * @dev Params for PositionManager to open position\\n     * @param order order\\n     * @param firstAssetMegaRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositInThirdAssetMegaRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionByOrderParams {\\n        address sender;\\n        LimitOrder order;\\n        Condition[] closeConditions;\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes depositSoldAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        uint256 borrowedAmount;\\n    }\\n\\n    /**\\n     * @dev Structure for the updateOrder with parameters necessary to update limit order\\n     * @param orderId order id to update\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param makeDeposit Bool, add a collateral deposit within the current transaction\\n     * @param leverage leverage for trading\\n     * @param takeDepositFromWallet Bool, add a collateral deposit within the current transaction\\n     */\\n    struct UpdateLimitOrderParams {\\n        uint256 orderId;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n        bool isProtocolFeeInPmx;\\n        bool takeDepositFromWallet;\\n        bytes nativeDepositOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n\\n    /**\\n     * @notice Updates the leverage of a limit order.\\n     * @param _order The limit order to update.\\n     * @param _leverage The new leverage value in WAD format for the order.\\n     * @param _primexDNS The instance of the PrimexDNS contract\\n     */\\n    function updateLeverage(LimitOrder storage _order, uint256 _leverage, IPrimexDNSV3 _primexDNS) public {\\n        _require(_leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n        _require(_order.leverage != WadRayMath.WAD, Errors.CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN.selector);\\n\\n        _require(\\n            _leverage <\\n                _order.bucket.maxAssetLeverage(\\n                    _order.positionAsset,\\n                    _primexDNS.protocolFeeRates(IPrimexDNSStorageV3.FeeRateType.MarginLimitOrderExecuted)\\n                ),\\n            Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n        );\\n        _order.leverage = _leverage;\\n    }\\n\\n    /**\\n     * @notice Updates the deposit details of a LimitOrder.\\n     * @param _order The LimitOrder to update.\\n     * @param _amount The amount of the asset being deposited.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or unlock the deposited asset.\\n     * @param traderBalanceVault The instance of ITraderBalanceVault used for deposit and unlock operations.\\n     */\\n    function updateDeposit(\\n        LimitOrderLibrary.LimitOrder storage _order,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        ITraderBalanceVault traderBalanceVault\\n    ) public {\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            _order.depositAsset,\\n            (_amount > _order.depositAmount) ? _amount - _order.depositAmount : _order.depositAmount - _amount,\\n            _takeDepositFromWallet,\\n            _amount > _order.depositAmount\\n        );\\n        _order.depositAmount = _amount;\\n    }\\n\\n    /**\\n     * @notice Sets the open conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param openConditionsMap The mapping of order IDs to open conditions.\\n     * @param openConditions The array of open conditions.\\n     * @param primexDNS The instance of the Primex DNS contract.\\n     */\\n    function setOpenConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage openConditionsMap,\\n        Condition[] memory openConditions,\\n        IPrimexDNSV3 primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(openConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(openConditions.length > 0, Errors.SHOULD_HAVE_OPEN_CONDITIONS.selector);\\n        if (openConditionsMap[_order.id].length > 0) {\\n            delete openConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < openConditions.length; i++) {\\n            condition = openConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalOpeningManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_COM.selector\\n            );\\n            openConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the close conditions for a LimitOrder.\\n     * @param _order The limit order.\\n     * @param closeConditionsMap The mapping of order IDs to close conditions.\\n     * @param closeConditions The array of close conditions to set.\\n     * @param primexDNS The Primex DNS contract address.\\n     */\\n    function setCloseConditions(\\n        LimitOrderLibrary.LimitOrder memory _order,\\n        mapping(uint256 => Condition[]) storage closeConditionsMap,\\n        Condition[] memory closeConditions,\\n        IPrimexDNSV3 primexDNS\\n    ) public {\\n        _require(hasNoConditionManagerTypeDuplicates(closeConditions), Errors.SHOULD_NOT_HAVE_DUPLICATES.selector);\\n        _require(\\n            _order.shouldOpenPosition || closeConditions.length == 0,\\n            Errors.SHOULD_NOT_HAVE_CLOSE_CONDITIONS.selector\\n        );\\n\\n        if (closeConditionsMap[_order.id].length > 0) {\\n            delete closeConditionsMap[_order.id];\\n        }\\n        Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n            closeConditionsMap[_order.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a limit order.\\n     * @param _params The struct containing the order parameters.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param primexDNS The instance of the PrimexDNS contract.\\n     * @return The created limit order.\\n     */\\n    function createLimitOrder(\\n        CreateLimitOrderParams calldata _params,\\n        IPositionManagerV2 pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        IPrimexDNSV3 primexDNS\\n    ) public returns (LimitOrder memory) {\\n        _require(_params.leverage >= WadRayMath.WAD, Errors.INCORRECT_LEVERAGE.selector);\\n        _require(_params.deadline > block.timestamp, Errors.INCORRECT_DEADLINE.selector);\\n\\n        CreateLimitOrderVars memory vars;\\n        vars.isSpot = bytes(_params.bucket).length == 0;\\n        vars.positionSize = _params.depositAmount.wmul(_params.leverage);\\n        vars.priceOracle = address(pm.priceOracle());\\n        if (vars.isSpot) {\\n            _require(_params.leverage == WadRayMath.WAD, Errors.LEVERAGE_SHOULD_BE_1.selector);\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            vars.tradingOrderType = _params.shouldOpenPosition\\n                ? IPrimexDNSStorageV3.TradingOrderType.SpotLimitOrder\\n                : IPrimexDNSStorageV3.TradingOrderType.SwapLimitOrder;\\n        } else {\\n            _require(_params.shouldOpenPosition, Errors.SHOULD_OPEN_POSITION.selector);\\n            _require(_params.leverage > WadRayMath.WAD, Errors.LEVERAGE_MUST_BE_MORE_THAN_1.selector);\\n            vars.bucket = IBucketV3(primexDNS.getBucketAddress(_params.bucket));\\n            _require(vars.bucket.getLiquidityMiningParams().isBucketLaunched, Errors.BUCKET_IS_NOT_LAUNCHED.selector);\\n\\n            (, bool tokenAllowed) = vars.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n            _require(\\n                _params.leverage <\\n                    vars.bucket.maxAssetLeverage(\\n                        _params.positionAsset,\\n                        primexDNS.protocolFeeRates(IPrimexDNSStorageV3.FeeRateType.MarginLimitOrderExecuted)\\n                    ),\\n                Errors.LEVERAGE_EXCEEDS_MAX_LEVERAGE.selector\\n            );\\n            vars.isThirdAsset =\\n                _params.depositAsset != address(vars.bucket.borrowedAsset()) &&\\n                _params.depositAsset != _params.positionAsset;\\n            vars.tradingOrderType = vars.isThirdAsset\\n                ? IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrderDepositInThirdAsset\\n                : IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrder;\\n        }\\n        LimitOrder memory order = LimitOrder({\\n            bucket: IBucketV3(address(0)),\\n            positionAsset: _params.positionAsset,\\n            depositAsset: _params.depositAsset,\\n            depositAmount: _params.depositAmount,\\n            feeToken: _params.isProtocolFeeInPmx ? primexDNS.pmx() : _params.positionAsset,\\n            protocolFee: 0,\\n            trader: msg.sender,\\n            deadline: _params.deadline,\\n            id: 0,\\n            leverage: _params.leverage,\\n            shouldOpenPosition: _params.shouldOpenPosition,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n        order.bucket = vars.bucket;\\n\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            vars.positionSize,\\n            order.depositAsset,\\n            vars.priceOracle,\\n            pm.keeperRewardDistributor(),\\n            primexDNS,\\n            vars.tradingOrderType,\\n            _params.nativeDepositAssetOracleData\\n        );\\n\\n        // deposit locking\\n        depositLockOrUnlock(\\n            traderBalanceVault,\\n            order.depositAsset,\\n            order.depositAmount,\\n            _params.takeDepositFromWallet,\\n            true\\n        );\\n\\n        return order;\\n    }\\n\\n    /**\\n     * @notice Opens a position by order.\\n     * @param order The LimitOrder storage containing order details.\\n     * @param _params The OpenPositionParams calldata containing additional position parameters.\\n     * @param _closeConditions The Condition array containing close conditions for the position.\\n     * @param pm The instance of the PositionManager contract.\\n     * @param traderBalanceVault The instance of the TraderBalanceVault contract.\\n     * @param swapManager The instance of the SwapManager contract.\\n     * @return vars The OpenPositionByOrderVars struct containing the result of the open position operation.\\n     */\\n    function openPositionByOrder(\\n        LimitOrder storage order,\\n        OpenPositionParams calldata _params,\\n        Condition[] memory _closeConditions,\\n        IPositionManagerV2 pm,\\n        ITraderBalanceVault traderBalanceVault,\\n        ISwapManager swapManager,\\n        uint256 _initialGasLeft\\n    ) public returns (OpenPositionByOrderVars memory) {\\n        OpenPositionByOrderVars memory vars;\\n        bool isSpot = address(order.bucket) == address(0);\\n\\n        if (order.protocolFee != 0) {\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams({\\n                    trader: order.trader,\\n                    receiver: order.trader,\\n                    asset: order.feeToken,\\n                    amount: order.protocolFee\\n                })\\n            );\\n            order.protocolFee = 0;\\n            order.feeToken = order.positionAsset;\\n        }\\n\\n        if (order.shouldOpenPosition) {\\n            vars.closeReason = isSpot ? CloseReason.FilledSpot : CloseReason.FilledMargin;\\n            (vars.amountIn, vars.amountOut, vars.newPositionId, vars.exchangeRate, vars.feeInPositionAsset) = pm\\n                .openPositionByOrder(\\n                    OpenPositionByOrderParams({\\n                        sender: msg.sender,\\n                        order: order,\\n                        closeConditions: _closeConditions,\\n                        firstAssetMegaRoutes: _params.firstAssetMegaRoutes,\\n                        depositInThirdAssetMegaRoutes: _params.depositInThirdAssetMegaRoutes,\\n                        firstAssetOracleData: _params.firstAssetOracleData,\\n                        thirdAssetOracleData: _params.thirdAssetOracleData,\\n                        depositSoldAssetOracleData: _params.depositSoldAssetOracleData,\\n                        positionUsdOracleData: _params.positionUsdOracleData,\\n                        nativePositionAssetOracleData: _params.nativePositionAssetOracleData,\\n                        pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n                        nativeSoldAssetOracleData: _params.nativeSoldAssetOracleData,\\n                        borrowedAmount: _params.borrowedAmount\\n                    })\\n                );\\n        } else {\\n            _require(\\n                _params.depositInThirdAssetMegaRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n            vars.closeReason = CloseReason.FilledSwap;\\n            vars.amountIn = order.depositAmount;\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams({\\n                    trader: order.trader,\\n                    receiver: address(this),\\n                    asset: order.depositAsset,\\n                    amount: order.depositAmount\\n                })\\n            );\\n\\n            (vars.amountOut, vars.feeInPositionAsset) = swapManager.swapInLimitOrder(\\n                ISwapManager.SwapInLimitOrderParams({\\n                    depositAsset: order.depositAsset,\\n                    positionAsset: order.positionAsset,\\n                    depositAmount: order.depositAmount,\\n                    megaRoutes: _params.firstAssetMegaRoutes,\\n                    trader: order.trader,\\n                    deadline: order.deadline,\\n                    feeToken: order.feeToken,\\n                    keeperRewardDistributor: address(pm.keeperRewardDistributor()),\\n                    gasSpent: _initialGasLeft - gasleft(),\\n                    depositPositionAssetOracleData: _params.firstAssetOracleData,\\n                    pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n                    nativePositionAssetOracleData: _params.nativePositionAssetOracleData\\n                }),\\n                pm.getOracleTolerableLimit(order.depositAsset, order.positionAsset)\\n            );\\n\\n            uint256 multiplierDepositAsset = 10 ** (18 - IERC20Metadata(order.depositAsset).decimals());\\n            uint256 multiplierPositionAsset = 10 ** (18 - IERC20Metadata(order.positionAsset).decimals());\\n            vars.exchangeRate =\\n                (vars.amountIn * multiplierDepositAsset).wdiv(\\n                    (vars.amountOut + vars.feeInPositionAsset) * multiplierPositionAsset\\n                ) /\\n                multiplierDepositAsset;\\n        }\\n\\n        vars.assetIn = isSpot ? order.depositAsset : address(order.bucket.borrowedAsset());\\n        vars.assetOut = order.positionAsset;\\n        return vars;\\n    }\\n\\n    /**\\n     * @notice Checks if an array of Condition structs has no duplicate manager types.\\n     * @param conditions The array of Condition structs to be checked.\\n     * @return bool Boolean value indicating whether the array has no duplicate manager types.\\n     */\\n    function hasNoConditionManagerTypeDuplicates(Condition[] memory conditions) public pure returns (bool) {\\n        if (conditions.length == 0) {\\n            return true;\\n        }\\n        for (uint256 i; i < conditions.length - 1; i++) {\\n            for (uint256 j = i + 1; j < conditions.length; j++) {\\n                if (conditions[i].managerType == conditions[j].managerType) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice This function is used to either deposit or unlock assets in the trader balance vault.\\n     * @param traderBalanceVault The instance of the trader balance vault.\\n     * @param _depositAsset The address of the asset to be deposited or unlocked.\\n     * @param _amount The amount of the asset to be deposited or unlocked.\\n     * @param _takeDepositFromWallet Boolean indicating whether to make a deposit or not.\\n     * @param _isAdd Boolean indicating whether to lock or unlock asset. Should lock asset, if true.\\n     */\\n    function depositLockOrUnlock(\\n        ITraderBalanceVault traderBalanceVault,\\n        address _depositAsset,\\n        uint256 _amount,\\n        bool _takeDepositFromWallet,\\n        bool _isAdd\\n    ) internal {\\n        if (!_isAdd) {\\n            traderBalanceVault.unlockAsset(\\n                ITraderBalanceVault.UnlockAssetParams(msg.sender, msg.sender, _depositAsset, _amount)\\n            );\\n            return;\\n        }\\n        if (_takeDepositFromWallet) {\\n            if (_depositAsset == NATIVE_CURRENCY) {\\n                _require(msg.value >= _amount, Errors.INSUFFICIENT_DEPOSIT.selector);\\n                traderBalanceVault.increaseLockedBalance{value: _amount}(msg.sender, _depositAsset, _amount);\\n                if (msg.value > _amount) {\\n                    uint256 rest = msg.value - _amount;\\n                    traderBalanceVault.topUpAvailableBalance{value: rest}(msg.sender, NATIVE_CURRENCY, rest);\\n                }\\n                return;\\n            }\\n            TokenTransfersLibrary.doTransferFromTo(_depositAsset, msg.sender, address(traderBalanceVault), _amount);\\n            traderBalanceVault.increaseLockedBalance(msg.sender, _depositAsset, _amount);\\n            return;\\n        }\\n        traderBalanceVault.useTraderAssets(\\n            ITraderBalanceVault.LockAssetParams(\\n                msg.sender,\\n                address(0),\\n                _depositAsset,\\n                _amount,\\n                ITraderBalanceVault.OpenType.CREATE_LIMIT_ORDER\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x49f08b3590855c170de2216ce513596dc9f722961ba1db3e31cce20647e87357\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PositionLibrary.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {PrimexPricingLibrary} from \\\"./PrimexPricingLibrary.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\nimport {LimitOrderLibrary} from \\\"./LimitOrderLibrary.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nimport {NATIVE_CURRENCY} from \\\"../Constants.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {IPrimexDNSV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNSStorage.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IConditionalClosingManager} from \\\"../interfaces/IConditionalClosingManager.sol\\\";\\nimport {ITakeProfitStopLossCCM} from \\\"../interfaces/ITakeProfitStopLossCCM.sol\\\";\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\n\\nlibrary PositionLibrary {\\n    using WadRayMath for uint256;\\n\\n    event ClosePosition(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address indexed closedBy,\\n        address bucketAddress,\\n        address soldAsset,\\n        address positionAsset,\\n        uint256 decreasePositionAmount,\\n        int256 profit,\\n        uint256 positionDebt,\\n        uint256 amountOut,\\n        PositionLibrary.CloseReason reason\\n    );\\n\\n    event PaidProtocolFee(\\n        uint256 indexed positionId,\\n        address indexed trader,\\n        address paymentAsset,\\n        IPrimexDNSStorageV3.FeeRateType indexed feeRateType,\\n        uint256 feeInPaymentAsset,\\n        uint256 feeInPmx\\n    );\\n\\n    /**\\n     * @notice This struct represents a trading position\\n     * @param id unique identifier for the position\\n     * @param scaledDebtAmount scaled debt amount associated with the position\\n     * @param bucket instance of the Bucket associated for trading\\n     * @param soldAsset bucket asset in the case of margin trading or deposit asset in the case of spot trading\\n     * @param depositAmountInSoldAsset equivalent of trader deposit size (this deposit can be in any asset) in the sold asset\\n     * or just deposit amount for spot trading\\n     * @param positionAsset asset of the trading position\\n     * @param positionAmount amount of the trading position\\n     * @param trader address of the trader holding the position\\n     * @param openBorrowIndex variable borrow index when position was opened\\n     * @param createdAt timestamp when the position was created\\n     * @param updatedConditionsAt timestamp when the close condition was updated\\n     * @param extraParams byte-encoded params, utilized for the feeToken address\\n     */\\n    struct Position {\\n        uint256 id;\\n        uint256 scaledDebtAmount;\\n        IBucketV3 bucket;\\n        address soldAsset;\\n        uint256 depositAmountInSoldAsset;\\n        address positionAsset;\\n        uint256 positionAmount;\\n        address trader;\\n        uint256 openBorrowIndex;\\n        uint256 createdAt;\\n        uint256 updatedConditionsAt;\\n        bytes extraParams;\\n    }\\n\\n    struct IncreaseDepositParams {\\n        uint256 amount;\\n        address asset;\\n        bool takeDepositFromWallet;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 amountOutMin;\\n    }\\n\\n    struct DecreaseDepositParams {\\n        uint256 amount;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        uint256 oracleTolerableLimit;\\n        uint256 maintenanceBuffer;\\n        address keeperRewardDistributor;\\n        bytes positionSoldAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n    }\\n\\n    struct MegaSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        address receiver;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n    }\\n\\n    struct ClosePositionParams {\\n        uint256 closeAmount;\\n        uint256 depositDecrease;\\n        uint256 scaledDebtAmount;\\n        address depositReceiver;\\n        PrimexPricingLibrary.MegaRoute[] megaRoutes;\\n        uint256 amountOutMin;\\n        uint256 oracleTolerableLimit;\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        LimitOrderLibrary.Condition closeCondition;\\n        bytes ccmAdditionalParams;\\n        bool borrowedAmountIsNotZero;\\n        uint256 pairPriceDrop;\\n        uint256 securityBuffer;\\n        bool needOracleTolerableLimitCheck;\\n        uint256 initialGasLeft;\\n        address keeperRewardDistributor;\\n        bytes positionSoldAssetOracleData;\\n        bytes pmxSoldAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n    }\\n\\n    struct ClosePositionVars {\\n        address payable dexAdapter;\\n        uint256 borowedAssetAmount;\\n        uint256 amountToReturn;\\n        uint256 permanentLoss;\\n        uint256 fee;\\n        uint256 gasSpent;\\n    }\\n\\n    struct ClosePositionEventData {\\n        int256 profit;\\n        uint256 debtAmount;\\n        uint256 amountOut;\\n        uint256 amountOutAfterFee;\\n        IKeeperRewardDistributorStorage.KeeperActionType actionType;\\n        address trader;\\n        address paymentAsset;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        uint256 feeInPaymentAsset;\\n        uint256 feeInPmx;\\n    }\\n\\n    struct OpenPositionVars {\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n        PrimexPricingLibrary.DepositData depositData;\\n        uint256 borrowedAmount;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool isSpot;\\n        bool isThirdAsset;\\n        bool takeDepositFromWallet;\\n        bool byOrder;\\n        uint256 orderLeverage;\\n        address sender;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n        bool needOracleTolerableLimitCheck;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n    }\\n\\n    struct OpenPositionEventData {\\n        uint256 feeInPositionAsset;\\n        uint256 feeInPmx;\\n        uint256 entryPrice;\\n        uint256 leverage;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n    }\\n\\n    /**\\n     * The struct for openPosition function local vars\\n     */\\n    struct OpenPositionLocalData {\\n        uint256 amountToTransfer;\\n        address payable dexAdapter;\\n        address depositReceiver;\\n        uint256 depositInPositionAsset;\\n        bool isSpot;\\n        IPrimexDNSStorageV3.TradingOrderType tradingOrderType;\\n        uint256 positionAmountAfterFeeInSoldAsset;\\n        uint256 borrowedAmountInPositionAsset;\\n        uint256 leverage;\\n        uint256 multiplierBorrowedAsset;\\n        uint256 multiplierPositionAsset;\\n        address positionAsset;\\n        uint256 positionAmount;\\n    }\\n\\n    /**\\n     * @dev Structure for the OpenPositionParams when margin trading is activated\\n     * @param bucket The bucket, from which the loan will be taken\\n     * @param borrowedAmount The amount of tokens borrowed to be exchanged\\n     * @param depositInThirdAssetMegaRoutes routes to swap deposit in third asset on dex\\n     */\\n    struct OpenPositionMarginParams {\\n        string bucket;\\n        uint256 borrowedAmount;\\n        PrimexPricingLibrary.MegaRoute[] depositInThirdAssetMegaRoutes;\\n    }\\n\\n    /**\\n     * @dev Structure for the openPosition with parameters necessary to open a position\\n     * @param marginParams margin trading related params\\n     * @param firstAssetMegaRoutes routes to swap first asset on dex\\n     * (borrowedAmount + depositAmount if deposit in borrowedAsset)\\n     * @param depositAsset The address of the deposit token (collateral for margin trade or\\n     * locked funds for spot)\\n     * @param depositAmount The amount of deposit funds for deal\\n     * @param positionAsset The address output token for exchange\\n     * @param amountOutMin The minimum amount of output tokens\\n     * that must be received for the transaction not to revert.\\n     * @param deadline Unix timestamp after which the transaction will revert.\\n     * @param takeDepositFromWallet Bool, add a deposit within the current transaction\\n     * @param closeConditions Array of conditions that position can be closed by\\n     */\\n    struct OpenPositionParams {\\n        OpenPositionMarginParams marginParams;\\n        PrimexPricingLibrary.MegaRoute[] firstAssetMegaRoutes;\\n        address depositAsset;\\n        uint256 depositAmount;\\n        address positionAsset;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        bool takeDepositFromWallet;\\n        bool isProtocolFeeInPmx;\\n        LimitOrderLibrary.Condition[] closeConditions;\\n        bytes firstAssetOracleData;\\n        bytes thirdAssetOracleData;\\n        bytes depositSoldAssetOracleData;\\n        bytes positionUsdOracleData;\\n        bytes nativePositionAssetOracleData;\\n        bytes pmxPositionAssetOracleData;\\n        bytes nativeSoldAssetOracleData;\\n        bytes[][] pullOracleData;\\n        uint256[] pullOracleTypes;\\n    }\\n    struct PositionManagerParams {\\n        IPrimexDNSV3 primexDNS;\\n        IPriceOracleV2 priceOracle;\\n        ITraderBalanceVault traderBalanceVault;\\n        uint256 oracleTolerableLimit;\\n        uint256 oracleTolerableLimitForThirdAsset;\\n        uint256 maxPositionSize;\\n        uint256 initialGasLeft;\\n        address keeperRewardDistributor;\\n    }\\n\\n    struct ScaledParams {\\n        uint256 decreasePercent;\\n        uint256 scaledDebtAmount;\\n        uint256 depositDecrease;\\n        bool borrowedAmountIsNotZero;\\n    }\\n\\n    enum CloseReason {\\n        CLOSE_BY_TRADER,\\n        RISKY_POSITION,\\n        BUCKET_DELISTED,\\n        LIMIT_CONDITION,\\n        BATCH_LIQUIDATION,\\n        BATCH_STOP_LOSS,\\n        BATCH_TAKE_PROFIT\\n    }\\n\\n    /**\\n     * @dev Increases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for increasing the deposit.\\n     * @return The amount of trader debtTokens burned.\\n     */\\n    function increaseDeposit(Position storage position, IncreaseDepositParams memory params) public returns (uint256) {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.scaledDebtAmount != 0, Errors.BORROWED_AMOUNT_IS_ZERO.selector);\\n        address borrowedAsset = position.soldAsset;\\n\\n        uint256 depositAmountInBorrowed;\\n        address depositReceiver = params.primexDNS.dexAdapter();\\n        if (params.asset == borrowedAsset) {\\n            depositReceiver = address(position.bucket);\\n            depositAmountInBorrowed = params.amount;\\n        }\\n\\n        if (params.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(params.asset, msg.sender, depositReceiver, params.amount);\\n        } else {\\n            params.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams(\\n                    msg.sender,\\n                    depositReceiver,\\n                    params.asset,\\n                    params.amount,\\n                    ITraderBalanceVault.OpenType.OPEN\\n                )\\n            );\\n        }\\n\\n        if (params.asset != borrowedAsset) {\\n            depositAmountInBorrowed = PrimexPricingLibrary.megaSwap(\\n                PrimexPricingLibrary.MegaSwapParams({\\n                    tokenA: params.asset,\\n                    tokenB: borrowedAsset,\\n                    amountTokenA: params.amount,\\n                    megaRoutes: params.megaRoutes,\\n                    receiver: address(position.bucket),\\n                    deadline: block.timestamp\\n                }),\\n                0,\\n                payable(params.primexDNS.dexAdapter()),\\n                address(params.priceOracle),\\n                false,\\n                new bytes(0)\\n            );\\n            _require(depositAmountInBorrowed >= params.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n        }\\n\\n        uint256 debt = getDebt(position);\\n        uint256 amountToTrader;\\n        uint256 debtToBurn = depositAmountInBorrowed;\\n\\n        if (depositAmountInBorrowed >= debt) {\\n            amountToTrader = depositAmountInBorrowed - debt;\\n            debtToBurn = debt;\\n            position.scaledDebtAmount = 0;\\n            if (amountToTrader > 0)\\n                params.traderBalanceVault.topUpAvailableBalance(position.trader, borrowedAsset, amountToTrader);\\n        } else {\\n            position.scaledDebtAmount =\\n                position.scaledDebtAmount -\\n                debtToBurn.rdiv(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        position.depositAmountInSoldAsset += debtToBurn;\\n\\n        position.bucket.decreaseTraderDebt(\\n            position.trader,\\n            debtToBurn,\\n            address(params.traderBalanceVault),\\n            amountToTrader,\\n            0\\n        );\\n        return debtToBurn;\\n    }\\n\\n    /**\\n     * @dev Decreases the deposit amount for a position.\\n     * @param position The storage reference to the position.\\n     * @param params The parameters for the decrease deposit operation.\\n     */\\n    function decreaseDeposit(Position storage position, DecreaseDepositParams memory params) public {\\n        _require(msg.sender == position.trader, Errors.CALLER_IS_NOT_TRADER.selector);\\n        _require(position.bucket != IBucketV3(address(0)), Errors.IS_SPOT_POSITION.selector);\\n        _require(position.bucket.isActive(), Errors.BUCKET_IS_NOT_ACTIVE.selector);\\n        _require(params.amount > 0, Errors.DECREASE_AMOUNT_IS_ZERO.selector);\\n        _require(params.amount <= position.depositAmountInSoldAsset, Errors.AMOUNT_IS_MORE_THAN_DEPOSIT.selector);\\n        position.depositAmountInSoldAsset -= params.amount;\\n        position.scaledDebtAmount =\\n            position.scaledDebtAmount +\\n            params.amount.rdiv(position.bucket.getNormalizedVariableDebt());\\n\\n        params.traderBalanceVault.topUpAvailableBalance(position.trader, position.soldAsset, params.amount);\\n\\n        uint256 feeInPaymentAsset = decodeFeeTokenAddress(position.extraParams) == address(0)\\n            ? 0\\n            : PrimexPricingLibrary.calculateFeeInPaymentAsset(\\n                PrimexPricingLibrary.CalculateFeeInPaymentAssetParams({\\n                    primexDNS: params.primexDNS,\\n                    priceOracle: address(params.priceOracle),\\n                    feeRateType: IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper,\\n                    paymentAsset: position.soldAsset,\\n                    paymentAmount: params.amount,\\n                    keeperRewardDistributor: params.keeperRewardDistributor,\\n                    gasSpent: 0,\\n                    isFeeProhibitedInPmx: true,\\n                    nativePaymentAssetOracleData: params.nativeSoldAssetOracleData\\n                })\\n            );\\n        _require(\\n            health(\\n                position,\\n                params.priceOracle,\\n                params.pairPriceDrop,\\n                params.securityBuffer,\\n                params.oracleTolerableLimit,\\n                feeInPaymentAsset,\\n                params.positionSoldAssetOracleData\\n            ) >= WadRayMath.WAD + params.maintenanceBuffer,\\n            Errors.INSUFFICIENT_DEPOSIT_SIZE.selector\\n        );\\n        position.bucket.increaseDebt(position.trader, params.amount, address(params.traderBalanceVault));\\n    }\\n\\n    /**\\n     * @notice Closes a position.\\n     * @param position The position to be closed.\\n     * @param params The parameters for closing the position.\\n     * @param reason The reason for closing the position.\\n     * @return posEventData The event data for the closed position.\\n     */\\n    function closePosition(\\n        Position memory position,\\n        ClosePositionParams memory params,\\n        CloseReason reason\\n    ) public returns (ClosePositionEventData memory) {\\n        ClosePositionEventData memory posEventData;\\n        ClosePositionVars memory vars;\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            posEventData.debtAmount = params.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n        }\\n\\n        vars.dexAdapter = payable(params.primexDNS.dexAdapter());\\n\\n        TokenTransfersLibrary.doTransferOut(position.positionAsset, vars.dexAdapter, params.closeAmount);\\n        posEventData.amountOut = PrimexPricingLibrary.megaSwap(\\n            PrimexPricingLibrary.MegaSwapParams({\\n                tokenA: position.positionAsset,\\n                tokenB: position.soldAsset,\\n                amountTokenA: params.closeAmount,\\n                megaRoutes: params.megaRoutes,\\n                receiver: address(this),\\n                deadline: block.timestamp\\n            }),\\n            params.oracleTolerableLimit,\\n            vars.dexAdapter,\\n            address(params.priceOracle),\\n            params.needOracleTolerableLimitCheck,\\n            params.positionSoldAssetOracleData\\n        );\\n\\n        posEventData.paymentAsset = decodeFeeTokenAddress(position.extraParams);\\n\\n        if (reason == CloseReason.CLOSE_BY_TRADER) {\\n            posEventData.feeRateType = params.borrowedAmountIsNotZero\\n                ? IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByTrader\\n                : IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByTrader;\\n            vars.gasSpent = 0;\\n        } else {\\n            posEventData.feeRateType = params.borrowedAmountIsNotZero\\n                ? IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper\\n                : IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByKeeper;\\n            vars.gasSpent = params.initialGasLeft - gasleft();\\n        }\\n\\n        (posEventData.feeInPaymentAsset, posEventData.feeInPmx) = PrimexPricingLibrary.payProtocolFee(\\n            PrimexPricingLibrary.ProtocolFeeParams({\\n                feeToken: posEventData.paymentAsset,\\n                trader: position.trader,\\n                priceOracle: address(params.priceOracle),\\n                feeRateType: posEventData.feeRateType,\\n                traderBalanceVault: params.traderBalanceVault,\\n                swapManager: address(0),\\n                keeperRewardDistributor: params.keeperRewardDistributor,\\n                primexDNS: params.primexDNS,\\n                paymentAsset: position.soldAsset,\\n                paymentAmount: posEventData.amountOut,\\n                gasSpent: vars.gasSpent,\\n                isFeeProhibitedInPmx: reason == CloseReason.RISKY_POSITION,\\n                pmxPaymentAssetOracleData: params.pmxSoldAssetOracleData,\\n                nativePaymentAssetOracleData: params.nativeSoldAssetOracleData\\n            })\\n        );\\n\\n        posEventData.amountOutAfterFee = posEventData.amountOut - posEventData.feeInPaymentAsset;\\n\\n        TokenTransfersLibrary.doTransferOut({\\n            token: position.soldAsset,\\n            to: params.borrowedAmountIsNotZero ? address(position.bucket) : address(params.traderBalanceVault),\\n            amount: posEventData.amountOutAfterFee\\n        });\\n\\n        _require(\\n            posEventData.amountOut >= params.amountOutMin && posEventData.amountOut > 0,\\n            Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector\\n        );\\n\\n        bool canBeClosed;\\n        if (reason == CloseReason.CLOSE_BY_TRADER) {\\n            canBeClosed = position.trader == msg.sender;\\n        } else if (reason == CloseReason.RISKY_POSITION) {\\n            canBeClosed =\\n                health(\\n                    position,\\n                    params.priceOracle,\\n                    params.pairPriceDrop,\\n                    params.securityBuffer,\\n                    params.oracleTolerableLimit,\\n                    posEventData.feeInPaymentAsset,\\n                    params.positionSoldAssetOracleData\\n                ) <\\n                WadRayMath.WAD;\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.Liquidation;\\n        } else if (reason == CloseReason.LIMIT_CONDITION) {\\n            address cm = params.primexDNS.cmTypeToAddress(params.closeCondition.managerType);\\n            _require(cm != address(0), Errors.INCORRECT_CM_TYPE.selector);\\n\\n            canBeClosed = IConditionalClosingManager(cm).canBeClosedAfterSwap(\\n                position,\\n                params.closeCondition.params,\\n                params.ccmAdditionalParams,\\n                params.closeAmount,\\n                posEventData.amountOut,\\n                params.positionSoldAssetOracleData\\n            );\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.StopLoss;\\n        } else if (reason == CloseReason.BUCKET_DELISTED) {\\n            canBeClosed = position.bucket != IBucketV3(address(0)) && position.bucket.isDelisted();\\n            posEventData.actionType = IKeeperRewardDistributorStorage.KeeperActionType.BucketDelisted;\\n        }\\n        _require(canBeClosed, Errors.POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON.selector);\\n\\n        if (posEventData.amountOutAfterFee > posEventData.debtAmount) {\\n            unchecked {\\n                vars.amountToReturn = posEventData.amountOutAfterFee - posEventData.debtAmount;\\n            }\\n        } else {\\n            unchecked {\\n                vars.permanentLoss = posEventData.debtAmount - posEventData.amountOutAfterFee;\\n            }\\n        }\\n\\n        posEventData.profit = -int256(params.depositDecrease);\\n\\n        if (reason != CloseReason.RISKY_POSITION) {\\n            if (vars.amountToReturn > 0) {\\n                posEventData.profit += int256(vars.amountToReturn);\\n                params.traderBalanceVault.topUpAvailableBalance(\\n                    reason == CloseReason.CLOSE_BY_TRADER ? params.depositReceiver : position.trader,\\n                    position.soldAsset,\\n                    vars.amountToReturn\\n                );\\n            }\\n        }\\n\\n        if (params.borrowedAmountIsNotZero) {\\n            position.bucket.decreaseTraderDebt(\\n                position.trader,\\n                posEventData.debtAmount,\\n                reason == CloseReason.RISKY_POSITION ? params.primexDNS.treasury() : address(params.traderBalanceVault),\\n                vars.amountToReturn,\\n                vars.permanentLoss\\n            );\\n        }\\n\\n        // to avoid stack to deep\\n        CloseReason _reason = reason;\\n        if (params.closeAmount == position.positionAmount) {\\n            emit ClosePosition({\\n                positionId: position.id,\\n                trader: position.trader,\\n                closedBy: msg.sender,\\n                bucketAddress: address(position.bucket),\\n                soldAsset: position.soldAsset,\\n                positionAsset: position.positionAsset,\\n                decreasePositionAmount: position.positionAmount,\\n                profit: posEventData.profit,\\n                positionDebt: posEventData.debtAmount,\\n                amountOut: posEventData.amountOutAfterFee,\\n                reason: _reason\\n            });\\n        }\\n        posEventData.trader = position.trader;\\n        return posEventData;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum position size between two tokens.\\n     * @param maxPositionSize The storage mapping for maximum position sizes.\\n     * @param token0 The address of token0.\\n     * @param token1 The address of token1.\\n     * @param amountInToken0 The maximum position size in token0.\\n     * @param amountInToken1 The maximum position size in token1.\\n     */\\n    function setMaxPositionSize(\\n        mapping(address => mapping(address => uint256)) storage maxPositionSize,\\n        address token0,\\n        address token1,\\n        uint256 amountInToken0,\\n        uint256 amountInToken1\\n    ) public {\\n        _require(token0 != address(0) && token1 != address(0), Errors.TOKEN_ADDRESS_IS_ZERO.selector);\\n        _require(token0 != token1, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n\\n        maxPositionSize[token1][token0] = amountInToken0;\\n        maxPositionSize[token0][token1] = amountInToken1;\\n    }\\n\\n    /**\\n     * @dev Sets the tolerable limit for an oracle between two assets.\\n     * @param oracleTolerableLimits The mapping to store oracle tolerable limits.\\n     * @param assetA The address of the first asset.\\n     * @param assetB The address of the second asset.\\n     * @param percent The percentage tolerable limit for the oracle in WAD format (1 WAD = 100%).\\n     */\\n    function setOracleTolerableLimit(\\n        mapping(address => mapping(address => uint256)) storage oracleTolerableLimits,\\n        address assetA,\\n        address assetB,\\n        uint256 percent\\n    ) public {\\n        _require(assetA != address(0) && assetB != address(0), Errors.ASSET_ADDRESS_NOT_SUPPORTED.selector);\\n        _require(assetA != assetB, Errors.IDENTICAL_ASSET_ADDRESSES.selector);\\n        _require(percent <= WadRayMath.WAD && percent > 0, Errors.INVALID_PERCENT_NUMBER.selector);\\n        oracleTolerableLimits[assetA][assetB] = percent;\\n        oracleTolerableLimits[assetB][assetA] = percent;\\n    }\\n\\n    /**\\n     * @dev Sets the close conditions for a given position.\\n     * @param position The position for which to set the close conditions.\\n     * @param closeConditionsMap The storage mapping of close conditions for each position ID.\\n     * @param closeConditions The array of close conditions to be set.\\n     * @param primexDNS The address of the IPrimexDNS contract.\\n     */\\n    function setCloseConditions(\\n        Position memory position,\\n        mapping(uint256 => LimitOrderLibrary.Condition[]) storage closeConditionsMap,\\n        LimitOrderLibrary.Condition[] memory closeConditions,\\n        IPrimexDNSV3 primexDNS\\n    ) public {\\n        _require(\\n            LimitOrderLibrary.hasNoConditionManagerTypeDuplicates(closeConditions),\\n            Errors.SHOULD_NOT_HAVE_DUPLICATES.selector\\n        );\\n        if (closeConditionsMap[position.id].length > 0) {\\n            delete closeConditionsMap[position.id];\\n        }\\n        LimitOrderLibrary.Condition memory condition;\\n        for (uint256 i; i < closeConditions.length; i++) {\\n            condition = closeConditions[i];\\n            _require(\\n                IERC165Upgradeable(primexDNS.cmTypeToAddress(condition.managerType)).supportsInterface(\\n                    type(IConditionalClosingManager).interfaceId\\n                ),\\n                Errors.SHOULD_BE_CCM.selector\\n            );\\n\\n            closeConditionsMap[position.id].push(condition);\\n        }\\n    }\\n\\n    /**\\n     * @notice Opens a position by depositing assets and borrowing funds (except when the position is spot)\\n     * @param _position The position to be opened\\n     * @param _vars Variables related to the position opening\\n     * @param _pmParams Parameters for the PositionManager contract\\n     * @return The updated position and event data\\n     */\\n    function openPosition(\\n        Position memory _position,\\n        OpenPositionVars memory _vars,\\n        PositionManagerParams memory _pmParams\\n    ) public returns (Position memory, OpenPositionEventData memory) {\\n        OpenPositionLocalData memory data;\\n        if (_vars.isSpot) {\\n            data.tradingOrderType = _vars.byOrder\\n                ? IPrimexDNSStorageV3.TradingOrderType.SpotLimitOrder\\n                : IPrimexDNSStorageV3.TradingOrderType.SpotMarketOrder;\\n        } else {\\n            if (_vars.byOrder) {\\n                data.tradingOrderType = _vars.isThirdAsset\\n                    ? IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrderDepositInThirdAsset\\n                    : IPrimexDNSStorageV3.TradingOrderType.MarginLimitOrder;\\n            } else {\\n                data.tradingOrderType = IPrimexDNSStorageV3.TradingOrderType.MarginMarketOrder;\\n            }\\n        }\\n        PrimexPricingLibrary.validateMinPositionSize(\\n            _vars.borrowedAmount + _position.depositAmountInSoldAsset,\\n            _position.soldAsset,\\n            address(_pmParams.priceOracle),\\n            IKeeperRewardDistributorV3(_pmParams.keeperRewardDistributor),\\n            _pmParams.primexDNS,\\n            data.tradingOrderType,\\n            _vars.nativeSoldAssetOracleData\\n        );\\n        data.amountToTransfer = _vars.borrowedAmount;\\n        data.dexAdapter = payable(_pmParams.primexDNS.dexAdapter());\\n        data.depositReceiver = data.dexAdapter;\\n        if (_vars.depositData.depositAsset == _position.positionAsset) {\\n            _position.positionAmount = _vars.depositData.depositAmount;\\n            data.depositInPositionAsset = _vars.depositData.depositAmount;\\n            data.depositReceiver = address(this);\\n        } else if (_vars.depositData.depositAsset == _position.soldAsset) {\\n            data.amountToTransfer += _vars.depositData.depositAmount;\\n        }\\n\\n        data.isSpot = _vars.borrowedAmount == 0;\\n        if (data.isSpot) _vars.depositData.depositAsset = _position.soldAsset;\\n\\n        if (_vars.takeDepositFromWallet) {\\n            TokenTransfersLibrary.doTransferFromTo(\\n                _vars.depositData.depositAsset,\\n                msg.sender,\\n                data.depositReceiver,\\n                _vars.depositData.depositAmount\\n            );\\n        } else {\\n            _pmParams.traderBalanceVault.useTraderAssets(\\n                ITraderBalanceVault.LockAssetParams({\\n                    trader: _position.trader,\\n                    depositReceiver: data.depositReceiver,\\n                    depositAsset: _vars.depositData.depositAsset,\\n                    depositAmount: _vars.depositData.depositAmount,\\n                    openType: _vars.byOrder\\n                        ? ITraderBalanceVault.OpenType.OPEN_BY_ORDER\\n                        : ITraderBalanceVault.OpenType.OPEN\\n                })\\n            );\\n        }\\n\\n        if (!data.isSpot) {\\n            _position.bucket.increaseDebt(_position.trader, _vars.borrowedAmount, data.dexAdapter);\\n            // @note You need to write index only after opening a position in bucket.\\n            // Since when opening position in the bucket, index becomes relevant (containing accumulated profit)\\n            _position.openBorrowIndex = _position.bucket.variableBorrowIndex();\\n            _position.scaledDebtAmount = _vars.borrowedAmount.rdiv(_position.openBorrowIndex);\\n        }\\n        if (_vars.isThirdAsset) {\\n            data.depositInPositionAsset = PrimexPricingLibrary.megaSwap(\\n                PrimexPricingLibrary.MegaSwapParams({\\n                    tokenA: _vars.depositData.depositAsset,\\n                    tokenB: _position.positionAsset,\\n                    amountTokenA: _vars.depositData.depositAmount,\\n                    megaRoutes: _vars.depositInThirdAssetMegaRoutes,\\n                    receiver: address(this),\\n                    deadline: _vars.deadline\\n                }),\\n                _pmParams.oracleTolerableLimitForThirdAsset,\\n                data.dexAdapter,\\n                address(_pmParams.priceOracle),\\n                true,\\n                _vars.thirdAssetOracleData\\n            );\\n            _position.positionAmount += data.depositInPositionAsset;\\n        } else {\\n            _require(\\n                _vars.depositInThirdAssetMegaRoutes.length == 0,\\n                Errors.DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0.selector\\n            );\\n        }\\n\\n        data.borrowedAmountInPositionAsset = PrimexPricingLibrary.megaSwap(\\n            PrimexPricingLibrary.MegaSwapParams({\\n                tokenA: _position.soldAsset,\\n                tokenB: _position.positionAsset,\\n                amountTokenA: data.isSpot ? _vars.depositData.depositAmount : data.amountToTransfer,\\n                megaRoutes: _vars.firstAssetMegaRoutes,\\n                receiver: address(this),\\n                deadline: _vars.deadline\\n            }),\\n            _pmParams.oracleTolerableLimit,\\n            data.dexAdapter,\\n            address(_pmParams.priceOracle),\\n            _vars.needOracleTolerableLimitCheck,\\n            _vars.firstAssetOracleData\\n        );\\n        _position.positionAmount += data.borrowedAmountInPositionAsset;\\n\\n        OpenPositionEventData memory posEventData;\\n\\n        if (_vars.byOrder) {\\n            posEventData.feeRateType = data.isSpot\\n                ? IPrimexDNSStorageV3.FeeRateType.SpotLimitOrderExecuted\\n                : IPrimexDNSStorageV3.FeeRateType.MarginLimitOrderExecuted;\\n            (posEventData.feeInPositionAsset, posEventData.feeInPmx) = PrimexPricingLibrary.payProtocolFee(\\n                PrimexPricingLibrary.ProtocolFeeParams({\\n                    feeToken: decodeFeeTokenAddress(_position.extraParams),\\n                    trader: _position.trader,\\n                    priceOracle: address(_pmParams.priceOracle),\\n                    feeRateType: posEventData.feeRateType,\\n                    traderBalanceVault: _pmParams.traderBalanceVault,\\n                    swapManager: address(0),\\n                    keeperRewardDistributor: _pmParams.keeperRewardDistributor,\\n                    primexDNS: _pmParams.primexDNS,\\n                    paymentAsset: _position.positionAsset,\\n                    paymentAmount: _position.positionAmount,\\n                    gasSpent: _pmParams.initialGasLeft - gasleft(),\\n                    isFeeProhibitedInPmx: false,\\n                    pmxPaymentAssetOracleData: _vars.pmxPositionAssetOracleData,\\n                    nativePaymentAssetOracleData: _vars.nativePositionAssetOracleData\\n                })\\n            );\\n            _position.positionAmount -= posEventData.feeInPositionAsset;\\n        }\\n        _require(_position.positionAmount >= _vars.amountOutMin, Errors.SLIPPAGE_TOLERANCE_EXCEEDED.selector);\\n\\n        data.leverage = WadRayMath.WAD;\\n        if (!data.isSpot) {\\n            _require(_pmParams.maxPositionSize >= _position.positionAmount, Errors.POSITION_SIZE_EXCEEDED.selector);\\n            if (_vars.depositData.depositAsset == _position.soldAsset) {\\n                data.positionAmountAfterFeeInSoldAsset =\\n                    (data.amountToTransfer * _position.positionAmount) /\\n                    (_position.positionAmount + posEventData.feeInPositionAsset);\\n                _require(\\n                    data.positionAmountAfterFeeInSoldAsset > _vars.borrowedAmount,\\n                    Errors.INSUFFICIENT_DEPOSIT.selector\\n                );\\n                data.leverage = data.positionAmountAfterFeeInSoldAsset.wdiv(\\n                    data.positionAmountAfterFeeInSoldAsset - _vars.borrowedAmount\\n                );\\n            } else {\\n                _require(\\n                    data.depositInPositionAsset > posEventData.feeInPositionAsset,\\n                    Errors.INSUFFICIENT_DEPOSIT.selector\\n                );\\n                data.leverage = _position.positionAmount.wdiv(\\n                    data.depositInPositionAsset - posEventData.feeInPositionAsset\\n                );\\n            }\\n\\n            // to avoid stack to deep\\n            data.positionAsset = _position.positionAsset;\\n            data.positionAmount = _position.positionAmount;\\n            // protocolFee calculated in position Asset\\n            _require(\\n                data.leverage <=\\n                    _position.bucket.maxAssetLeverage(\\n                        _position.positionAsset,\\n                        PrimexPricingLibrary\\n                            .calculateFeeInPaymentAsset(\\n                                PrimexPricingLibrary.CalculateFeeInPaymentAssetParams({\\n                                    primexDNS: _pmParams.primexDNS,\\n                                    priceOracle: address(_pmParams.priceOracle),\\n                                    feeRateType: IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper,\\n                                    paymentAsset: data.positionAsset,\\n                                    paymentAmount: data.positionAmount,\\n                                    keeperRewardDistributor: _pmParams.keeperRewardDistributor,\\n                                    gasSpent: 0,\\n                                    isFeeProhibitedInPmx: true,\\n                                    nativePaymentAssetOracleData: _vars.nativePositionAssetOracleData\\n                                })\\n                            )\\n                            .wdiv(data.positionAmount)\\n                    ),\\n                Errors.INSUFFICIENT_DEPOSIT.selector\\n            );\\n            if (_vars.byOrder) {\\n                uint256 leverageTolerance = _pmParams.primexDNS.leverageTolerance();\\n                _require(\\n                    data.leverage <= _vars.orderLeverage.wmul(WadRayMath.WAD + leverageTolerance) &&\\n                        data.leverage >= _vars.orderLeverage.wmul(WadRayMath.WAD - leverageTolerance),\\n                    Errors.LEVERAGE_TOLERANCE_EXCEEDED.selector\\n                );\\n            }\\n        }\\n\\n        if (!_vars.byOrder) {\\n            _vars.depositData.leverage = data.leverage;\\n        }\\n\\n        data.multiplierBorrowedAsset = 10 ** (18 - IERC20Metadata(_position.soldAsset).decimals());\\n        data.multiplierPositionAsset = 10 ** (18 - IERC20Metadata(_position.positionAsset).decimals());\\n        posEventData.entryPrice =\\n            ((_vars.borrowedAmount + _position.depositAmountInSoldAsset) * data.multiplierBorrowedAsset).wdiv(\\n                (_position.positionAmount + posEventData.feeInPositionAsset) * data.multiplierPositionAsset\\n            ) /\\n            data.multiplierBorrowedAsset;\\n        posEventData.leverage = _vars.depositData.leverage;\\n        return (_position, posEventData);\\n    }\\n\\n    /**\\n     * @dev Retrieves the debt amount for a given position.\\n     * @param position The Position struct representing the position to get the debt amount for.\\n     * @return The debt amount in debtTokens.\\n     */\\n    function getDebt(Position memory position) public view returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return 0;\\n        return position.scaledDebtAmount.rmul(position.bucket.getNormalizedVariableDebt());\\n    }\\n\\n    /**\\n     * @dev Calculates the health of a position.\\n     * @dev health = ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * positionAmountInBorrowedAsset) /\\n     (feeBuffer * debt)\\n     * @param position The position object containing relevant information.\\n     * @param priceOracle The price oracle contract used for obtaining asset prices.\\n     * @param pairPriceDrop The priceDrop in WAD format of the asset pair.\\n     * @param securityBuffer The security buffer in WAD format for the position.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the price oracle.\\n     * @return The health value in WAD format of the position.\\n     */\\n    function health(\\n        Position memory position,\\n        IPriceOracleV2 priceOracle,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit,\\n        uint256 feeInPaymentAsset,\\n        bytes memory positionSoldAssetOracleData\\n    ) public returns (uint256) {\\n        if (position.scaledDebtAmount == 0) return WadRayMath.WAD;\\n        return\\n            health(\\n                PrimexPricingLibrary.getOracleAmountsOut(\\n                    position.positionAsset,\\n                    position.soldAsset,\\n                    position.positionAmount,\\n                    address(priceOracle),\\n                    positionSoldAssetOracleData\\n                ) - feeInPaymentAsset,\\n                pairPriceDrop,\\n                securityBuffer,\\n                oracleTolerableLimit,\\n                getDebt(position),\\n                position.bucket.feeBuffer()\\n            );\\n    }\\n\\n    /**\\n     * @dev Creates a new position based on the given parameters.\\n     * @param _params The input parameters for creating the position.\\n     * @param primexDNS The address of the PrimexDNS contract.\\n     * @param priceOracle The address of the PriceOracle contract.\\n     * @return position The created Position struct.\\n     * @return vars The OpenPositionVars struct.\\n     */\\n    function createPosition(\\n        OpenPositionParams calldata _params,\\n        IPrimexDNSV3 primexDNS,\\n        IPriceOracleV2 priceOracle\\n    ) public returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetMegaRoutes: _params.firstAssetMegaRoutes,\\n            depositInThirdAssetMegaRoutes: _params.marginParams.depositInThirdAssetMegaRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                depositAsset: address(0),\\n                depositAmount: _params.depositAmount,\\n                leverage: 0\\n            }),\\n            borrowedAmount: _params.marginParams.borrowedAmount,\\n            amountOutMin: _params.amountOutMin,\\n            deadline: _params.deadline,\\n            isSpot: _params.marginParams.borrowedAmount == 0,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: _params.takeDepositFromWallet,\\n            byOrder: false,\\n            orderLeverage: 0,\\n            sender: address(0),\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: _params.marginParams.borrowedAmount > 0,\\n            firstAssetOracleData: _params.firstAssetOracleData,\\n            thirdAssetOracleData: _params.thirdAssetOracleData,\\n            positionUsdOracleData: _params.positionUsdOracleData,\\n            nativePositionAssetOracleData: _params.nativePositionAssetOracleData,\\n            pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n            nativeSoldAssetOracleData: _params.nativeSoldAssetOracleData\\n        });\\n\\n        PositionLibrary.Position memory position = PositionLibrary.Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucketV3(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.positionAsset,\\n            positionAmount: 0,\\n            trader: msg.sender,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            _require(_params.depositAsset != _params.positionAsset, Errors.SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT.selector);\\n            _require(bytes(_params.marginParams.bucket).length == 0, Errors.BUCKET_SHOULD_BE_UNDEFINED.selector);\\n            position.soldAsset = _params.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n            vars.depositData.leverage = WadRayMath.WAD;\\n        } else {\\n            position.bucket = IBucketV3(primexDNS.getBucketAddress(_params.marginParams.bucket));\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.depositAsset;\\n            (, bool tokenAllowed) = position.bucket.allowedAssets(_params.positionAsset);\\n            _require(tokenAllowed, Errors.TOKEN_NOT_SUPPORTED.selector);\\n\\n            vars.isThirdAsset =\\n                _params.depositAsset != position.soldAsset &&\\n                _params.depositAsset != _params.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.depositAsset,\\n                position.soldAsset,\\n                _params.depositAmount,\\n                address(priceOracle),\\n                _params.depositSoldAssetOracleData\\n            );\\n        }\\n        address feeToken = _params.isProtocolFeeInPmx ? primexDNS.pmx() : position.soldAsset;\\n        position.extraParams = abi.encode(feeToken);\\n\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Creates a position based on the provided order parameters.\\n     * @dev This function calculates and returns a Position and OpenPositionVars struct.\\n     * @param _params The OpenPositionByOrderParams struct containing the order parameters.\\n     * @param priceOracle The price oracle contract used for retrieving asset prices.\\n     * @return position The Position struct representing the created position.\\n     * @return vars The OpenPositionVars struct containing additional variables related to the position.\\n     */\\n    function createPositionByOrder(\\n        LimitOrderLibrary.OpenPositionByOrderParams calldata _params,\\n        IPriceOracleV2 priceOracle,\\n        IPrimexDNSV3 primexDNS\\n    ) public returns (Position memory, OpenPositionVars memory) {\\n        OpenPositionVars memory vars = OpenPositionVars({\\n            firstAssetMegaRoutes: _params.firstAssetMegaRoutes,\\n            depositInThirdAssetMegaRoutes: _params.depositInThirdAssetMegaRoutes,\\n            depositData: PrimexPricingLibrary.DepositData({\\n                depositAsset: address(0),\\n                depositAmount: _params.order.depositAmount,\\n                leverage: _params.order.leverage\\n            }),\\n            borrowedAmount: _params.borrowedAmount,\\n            amountOutMin: 0,\\n            orderLeverage: _params.order.leverage,\\n            deadline: _params.order.deadline,\\n            isSpot: _params.order.leverage == WadRayMath.WAD,\\n            isThirdAsset: false,\\n            takeDepositFromWallet: false,\\n            byOrder: true,\\n            sender: _params.sender,\\n            closeConditions: _params.closeConditions,\\n            needOracleTolerableLimitCheck: address(_params.order.bucket) != address(0),\\n            firstAssetOracleData: _params.firstAssetOracleData,\\n            thirdAssetOracleData: _params.thirdAssetOracleData,\\n            positionUsdOracleData: _params.positionUsdOracleData,\\n            nativePositionAssetOracleData: _params.nativePositionAssetOracleData,\\n            pmxPositionAssetOracleData: _params.pmxPositionAssetOracleData,\\n            nativeSoldAssetOracleData: _params.nativeSoldAssetOracleData\\n        });\\n\\n        Position memory position = Position({\\n            id: 0,\\n            scaledDebtAmount: 0,\\n            bucket: IBucketV3(address(0)),\\n            soldAsset: address(0),\\n            depositAmountInSoldAsset: 0,\\n            positionAsset: _params.order.positionAsset,\\n            positionAmount: 0,\\n            trader: _params.order.trader,\\n            openBorrowIndex: 0,\\n            createdAt: block.timestamp,\\n            updatedConditionsAt: block.timestamp,\\n            extraParams: \\\"\\\"\\n        });\\n\\n        if (vars.isSpot) {\\n            position.soldAsset = _params.order.depositAsset;\\n            position.depositAmountInSoldAsset = vars.depositData.depositAmount;\\n        } else {\\n            position.bucket = _params.order.bucket;\\n            position.soldAsset = address(position.bucket.borrowedAsset());\\n            vars.depositData.depositAsset = _params.order.depositAsset;\\n            vars.isThirdAsset =\\n                _params.order.depositAsset != position.soldAsset &&\\n                _params.order.depositAsset != _params.order.positionAsset;\\n\\n            position.depositAmountInSoldAsset = PrimexPricingLibrary.getOracleAmountsOut(\\n                _params.order.depositAsset,\\n                position.soldAsset,\\n                _params.order.depositAmount,\\n                address(priceOracle),\\n                _params.depositSoldAssetOracleData\\n            );\\n            if (_params.order.depositAsset == position.soldAsset) {\\n                _require(\\n                    vars.borrowedAmount == _params.order.depositAmount.wmul(_params.order.leverage - WadRayMath.WAD),\\n                    Errors.INCORRECT_BORROWED_AMOUNT.selector\\n                );\\n            }\\n        }\\n        address feeToken = _params.order.feeToken == primexDNS.pmx() ? primexDNS.pmx() : position.soldAsset;\\n        position.extraParams = abi.encode(feeToken);\\n\\n        return (position, vars);\\n    }\\n\\n    /**\\n     * @notice Decodes a fee token address from the provided encoded data.\\n     * @param data The encoded data containing the fee token address.\\n     * @return The decoded fee token address.\\n     */\\n    function decodeFeeTokenAddress(bytes memory data) public pure returns (address) {\\n        // Check if there is data in the bytes extraParams\\n        if (data.length == 0) {\\n            // If there is no data, return address(0)\\n            return address(0);\\n        } else {\\n            // Decode the data into an address and return the result\\n            return abi.decode(data, (address));\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the health score for a position.\\n     * @param positionAmountInBorrowedAsset The position size in borrow asset.\\n     * @param pairPriceDrop The priceDrop in WAD format of the pair.\\n     * @param securityBuffer The security buffer in WAD format.\\n     * @param oracleTolerableLimit The tolerable limit in WAD format for the oracle.\\n     * @param positionDebt The debt of the position.\\n     * @param feeBuffer The buffer for fees.\\n     * @return The health score of the position.\\n     */\\n    function health(\\n        uint256 positionAmountInBorrowedAsset,\\n        uint256 pairPriceDrop,\\n        uint256 securityBuffer,\\n        uint256 oracleTolerableLimit,\\n        uint256 positionDebt,\\n        uint256 feeBuffer\\n    ) public pure returns (uint256) {\\n        return\\n            (\\n                (WadRayMath.WAD - securityBuffer)\\n                    .wmul(WadRayMath.WAD - oracleTolerableLimit)\\n                    .wmul(WadRayMath.WAD - pairPriceDrop)\\n                    .wmul(positionAmountInBorrowedAsset)\\n            ).wdiv(feeBuffer.wmul(positionDebt));\\n    }\\n}\\n\",\"keccak256\":\"0x46732e5d115936468164b7522d03cb2a7891ea110692d4c8d1623d36c152288c\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PrimexPricingLibrary.sol\":{\"content\":\"// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.26;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {BytesLib} from \\\"./utils/BytesLib.sol\\\";\\nimport {WadRayMath} from \\\"./utils/WadRayMath.sol\\\";\\n\\nimport {NATIVE_CURRENCY, USD, USD_MULTIPLIER, ARB_NITRO_ORACLE, OVM_GASPRICEORACLE, GAS_FOR_BYTE, TRANSACTION_METADATA_BYTES} from \\\"../Constants.sol\\\";\\nimport {IDexAdapter} from \\\"../interfaces/IDexAdapter.sol\\\";\\nimport {IPriceOracle} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport {IKeeperRewardDistributorStorage, IKeeperRewardDistributorV3} from \\\"../KeeperRewardDistributor/IKeeperRewardDistributor.sol\\\";\\nimport {IPrimexDNSV3, IPrimexDNSStorageV3} from \\\"../PrimexDNS/IPrimexDNS.sol\\\";\\nimport {IBucketV3} from \\\"../Bucket/IBucket.sol\\\";\\nimport {IPositionManagerV2} from \\\"../PositionManager/IPositionManager.sol\\\";\\nimport {ITraderBalanceVault} from \\\"../TraderBalanceVault/ITraderBalanceVault.sol\\\";\\nimport {TokenTransfersLibrary} from \\\"./TokenTransfersLibrary.sol\\\";\\nimport {IPriceOracleStorageV2} from \\\"../PriceOracle/IPriceOracleStorage.sol\\\";\\nimport {IPriceOracleV2} from \\\"../PriceOracle/IPriceOracle.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary PrimexPricingLibrary {\\n    using WadRayMath for uint256;\\n    using BytesLib for bytes;\\n\\n    /**\\n     * @param dexName The name of the DEX.\\n     * @param shares the share that will be allocated from the total amount for the route\\n     * @param payload payload data encoded in bytes\\n     */\\n\\n    struct Path {\\n        string dexName;\\n        uint256 shares;\\n        bytes payload;\\n    }\\n\\n    /**\\n     * @param to the destination token of the route\\n     * @param paths path array through which the swap will be made up to the destination token this the route\\n     */\\n\\n    struct Route {\\n        address to;\\n        Path[] paths;\\n    }\\n\\n    /**\\n     * @param shares the share that will be allocated from the total amount for this MegaRoute\\n     * @param routes array of routes through which the swap will be made up to TokenB\\n     */\\n    struct MegaRoute {\\n        uint256 shares;\\n        Route[] routes;\\n    }\\n\\n    struct MegaSwapParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amountTokenA;\\n        MegaRoute[] megaRoutes;\\n        address receiver;\\n        uint256 deadline;\\n    }\\n\\n    struct AmountParams {\\n        address tokenA;\\n        address tokenB;\\n        uint256 amount;\\n        MegaRoute[] megaRoutes;\\n        address dexAdapter;\\n        address primexDNS;\\n    }\\n\\n    struct DepositData {\\n        address depositAsset;\\n        uint256 depositAmount;\\n        uint256 leverage;\\n    }\\n\\n    /**\\n     * @param feeToken An asset in which the fee will be paid.\\n     * @param trader The trader address\\n     * @param priceOracle PriceOracle contract address\\n     * @param orderType Type of possible order in Primex protocol\\n     * @param traderBalanceVault TraderBalanceVault contract address\\n     * @param primexDNS PrimexDNS contract address\\n     */\\n    struct ProtocolFeeParams {\\n        address feeToken;\\n        address trader;\\n        address priceOracle;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        ITraderBalanceVault traderBalanceVault;\\n        address swapManager;\\n        address keeperRewardDistributor;\\n        IPrimexDNSV3 primexDNS;\\n        address paymentAsset;\\n        uint256 paymentAmount;\\n        uint256 gasSpent;\\n        bool isFeeProhibitedInPmx;\\n        bytes pmxPaymentAssetOracleData;\\n        bytes nativePaymentAssetOracleData;\\n    }\\n\\n    struct ProtocolFeeParamsBatchClose {\\n        uint256 numberOfPositions;\\n        address[] feeTokens;\\n        address[] traders;\\n        uint256[] paymentAmounts;\\n        address paymentAsset;\\n        address priceOracle;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        ITraderBalanceVault traderBalanceVault;\\n        address keeperRewardDistributor;\\n        IPrimexDNSV3 primexDNS;\\n        uint256 estimatedGasAmount;\\n        bool isFeeProhibitedInPmx;\\n        uint256 estimatedBaseLength;\\n        bytes nativePaymentAssetOracleData;\\n        bytes pmxPaymentAssetOracleData;\\n    }\\n\\n    struct CalculateFeeInPaymentAssetParams {\\n        IPrimexDNSV3 primexDNS;\\n        address priceOracle;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        address paymentAsset;\\n        uint256 paymentAmount;\\n        address keeperRewardDistributor;\\n        uint256 gasSpent;\\n        bool isFeeProhibitedInPmx;\\n        bytes nativePaymentAssetOracleData;\\n    }\\n\\n    struct MinProtocolFeeParams {\\n        uint256 restrictedGasSpent;\\n        address paymentAsset;\\n        address priceOracle;\\n        IKeeperRewardDistributorV3 keeperRewardDistributor;\\n        IPrimexDNSV3 primexDNS;\\n        bool isFeeProhibitedInPmx;\\n        IPrimexDNSStorageV3.FeeRateType feeRateType;\\n        bytes nativePaymentAssetOracleData;\\n    }\\n\\n    /**\\n     * The struct for payProtocolFee function\\n     */\\n    struct ProtocolFeeVars {\\n        address pmx;\\n        address treasury;\\n        uint256 feeInPaymentAssetWithDiscount;\\n        uint256 pmxTraderBalance;\\n        uint256 pmxTraderBalanceInPaymentAsset;\\n        uint256 pmxDiscountMultiplier;\\n    }\\n\\n    /**\\n     * The struct for calculateFeeInPaymentAssetVars function\\n     */\\n    struct FeeInPaymentAssetVars {\\n        uint256 protocolFeeRate;\\n        uint256 maxProtocolFee;\\n        uint256 feeInPaymentAsset;\\n        uint256 maxProtocolFeeInPaymentAsset;\\n        uint256 minProtocolFeeInPaymentAsset;\\n    }\\n\\n    /**\\n     * The struct for minProtocolFee function\\n     */\\n    struct MinProtocolFeeVars {\\n        uint256 maxGasAmount;\\n        uint256 restrictedGasPrice;\\n        uint256 l1CostWei;\\n        uint256 liquidationGasAmount;\\n        uint256 protocolFeeCoefficient;\\n        uint256 additionalGasSpent;\\n        uint256 minProtocolFeeInNativeAsset;\\n        uint256 totalGasSpent;\\n        uint256 baseLength;\\n        uint256 optimisticGasCoefficient;\\n        IPrimexDNSStorageV3.CallingMethod callingMethod;\\n        IKeeperRewardDistributorStorage.PaymentModel paymentModel;\\n    }\\n\\n    /**\\n     * The struct for calculateFeeInPaymentAssetBatchClose function\\n     */\\n    struct CalculateFeeInPaymentAssetBatchCloseVars {\\n        uint256[] feeInPaymentAsset;\\n        uint256 protocolFeeRate;\\n        uint256 maxProtocolFee;\\n        uint256 maxProtocolFeeInPaymentAsset;\\n        uint256 minProtocolFeeInPaymentAsset;\\n    }\\n\\n    /**\\n     * The struct for calculateRestrictedGasPrice function\\n     */\\n    struct RestrictedGasPriceVars {\\n        int256 oracleGasPrice;\\n        uint256 maxGasPrice;\\n        uint256 defaultMaxGasPrice;\\n        uint256 oracleGasPriceTolerance;\\n    }\\n\\n    /**\\n     * The struct for getLiquidationPrice and getLiquidationPriceByOrder functions\\n     */\\n    struct LiquidationPriceData {\\n        IBucketV3 bucket;\\n        IPositionManagerV2 positionManager;\\n        IPriceOracleV2 priceOracle;\\n        IERC20Metadata borrowedAsset;\\n    }\\n\\n    event Withdraw(\\n        address indexed withdrawer,\\n        address borrowAssetReceiver,\\n        address borrowedAsset,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @notice Encodes the given parameters into a bytes array based on the specified DEX type.\\n     * @param path The token path for the swap.\\n     * @param dexRouter The address of the DEX router.\\n     * @param ancillaryData Additional data required for certain DEX types.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @param isAmountToBuy A flag indicating whether it is the path for the swap with fixed amountIn or amountOut.\\n     * Swap with fixed amountIn, if true.\\n     * @return The encoded bytes array.\\n     */\\n    function encodePath(\\n        address[] memory path,\\n        address dexRouter,\\n        bytes32 ancillaryData,\\n        address payable dexAdapter,\\n        bool isAmountToBuy\\n    ) external view returns (bytes memory) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            return abi.encode(path);\\n        }\\n        if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            if (isAmountToBuy)\\n                return bytes.concat(bytes20(path[1]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes3(uint24(uint256(ancillaryData))), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            if (isAmountToBuy) return bytes.concat(bytes20(path[1]), bytes20(path[0]));\\n            return bytes.concat(bytes20(path[0]), bytes20(path[1]));\\n        }\\n        if (type_ == IDexAdapter.DexType.Curve) {\\n            address[] memory pools = new address[](1);\\n            pools[0] = address(uint160(uint256(ancillaryData)));\\n            return abi.encode(path, pools);\\n        }\\n        if (type_ == IDexAdapter.DexType.Balancer) {\\n            int256[] memory limits = new int256[](2);\\n            limits[0] = type(int256).max;\\n            bytes32[] memory pools = new bytes32[](1);\\n            pools[0] = ancillaryData;\\n            return abi.encode(path, pools, limits);\\n        }\\n        _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of deposit assets in borrowed assets.\\n     * @param _params The parameters for the calculation.\\n     * @param _isThirdAsset A flag indicating if deposit is in a third asset.\\n     * @param _priceOracle The address of the price oracle.\\n     * @return The amount of deposit assets is measured in borrowed assets.\\n     */\\n    function getDepositAmountInBorrowed(\\n        IDexAdapter.AmountParams calldata _params,\\n        bool _isThirdAsset,\\n        address payable _dexAdapter,\\n        address _priceOracle,\\n        bytes calldata _oracleData\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracleV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_params.tokenA == _params.tokenB) {\\n            _require(_params.megaRoutes.length == 0, Errors.DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0.selector);\\n            return _params.amount;\\n        }\\n\\n        uint256 depositAmountInBorrowed = IDexAdapter(_dexAdapter).getAmountOutByMegaRoutes(_params);\\n        if (_isThirdAsset) {\\n            uint256 oracleDepositAmountOut = getOracleAmountsOut(\\n                _params.tokenA,\\n                _params.tokenB,\\n                _params.amount,\\n                _priceOracle,\\n                _oracleData\\n            );\\n            if (depositAmountInBorrowed > oracleDepositAmountOut) depositAmountInBorrowed = oracleDepositAmountOut;\\n        }\\n\\n        return depositAmountInBorrowed;\\n    }\\n\\n    /**\\n     * @notice Performs a multi-hop swap transaction using the specified parameters.\\n     * @dev This function executes a series of token swaps on different DEXs based on the provided routes.\\n     * @param _params The struct containing all the necessary parameters for the multi-hop swap.\\n     * @param _maximumOracleTolerableLimit The maximum tolerable limit in WAD format (1 WAD = 100%)\\n     * for the price difference between DEX and the oracle.\\n     * @param _dexAdapter The address of the Dex adapter contract.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @param _needOracleTolerableLimitCheck Flag indicating whether to perform an oracle tolerable limit check.\\n     * @return The final balance of the _params.tokenB in the receiver's address after the multi-hop swap.\\n     */\\n    function megaSwap(\\n        MegaSwapParams calldata _params,\\n        uint256 _maximumOracleTolerableLimit,\\n        address payable _dexAdapter,\\n        address _priceOracle,\\n        bool _needOracleTolerableLimitCheck,\\n        bytes calldata _oracleData\\n    ) public returns (uint256) {\\n        uint256 balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver);\\n        IDexAdapter(_dexAdapter).performMegaRoutesSwap(_params);\\n\\n        balance = IERC20Metadata(_params.tokenB).balanceOf(_params.receiver) - balance;\\n        if (_needOracleTolerableLimitCheck) {\\n            _require(\\n                balance >=\\n                    getOracleAmountsOut(_params.tokenA, _params.tokenB, _params.amountTokenA, _priceOracle, _oracleData)\\n                        .wmul(WadRayMath.WAD - _maximumOracleTolerableLimit),\\n                Errors.DIFFERENT_PRICE_DEX_AND_ORACLE.selector\\n            );\\n        }\\n\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Pays the protocol fee.\\n     * @dev This function transfers the protocol fee from the trader to the protocol treasury.\\n     * @param params The parameters for paying the protocol fee.\\n     * @return feeInPaymentAsset The amount of the protocol fee in a payment asset\\n     * (position asset for the limit order execution, sold asset when the position is closed.)\\n     * @return feeInPmx The amount of the protocol fee in pmx asset paid.\\n     */\\n    function payProtocolFee(\\n        ProtocolFeeParams memory params\\n    ) public returns (uint256 feeInPaymentAsset, uint256 feeInPmx) {\\n        // This is done to ensure that after upgrading the contracts, positions that have already been opened\\n        // and had fees paid for them will not incur additional fees upon closure\\n        if (params.feeToken == address(0)) {\\n            return (0, 0);\\n        }\\n\\n        ProtocolFeeVars memory vars;\\n        (vars.pmx, vars.treasury, , , vars.pmxDiscountMultiplier) = params.primexDNS.getPrimexDNSParams(\\n            params.feeRateType\\n        );\\n        feeInPaymentAsset = calculateFeeInPaymentAsset(\\n            CalculateFeeInPaymentAssetParams({\\n                primexDNS: params.primexDNS,\\n                priceOracle: params.priceOracle,\\n                feeRateType: params.feeRateType,\\n                paymentAsset: params.paymentAsset,\\n                paymentAmount: params.paymentAmount,\\n                keeperRewardDistributor: params.keeperRewardDistributor,\\n                gasSpent: params.gasSpent,\\n                isFeeProhibitedInPmx: params.isFeeProhibitedInPmx,\\n                nativePaymentAssetOracleData: params.nativePaymentAssetOracleData\\n            })\\n        );\\n        (vars.pmxTraderBalance, ) = params.traderBalanceVault.balances(params.trader, vars.pmx);\\n        if (params.feeToken == vars.pmx && vars.pmxTraderBalance > 0 && !params.isFeeProhibitedInPmx) {\\n            // pmx => payment asset data\\n            uint256 pmxTraderBalanceInPaymentAsset = getOracleAmountsOut(\\n                vars.pmx,\\n                params.paymentAsset,\\n                vars.pmxTraderBalance,\\n                params.priceOracle,\\n                params.pmxPaymentAssetOracleData\\n            );\\n\\n            uint256 feeInPaymentAssetWithDiscount = feeInPaymentAsset.wmul(vars.pmxDiscountMultiplier);\\n\\n            feeInPmx = (feeInPaymentAssetWithDiscount * vars.pmxTraderBalance) / pmxTraderBalanceInPaymentAsset;\\n\\n            if (pmxTraderBalanceInPaymentAsset >= feeInPaymentAssetWithDiscount) {\\n                feeInPaymentAsset = 0;\\n                params.traderBalanceVault.withdrawFrom(params.trader, vars.treasury, vars.pmx, feeInPmx, false);\\n            } else {\\n                feeInPmx = vars.pmxTraderBalance;\\n                feeInPaymentAsset -= pmxTraderBalanceInPaymentAsset.wdiv(vars.pmxDiscountMultiplier);\\n                params.traderBalanceVault.withdrawFrom(\\n                    params.trader,\\n                    vars.treasury,\\n                    vars.pmx,\\n                    vars.pmxTraderBalance,\\n                    false\\n                );\\n                TokenTransfersLibrary.doTransferOut(params.paymentAsset, vars.treasury, feeInPaymentAsset);\\n            }\\n        } else {\\n            TokenTransfersLibrary.doTransferOut(params.paymentAsset, vars.treasury, feeInPaymentAsset);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate and return protocol fee\\n     * @return The amount of the protocol fee in '_feeToken' which needs to be paid according to the specified deposit parameters.\\n     */\\n    function calculateFeeInPaymentAsset(CalculateFeeInPaymentAssetParams memory params) public returns (uint256) {\\n        FeeInPaymentAssetVars memory vars;\\n        (, , vars.protocolFeeRate, vars.maxProtocolFee, ) = params.primexDNS.getPrimexDNSParams(params.feeRateType);\\n        // Calculate protocol fee in position asset\\n        vars.feeInPaymentAsset = params.paymentAmount.wmul(vars.protocolFeeRate);\\n\\n        // Calculate max protocol fee in position asset\\n        vars.maxProtocolFeeInPaymentAsset = vars.maxProtocolFee == type(uint256).max\\n            ? type(uint256).max\\n            : getOracleAmountsOut(\\n                NATIVE_CURRENCY,\\n                params.paymentAsset,\\n                vars.maxProtocolFee,\\n                params.priceOracle,\\n                params.nativePaymentAssetOracleData\\n            );\\n\\n        // The minProtocolFee is applied only if the order/position is processed by Keepers\\n\\n        if (\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByTrader ||\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByTrader ||\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.SwapMarketOrder\\n        ) {\\n            vars.feeInPaymentAsset = min(vars.feeInPaymentAsset, vars.maxProtocolFeeInPaymentAsset);\\n        } else {\\n            vars.minProtocolFeeInPaymentAsset = minProtocolFee(\\n                MinProtocolFeeParams({\\n                    restrictedGasSpent: params.gasSpent,\\n                    paymentAsset: params.paymentAsset,\\n                    priceOracle: params.priceOracle,\\n                    keeperRewardDistributor: IKeeperRewardDistributorV3(params.keeperRewardDistributor),\\n                    primexDNS: params.primexDNS,\\n                    isFeeProhibitedInPmx: params.isFeeProhibitedInPmx,\\n                    feeRateType: params.feeRateType,\\n                    nativePaymentAssetOracleData: params.nativePaymentAssetOracleData\\n                })\\n            );\\n            _require(\\n                vars.minProtocolFeeInPaymentAsset < params.paymentAmount,\\n                Errors.MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT.selector\\n            );\\n\\n            vars.feeInPaymentAsset = min(\\n                max(vars.feeInPaymentAsset, vars.minProtocolFeeInPaymentAsset),\\n                vars.maxProtocolFeeInPaymentAsset\\n            );\\n        }\\n        return vars.feeInPaymentAsset;\\n    }\\n\\n    function payProtocolFeeBatchClose(\\n        ProtocolFeeParamsBatchClose calldata params\\n    ) public returns (uint256[] memory, uint256[] memory) {\\n        ProtocolFeeVars memory vars;\\n        uint256[] memory feeInPaymentAsset = new uint256[](params.numberOfPositions);\\n        uint256[] memory feeInPmx = new uint256[](params.numberOfPositions);\\n\\n        (vars.pmx, vars.treasury, , , vars.pmxDiscountMultiplier) = params.primexDNS.getPrimexDNSParams(\\n            params.feeRateType\\n        );\\n        feeInPaymentAsset = calculateFeeInPaymentAssetBatchClose(\\n            params.numberOfPositions,\\n            params.primexDNS,\\n            params.priceOracle,\\n            params.feeRateType,\\n            params.paymentAsset,\\n            params.paymentAmounts,\\n            params.keeperRewardDistributor,\\n            params.estimatedGasAmount,\\n            params.estimatedBaseLength,\\n            params.nativePaymentAssetOracleData\\n        );\\n        for (uint256 i; i < params.numberOfPositions; i++) {\\n            // This is done to ensure that after upgrading the contracts, positions that have already been opened\\n            // and had fees paid for them will not incur additional fees upon closure\\n            if (params.feeTokens[i] == address(0)) {\\n                feeInPaymentAsset[i] = 0;\\n                feeInPmx[i] = 0;\\n                continue;\\n            }\\n\\n            (vars.pmxTraderBalance, ) = params.traderBalanceVault.balances(params.traders[i], vars.pmx);\\n\\n            if (!params.isFeeProhibitedInPmx && params.feeTokens[i] == vars.pmx && vars.pmxTraderBalance > 0) {\\n                vars.pmxTraderBalanceInPaymentAsset = getOracleAmountsOut(\\n                    vars.pmx,\\n                    params.paymentAsset,\\n                    vars.pmxTraderBalance,\\n                    params.priceOracle,\\n                    params.pmxPaymentAssetOracleData\\n                );\\n\\n                vars.feeInPaymentAssetWithDiscount = feeInPaymentAsset[i].wmul(vars.pmxDiscountMultiplier);\\n                feeInPmx[i] =\\n                    (vars.feeInPaymentAssetWithDiscount * vars.pmxTraderBalance) /\\n                    vars.pmxTraderBalanceInPaymentAsset;\\n                if (vars.pmxTraderBalanceInPaymentAsset >= vars.feeInPaymentAssetWithDiscount) {\\n                    feeInPaymentAsset[i] = 0;\\n                    params.traderBalanceVault.withdrawFrom(\\n                        params.traders[i],\\n                        vars.treasury,\\n                        vars.pmx,\\n                        feeInPmx[i],\\n                        false\\n                    );\\n                } else {\\n                    feeInPmx[i] = vars.pmxTraderBalance;\\n                    feeInPaymentAsset[i] -= vars.pmxTraderBalanceInPaymentAsset.wdiv(vars.pmxDiscountMultiplier);\\n                    params.traderBalanceVault.withdrawFrom(\\n                        params.traders[i],\\n                        vars.treasury,\\n                        vars.pmx,\\n                        vars.pmxTraderBalance,\\n                        false\\n                    );\\n                }\\n            }\\n        }\\n        return (feeInPaymentAsset, feeInPmx);\\n    }\\n\\n    /**\\n     * @notice Calculate and return protocol fee\\n     * @return The amount of the protocol fee in '_feeToken' which needs to be paid according to the specified deposit parameters.\\n     */\\n    function calculateFeeInPaymentAssetBatchClose(\\n        uint256 numberOfPositions,\\n        IPrimexDNSV3 primexDNS,\\n        address priceOracle,\\n        IPrimexDNSStorageV3.FeeRateType feeRateType,\\n        address paymentAsset,\\n        uint256[] memory paymentAmounts,\\n        address keeperRewardDistributor,\\n        uint256 estimatedGasAmount,\\n        uint256 estimatedBaseLength,\\n        bytes calldata _nativePaymentAssetOracleData\\n    ) public returns (uint256[] memory) {\\n        CalculateFeeInPaymentAssetBatchCloseVars memory vars;\\n        (, , vars.protocolFeeRate, vars.maxProtocolFee, ) = primexDNS.getPrimexDNSParams(feeRateType);\\n        // Calculate max protocol fee in payment (sold) asset\\n        vars.maxProtocolFeeInPaymentAsset = vars.maxProtocolFee == type(uint256).max\\n            ? type(uint256).max\\n            : getOracleAmountsOut(\\n                NATIVE_CURRENCY,\\n                paymentAsset,\\n                vars.maxProtocolFee,\\n                priceOracle,\\n                _nativePaymentAssetOracleData\\n            );\\n\\n        vars.minProtocolFeeInPaymentAsset = minProtocolFeeCloseBatch(\\n            paymentAsset,\\n            priceOracle,\\n            IKeeperRewardDistributorV3(keeperRewardDistributor),\\n            estimatedGasAmount,\\n            estimatedBaseLength,\\n            primexDNS,\\n            _nativePaymentAssetOracleData\\n        );\\n\\n        vars.feeInPaymentAsset = new uint256[](numberOfPositions);\\n        // Calculate protocol fee in position asset\\n        for (uint256 i; i < numberOfPositions; i++) {\\n            vars.feeInPaymentAsset[i] = paymentAmounts[i].wmul(vars.protocolFeeRate);\\n            _require(\\n                vars.minProtocolFeeInPaymentAsset < paymentAmounts[i],\\n                Errors.MIN_PROTOCOL_FEE_IS_GREATER_THAN_PAYMENT_AMOUNT.selector\\n            );\\n            vars.feeInPaymentAsset[i] = min(\\n                max(vars.feeInPaymentAsset[i], vars.minProtocolFeeInPaymentAsset),\\n                vars.maxProtocolFeeInPaymentAsset\\n            );\\n        }\\n\\n        return vars.feeInPaymentAsset;\\n    }\\n\\n    /**\\n     * @notice Calculate minProtocolFee based on the gas price\\n     */\\n    function minProtocolFee(MinProtocolFeeParams memory params) public returns (uint256 minProtocolFeeInPositionAsset) {\\n        MinProtocolFeeVars memory vars;\\n        (vars.restrictedGasPrice) = calculateRestrictedGasPrice(params.priceOracle, params.keeperRewardDistributor);\\n        if (\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper ||\\n            params.feeRateType == IPrimexDNSStorageV3.FeeRateType.SpotPositionClosedByKeeper\\n        ) {\\n            vars.callingMethod = IPrimexDNSStorageV3.CallingMethod.ClosePositionByCondition;\\n        } else {\\n            vars.callingMethod = IPrimexDNSStorageV3.CallingMethod.OpenPositionByOrder;\\n        }\\n        (\\n            vars.liquidationGasAmount,\\n            vars.protocolFeeCoefficient,\\n            vars.additionalGasSpent,\\n            vars.maxGasAmount,\\n            vars.baseLength\\n        ) = params.primexDNS.getParamsForMinProtocolFee(vars.callingMethod);\\n\\n        vars.l1CostWei = _calculateL1CostWei(vars.baseLength, params.keeperRewardDistributor);\\n\\n        if (params.isFeeProhibitedInPmx) {\\n            vars.minProtocolFeeInNativeAsset =\\n                vars.liquidationGasAmount *\\n                vars.restrictedGasPrice +\\n                vars.l1CostWei +\\n                vars.protocolFeeCoefficient;\\n        } else {\\n            if (vars.callingMethod == IPrimexDNSStorageV3.CallingMethod.ClosePositionByCondition) {\\n                vars.minProtocolFeeInNativeAsset =\\n                    vars.maxGasAmount *\\n                    vars.restrictedGasPrice +\\n                    vars.l1CostWei +\\n                    vars.protocolFeeCoefficient;\\n            } else {\\n                vars.totalGasSpent = params.restrictedGasSpent + vars.additionalGasSpent;\\n                vars.totalGasSpent = min(vars.totalGasSpent, vars.maxGasAmount);\\n\\n                vars.minProtocolFeeInNativeAsset =\\n                    vars.totalGasSpent *\\n                    vars.restrictedGasPrice +\\n                    vars.l1CostWei +\\n                    vars.protocolFeeCoefficient;\\n            }\\n        }\\n        minProtocolFeeInPositionAsset = getOracleAmountsOut(\\n            NATIVE_CURRENCY,\\n            params.paymentAsset,\\n            vars.minProtocolFeeInNativeAsset,\\n            params.priceOracle,\\n            params.nativePaymentAssetOracleData\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate minProtocolFee based on the gas price in closeBatchPositions\\n     */\\n    function minProtocolFeeCloseBatch(\\n        address _paymentAsset,\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        uint256 _estimatedGasAmount,\\n        uint256 _estimatedBaseLength,\\n        IPrimexDNSV3 primexDNS,\\n        bytes calldata _nativePaymentAssetOracleData\\n    ) public returns (uint256 minProtocolFeeInPositionAsset) {\\n        uint256 restrictedGasPrice = calculateRestrictedGasPrice(_priceOracle, _keeperRewardDistributor);\\n\\n        uint256 l1CostWei = _calculateL1CostWei(_estimatedBaseLength, _keeperRewardDistributor);\\n\\n        uint256 minProtocolFeeInNativeAsset = _estimatedGasAmount *\\n            restrictedGasPrice +\\n            l1CostWei +\\n            primexDNS.protocolFeeCoefficient();\\n\\n        minProtocolFeeInPositionAsset = getOracleAmountsOut(\\n            NATIVE_CURRENCY,\\n            _paymentAsset,\\n            minProtocolFeeInNativeAsset,\\n            _priceOracle,\\n            _nativePaymentAssetOracleData\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate minPositionSize based on the gas price\\n     */\\n    function minPositionSize(\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        IPrimexDNSV3 _primexDNS,\\n        IPrimexDNSStorageV3.TradingOrderType _tradingOrderType\\n    ) public view returns (uint256 minPositionSizeInNativeAsset) {\\n        uint256 restrictedGasPrice = calculateRestrictedGasPrice(_priceOracle, _keeperRewardDistributor);\\n        (\\n            uint256 baseLength,\\n            uint256 averageGasPerAction,\\n            uint256 protocolFeeCoefficient,\\n            uint256 gasPriceBuffer\\n        ) = _primexDNS.getParamsForMinPositionSize(_tradingOrderType);\\n        uint256 l1CostWei = _calculateL1CostWei(baseLength, _keeperRewardDistributor);\\n\\n        minPositionSizeInNativeAsset = (averageGasPerAction * restrictedGasPrice + l1CostWei + protocolFeeCoefficient)\\n            .wmul(gasPriceBuffer);\\n    }\\n\\n    function calculateRestrictedGasPrice(\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor\\n    ) internal view returns (uint256 restrictedGasPrice) {\\n        RestrictedGasPriceVars memory vars;\\n        restrictedGasPrice = tx.gasprice;\\n        vars.oracleGasPrice = IPriceOracle(_priceOracle).getGasPrice();\\n        (vars.oracleGasPriceTolerance, vars.defaultMaxGasPrice, , ) = _keeperRewardDistributor\\n            .getGasCalculationParams();\\n\\n        vars.maxGasPrice = vars.oracleGasPrice > 0\\n            ? uint256(vars.oracleGasPrice).wmul(WadRayMath.WAD + vars.oracleGasPriceTolerance)\\n            : vars.defaultMaxGasPrice;\\n\\n        if (restrictedGasPrice > vars.maxGasPrice || restrictedGasPrice == 0) {\\n            restrictedGasPrice = vars.maxGasPrice;\\n        }\\n    }\\n\\n    function getOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountAssetA,\\n        address _priceOracle,\\n        bytes memory _oracleData\\n    ) public returns (uint256) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracleV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountAssetA;\\n        }\\n        uint256 exchangeRate = IPriceOracleV2(_priceOracle).getExchangeRate(_tokenA, _tokenB, _oracleData);\\n        return (_amountAssetA * _getAssetMultiplier(_tokenA)).wmul(exchangeRate) / _getAssetMultiplier(_tokenB);\\n    }\\n\\n    /**\\n     * @param _tokenA asset for sell\\n     * @param _tokenB asset to buy\\n     * @param _amountsAssetA An array of amounts of tokenA to sell\\n     * @param _priceOracle PriceOracle contract address\\n     * @return returns an array of amounts of `tokenB` by the `amountsAssetA` by the price of the oracle\\n     */\\n    function getBatchOracleAmountsOut(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256[] memory _amountsAssetA,\\n        address _priceOracle,\\n        bytes calldata _oracleData\\n    ) public returns (uint256[] memory) {\\n        _require(\\n            IERC165(_priceOracle).supportsInterface(type(IPriceOracleV2).interfaceId),\\n            Errors.ADDRESS_NOT_SUPPORTED.selector\\n        );\\n        if (_tokenA == _tokenB) {\\n            return _amountsAssetA;\\n        }\\n        uint256[] memory amountsAssetB = new uint256[](_amountsAssetA.length);\\n        uint256 exchangeRate = IPriceOracleV2(_priceOracle).getExchangeRate(_tokenA, _tokenB, _oracleData);\\n        uint256 multiplier1 = 10 ** (18 - IERC20Metadata(_tokenA).decimals());\\n        uint256 multiplier2 = 10 ** (18 - IERC20Metadata(_tokenB).decimals());\\n        for (uint256 i; i < _amountsAssetA.length; i++) {\\n            amountsAssetB[i] = (_amountsAssetA[i] * multiplier1).wmul(exchangeRate) / multiplier2;\\n        }\\n        return amountsAssetB;\\n    }\\n\\n    /**\\n     * @notice Calculates the liquidation price for a position.\\n     * @dev liquidationPrice = (feeBuffer * debt) /\\n     * ((1 - securityBuffer) * (1 - oracleTolerableLimit) * (1 - priceDrop) * positionAmount))\\n     * @param _bucket The address of the related bucket.\\n     * @param _positionAsset The address of the position asset.\\n     * @param _positionAmount The size of the opened position.\\n     * @param _positionDebt The debt amount in debtTokens associated with the position.\\n     * @return The calculated liquidation price in borrowed asset.\\n     */\\n    function getLiquidationPrice(\\n        address _bucket,\\n        address _positionAsset,\\n        uint256 _positionAmount,\\n        uint256 _positionDebt,\\n        address _primexDNS\\n    ) public view returns (uint256) {\\n        _require(_positionAsset != address(0), Errors.ADDRESS_NOT_SUPPORTED.selector);\\n        LiquidationPriceData memory data;\\n        data.bucket = IBucketV3(_bucket);\\n        data.positionManager = data.bucket.positionManager();\\n        data.borrowedAsset = data.bucket.borrowedAsset();\\n        data.priceOracle = data.positionManager.priceOracle();\\n\\n        uint256 multiplier1 = 10 ** (18 - data.borrowedAsset.decimals());\\n        uint256 denominator = (WadRayMath.WAD - data.positionManager.securityBuffer())\\n            .wmul(\\n                WadRayMath.WAD -\\n                    data.positionManager.getOracleTolerableLimit(_positionAsset, address(data.borrowedAsset))\\n            )\\n            .wmul(WadRayMath.WAD - data.priceOracle.getPairPriceDrop(_positionAsset, address(data.borrowedAsset)))\\n            .wmul(_positionAmount)\\n            .wmul(\\n                WadRayMath.WAD -\\n                    IPrimexDNSV3(_primexDNS).protocolFeeRates(\\n                        IPrimexDNSStorageV3.FeeRateType.MarginPositionClosedByKeeper\\n                    )\\n            ) * 10 ** (18 - IERC20Metadata(_positionAsset).decimals());\\n        // numerator = data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1;\\n        return (data.bucket.feeBuffer().wmul(_positionDebt) * multiplier1).wdiv(denominator) / multiplier1;\\n    }\\n\\n    /**\\n     * @notice Validates if a position meets the minimum size requirement.\\n     * @param _amount The amount of the asset in the position.\\n     * @param _asset The asset associated with the position.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @param _nativeAssetOracleData NativeCurrency => Asset\\n     */\\n    function validateMinPositionSize(\\n        uint256 _amount,\\n        address _asset,\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        IPrimexDNSV3 _primexDNS,\\n        IPrimexDNSStorageV3.TradingOrderType _tradingOrderType,\\n        bytes calldata _nativeAssetOracleData\\n    ) public {\\n        _require(\\n            isGreaterThanMinPositionSize(\\n                _asset,\\n                _amount,\\n                _priceOracle,\\n                _keeperRewardDistributor,\\n                _primexDNS,\\n                _tradingOrderType,\\n                _nativeAssetOracleData\\n            ),\\n            Errors.INSUFFICIENT_POSITION_SIZE.selector\\n        );\\n    }\\n\\n    /**\\n     * @notice Checks if the given amount of _asset corresponds to the minimum position size _minPositionSize,\\n     * based on the _minPositionAsset and the provided _priceOracle.\\n     * Returns true if the amount corresponds to or exceeds the minimum position size, otherwise returns false.\\n     * @param _asset The address of the asset being checked.\\n     * @param _amount The amount of _asset being checked.\\n     * @param _priceOracle The address of the price oracle contract.\\n     * @return A boolean value indicating whether the amount corresponds to or exceeds the minimum position size.\\n     */\\n    function isGreaterThanMinPositionSize(\\n        address _asset,\\n        uint256 _amount,\\n        address _priceOracle,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor,\\n        IPrimexDNSV3 _primexDNS,\\n        IPrimexDNSStorageV3.TradingOrderType _tradingOrderType,\\n        bytes calldata _nativeAssetOracleData\\n    ) public returns (bool) {\\n        uint256 minPositionSizeInNativeCurrency = minPositionSize(\\n            _priceOracle,\\n            _keeperRewardDistributor,\\n            _primexDNS,\\n            _tradingOrderType\\n        );\\n        uint256 minPositionSizeInAsset = getOracleAmountsOut(\\n            NATIVE_CURRENCY,\\n            _asset,\\n            minPositionSizeInNativeCurrency,\\n            _priceOracle,\\n            _nativeAssetOracleData\\n        );\\n        return _amount >= minPositionSizeInAsset;\\n    }\\n\\n    /**\\n     * @notice Decodes an encoded path and returns an array of addresses.\\n     * @param encodedPath The encoded path to be decoded.\\n     * @param dexRouter The address of the DEX router.\\n     * @param dexAdapter The address of the DEX adapter.\\n     * @return path An array of addresses representing the decoded path.\\n     */\\n    function decodePath(\\n        bytes memory encodedPath,\\n        address dexRouter,\\n        address payable dexAdapter\\n    ) public view returns (address[] memory path) {\\n        IDexAdapter.DexType type_ = IDexAdapter(dexAdapter).dexType(dexRouter);\\n\\n        if (type_ == IDexAdapter.DexType.UniswapV2 || type_ == IDexAdapter.DexType.Meshswap) {\\n            path = abi.decode(encodedPath, (address[]));\\n        } else if (type_ == IDexAdapter.DexType.UniswapV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 23; // address size(20) + fee size(3)\\n            uint256 pathLength = encodedPath.length / offsetSize + 1;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else if (type_ == IDexAdapter.DexType.Curve) {\\n            (path, ) = abi.decode(encodedPath, (address[], address[]));\\n        } else if (type_ == IDexAdapter.DexType.Balancer) {\\n            (path, , ) = abi.decode(encodedPath, (address[], bytes32[], int256[]));\\n        } else if (type_ == IDexAdapter.DexType.AlgebraV3) {\\n            uint256 skip;\\n            uint256 offsetSize = 20; // address size(20)\\n            uint256 pathLength = encodedPath.length / offsetSize;\\n            path = new address[](pathLength);\\n            for (uint256 i; i < pathLength; i++) {\\n                path[i] = encodedPath.toAddress(skip, encodedPath.length);\\n                skip += offsetSize;\\n            }\\n        } else {\\n            _revert(Errors.UNKNOWN_DEX_TYPE.selector);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the asset multiplier for a given asset.\\n     * @dev If the asset is the native currency, the function returns 1.\\n     * If the asset is USD, the function returns the value stored in the constant USD_MULTIPLIER.\\n     * For any other asset, the function calculates the multiplier based on the number of decimals of the token.\\n     * @param _asset The address of the asset.\\n     * @return The asset multiplier. It is a number with 10 raised to a power of decimals of a given asset.\\n     */\\n    function _getAssetMultiplier(address _asset) internal view returns (uint256) {\\n        if (_asset == NATIVE_CURRENCY) return 1;\\n        if (_asset == USD) return USD_MULTIPLIER;\\n\\n        return 10 ** (18 - IERC20Metadata(_asset).decimals());\\n    }\\n\\n    function _calculateL1CostWei(\\n        uint256 _baseLength,\\n        IKeeperRewardDistributorV3 _keeperRewardDistributor\\n    ) internal view returns (uint256 l1CostWei) {\\n        (\\n            ,\\n            ,\\n            uint256 optimisticGasCoefficient,\\n            IKeeperRewardDistributorStorage.PaymentModel paymentModel\\n        ) = _keeperRewardDistributor.getGasCalculationParams();\\n        if (paymentModel == IKeeperRewardDistributorStorage.PaymentModel.ARBITRUM) {\\n            return\\n                l1CostWei =\\n                    ARB_NITRO_ORACLE.getL1BaseFeeEstimate() *\\n                    GAS_FOR_BYTE *\\n                    (_baseLength + TRANSACTION_METADATA_BYTES);\\n        }\\n        if (paymentModel == IKeeperRewardDistributorStorage.PaymentModel.OPTIMISTIC) {\\n            // Adds 68 bytes of padding to account for the fact that the input does not have a signature.\\n            uint256 l1GasUsed = GAS_FOR_BYTE * (_baseLength + OVM_GASPRICEORACLE.overhead() + 68);\\n            return\\n                l1CostWei =\\n                    (OVM_GASPRICEORACLE.l1BaseFee() *\\n                        l1GasUsed *\\n                        OVM_GASPRICEORACLE.scalar() *\\n                        optimisticGasCoefficient) /\\n                    10 ** 6;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Utility function to get the minimum of two values\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Utility function to get the maximum of two values\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x8278400cb75ecf6d3e064b55f3812f4af20825e8f4c9938614532d0764c88e81\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TokenTransfersLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2024 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of token transfer logic that allows working with non-standart ERC-20 tokens, added method doTransferFromTo,\\n// modified doTransferIn\\n\\npragma solidity 0.8.26;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenTransfersLibrary {\\n    function doTransferIn(address token, address from, uint256 amount) public returns (uint256) {\\n        return doTransferFromTo(token, from, address(this), amount);\\n    }\\n\\n    function doTransferFromTo(address token, address from, address to, uint256 amount) public returns (uint256) {\\n        uint256 balanceBefore = IERC20(token).balanceOf(to);\\n        // The returned value is checked in the assembly code below.\\n        // Arbitrary `from` should be checked at a higher level. The library function cannot be called by the user.\\n        // slither-disable-next-line unchecked-transfer arbitrary-send-erc20\\n        EIP20NonStandardInterface(token).transferFrom(from, to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_IN_FAILED.selector);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = IERC20(token).balanceOf(to);\\n        _require(balanceAfter >= balanceBefore, Errors.TOKEN_TRANSFER_IN_OVERFLOW.selector);\\n\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    function doTransferOut(address token, address to, uint256 amount) public {\\n        // The returned value is checked in the assembly code below.\\n        // slither-disable-next-line unchecked-transfer\\n        EIP20NonStandardInterface(token).transfer(to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_OUT_FAILED.selector);\\n    }\\n\\n    function doTransferOutETH(address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        _require(success, Errors.NATIVE_TOKEN_TRANSFER_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x1d8585473739875d2f97e984ac6752b121a656bcded82f73c4b06174ab8786d9\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/utils/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n// A modified version of BytesLib\\n// Origin: https://github.com/1inch/universal-router/blob/b972662f8d3f0ba55ef99411720f613f77c3fab5/contracts/modules/uniswap/v3/BytesLib.sol\\n// Unused methods and constants were removed\\npragma solidity 0.8.26;\\n\\nlibrary BytesLib {\\n    error ToAddressOverflow();\\n    error ToAddressOutOfBounds();\\n\\n    /// @notice Returns the address starting at byte `_start`\\n    /// @dev _bytesLength must equal _bytes.length for this to function correctly\\n    /// @param _bytes The input bytes string to slice\\n    /// @param _start The starting index of the address\\n    /// @param _bytesLength The length of _bytes\\n    /// @return tempAddress The address starting at _start\\n    function toAddress(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _bytesLength\\n    ) internal pure returns (address tempAddress) {\\n        unchecked {\\n            if (_start + 20 < _start) revert ToAddressOverflow();\\n            if (_bytesLength < _start + 20) revert ToAddressOutOfBounds();\\n        }\\n\\n        assembly {\\n            tempAddress := mload(add(add(_bytes, 0x14), _start))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x895f76434296e715d9b8c32552158963fd65a8a0351ac6d334ec0af7c3b6ccf0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// A modified version of ds-math library\\n// Origin: https://github.com/dapphub/ds-math/blob/master/src/math.sol\\n// Unused methods were removed, errors changed\\n\\npragma solidity 0.8.26;\\nerror DS_MATH_ADD_OVERFLOW();\\nerror DS_MATH_MUL_OVERFLOW();\\n\\nlibrary WadRayMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if ((z = x + y) < x) revert DS_MATH_ADD_OVERFLOW();\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert DS_MATH_MUL_OVERFLOW();\\n    }\\n\\n    uint256 internal constant WAD = 10 ** 18;\\n    uint256 internal constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n}\\n\",\"keccak256\":\"0x49afef0dbc484e0e513c163ee4ce090a30fa061c47a262046c0a7311092a3756\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608080604052346015576131be908161001b8239f35b600080fdfe6101a080604052600436101561001457600080fd5b600061016052610160513560e01c90816301ffc9a71461161a5750806318cf81b41461128d578063373c00a11461040757806343116daf146101515763d61a1b941461005f57600080fd5b3461014a57602036600319011261014a576004356001600160401b03811161014a57610100600319823603011261014a576040519061009d8261166d565b6100a9816004016116f6565b82526100b7602482016116f6565b60208301526100c8604482016116f6565b6040830152606481013560608301526084810135801515810361014a57608083015260a481013560a083015260c481013560c083015260e4810135916001600160401b03831161014a5761012861013292600461014695369201016117a5565b60e0820152611ce6565b6040519182916020835260208301906118b9565b0390f35b6101605180fd5b3461014a57608036600319011261014a576004356001600160a01b0381169081900361014a576064356001600160401b03811161014a576101969036906004016117a5565b61019e611a2a565b506040516301ffc9a760e01b8152633d79d7fb60e11b6004820152602081602481865afa9081156103ad5761016051916103cd575b50156103bb5760405163eb02c30160e01b815260243560048201526101605181602481865afa9081156103ad576101605191610276575b606082015160a083015160c084015160405161014693610132939192889290916001600160a01b0391821691168a6102418661166d565b855260208501526040840152606083015261016051608083015260443560a08301526101605160c083015260e0820152611ce6565b9290503d8061016051853e61028b81856116d5565b83019260208185031261014a578051906001600160401b03821161014a5701916101808385031261014a5760405161018081018181106001600160401b038211176103935760405283518152602084015160208201526102ed60408501611a9a565b60408201526102fe60608501611a9a565b60608201526080840151608082015261031960a08501611a9a565b60a082015260c084015160c082015261033460e08501611a9a565b60e0820152610100840151610100820152610120840151610120820152610140840151610140820152610160840151936001600160401b03851161014a5761014695610132956103849201611aae565b6101608201529193509161020a565b634e487b7160e01b61016051526041600452602461016051fd5b6040513d61016051823e3d90fd5b60405163044aa57560e41b8152600490fd5b90506020813d6020116103ff575b816103e8602093836116d5565b8101031261014a576103f990611a4b565b836101d3565b3d91506103db565b602036600319011261014a576004356001600160401b03811161014a57610140600319823603011261014a5760405160a05261044460a05161166d565b610450816004016116f6565b60a051526024810135906001600160a01b038216820361014a57602060a05101918252604060a05101916044820135835261048e366064840161170a565b606060a0510160c05260c0515260c48201356001600160401b03811161014a576104be90600436918501016117a5565b608060a051015260e48201356001600160401b03811161014a576104e89060043691850101611a0c565b9160a08051019283526101048101356001600160401b03811161014a578101903660238301121561014a5760048201356105218161173c565b9261052f60405194856116d5565b818452602060048186019360051b830101019036821161014a5760248101925b8284106111e7575050505060c060a05101918252610124810135906001600160401b03821161014a5701903660238301121561014a576004820135916105948361173c565b926105a260405194856116d5565b808452602060048186019260051b840101019136831161014a57602401905b8282106111d75750505060e060a05101918252604051610140526105e76101405161169f565b6105ef611a2a565b61014051526020610140510161010052610607611a2a565b6101005152604061014051016101205261061f611a2a565b610120515260a051516040516301ffc9a760e01b8152633d79d7fb60e11b600482015290602090829060249082906001600160a01b03165afa9081156103ad57610160519161119d575b5080611119575b156103bb5760a05151604051632630c12f60e01b815290602090829060049082906001600160a01b03165afa9081156103ad5761016051916110fa575b5090519151906001600160a01b0316803b1561014a579160405192839163f197ce3560e01b8352604483016040600485015281518091526064840190602060648260051b87010193019161016051905b82821061107d575050505060031983820301602484015260208085519283815201940190610160515b8181106110645750505081806101605194039134905af180156103ad57611051575b5051915160405163d09ef24160e01b81526004810191909152610160519092839060249082906001600160a01b03165afa80156103ad576101605160e052610f17575b60e051610120015160049250670de0b6b3a764000003610e8a5760e051604001516001600160a01b0316905b60a05151604051633f4a2d2760e01b81529360209185919082906001600160a01b03165afa9283156103ad576101605193610e69575b5060e051604001516001600160a01b0390811660808190529083161415908180610e4b575b610dd0575b60018060a01b03604060e05101511690606060e051015191604061012051510151916040519660808801908882106001600160401b038311176103935760409182529288526001600160a01b0387811660208a81019182528a84019790975260608a0195865291516391f03efd60e01b81529195919384916004918391165afa9081156103ad576101605191610d94575b60a05151604051632630c12f60e01b81529350602090849060049082906001600160a01b03165afa9283156103ad576101605193610d63575b505160408051630e6e928f60e41b815260a0600482015289516001600160a01b0390811660a4830152965190961660c4870152979097015160e48501529151608061010485015280516101248501819052610160519497610144600583901b8a018101968a9692959492936020909301929187015b828210610c37575050505085151560248501526001600160a01b039081166044850152166064830152818303600319016084830152602092829161099a9190611894565b03817386c004c61A89d520A2EC080d1A3801eeC77694c95af49283156103ad576101605193610bfe575b5060e0516101200151670de0b6b3a763ffff19810193908411610bb05761016051938015908115610bdf575b5015610bca576706f05b59d3b20000840193848111610bb0578410610b9b57608051610aae94670de0b6b3a7640000900492906001600160a01b03851603610b065750610a3c91611a58565b60a051805160e0516020015160c05151516080909301516040519590949290916001600160a01b039081169116610a728761166d565b865260208601526001600160a01b0316604085015260608401526101608051608085015260a08401919091525160c083015260e0820152611ce6565b61014051526040516020815280610146610af0610ada61014051516060602086015260808501906118b9565b6101005151848203601f190160408601526118b9565b6101205151838203601f190160608501526118b9565b905015610a3c57610b9160018060a01b0360a051511660018060a01b03602060e05101511660018060a01b03604060e051015116606060e0510151602060c05151015191608060a05101519360405195610b5f8761166d565b865260208601526040850152606084015261016051608084015260a08301526101605160c083015260e0820152611ce6565b6101005152610a3c565b630a77254f60e01b6101605152600461016051fd5b634e487b7160e01b61016051526011600452602461016051fd5b631550e8b760e01b6101605152600461016051fd5b94505080610bf7610bf08683611c75565b9586611bba565b14856109f0565b9092506020813d602011610c2f575b81610c1a602093836116d5565b81010312610c2a575191836109c4565b600080fd5b3d9150610c0d565b9193949596509196610143198b820301825287519060206040820192805183520151916040602083015282518091526060820190602060608260051b850101940192610160515b828110610ca25750505050506020806001929901920192018a969594939192610956565b9091929394605f1983820301855285516020604083019160018060a01b0381511684520151916040602082015282518092526060810190602060608460051b83010194019261016051915b818310610d0e57505050505060208060019297019501910192919092610c7e565b9091929394602080610d56600193605f198682030189528951906040610d3d8351606084526060840190611894565b9285810151868401520151906040818403910152611894565b9701950193019190610ced565b610d8691935060203d602011610d8d575b610d7e81836116d5565b810190611a7b565b91886108e1565b503d610d74565b90506020823d602011610dc8575b81610daf602093836116d5565b8101031261014a57610dc2600492611a9a565b906108a8565b3d9150610da2565b610e4160018060a01b0360a0515116606060e0510151604060c051510151608060a05101519160405193610e038561166d565b845260018060a01b03881660208501526080516040850152606084015261016051608084015260a08301526101605160c083015260e0820152611ce6565b6101205152610817565b60e051602001516080516001600160a01b0390911614159250610812565b610e8391935060203d602011610d8d57610d7e81836116d5565b91836107ed565b60e0515160405163011ddaef60e71b81529260209184919082906001600160a01b03165afa80156103ad576101605190610ed2575b600492506001600160a01b0316906107b7565b50906020813d602011610f0f575b81610eed602093836116d5565b8101031261014a5751906001600160a01b038216820361014a57600491610ebf565b3d9150610ee0565b3d8061016051843e610f2981846116d5565b82019160208184031261014a578051906001600160401b03821161014a57016101c08184031261014a57604051906101c082018281106001600160401b0382111761039357604052610f7a81611a9a565b8252610f8860208201611a9a565b6020830152610f9960408201611a9a565b604083015260608101516060830152610fb460808201611a9a565b608083015260a081015160a0830152610fcf60c08201611a9a565b60c083015260e081015160e08301526101008101516101008301526101208101516101208301526110036101408201611a4b565b6101408301526101608101516101608301526101808101516101808301526101a0810151936001600160401b03851161014a576004946110439201611aae565b6101a082015260e05261078b565b6101605161105e916116d5565b83610748565b8251865260209586019587955090920191600101610726565b91939092949550606319888203018252845190815180825260208201906020808260051b850101940192610160515b8281106110cf5750505050506020806001929601920192018795949391926106fd565b90919293946020806110ed600193601f198782030189528951611894565b97019501939291016110ac565b611113915060203d602011610d8d57610d7e81836116d5565b866106ad565b5082516040516301ffc9a760e01b815263fabd349d60e01b600482015290602090829060249082906001600160a01b03165afa9081156103ad576101605191611163575b50610670565b90506020813d602011611195575b8161117e602093836116d5565b8101031261014a5761118f90611a4b565b8661115d565b3d9150611171565b90506020813d6020116111cf575b816111b8602093836116d5565b8101031261014a576111c990611a4b565b86610669565b3d91506111ab565b81358152602091820191016105c1565b83356001600160401b03811161014a5760049083010136603f8201121561014a5760208101356112168161173c565b9161122460405193846116d5565b8183526020808085019360051b830101019036821161014a5760408101925b82841061125d57505050908252506020938401930161054f565b83356001600160401b03811161014a5760209161128283928380369288010101611a0c565b815201930192611243565b3461014a57602036600319011261014a576004356001600160401b03811161014a57610140600319823603011261014a576040516112ca8161166d565b6112d6826004016116f6565b81526112e4602483016116f6565b9160208201928352604082019060448101358252611304606482016116f6565b906060840191825260808401946084820135865261132460a483016116f6565b9160a086019283526113393660c4830161170a565b9060c08701918252610124810135906001600160401b03821161014a57600461136592369201016117a5565b60e0870190815290611375611a2a565b5061137e611a2a565b95611387611a2a565b88516040516301ffc9a760e01b8152633d79d7fb60e11b600482015291979190602090829060249082906001600160a01b03165afa9081156103ad5761016051916115e0575b50806115cd575b806115ba575b806115a7575b156103bb578951156115955781511580159061157d575b1561156b57845181516114969b6001600160a01b03918216929091168281149391928415918280611556575b611520575b50506114bd575b5098519551945191519798610146986114a497611481976001600160a01b0391821697908216969095909491169261146e9291156114b2575190611a58565b91515192519360405195610b5f8761166d565b936040519586956060875260608701906118b9565b9085820360208701526118b9565b9083820360408501526118b9565b506101605190611a58565b61014699506114819694926114a49896949261151061146e938e60018060a01b039051169060018060a01b038b51169060018060a01b03905116845160208a510151918b519360405195610b5f8761166d565b9b5092949698509294965061142f565b8d51855189516040908101518c519151969f5061154e9695919490936001600160a01b0316610b5f8761166d565b988d80611428565b8b516001600160a01b03168314159350611423565b6040516396b154ab60e01b8152600490fd5b50845181516001600160a01b039081169116146113f7565b60405163511ff7fb60e11b8152600490fd5b5085516001600160a01b031615156113e0565b5080516001600160a01b031615156113da565b5084516001600160a01b031615156113d4565b90506020813d602011611612575b816115fb602093836116d5565b8101031261014a5761160c90611a4b565b8b6113cd565b3d91506115ee565b3461014a57602036600319011261014a576004359063ffffffff60e01b821680920361014a57602091635d7c7b9760e11b811490811561165c575b5015158152f35b6301ffc9a760e01b14905083611655565b61010081019081106001600160401b0382111761168957604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761168957604052565b604081019081106001600160401b0382111761168957604052565b90601f801991011681019081106001600160401b0382111761168957604052565b35906001600160a01b0382168203610c2a57565b9190826060910312610c2a576040516117228161169f565b604080829480358452602081013560208501520135910152565b6001600160401b0381116116895760051b60200190565b6001600160401b03811161168957601f01601f191660200190565b92919261177a82611753565b9161178860405193846116d5565b829481845281830111610c2a578281602093846000960137010152565b81601f82011215610c2a578035906117bc8261173c565b926117ca60405194856116d5565b82845260208085019360051b83010191818311610c2a5760208101935b8385106117f657505050505090565b84356001600160401b038111610c2a5782016040818503601f190112610c2a5760405191611823836116ba565b60208201356001600160401b038111610c2a576020908301019285601f85011215610c2a5760406020949361185e888688809835910161176e565b83520135838201528152019401936117e7565b60005b8381106118845750506000910152565b8181015183820152602001611874565b906020916118ad81518092818552858086019101611871565b601f01601f1916010190565b906040606082019280518352602081015160208401520151916060604083015282518091526080820191602060808360051b8301019401926000915b83831061190457505050505090565b9091929394607f1982820301835285519060206040820192805183520151916040602083015282518091526060820190602060608260051b85010194019260005b828110611966575050505050602080600192970193019301919392906118f5565b9091929394605f1983820301855285516020604083019160018060a01b0381511684520151916040602082015282518092526060810190602060608460051b8301019401926000915b8183106119d057505050505060208060019297019501910192919092611945565b90919293946020806119ff600193605f198682030189528951906040610d3d8351606084526060840190611894565b97019501930191906119af565b9080601f83011215610c2a57816020611a279335910161176e565b90565b60405190611a378261169f565b606060408360008152600060208201520152565b51908115158203610c2a57565b91908201809211611a6557565b634e487b7160e01b600052601160045260246000fd5b90816020910312610c2a57516001600160a01b0381168103610c2a5790565b51906001600160a01b0382168203610c2a57565b81601f82011215610c2a578051611ac481611753565b92611ad260405194856116d5565b81845260208284010111610c2a57611a279160208085019101611871565b91908203918211611a6557565b90611b078261173c565b611b1460405191826116d5565b8281528092611b25601f199161173c565b0190602036910137565b60005b828110611b3e57505050565b606082820152602001611b32565b90611b81611b598361173c565b611b6660405191826116d5565b83815260208194611b79601f199161173c565b019101611b2f565b565b805115611b905760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015611b905760209160051b010190565b8115611bc4570490565b634e487b7160e01b600052601260045260246000fd5b90602082820312610c2a5781516001600160401b038111610c2a57611a279201611aae565b929593909594919460a084019660a085528051809852602060c0860191019760005b818110611c565750506001600160a01b0396871660208601526040850191909152941660608301521515608090910152909150565b89516001600160a01b031683526020998a019990920191600101611c21565b81810292918115918404141715611a6557565b81810392916000138015828513169184121617611a6557565b91909160008382019384129112908015821691151617611a6557565b6000198114611a655760010190565b60405190611cd9826116ba565b6060602083600081520152565b611cee611a2a565b60208201519091906001600160a01b0316151580612f95575b15612f8357602081015160408201805190916001600160a01b03918216911614612f715760a0820191825115612f5c576060810151835111612f4a576040519260c084018481106001600160401b03821117611689576040526000845260006020850152606060408501526000606085015260006080850152606060a085015260e08201515190611d978261173c565b91611da560405193846116d5565b808352611db4601f199161173c565b0160005b818110612f25575050518452611dd260e083015151611afd565b60a0850152611de560e083015151611b4c565b95606093611e2060405191611dfa87846116d5565b60028352601f19870136602085013760408801839052516001600160a01b031691611b83565b5260018060a01b036020840151166040860151805160011015611b90576040015260405193611e4e8561169f565b808552600060208601526000604086015260005b60e085015151811015612631578451604051633f4a2d2760e01b815290602090829060049082906001600160a01b03165afa9081156123fc57611ede91602091600091612614575b50611eb98460e08a0151611ba6565b515190604051808095819463657dcce560e01b83528660048401526024830190611894565b03916001600160a01b03165afa600091816125d9575b50611f0457506001905b01611e62565b8551604051633f4a2d2760e01b81529299939593949290602090829060049082906001600160a01b03165afa9081156123fc576004916020916000916125bc575b506040516391f03efd60e01b815292839182906001600160a01b03165afa9081156123fc5760009161257c575b506040516336dd6b3d60e01b81526001600160a01b03808416600483015290929160209184916024918391165afa9182156123fc57600092612549575b50611fc060608801518a5190611bba565b602089015260018060a01b038116604089015260408901519060046020611feb8d60e08c0151611ba6565b5101518951604051633f4a2d2760e01b81529194919260209184919082906001600160a01b03165afa9182156123fc5760049260209160009161252c575b506040516391f03efd60e01b815293849182906001600160a01b03165afa9182156123fc576000926124e9575b5060808a015160405163340f07ad60e11b8152946000948694859461208e941515936001600160a01b03909216929060048701611bff565b03817386c004c61A89d520A2EC080d1A3801eeC77694c95af49081156123fc576000916124c8575b5087528551604051633f4a2d2760e01b815290602090829060049082906001600160a01b03165afa9081156123fc576004916020916000916124ab575b506040516391f03efd60e01b815292839182906001600160a01b03165afa80156123fc57600090612471575b608088015161213b92501515906001600160a01b031689613036565b908a6000198314612461576121c96121cf926121a78c670de0b6b3a7640000948f8a61216f8f9260e0612186940151611ba6565b5161217f60608601518093611ba6565b528b611ba6565b5060606121938351611afd565b920151916121a18383611ba6565b52611ba6565b50806121bd8d606060a082015191015190611ba6565b5260c08a015190611c75565b04613121565b608089015260808601511515600014612445576121ee6121f991613121565b608089015190611ca1565b61221061220a60608a01518c611ba6565b51611b83565b5260015b87518110156124255760608601519060018101808211611a655761223d61224591600494611c75565b8a5190611bba565b6020898101919091528751604051633f4a2d2760e01b815293849182906001600160a01b03165afa9182156123fc57600492602091600091612408575b506040516391f03efd60e01b815293849182906001600160a01b03165afa80156123fc57888a91898e9560009261239f575b5060800180516001966123279487946123219492936122e092901515916001600160a01b031690613036565b90516000901561234c5750600019810361232e575060607d90e40fbeea1d3a4abc8955e946fe31cdcf66f634e10000000000000000005b955b015190611ba6565b51611ba6565b5201612214565b61234761233c606092613121565b608088015190611ca1565b612317565b506000198103612381575060607fffff6f1bf04115e2c5b54376aa16b901ce32309909cb1f0000000000000000005b95612319565b61239a61238f606092613121565b608088015190611c88565b61237b565b949550509150506020823d82116123f4575b816123be602093836116d5565b810103126123f157509088612327826123218e8c6122e08d60806123e360019b611a9a565b9650509350509350956122b4565b80fd5b3d91506123b1565b6040513d6000823e3d90fd5b61241f9150823d8111610d8d57610d7e81836116d5565b38612282565b50919660019093919361243b6060890151611cbd565b6060890152611efe565b61245161245c91613121565b608089015190611c88565b6121f9565b5050509196600190939193611efe565b6020823d82116124a3575b81612489602093836116d5565b810103126123f1575061249e61213b91611a9a565b61211f565b3d915061247c565b6124c29150823d8111610d8d57610d7e81836116d5565b386120f3565b6124e3913d8091833e6124db81836116d5565b810190611bda565b386120b6565b90916020823d8211612524575b81612503602093836116d5565b810103126123f157509061208e61251c60009493611a9a565b929350612056565b3d91506124f6565b6125439150823d8111610d8d57610d7e81836116d5565b38612029565b90916020823d8211612574575b81612563602093836116d5565b810103126123f15750519038611faf565b3d9150612556565b906020823d82116125b4575b81612595602093836116d5565b810103126123f157509060206125ac602493611a9a565b919250611f72565b3d9150612588565b6125d39150823d8111610d8d57610d7e81836116d5565b38611f45565b90916020823d821161260c575b816125f3602093836116d5565b810103126123f1575061260590611a9a565b9038611ef4565b3d91506125e6565b61262b9150823d8111610d8d57610d7e81836116d5565b38611eaa565b50959290969350606085015115612f135761264f6060860151611afd565b60009061265f6060880151611b4c565b6101805260608701519761269c6126758a61173c565b996126836040519b8c6116d5565b808b52612692601f199161173c565b0160208b01611b2f565b60005b60608901518110156126fa576001906126b88a51611afd565b6126c58261018051611ba6565b526126d38161018051611ba6565b506126de8a51611afd565b6126e8828d611ba6565b526126f3818c611ba6565b500161269f565b50909192939497959860005b8a8951821015612738579061272081612321600194611b83565b516127318261232161018051611b83565b5201612706565b505095969793949291906001965b60608a01518810156128e75760005b8a518110156128db5788600019810111611a655761277e816123216000198c0161018051611ba6565b5160018201808311611a6557828b8f828f94836127a793612321926121a185612321858c611ba6565b5160808d0151156128d35784811280156128cb575b6128ae575b5050505060005b8281106127ec5750906001916127e5826123218d61018051611ba6565b5201612755565b908a600019810111611a65576128096000198c0161018051611ba6565b51916128158185611af0565b600019810193908411611a65578f8c8f928f968893612848876123218b61284161284f96608098611ba6565b5194611ba6565b5190611ca1565b910151156128a657848112801561289e575b612874575b5050506001919250016127c8565b6001945090612321612891929661288b8684611af0565b94611ba6565b528b9291508c8438612866565b508415612861565b848113612861565b93506000926128c1929161232191611ba6565b528a828b386127c1565b5084156127bc565b8481136127bc565b50600190970196612746565b9297965093909498979283519960005b606086015180821015612f01578c156129b3578161291491611af0565b9b8c600019810111611a655761292e6000198e018b611ba6565b5181600019810111611a6557612991916129798f8c61296e61296261295b61298597600019880190611ba6565b5186611af0565b91600019840190611ba6565b52600019018d611ba6565b51906000190190611ba6565b519c6000190189611ba6565b5161299f575b6001016128f7565b986129ab600191611cbd565b999050612997565b505094919792989399509495505b8115612ef65760409182516129d684826116d5565b60018152601f1984019060005b828110612edf5750848a01528351906129fc85836116d5565b6001825260005b818110612ec85750508351612a3891612a1b826116ba565b600182526020820152848a015190612a3282611b83565b52611b83565b5060208501516001600160a01b031691612a518261173c565b91612a5e855193846116d5565b808352612a6d601f199161173c565b019060005b828110612ea05750505090612aaf91835191612a8d836116ba565b825260208201526020612aa2848a0151611b83565b51015190612a3282611b83565b5060005b6060890151811015612e9657612ac98187611ba6565b5115612e8e57612ad98187611ba6565b5190612ae58187611ba6565b515160408b015186518551633f4a2d2760e01b815291949190602090829060049082906001600160a01b03165afa908115612dc657612b599291602091600091612e71575b50612b35868c611ba6565b5151908851808096819463657dcce560e01b83528660048401526024830190611894565b03916001600160a01b03165afa918215612dc657600092612e36575b506020612b82858b611ba6565b51015188518751633f4a2d2760e01b815291939190602090829060049082906001600160a01b03165afa908115612e0e57600491602091600091612e19575b5089516391f03efd60e01b815292839182906001600160a01b03165afa908115612e0e57600091612dd1575b5060808a018051895163340f07ad60e11b81529198919560009487948594612c28941515936001600160a01b03909216929060048701611bff565b03817386c004c61A89d520A2EC080d1A3801eeC77694c95af4918215612dc6576020612c80888e612c9b97968496612c8896600092612dab575b50835198612c6f8a61169f565b895285890152828801520151611b83565b510151611b83565b51015160208d0151916121a18383611ba6565b50612ca960208b0151611cbd565b60208b01528960208901612ccd612cc68460a08451950151611ba6565b5183611a58565b918210612d9a5752612cdf8185611ba6565b51612cea8289611ba6565b51600019810193908411611a655782612d08600195612d2694611ba6565b518d8c51936000908315600014612d2f575050505050600090611a58565b88525b01612ab3565b51159050612d6f57670de0b6b3a76400006121c9612d57612d699560a0612d63950151611ba6565b5160c08d015190611c75565b90611c88565b90611a58565b670de0b6b3a76400006121c9612d57612d959560a0612d8f950151611ba6565b90611ca1565b612d69565b630a77254f60e01b60005260046000fd5b612dbf91923d8091833e6124db81836116d5565b9038612c62565b86513d6000823e3d90fd5b906020823d8211612e06575b81612dea602093836116d5565b810103126123f1575090612dff600092611a9a565b9091612bed565b3d9150612ddd565b88513d6000823e3d90fd5b612e309150823d8111610d8d57610d7e81836116d5565b38612bc1565b90916020823d8211612e69575b81612e50602093836116d5565b810103126123f15750612e6290611a9a565b9038612b75565b3d9150612e43565b612e889150823d8111610d8d57610d7e81836116d5565b38612b2a565b600190612d29565b5050505050509150565b6020908651612eae8161169f565b838152600083820152838882015282828701015201612a72565b602090612ed3611ccc565b82828601015201612a03565b602090612eea611ccc565b828285010152016129e3565b509496505050505050565b505094919792989399509495506129c1565b60405163af16b31b60e01b8152600490fd5b602090604051612f34816116ba565b6060815260008382015282828701015201611db8565b604051631edbd19360e11b8152600490fd5b6040516001622c3a8160e21b03198152600490fd5b604051635c6726db60e11b8152600490fd5b604051632638e39360e11b8152600490fd5b5060408101516001600160a01b03161515611d07565b90606082820312610c2a5780601f83011215610c2a5760405191612fce8361169f565b829060608101928311610c2a57905b828210612fea5750505090565b8151815260209182019101612fdd565b60208152606061301583518260208501526080840190611894565b6020840151604084810191909152909301516001600160a01b031691015290565b6060916000936130ba576130609160405194858094819363eb5251a560e01b835260048301612ffa565b03926001600160a01b03165af160009181613089575b50613082575060001990565b6020015190565b6130ac91925060603d6060116130b3575b6130a481836116d5565b810190612fab565b9038613076565b503d61309a565b6130da91604051948580948193630fafa65f60e11b835260048301612ffa565b03926001600160a01b03165af160009181613100575b506130fc575060001990565b5190565b61311a91925060603d6060116130b3576130a481836116d5565b90386130f0565b6001600160ff1b0381116131325790565b60405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608490fdfea26469706673582212208bc6ece5c0061678c9ef873bc1292314cbd6083e0eb03abe384ecda6f7ead42864736f6c634300081a0033",
  "deployedBytecode": "0x6101a080604052600436101561001457600080fd5b600061016052610160513560e01c90816301ffc9a71461161a5750806318cf81b41461128d578063373c00a11461040757806343116daf146101515763d61a1b941461005f57600080fd5b3461014a57602036600319011261014a576004356001600160401b03811161014a57610100600319823603011261014a576040519061009d8261166d565b6100a9816004016116f6565b82526100b7602482016116f6565b60208301526100c8604482016116f6565b6040830152606481013560608301526084810135801515810361014a57608083015260a481013560a083015260c481013560c083015260e4810135916001600160401b03831161014a5761012861013292600461014695369201016117a5565b60e0820152611ce6565b6040519182916020835260208301906118b9565b0390f35b6101605180fd5b3461014a57608036600319011261014a576004356001600160a01b0381169081900361014a576064356001600160401b03811161014a576101969036906004016117a5565b61019e611a2a565b506040516301ffc9a760e01b8152633d79d7fb60e11b6004820152602081602481865afa9081156103ad5761016051916103cd575b50156103bb5760405163eb02c30160e01b815260243560048201526101605181602481865afa9081156103ad576101605191610276575b606082015160a083015160c084015160405161014693610132939192889290916001600160a01b0391821691168a6102418661166d565b855260208501526040840152606083015261016051608083015260443560a08301526101605160c083015260e0820152611ce6565b9290503d8061016051853e61028b81856116d5565b83019260208185031261014a578051906001600160401b03821161014a5701916101808385031261014a5760405161018081018181106001600160401b038211176103935760405283518152602084015160208201526102ed60408501611a9a565b60408201526102fe60608501611a9a565b60608201526080840151608082015261031960a08501611a9a565b60a082015260c084015160c082015261033460e08501611a9a565b60e0820152610100840151610100820152610120840151610120820152610140840151610140820152610160840151936001600160401b03851161014a5761014695610132956103849201611aae565b6101608201529193509161020a565b634e487b7160e01b61016051526041600452602461016051fd5b6040513d61016051823e3d90fd5b60405163044aa57560e41b8152600490fd5b90506020813d6020116103ff575b816103e8602093836116d5565b8101031261014a576103f990611a4b565b836101d3565b3d91506103db565b602036600319011261014a576004356001600160401b03811161014a57610140600319823603011261014a5760405160a05261044460a05161166d565b610450816004016116f6565b60a051526024810135906001600160a01b038216820361014a57602060a05101918252604060a05101916044820135835261048e366064840161170a565b606060a0510160c05260c0515260c48201356001600160401b03811161014a576104be90600436918501016117a5565b608060a051015260e48201356001600160401b03811161014a576104e89060043691850101611a0c565b9160a08051019283526101048101356001600160401b03811161014a578101903660238301121561014a5760048201356105218161173c565b9261052f60405194856116d5565b818452602060048186019360051b830101019036821161014a5760248101925b8284106111e7575050505060c060a05101918252610124810135906001600160401b03821161014a5701903660238301121561014a576004820135916105948361173c565b926105a260405194856116d5565b808452602060048186019260051b840101019136831161014a57602401905b8282106111d75750505060e060a05101918252604051610140526105e76101405161169f565b6105ef611a2a565b61014051526020610140510161010052610607611a2a565b6101005152604061014051016101205261061f611a2a565b610120515260a051516040516301ffc9a760e01b8152633d79d7fb60e11b600482015290602090829060249082906001600160a01b03165afa9081156103ad57610160519161119d575b5080611119575b156103bb5760a05151604051632630c12f60e01b815290602090829060049082906001600160a01b03165afa9081156103ad5761016051916110fa575b5090519151906001600160a01b0316803b1561014a579160405192839163f197ce3560e01b8352604483016040600485015281518091526064840190602060648260051b87010193019161016051905b82821061107d575050505060031983820301602484015260208085519283815201940190610160515b8181106110645750505081806101605194039134905af180156103ad57611051575b5051915160405163d09ef24160e01b81526004810191909152610160519092839060249082906001600160a01b03165afa80156103ad576101605160e052610f17575b60e051610120015160049250670de0b6b3a764000003610e8a5760e051604001516001600160a01b0316905b60a05151604051633f4a2d2760e01b81529360209185919082906001600160a01b03165afa9283156103ad576101605193610e69575b5060e051604001516001600160a01b0390811660808190529083161415908180610e4b575b610dd0575b60018060a01b03604060e05101511690606060e051015191604061012051510151916040519660808801908882106001600160401b038311176103935760409182529288526001600160a01b0387811660208a81019182528a84019790975260608a0195865291516391f03efd60e01b81529195919384916004918391165afa9081156103ad576101605191610d94575b60a05151604051632630c12f60e01b81529350602090849060049082906001600160a01b03165afa9283156103ad576101605193610d63575b505160408051630e6e928f60e41b815260a0600482015289516001600160a01b0390811660a4830152965190961660c4870152979097015160e48501529151608061010485015280516101248501819052610160519497610144600583901b8a018101968a9692959492936020909301929187015b828210610c37575050505085151560248501526001600160a01b039081166044850152166064830152818303600319016084830152602092829161099a9190611894565b038173__$75df3f6366b0557754cd3ba14359105414$__5af49283156103ad576101605193610bfe575b5060e0516101200151670de0b6b3a763ffff19810193908411610bb05761016051938015908115610bdf575b5015610bca576706f05b59d3b20000840193848111610bb0578410610b9b57608051610aae94670de0b6b3a7640000900492906001600160a01b03851603610b065750610a3c91611a58565b60a051805160e0516020015160c05151516080909301516040519590949290916001600160a01b039081169116610a728761166d565b865260208601526001600160a01b0316604085015260608401526101608051608085015260a08401919091525160c083015260e0820152611ce6565b61014051526040516020815280610146610af0610ada61014051516060602086015260808501906118b9565b6101005151848203601f190160408601526118b9565b6101205151838203601f190160608501526118b9565b905015610a3c57610b9160018060a01b0360a051511660018060a01b03602060e05101511660018060a01b03604060e051015116606060e0510151602060c05151015191608060a05101519360405195610b5f8761166d565b865260208601526040850152606084015261016051608084015260a08301526101605160c083015260e0820152611ce6565b6101005152610a3c565b630a77254f60e01b6101605152600461016051fd5b634e487b7160e01b61016051526011600452602461016051fd5b631550e8b760e01b6101605152600461016051fd5b94505080610bf7610bf08683611c75565b9586611bba565b14856109f0565b9092506020813d602011610c2f575b81610c1a602093836116d5565b81010312610c2a575191836109c4565b600080fd5b3d9150610c0d565b9193949596509196610143198b820301825287519060206040820192805183520151916040602083015282518091526060820190602060608260051b850101940192610160515b828110610ca25750505050506020806001929901920192018a969594939192610956565b9091929394605f1983820301855285516020604083019160018060a01b0381511684520151916040602082015282518092526060810190602060608460051b83010194019261016051915b818310610d0e57505050505060208060019297019501910192919092610c7e565b9091929394602080610d56600193605f198682030189528951906040610d3d8351606084526060840190611894565b9285810151868401520151906040818403910152611894565b9701950193019190610ced565b610d8691935060203d602011610d8d575b610d7e81836116d5565b810190611a7b565b91886108e1565b503d610d74565b90506020823d602011610dc8575b81610daf602093836116d5565b8101031261014a57610dc2600492611a9a565b906108a8565b3d9150610da2565b610e4160018060a01b0360a0515116606060e0510151604060c051510151608060a05101519160405193610e038561166d565b845260018060a01b03881660208501526080516040850152606084015261016051608084015260a08301526101605160c083015260e0820152611ce6565b6101205152610817565b60e051602001516080516001600160a01b0390911614159250610812565b610e8391935060203d602011610d8d57610d7e81836116d5565b91836107ed565b60e0515160405163011ddaef60e71b81529260209184919082906001600160a01b03165afa80156103ad576101605190610ed2575b600492506001600160a01b0316906107b7565b50906020813d602011610f0f575b81610eed602093836116d5565b8101031261014a5751906001600160a01b038216820361014a57600491610ebf565b3d9150610ee0565b3d8061016051843e610f2981846116d5565b82019160208184031261014a578051906001600160401b03821161014a57016101c08184031261014a57604051906101c082018281106001600160401b0382111761039357604052610f7a81611a9a565b8252610f8860208201611a9a565b6020830152610f9960408201611a9a565b604083015260608101516060830152610fb460808201611a9a565b608083015260a081015160a0830152610fcf60c08201611a9a565b60c083015260e081015160e08301526101008101516101008301526101208101516101208301526110036101408201611a4b565b6101408301526101608101516101608301526101808101516101808301526101a0810151936001600160401b03851161014a576004946110439201611aae565b6101a082015260e05261078b565b6101605161105e916116d5565b83610748565b8251865260209586019587955090920191600101610726565b91939092949550606319888203018252845190815180825260208201906020808260051b850101940192610160515b8281106110cf5750505050506020806001929601920192018795949391926106fd565b90919293946020806110ed600193601f198782030189528951611894565b97019501939291016110ac565b611113915060203d602011610d8d57610d7e81836116d5565b866106ad565b5082516040516301ffc9a760e01b815263fabd349d60e01b600482015290602090829060249082906001600160a01b03165afa9081156103ad576101605191611163575b50610670565b90506020813d602011611195575b8161117e602093836116d5565b8101031261014a5761118f90611a4b565b8661115d565b3d9150611171565b90506020813d6020116111cf575b816111b8602093836116d5565b8101031261014a576111c990611a4b565b86610669565b3d91506111ab565b81358152602091820191016105c1565b83356001600160401b03811161014a5760049083010136603f8201121561014a5760208101356112168161173c565b9161122460405193846116d5565b8183526020808085019360051b830101019036821161014a5760408101925b82841061125d57505050908252506020938401930161054f565b83356001600160401b03811161014a5760209161128283928380369288010101611a0c565b815201930192611243565b3461014a57602036600319011261014a576004356001600160401b03811161014a57610140600319823603011261014a576040516112ca8161166d565b6112d6826004016116f6565b81526112e4602483016116f6565b9160208201928352604082019060448101358252611304606482016116f6565b906060840191825260808401946084820135865261132460a483016116f6565b9160a086019283526113393660c4830161170a565b9060c08701918252610124810135906001600160401b03821161014a57600461136592369201016117a5565b60e0870190815290611375611a2a565b5061137e611a2a565b95611387611a2a565b88516040516301ffc9a760e01b8152633d79d7fb60e11b600482015291979190602090829060249082906001600160a01b03165afa9081156103ad5761016051916115e0575b50806115cd575b806115ba575b806115a7575b156103bb578951156115955781511580159061157d575b1561156b57845181516114969b6001600160a01b03918216929091168281149391928415918280611556575b611520575b50506114bd575b5098519551945191519798610146986114a497611481976001600160a01b0391821697908216969095909491169261146e9291156114b2575190611a58565b91515192519360405195610b5f8761166d565b936040519586956060875260608701906118b9565b9085820360208701526118b9565b9083820360408501526118b9565b506101605190611a58565b61014699506114819694926114a49896949261151061146e938e60018060a01b039051169060018060a01b038b51169060018060a01b03905116845160208a510151918b519360405195610b5f8761166d565b9b5092949698509294965061142f565b8d51855189516040908101518c519151969f5061154e9695919490936001600160a01b0316610b5f8761166d565b988d80611428565b8b516001600160a01b03168314159350611423565b6040516396b154ab60e01b8152600490fd5b50845181516001600160a01b039081169116146113f7565b60405163511ff7fb60e11b8152600490fd5b5085516001600160a01b031615156113e0565b5080516001600160a01b031615156113da565b5084516001600160a01b031615156113d4565b90506020813d602011611612575b816115fb602093836116d5565b8101031261014a5761160c90611a4b565b8b6113cd565b3d91506115ee565b3461014a57602036600319011261014a576004359063ffffffff60e01b821680920361014a57602091635d7c7b9760e11b811490811561165c575b5015158152f35b6301ffc9a760e01b14905083611655565b61010081019081106001600160401b0382111761168957604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761168957604052565b604081019081106001600160401b0382111761168957604052565b90601f801991011681019081106001600160401b0382111761168957604052565b35906001600160a01b0382168203610c2a57565b9190826060910312610c2a576040516117228161169f565b604080829480358452602081013560208501520135910152565b6001600160401b0381116116895760051b60200190565b6001600160401b03811161168957601f01601f191660200190565b92919261177a82611753565b9161178860405193846116d5565b829481845281830111610c2a578281602093846000960137010152565b81601f82011215610c2a578035906117bc8261173c565b926117ca60405194856116d5565b82845260208085019360051b83010191818311610c2a5760208101935b8385106117f657505050505090565b84356001600160401b038111610c2a5782016040818503601f190112610c2a5760405191611823836116ba565b60208201356001600160401b038111610c2a576020908301019285601f85011215610c2a5760406020949361185e888688809835910161176e565b83520135838201528152019401936117e7565b60005b8381106118845750506000910152565b8181015183820152602001611874565b906020916118ad81518092818552858086019101611871565b601f01601f1916010190565b906040606082019280518352602081015160208401520151916060604083015282518091526080820191602060808360051b8301019401926000915b83831061190457505050505090565b9091929394607f1982820301835285519060206040820192805183520151916040602083015282518091526060820190602060608260051b85010194019260005b828110611966575050505050602080600192970193019301919392906118f5565b9091929394605f1983820301855285516020604083019160018060a01b0381511684520151916040602082015282518092526060810190602060608460051b8301019401926000915b8183106119d057505050505060208060019297019501910192919092611945565b90919293946020806119ff600193605f198682030189528951906040610d3d8351606084526060840190611894565b97019501930191906119af565b9080601f83011215610c2a57816020611a279335910161176e565b90565b60405190611a378261169f565b606060408360008152600060208201520152565b51908115158203610c2a57565b91908201809211611a6557565b634e487b7160e01b600052601160045260246000fd5b90816020910312610c2a57516001600160a01b0381168103610c2a5790565b51906001600160a01b0382168203610c2a57565b81601f82011215610c2a578051611ac481611753565b92611ad260405194856116d5565b81845260208284010111610c2a57611a279160208085019101611871565b91908203918211611a6557565b90611b078261173c565b611b1460405191826116d5565b8281528092611b25601f199161173c565b0190602036910137565b60005b828110611b3e57505050565b606082820152602001611b32565b90611b81611b598361173c565b611b6660405191826116d5565b83815260208194611b79601f199161173c565b019101611b2f565b565b805115611b905760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015611b905760209160051b010190565b8115611bc4570490565b634e487b7160e01b600052601260045260246000fd5b90602082820312610c2a5781516001600160401b038111610c2a57611a279201611aae565b929593909594919460a084019660a085528051809852602060c0860191019760005b818110611c565750506001600160a01b0396871660208601526040850191909152941660608301521515608090910152909150565b89516001600160a01b031683526020998a019990920191600101611c21565b81810292918115918404141715611a6557565b81810392916000138015828513169184121617611a6557565b91909160008382019384129112908015821691151617611a6557565b6000198114611a655760010190565b60405190611cd9826116ba565b6060602083600081520152565b611cee611a2a565b60208201519091906001600160a01b0316151580612f95575b15612f8357602081015160408201805190916001600160a01b03918216911614612f715760a0820191825115612f5c576060810151835111612f4a576040519260c084018481106001600160401b03821117611689576040526000845260006020850152606060408501526000606085015260006080850152606060a085015260e08201515190611d978261173c565b91611da560405193846116d5565b808352611db4601f199161173c565b0160005b818110612f25575050518452611dd260e083015151611afd565b60a0850152611de560e083015151611b4c565b95606093611e2060405191611dfa87846116d5565b60028352601f19870136602085013760408801839052516001600160a01b031691611b83565b5260018060a01b036020840151166040860151805160011015611b90576040015260405193611e4e8561169f565b808552600060208601526000604086015260005b60e085015151811015612631578451604051633f4a2d2760e01b815290602090829060049082906001600160a01b03165afa9081156123fc57611ede91602091600091612614575b50611eb98460e08a0151611ba6565b515190604051808095819463657dcce560e01b83528660048401526024830190611894565b03916001600160a01b03165afa600091816125d9575b50611f0457506001905b01611e62565b8551604051633f4a2d2760e01b81529299939593949290602090829060049082906001600160a01b03165afa9081156123fc576004916020916000916125bc575b506040516391f03efd60e01b815292839182906001600160a01b03165afa9081156123fc5760009161257c575b506040516336dd6b3d60e01b81526001600160a01b03808416600483015290929160209184916024918391165afa9182156123fc57600092612549575b50611fc060608801518a5190611bba565b602089015260018060a01b038116604089015260408901519060046020611feb8d60e08c0151611ba6565b5101518951604051633f4a2d2760e01b81529194919260209184919082906001600160a01b03165afa9182156123fc5760049260209160009161252c575b506040516391f03efd60e01b815293849182906001600160a01b03165afa9182156123fc576000926124e9575b5060808a015160405163340f07ad60e11b8152946000948694859461208e941515936001600160a01b03909216929060048701611bff565b038173__$75df3f6366b0557754cd3ba14359105414$__5af49081156123fc576000916124c8575b5087528551604051633f4a2d2760e01b815290602090829060049082906001600160a01b03165afa9081156123fc576004916020916000916124ab575b506040516391f03efd60e01b815292839182906001600160a01b03165afa80156123fc57600090612471575b608088015161213b92501515906001600160a01b031689613036565b908a6000198314612461576121c96121cf926121a78c670de0b6b3a7640000948f8a61216f8f9260e0612186940151611ba6565b5161217f60608601518093611ba6565b528b611ba6565b5060606121938351611afd565b920151916121a18383611ba6565b52611ba6565b50806121bd8d606060a082015191015190611ba6565b5260c08a015190611c75565b04613121565b608089015260808601511515600014612445576121ee6121f991613121565b608089015190611ca1565b61221061220a60608a01518c611ba6565b51611b83565b5260015b87518110156124255760608601519060018101808211611a655761223d61224591600494611c75565b8a5190611bba565b6020898101919091528751604051633f4a2d2760e01b815293849182906001600160a01b03165afa9182156123fc57600492602091600091612408575b506040516391f03efd60e01b815293849182906001600160a01b03165afa80156123fc57888a91898e9560009261239f575b5060800180516001966123279487946123219492936122e092901515916001600160a01b031690613036565b90516000901561234c5750600019810361232e575060607d90e40fbeea1d3a4abc8955e946fe31cdcf66f634e10000000000000000005b955b015190611ba6565b51611ba6565b5201612214565b61234761233c606092613121565b608088015190611ca1565b612317565b506000198103612381575060607fffff6f1bf04115e2c5b54376aa16b901ce32309909cb1f0000000000000000005b95612319565b61239a61238f606092613121565b608088015190611c88565b61237b565b949550509150506020823d82116123f4575b816123be602093836116d5565b810103126123f157509088612327826123218e8c6122e08d60806123e360019b611a9a565b9650509350509350956122b4565b80fd5b3d91506123b1565b6040513d6000823e3d90fd5b61241f9150823d8111610d8d57610d7e81836116d5565b38612282565b50919660019093919361243b6060890151611cbd565b6060890152611efe565b61245161245c91613121565b608089015190611c88565b6121f9565b5050509196600190939193611efe565b6020823d82116124a3575b81612489602093836116d5565b810103126123f1575061249e61213b91611a9a565b61211f565b3d915061247c565b6124c29150823d8111610d8d57610d7e81836116d5565b386120f3565b6124e3913d8091833e6124db81836116d5565b810190611bda565b386120b6565b90916020823d8211612524575b81612503602093836116d5565b810103126123f157509061208e61251c60009493611a9a565b929350612056565b3d91506124f6565b6125439150823d8111610d8d57610d7e81836116d5565b38612029565b90916020823d8211612574575b81612563602093836116d5565b810103126123f15750519038611faf565b3d9150612556565b906020823d82116125b4575b81612595602093836116d5565b810103126123f157509060206125ac602493611a9a565b919250611f72565b3d9150612588565b6125d39150823d8111610d8d57610d7e81836116d5565b38611f45565b90916020823d821161260c575b816125f3602093836116d5565b810103126123f1575061260590611a9a565b9038611ef4565b3d91506125e6565b61262b9150823d8111610d8d57610d7e81836116d5565b38611eaa565b50959290969350606085015115612f135761264f6060860151611afd565b60009061265f6060880151611b4c565b6101805260608701519761269c6126758a61173c565b996126836040519b8c6116d5565b808b52612692601f199161173c565b0160208b01611b2f565b60005b60608901518110156126fa576001906126b88a51611afd565b6126c58261018051611ba6565b526126d38161018051611ba6565b506126de8a51611afd565b6126e8828d611ba6565b526126f3818c611ba6565b500161269f565b50909192939497959860005b8a8951821015612738579061272081612321600194611b83565b516127318261232161018051611b83565b5201612706565b505095969793949291906001965b60608a01518810156128e75760005b8a518110156128db5788600019810111611a655761277e816123216000198c0161018051611ba6565b5160018201808311611a6557828b8f828f94836127a793612321926121a185612321858c611ba6565b5160808d0151156128d35784811280156128cb575b6128ae575b5050505060005b8281106127ec5750906001916127e5826123218d61018051611ba6565b5201612755565b908a600019810111611a65576128096000198c0161018051611ba6565b51916128158185611af0565b600019810193908411611a65578f8c8f928f968893612848876123218b61284161284f96608098611ba6565b5194611ba6565b5190611ca1565b910151156128a657848112801561289e575b612874575b5050506001919250016127c8565b6001945090612321612891929661288b8684611af0565b94611ba6565b528b9291508c8438612866565b508415612861565b848113612861565b93506000926128c1929161232191611ba6565b528a828b386127c1565b5084156127bc565b8481136127bc565b50600190970196612746565b9297965093909498979283519960005b606086015180821015612f01578c156129b3578161291491611af0565b9b8c600019810111611a655761292e6000198e018b611ba6565b5181600019810111611a6557612991916129798f8c61296e61296261295b61298597600019880190611ba6565b5186611af0565b91600019840190611ba6565b52600019018d611ba6565b51906000190190611ba6565b519c6000190189611ba6565b5161299f575b6001016128f7565b986129ab600191611cbd565b999050612997565b505094919792989399509495505b8115612ef65760409182516129d684826116d5565b60018152601f1984019060005b828110612edf5750848a01528351906129fc85836116d5565b6001825260005b818110612ec85750508351612a3891612a1b826116ba565b600182526020820152848a015190612a3282611b83565b52611b83565b5060208501516001600160a01b031691612a518261173c565b91612a5e855193846116d5565b808352612a6d601f199161173c565b019060005b828110612ea05750505090612aaf91835191612a8d836116ba565b825260208201526020612aa2848a0151611b83565b51015190612a3282611b83565b5060005b6060890151811015612e9657612ac98187611ba6565b5115612e8e57612ad98187611ba6565b5190612ae58187611ba6565b515160408b015186518551633f4a2d2760e01b815291949190602090829060049082906001600160a01b03165afa908115612dc657612b599291602091600091612e71575b50612b35868c611ba6565b5151908851808096819463657dcce560e01b83528660048401526024830190611894565b03916001600160a01b03165afa918215612dc657600092612e36575b506020612b82858b611ba6565b51015188518751633f4a2d2760e01b815291939190602090829060049082906001600160a01b03165afa908115612e0e57600491602091600091612e19575b5089516391f03efd60e01b815292839182906001600160a01b03165afa908115612e0e57600091612dd1575b5060808a018051895163340f07ad60e11b81529198919560009487948594612c28941515936001600160a01b03909216929060048701611bff565b038173__$75df3f6366b0557754cd3ba14359105414$__5af4918215612dc6576020612c80888e612c9b97968496612c8896600092612dab575b50835198612c6f8a61169f565b895285890152828801520151611b83565b510151611b83565b51015160208d0151916121a18383611ba6565b50612ca960208b0151611cbd565b60208b01528960208901612ccd612cc68460a08451950151611ba6565b5183611a58565b918210612d9a5752612cdf8185611ba6565b51612cea8289611ba6565b51600019810193908411611a655782612d08600195612d2694611ba6565b518d8c51936000908315600014612d2f575050505050600090611a58565b88525b01612ab3565b51159050612d6f57670de0b6b3a76400006121c9612d57612d699560a0612d63950151611ba6565b5160c08d015190611c75565b90611c88565b90611a58565b670de0b6b3a76400006121c9612d57612d959560a0612d8f950151611ba6565b90611ca1565b612d69565b630a77254f60e01b60005260046000fd5b612dbf91923d8091833e6124db81836116d5565b9038612c62565b86513d6000823e3d90fd5b906020823d8211612e06575b81612dea602093836116d5565b810103126123f1575090612dff600092611a9a565b9091612bed565b3d9150612ddd565b88513d6000823e3d90fd5b612e309150823d8111610d8d57610d7e81836116d5565b38612bc1565b90916020823d8211612e69575b81612e50602093836116d5565b810103126123f15750612e6290611a9a565b9038612b75565b3d9150612e43565b612e889150823d8111610d8d57610d7e81836116d5565b38612b2a565b600190612d29565b5050505050509150565b6020908651612eae8161169f565b838152600083820152838882015282828701015201612a72565b602090612ed3611ccc565b82828601015201612a03565b602090612eea611ccc565b828285010152016129e3565b509496505050505050565b505094919792989399509495506129c1565b60405163af16b31b60e01b8152600490fd5b602090604051612f34816116ba565b6060815260008382015282828701015201611db8565b604051631edbd19360e11b8152600490fd5b6040516001622c3a8160e21b03198152600490fd5b604051635c6726db60e11b8152600490fd5b604051632638e39360e11b8152600490fd5b5060408101516001600160a01b03161515611d07565b90606082820312610c2a5780601f83011215610c2a5760405191612fce8361169f565b829060608101928311610c2a57905b828210612fea5750505090565b8151815260209182019101612fdd565b60208152606061301583518260208501526080840190611894565b6020840151604084810191909152909301516001600160a01b031691015290565b6060916000936130ba576130609160405194858094819363eb5251a560e01b835260048301612ffa565b03926001600160a01b03165af160009181613089575b50613082575060001990565b6020015190565b6130ac91925060603d6060116130b3575b6130a481836116d5565b810190612fab565b9038613076565b503d61309a565b6130da91604051948580948193630fafa65f60e11b835260048301612ffa565b03926001600160a01b03165af160009181613100575b506130fc575060001990565b5190565b61311a91925060603d6060116130b3576130a481836116d5565b90386130f0565b6001600160ff1b0381116131325790565b60405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608490fdfea26469706673582212208bc6ece5c0061678c9ef873bc1292314cbd6083e0eb03abe384ecda6f7ead42864736f6c634300081a0033",
  "libraries": {
    "PrimexPricingLibrary": "0x86c004c61A89d520A2EC080d1A3801eeC77694c9",
    "Errors": "0x988288925196F0725268378d0C7c8aA0E50EB423"
  },
  "devdoc": {
    "details": "All functions in this contract are intended to be called off-chain. Do not call functions from other contracts to avoid an out-of-gas error.",
    "kind": "dev",
    "methods": {
      "getBestDexByOrder((address,address,uint256,(uint256,uint256,uint256),(string,bytes32)[],bytes,bytes[][],uint256[]))": {
        "params": {
          "_params": "The BestDexByOrderParams struct specifying the order parameters."
        },
        "returns": {
          "_returnParams": "The GetBestDexByOrderReturnParams struct"
        }
      },
      "getBestDexByPosition(address,uint256,uint256,(string,bytes32)[])": {
        "details": "This function calculates the best DEX to use for a given position based on various parameters.",
        "params": {
          "_dexesWithAncillaryData": "An array of DEXes along with their ancillary data.",
          "_positionId": "The ID of the position.",
          "_positionManager": "The instance of the PositionManager contract.",
          "_shares": "The number of shares for dexes."
        },
        "returns": {
          "_0": "A GetBestMultipleDexesReturnParams struct."
        }
      },
      "getBestDexForOpenablePosition((address,address,uint256,address,uint256,address,(uint256,uint256,uint256),(string,bytes32)[]))": {
        "params": {
          "_params": "The parameters for the function."
        },
        "returns": {
          "_depositInThirdAssetReturnParams": "The return parameters includes routes for converting a third asset (i.e. an asset which is not either underlying asset or position asset) to a position asset.",
          "_depositToBorrowedReturnParams": "The return parameters for converting deposit asset (which is a position asset or third asset) to borrowed asset (i.e. underlying asset).",
          "_firstAssetReturnParams": "The return parameters for the first asset."
        }
      },
      "getBestMultipleDexes((address,address,address,uint256,bool,uint256,uint256,(string,bytes32)[]))": {
        "params": {
          "_params": "GetBestMultipleDexesParams params"
        },
        "returns": {
          "_returnParams": "- the array of best dexes at the moment to open a position with the specified parameters"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The interface id to check"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBestDexByOrder((address,address,uint256,(uint256,uint256,uint256),(string,bytes32)[],bytes,bytes[][],uint256[]))": {
        "notice": "Selects the best dex to open position by order."
      },
      "getBestDexByPosition(address,uint256,uint256,(string,bytes32)[])": {
        "notice": "Returns swap paths on best dexes, expected amount and estimateGasAmount."
      },
      "getBestDexForOpenablePosition((address,address,uint256,address,uint256,address,(uint256,uint256,uint256),(string,bytes32)[]))": {
        "notice": "Returns the best DEXes for opening a position."
      },
      "getBestMultipleDexes((address,address,address,uint256,bool,uint256,uint256,(string,bytes32)[]))": {
        "notice": "Selects the best multiple dexes to open a position"
      },
      "supportsInterface(bytes4)": {
        "notice": "Interface checker"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}