{
  "address": "0x48590cBE063799cBf6AfA0e8D84b532Dd7F999cE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAlgebraPool[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "getArraySqrtPriceX96",
      "outputs": [
        {
          "internalType": "uint160[]",
          "name": "arraySqrtPriceX96",
          "type": "uint160[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "getUserBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "assetsBalances",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "_swapRouterQuickswap",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "limitSqrtPrice",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.ExactInputSingleParams[]",
          "name": "params",
          "type": "tuple[]"
        }
      ],
      "name": "swapWithQuickswap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc321dec9805d79cbdcc9537f749b95cea26cef019a685409cec8bb17858443c",
  "receipt": {
    "to": null,
    "from": "0x936b14f9eF89f263E775241C394583D5d419c2D2",
    "contractAddress": "0x48590cBE063799cBf6AfA0e8D84b532Dd7F999cE",
    "transactionIndex": 77,
    "gasUsed": "603568",
    "logsBloom": "0x
    "blockHash": "0xd3c7c8ce4588116ae92d764995c669e7446d6a806ee23d21561e8c5cc0e02cfa",
    "transactionHash": "0xcc321dec9805d79cbdcc9537f749b95cea26cef019a685409cec8bb17858443c",
    "logs": [],
    "blockNumber": 4763471,
    "cumulativeGasUsed": "14866782",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ac08d1652288d4d03be56436412dd0c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAlgebraPool[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"getArraySqrtPriceX96\",\"outputs\":[{\"internalType\":\"uint160[]\",\"name\":\"arraySqrtPriceX96\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getUserBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"assetsBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"_swapRouterQuickswap\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"limitSqrtPrice\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"swapWithQuickswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TestnetServices/SynchronizationBotLensQuickswapTestService.sol\":\"SynchronizationBotLensQuickswapTestService\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@cryptoalgebra/solidity-interfaces/contracts/core/IAlgebraPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport './pool/IAlgebraPoolImmutables.sol';\\r\\nimport './pool/IAlgebraPoolState.sol';\\r\\nimport './pool/IAlgebraPoolDerivedState.sol';\\r\\nimport './pool/IAlgebraPoolActions.sol';\\r\\nimport './pool/IAlgebraPoolPermissionedActions.sol';\\r\\nimport './pool/IAlgebraPoolEvents.sol';\\r\\n\\r\\n/**\\r\\n * @title The interface for a Algebra Pool\\r\\n * @dev The pool interface is broken up into many smaller pieces\\r\\n */\\r\\ninterface IAlgebraPool is\\r\\n  IAlgebraPoolImmutables,\\r\\n  IAlgebraPoolState,\\r\\n  IAlgebraPoolDerivedState,\\r\\n  IAlgebraPoolActions,\\r\\n  IAlgebraPoolPermissionedActions,\\r\\n  IAlgebraPoolEvents\\r\\n{\\r\\n  // used only for combining interfaces\\r\\n}\\r\\n\",\"keccak256\":\"0x82b49655aabff17df749957e5a6aae3e13687851baf937ab221566208c6194a1\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/core/IDataStorageOperator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface IDataStorageOperator {\\r\\n  // alpha1 + alpha2 + baseFee must be <= type(uint16).max\\r\\n  struct FeeConfig {\\r\\n    uint16 alpha1; // max value of the first sigmoid\\r\\n    uint16 alpha2; // max value of the second sigmoid\\r\\n    uint32 beta1; // shift along the x-axis for the first sigmoid\\r\\n    uint32 beta2; // shift along the x-axis for the second sigmoid\\r\\n    uint16 gamma1; // horizontal stretch factor for the first sigmoid\\r\\n    uint16 gamma2; // horizontal stretch factor for the second sigmoid\\r\\n    uint32 volumeBeta; // shift along the x-axis for the outer volume-sigmoid\\r\\n    uint16 volumeGamma; // horizontal stretch factor the outer volume-sigmoid\\r\\n    uint16 baseFee; // minimum possible fee\\r\\n  }\\r\\n\\r\\n  event FeeConfiguration(FeeConfig feeConfig);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns data belonging to a certain timepoint\\r\\n   * @param index The index of timepoint in the array\\r\\n   * @dev There is more convenient function to fetch a timepoint: observe(). Which requires not an index but seconds\\r\\n   * @return initialized Whether the timepoint has been initialized and the values are safe to use,\\r\\n   * blockTimestamp The timestamp of the observation,\\r\\n   * tickCumulative The tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp,\\r\\n   * secondsPerLiquidityCumulative The seconds per in range liquidity for the life of the pool as of the timepoint timestamp,\\r\\n   * volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp,\\r\\n   * averageTick Time-weighted average tick,\\r\\n   * volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp\\r\\n   */\\r\\n  function timepoints(uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      bool initialized,\\r\\n      uint32 blockTimestamp,\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint88 volatilityCumulative,\\r\\n      int24 averageTick,\\r\\n      uint144 volumePerLiquidityCumulative\\r\\n    );\\r\\n\\r\\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\\r\\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\\r\\n  /// @param tick Initial tick\\r\\n  function initialize(uint32 time, int24 tick) external;\\r\\n\\r\\n  /// @dev Reverts if an timepoint at or before the desired timepoint timestamp does not exist.\\r\\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\r\\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\\r\\n  /// at exactly the timestamp between the two timepoints.\\r\\n  /// @param time The current block timestamp\\r\\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an timepoint\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return tickCumulative The cumulative tick since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return secondsPerLiquidityCumulative The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return volatilityCumulative The cumulative volatility value since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return volumePerAvgLiquidity The cumulative volume per liquidity value since the pool was first initialized, as of `secondsAgo`\\r\\n  function getSingleTimepoint(\\r\\n    uint32 time,\\r\\n    uint32 secondsAgo,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint112 volatilityCumulative,\\r\\n      uint256 volumePerAvgLiquidity\\r\\n    );\\r\\n\\r\\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\r\\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an timepoint\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return tickCumulatives The cumulative tick since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return secondsPerLiquidityCumulatives The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return volumePerAvgLiquiditys The cumulative volume per liquidity values since the pool was first initialized, as of each `secondsAgo`\\r\\n  function getTimepoints(\\r\\n    uint32 time,\\r\\n    uint32[] memory secondsAgos,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56[] memory tickCumulatives,\\r\\n      uint160[] memory secondsPerLiquidityCumulatives,\\r\\n      uint112[] memory volatilityCumulatives,\\r\\n      uint256[] memory volumePerAvgLiquiditys\\r\\n    );\\r\\n\\r\\n  /// @notice Returns average volatility in the range from time-WINDOW to time\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return TWVolatilityAverage The average volatility in the recent range\\r\\n  /// @return TWVolumePerLiqAverage The average volume per liquidity in the recent range\\r\\n  function getAverages(\\r\\n    uint32 time,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  ) external view returns (uint112 TWVolatilityAverage, uint256 TWVolumePerLiqAverage);\\r\\n\\r\\n  /// @notice Writes an dataStorage timepoint to the array\\r\\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param blockTimestamp The timestamp of the new timepoint\\r\\n  /// @param tick The active tick at the time of the new timepoint\\r\\n  /// @param liquidity The total in-range liquidity at the time of the new timepoint\\r\\n  /// @param volumePerLiquidity The gmean(volumes)/liquidity at the time of the new timepoint\\r\\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\\r\\n  function write(\\r\\n    uint16 index,\\r\\n    uint32 blockTimestamp,\\r\\n    int24 tick,\\r\\n    uint128 liquidity,\\r\\n    uint128 volumePerLiquidity\\r\\n  ) external returns (uint16 indexUpdated);\\r\\n\\r\\n  /// @notice Changes fee configuration for the pool\\r\\n  function changeFeeConfiguration(FeeConfig calldata feeConfig) external;\\r\\n\\r\\n  /// @notice Calculates gmean(volume/liquidity) for block\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @param amount0 Total amount of swapped token0\\r\\n  /// @param amount1 Total amount of swapped token1\\r\\n  /// @return volumePerLiquidity gmean(volume/liquidity) capped by 100000 << 64\\r\\n  function calculateVolumePerLiquidity(\\r\\n    uint128 liquidity,\\r\\n    int256 amount0,\\r\\n    int256 amount1\\r\\n  ) external pure returns (uint128 volumePerLiquidity);\\r\\n\\r\\n  /// @return windowLength Length of window used to calculate averages\\r\\n  function window() external view returns (uint32 windowLength);\\r\\n\\r\\n  /// @notice Calculates fee based on combination of sigmoids\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return fee The fee in hundredths of a bip, i.e. 1e-6\\r\\n  function getFee(\\r\\n    uint32 time,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  ) external view returns (uint16 fee);\\r\\n}\\r\\n\",\"keccak256\":\"0x07558f709ba70eb8e28081d313267e930815ed8ea278334d25464542a2015877\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/core/callback/IAlgebraSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IAlgebraPoolActions#swap\\r\\n/// @notice Any contract that calls IAlgebraPoolActions#swap must implement this interface\\r\\ninterface IAlgebraSwapCallback {\\r\\n  /// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.\\r\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n  /// The caller of this method must be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\\r\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call\\r\\n  function algebraSwapCallback(\\r\\n    int256 amount0Delta,\\r\\n    int256 amount1Delta,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5df4418988371544d9a2d166d64ae4b0b6e8cc1eab3d3d99dfe19782230d8184\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/core/pool/IAlgebraPoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n// @title Permissionless pool actions\\r\\ninterface IAlgebraPoolActions {\\r\\n  /**\\r\\n   * @notice Sets the initial price for the pool\\r\\n   * @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\r\\n   * @param price the initial sqrt price of the pool as a Q64.96\\r\\n   */\\r\\n  function initialize(uint160 price) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Adds liquidity for the given recipient/bottomTick/topTick position\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback\\r\\n   * in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\r\\n   * on bottomTick, topTick, the amount of liquidity, and the current price.\\r\\n   * @param sender The address which will receive potential surplus of paid tokens\\r\\n   * @param recipient The address for which the liquidity will be created\\r\\n   * @param bottomTick The lower tick of the position in which to add liquidity\\r\\n   * @param topTick The upper tick of the position in which to add liquidity\\r\\n   * @param amount The desired amount of liquidity to mint\\r\\n   * @param data Any data that should be passed through to the callback\\r\\n   * @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n   * @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n   * @return liquidityActual The actual minted amount of liquidity\\r\\n   */\\r\\n  function mint(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount,\\r\\n    bytes calldata data\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 amount0,\\r\\n      uint256 amount1,\\r\\n      uint128 liquidityActual\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Collects tokens owed to a position\\r\\n   * @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\r\\n   * Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\r\\n   * amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\r\\n   * actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\r\\n   * @param recipient The address which should receive the fees collected\\r\\n   * @param bottomTick The lower tick of the position for which to collect fees\\r\\n   * @param topTick The upper tick of the position for which to collect fees\\r\\n   * @param amount0Requested How much token0 should be withdrawn from the fees owed\\r\\n   * @param amount1Requested How much token1 should be withdrawn from the fees owed\\r\\n   * @return amount0 The amount of fees collected in token0\\r\\n   * @return amount1 The amount of fees collected in token1\\r\\n   */\\r\\n  function collect(\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount0Requested,\\r\\n    uint128 amount1Requested\\r\\n  ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\r\\n   * @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\r\\n   * @dev Fees must be collected separately via a call to #collect\\r\\n   * @param bottomTick The lower tick of the position for which to burn liquidity\\r\\n   * @param topTick The upper tick of the position for which to burn liquidity\\r\\n   * @param amount How much liquidity to burn\\r\\n   * @return amount0 The amount of token0 sent to the recipient\\r\\n   * @return amount1 The amount of token1 sent to the recipient\\r\\n   */\\r\\n  function burn(\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount\\r\\n  ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Swap token0 for token1, or token1 for token0\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\\r\\n   * @param recipient The address to receive the output of the swap\\r\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n   * SwapRouter#SwapCallbackData\\r\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n   */\\r\\n  function swap(\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountSpecified,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\\r\\n   * @dev The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback\\r\\n   * @param sender The address called this function (Comes from the Router)\\r\\n   * @param recipient The address to receive the output of the swap\\r\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n   * SwapRouter#SwapCallbackData\\r\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n   */\\r\\n  function swapSupportingFeeOnInputTokens(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountSpecified,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallback\\r\\n   * @dev All excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used\\r\\n   * to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending\\r\\n   * the donation amount(s) from the callback\\r\\n   * @param recipient The address which will receive the token0 and token1 amounts\\r\\n   * @param amount0 The amount of token0 to send\\r\\n   * @param amount1 The amount of token1 to send\\r\\n   * @param data Any data to be passed through to the callback\\r\\n   */\\r\\n  function flash(\\r\\n    address recipient,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x979265c308857cbbfb14470b3f12dfb17067f47682557693b6cc83c3e0cc27a0\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/core/pool/IAlgebraPoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Pool state that is not stored\\r\\n * @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\r\\n * blockchain. The functions here may have variable gas costs.\\r\\n */\\r\\ninterface IAlgebraPoolDerivedState {\\r\\n  /**\\r\\n   * @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\r\\n   * @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\r\\n   * the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\r\\n   * you must call it with secondsAgos = [3600, 0].\\r\\n   * @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\r\\n   * log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\r\\n   * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\r\\n   * @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\r\\n   * @return secondsPerLiquidityCumulatives Cumulative seconds per liquidity-in-range value as of each `secondsAgos`\\r\\n   * from the current block timestamp\\r\\n   * @return volatilityCumulatives Cumulative standard deviation as of each `secondsAgos`\\r\\n   * @return volumePerAvgLiquiditys Cumulative swap volume per liquidity as of each `secondsAgos`\\r\\n   */\\r\\n  function getTimepoints(uint32[] calldata secondsAgos)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56[] memory tickCumulatives,\\r\\n      uint160[] memory secondsPerLiquidityCumulatives,\\r\\n      uint112[] memory volatilityCumulatives,\\r\\n      uint256[] memory volumePerAvgLiquiditys\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\r\\n   * @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\r\\n   * I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\r\\n   * snapshot is taken and the second snapshot is taken.\\r\\n   * @param bottomTick The lower tick of the range\\r\\n   * @param topTick The upper tick of the range\\r\\n   * @return innerTickCumulative The snapshot of the tick accumulator for the range\\r\\n   * @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\\r\\n   * @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range\\r\\n   */\\r\\n  function getInnerCumulatives(int24 bottomTick, int24 topTick)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56 innerTickCumulative,\\r\\n      uint160 innerSecondsSpentPerLiquidity,\\r\\n      uint32 innerSecondsSpent\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x693aa8aea6301b9ca15c27bfc8db3fbcb5629b83e42d1342b95b6de084f47d95\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/core/pool/IAlgebraPoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n// @title Events emitted by a pool\\r\\ninterface IAlgebraPoolEvents {\\r\\n  /**\\r\\n   * @notice Emitted exactly once by a pool when #initialize is first called on the pool\\r\\n   * @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\r\\n   * @param price The initial sqrt price of the pool, as a Q64.96\\r\\n   * @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\r\\n   */\\r\\n  event Initialize(uint160 price, int24 tick);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when liquidity is minted for a given position\\r\\n   * @param sender The address that minted the liquidity\\r\\n   * @param owner The owner of the position and recipient of any minted liquidity\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param liquidityAmount The amount of liquidity minted to the position range\\r\\n   * @param amount0 How much token0 was required for the minted liquidity\\r\\n   * @param amount1 How much token1 was required for the minted liquidity\\r\\n   */\\r\\n  event Mint(\\r\\n    address sender,\\r\\n    address indexed owner,\\r\\n    int24 indexed bottomTick,\\r\\n    int24 indexed topTick,\\r\\n    uint128 liquidityAmount,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when fees are collected by the owner of a position\\r\\n   * @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\r\\n   * @param owner The owner of the position for which fees are collected\\r\\n   * @param recipient The address that received fees\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param amount0 The amount of token0 fees collected\\r\\n   * @param amount1 The amount of token1 fees collected\\r\\n   */\\r\\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a position's liquidity is removed\\r\\n   * @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\r\\n   * @param owner The owner of the position for which liquidity is removed\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param liquidityAmount The amount of liquidity to remove\\r\\n   * @param amount0 The amount of token0 withdrawn\\r\\n   * @param amount1 The amount of token1 withdrawn\\r\\n   */\\r\\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted by the pool for any swaps between token0 and token1\\r\\n   * @param sender The address that initiated the swap call, and that received the callback\\r\\n   * @param recipient The address that received the output of the swap\\r\\n   * @param amount0 The delta of the token0 balance of the pool\\r\\n   * @param amount1 The delta of the token1 balance of the pool\\r\\n   * @param price The sqrt(price) of the pool after the swap, as a Q64.96\\r\\n   * @param liquidity The liquidity of the pool after the swap\\r\\n   * @param tick The log base 1.0001 of price of the pool after the swap\\r\\n   */\\r\\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted by the pool for any flashes of token0/token1\\r\\n   * @param sender The address that initiated the swap call, and that received the callback\\r\\n   * @param recipient The address that received the tokens from flash\\r\\n   * @param amount0 The amount of token0 that was flashed\\r\\n   * @param amount1 The amount of token1 that was flashed\\r\\n   * @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\r\\n   * @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\r\\n   */\\r\\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the community fee is changed by the pool\\r\\n   * @param communityFee0New The updated value of the token0 community fee percent\\r\\n   * @param communityFee1New The updated value of the token1 community fee percent\\r\\n   */\\r\\n  event CommunityFee(uint8 communityFee0New, uint8 communityFee1New);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when new activeIncentive is set\\r\\n   * @param virtualPoolAddress The address of a virtual pool associated with the current active incentive\\r\\n   */\\r\\n  event Incentive(address indexed virtualPoolAddress);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the fee changes\\r\\n   * @param fee The value of the token fee\\r\\n   */\\r\\n  event Fee(uint16 fee);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the LiquidityCooldown changes\\r\\n   * @param liquidityCooldown The value of locktime for added liquidity\\r\\n   */\\r\\n  event LiquidityCooldown(uint32 liquidityCooldown);\\r\\n}\\r\\n\",\"keccak256\":\"0x2bc9a3762b72d7d1423ab2114aea6af811e5f4172707b8669c58c453d3fb2c4b\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/core/pool/IAlgebraPoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport '../IDataStorageOperator.sol';\\r\\n\\r\\n// @title Pool state that never changes\\r\\ninterface IAlgebraPoolImmutables {\\r\\n  /**\\r\\n   * @notice The contract that stores all the timepoints and can perform actions with them\\r\\n   * @return The operator address\\r\\n   */\\r\\n  function dataStorageOperator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\\r\\n   * @return The contract address\\r\\n   */\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The first of the two tokens of the pool, sorted by address\\r\\n   * @return The token contract address\\r\\n   */\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The second of the two tokens of the pool, sorted by address\\r\\n   * @return The token contract address\\r\\n   */\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The pool tick spacing\\r\\n   * @dev Ticks can only be used at multiples of this value\\r\\n   * e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\r\\n   * This value is an int24 to avoid casting even though it is always positive.\\r\\n   * @return The tick spacing\\r\\n   */\\r\\n  function tickSpacing() external view returns (int24);\\r\\n\\r\\n  /**\\r\\n   * @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n   * @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n   * also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n   * @return The max amount of liquidity per tick\\r\\n   */\\r\\n  function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\",\"keccak256\":\"0xa2db2a0487fd77f2f39d1f56c80520716d3de37e9b068fc55df919899829e5ad\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/core/pool/IAlgebraPoolPermissionedActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Permissioned pool actions\\r\\n * @notice Contains pool methods that may only be called by the factory owner or tokenomics\\r\\n */\\r\\ninterface IAlgebraPoolPermissionedActions {\\r\\n  /**\\r\\n   * @notice Set the community's % share of the fees. Cannot exceed 25% (250)\\r\\n   * @param communityFee0 new community fee percent for token0 of the pool in thousandths (1e-3)\\r\\n   * @param communityFee1 new community fee percent for token1 of the pool in thousandths (1e-3)\\r\\n   */\\r\\n  function setCommunityFee(uint8 communityFee0, uint8 communityFee1) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets an active incentive\\r\\n   * @param virtualPoolAddress The address of a virtual pool associated with the incentive\\r\\n   */\\r\\n  function setIncentive(address virtualPoolAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets new lock time for added liquidity\\r\\n   * @param newLiquidityCooldown The time in seconds\\r\\n   */\\r\\n  function setLiquidityCooldown(uint32 newLiquidityCooldown) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa6cdc6795f00a0676f0d579eb4b99eb63f61cd13b89bb2caf4170159ad2c7375\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/core/pool/IAlgebraPoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n// @title Pool state that can change\\r\\ninterface IAlgebraPoolState {\\r\\n  /**\\r\\n   * @notice The globalState structure in the pool stores many values but requires only one slot\\r\\n   * and is exposed as a single method to save gas when accessed externally.\\r\\n   * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value\\r\\n   * @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\\r\\n   * This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\r\\n   * boundary.\\r\\n   * @return fee The last pool fee value in hundredths of a bip, i.e. 1e-6\\r\\n   * @return timepointIndex The index of the last written timepoint\\r\\n   * @return communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0\\r\\n   * @return communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1\\r\\n   * @return unlocked Whether the pool is currently locked to reentrancy\\r\\n   */\\r\\n  function globalState()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint160 price,\\r\\n      int24 tick,\\r\\n      uint16 fee,\\r\\n      uint16 timepointIndex,\\r\\n      uint8 communityFeeToken0,\\r\\n      uint8 communityFeeToken1,\\r\\n      bool unlocked\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n   * @dev This value can overflow the uint256\\r\\n   */\\r\\n  function totalFeeGrowth0Token() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n   * @dev This value can overflow the uint256\\r\\n   */\\r\\n  function totalFeeGrowth1Token() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice The currently in range liquidity available to the pool\\r\\n   * @dev This value has no relationship to the total liquidity across all ticks.\\r\\n   * Returned value cannot exceed type(uint128).max\\r\\n   */\\r\\n  function liquidity() external view returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @notice Look up information about a specific tick in the pool\\r\\n   * @param tick The tick to look up\\r\\n   * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\r\\n   * tick upper\\r\\n   * @return liquidityDelta how much liquidity changes when the pool price crosses the tick\\r\\n   * @return outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0\\r\\n   * @return outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1\\r\\n   * @return outerTickCumulative the cumulative tick value on the other side of the tick from the current tick\\r\\n   * @return outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick\\r\\n   * @return outerSecondsSpent the seconds spent on the other side of the tick from the current tick\\r\\n   * @return initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\r\\n   * otherwise equal to false. Outside values can only be used if the tick is initialized.\\r\\n   * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\r\\n   * a specific position.\\r\\n   */\\r\\n  function ticks(int24 tick)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint128 liquidityTotal,\\r\\n      int128 liquidityDelta,\\r\\n      uint256 outerFeeGrowth0Token,\\r\\n      uint256 outerFeeGrowth1Token,\\r\\n      int56 outerTickCumulative,\\r\\n      uint160 outerSecondsPerLiquidity,\\r\\n      uint32 outerSecondsSpent,\\r\\n      bool initialized\\r\\n    );\\r\\n\\r\\n  /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\r\\n  function tickTable(int16 wordPosition) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the information about a position by the position's key\\r\\n   * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\r\\n   * @return liquidityAmount The amount of liquidity in the position,\\r\\n   * lastLiquidityAddTimestamp Timestamp of last adding of liquidity,\\r\\n   * innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke,\\r\\n   * innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke,\\r\\n   * fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke,\\r\\n   * fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\r\\n   */\\r\\n  function positions(bytes32 key)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint128 liquidityAmount,\\r\\n      uint32 lastLiquidityAddTimestamp,\\r\\n      uint256 innerFeeGrowth0Token,\\r\\n      uint256 innerFeeGrowth1Token,\\r\\n      uint128 fees0,\\r\\n      uint128 fees1\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns data about a specific timepoint index\\r\\n   * @param index The element of the timepoints array to fetch\\r\\n   * @dev You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time\\r\\n   * ago, rather than at a specific index in the array.\\r\\n   * @return initialized whether the timepoint has been initialized and the values are safe to use\\r\\n   * @return blockTimestamp The timestamp of the timepoint\\r\\n   * @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp\\r\\n   * @return secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp\\r\\n   * @return volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp\\r\\n   * @return averageTick Time-weighted average tick\\r\\n   * @return volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp\\r\\n   */\\r\\n  function timepoints(uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      bool initialized,\\r\\n      uint32 blockTimestamp,\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint88 volatilityCumulative,\\r\\n      int24 averageTick,\\r\\n      uint144 volumePerLiquidityCumulative\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the information about active incentive\\r\\n   * @dev if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0\\r\\n   * @return virtualPool The address of a virtual pool associated with the current active incentive\\r\\n   */\\r\\n  function activeIncentive() external view returns (address virtualPool);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the lock time for added liquidity\\r\\n   */\\r\\n  function liquidityCooldown() external view returns (uint32 cooldownInSeconds);\\r\\n}\\r\\n\",\"keccak256\":\"0x389ec5ed056556ba96beae6a7d5bbb82ebe2214791f18d06d98b6be09f6f083c\",\"license\":\"GPL-2.0-or-later\"},\"@cryptoalgebra/solidity-interfaces/contracts/periphery/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport '../core/callback/IAlgebraSwapCallback.sol';\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via Algebra\\r\\ninterface ISwapRouter is IAlgebraSwapCallback {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 limitSqrtPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 limitSqrtPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @dev Unlike standard swaps, handles transferring from user before the actual swap.\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingleSupportingFeeOnTransferTokens(ExactInputSingleParams calldata params)\\r\\n        external\\r\\n        returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0xc5d5f5e3e4323fd9e9382f2c36b319878f3dc2c4f0ba111d5b90e774f55f9165\",\"license\":\"GPL-2.0-or-later\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/TestnetServices/SynchronizationBotLensQuickswapTestService.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ISwapRouter} from \\\"@cryptoalgebra/solidity-interfaces/contracts/periphery/ISwapRouter.sol\\\";\\nimport {IAlgebraPool} from \\\"@cryptoalgebra/solidity-interfaces/contracts/core/IAlgebraPool.sol\\\";\\n\\nimport {TokenTransfersLibrary} from \\\"../libraries/TokenTransfersLibrary.sol\\\";\\n\\nimport {ISynchronizationBotLensQuickswapTestService} from \\\"./interfaces/ISynchronizationBotLensQuickswapTestService.sol\\\";\\n\\ncontract SynchronizationBotLensQuickswapTestService is ISynchronizationBotLensQuickswapTestService {\\n    function swapWithQuickswap(\\n        ISwapRouter _swapRouterQuickswap,\\n        ISwapRouter.ExactInputSingleParams[] memory params\\n    ) public override {\\n        for (uint256 i; i < params.length; i++) {\\n            if (params[i].amountIn == type(uint256).max) {\\n                params[i].amountIn = IERC20(params[i].tokenIn).balanceOf(msg.sender);\\n            }\\n            TokenTransfersLibrary.doTransferIn(params[i].tokenIn, msg.sender, params[i].amountIn);\\n\\n            IERC20(params[i].tokenIn).approve(address(_swapRouterQuickswap), params[i].amountIn);\\n\\n            _swapRouterQuickswap.exactInputSingle(params[i]);\\n\\n            TokenTransfersLibrary.doTransferOut(\\n                params[i].tokenIn,\\n                params[i].recipient,\\n                IERC20(params[i].tokenIn).balanceOf(address(this))\\n            );\\n        }\\n    }\\n\\n    function getUserBalances(\\n        address sender,\\n        address[] calldata assets\\n    ) public view override returns (uint256 nativeBalance, uint256[] memory assetsBalances, uint256 blockNumber) {\\n        blockNumber = block.number;\\n        nativeBalance = sender.balance;\\n        assetsBalances = new uint256[](assets.length);\\n        for (uint256 i; i < assets.length; i++) {\\n            assetsBalances[i] = IERC20(assets[i]).balanceOf(sender);\\n        }\\n    }\\n\\n    function getArraySqrtPriceX96(\\n        IAlgebraPool[] calldata pools\\n    ) public view override returns (uint160[] memory arraySqrtPriceX96) {\\n        arraySqrtPriceX96 = new uint160[](pools.length);\\n        for (uint256 i; i < pools.length; i++) {\\n            (arraySqrtPriceX96[i], , , , , , ) = pools[i].globalState();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xee26a51989f69c600b806b314be5077973f7821891ebd7261c551b182cb52a54\",\"license\":\"BUSL-1.1\"},\"contracts/TestnetServices/interfaces/ISynchronizationBotLensQuickswapTestService.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {ISwapRouter} from \\\"@cryptoalgebra/solidity-interfaces/contracts/periphery/ISwapRouter.sol\\\";\\nimport {IAlgebraPool} from \\\"@cryptoalgebra/solidity-interfaces/contracts/core/IAlgebraPool.sol\\\";\\n\\ninterface ISynchronizationBotLensQuickswapTestService {\\n    function swapWithQuickswap(\\n        ISwapRouter _swapRouterQuickswap,\\n        ISwapRouter.ExactInputSingleParams[] memory params\\n    ) external;\\n\\n    function getUserBalances(\\n        address sender,\\n        address[] calldata assets\\n    ) external view returns (uint256 nativeBalance, uint256[] memory assetsBalances, uint256 blockNumber);\\n\\n    function getArraySqrtPriceX96(\\n        IAlgebraPool[] calldata pools\\n    ) external view returns (uint160[] memory arraySqrtPriceX96);\\n}\\n\",\"keccak256\":\"0x7ff6d144bdccd4fb9e131fbb9d71a10c4a784f6dc3974a3e3b567f6bdebd704e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x4b53df7e37eeb7c34aaed6ed236909444a40d5edf62e944f55cf78cbe43948d6\",\"license\":\"BSD-3-Clause\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error DISABLED_TRANSFER_NATIVE_CURRENCY();\\n    error INVALID_AMOUNT();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error DEX_NOT_ACTIVE();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n    error SWAP_DEADLINE_PASSED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n}\\n\",\"keccak256\":\"0xdefed1730079812b35863325fa1451cd220f15f8d26af3cd218e579567a8d65f\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TokenTransfersLibrary.sol\":{\"content\":\"// Copyright 2020 Compound Labs, Inc.\\n// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BSD-3-Clause\\n\\n// Modified version of token transfer logic that allows working with non-standart ERC-20 tokens, added method doTransferFromTo,\\n// modified doTransferIn\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP20NonStandardInterface} from \\\"../interfaces/EIP20NonStandardInterface.sol\\\";\\n\\nlibrary TokenTransfersLibrary {\\n    function doTransferIn(address token, address from, uint256 amount) public returns (uint256) {\\n        return doTransferFromTo(token, from, address(this), amount);\\n    }\\n\\n    function doTransferFromTo(address token, address from, address to, uint256 amount) public returns (uint256) {\\n        uint256 balanceBefore = IERC20(token).balanceOf(to);\\n        // The returned value is checked in the assembly code below.\\n        // Arbitrary `from` should be checked at a higher level. The library function cannot be called by the user.\\n        // slither-disable-next-line unchecked-transfer arbitrary-send-erc20\\n        EIP20NonStandardInterface(token).transferFrom(from, to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a compliant ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_IN_FAILED.selector);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint256 balanceAfter = IERC20(token).balanceOf(to);\\n        _require(balanceAfter >= balanceBefore, Errors.TOKEN_TRANSFER_IN_OVERFLOW.selector);\\n\\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\\n    }\\n\\n    function doTransferOut(address token, address to, uint256 amount) public {\\n        // The returned value is checked in the assembly code below.\\n        // slither-disable-next-line unchecked-transfer\\n        EIP20NonStandardInterface(token).transfer(to, amount);\\n\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            switch returndatasize()\\n            case 0 {\\n                // This is a non-standard ERC-20\\n                success := not(0) // set success to true\\n            }\\n            case 32 {\\n                // This is a complaint ERC-20\\n                returndatacopy(0, 0, 32)\\n                success := mload(0) // Set `success = returndata` of external call\\n            }\\n            default {\\n                // This is an excessively non-compliant ERC-20, revert.\\n                revert(0, 0)\\n            }\\n        }\\n        _require(success, Errors.TOKEN_TRANSFER_OUT_FAILED.selector);\\n    }\\n\\n    function doTransferOutETH(address to, uint256 value) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        _require(success, Errors.NATIVE_TOKEN_TRANSFER_FAILED.selector);\\n    }\\n}\\n\",\"keccak256\":\"0x055c6c72633f72ec523e7b74a58549f12e8c92320a6a06ae74503f637cb2ab97\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576109f1908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b60009060e08235811c90816344f8630e1461038a57816382f8850f146101c757506383dbfa461461004457600080fd5b346101c357826003193601126101c3578035916001600160a01b03808416918285036101c057602494853567ffffffffffffffff81116101bc5761008f909493929436908701610901565b929091319361009d846108d0565b976100aa8a51998a610898565b8489526100b6856108d0565b97602095868b0199601f1901368b37885b818110610116575050505050505085519460608601928652606082870152518092526080850193925b82811061010257438787015285850386f35b8351855293810193928101926001016100f0565b6101258183899c9a9b9c61098e565b358681168091036101a7578985918f51928380926370a0823160e01b82528a898301525afa9081156101b257908d92918a91610179575b5061016a8261017094610957565b52610932565b989796986100c7565b809293508b8092503d83116101ab575b6101938183610898565b810103126101a757518c919061016a61015c565b8880fd5b503d610189565b8e513d8b823e3d90fd5b8280fd5b80fd5b5080fd5b929050346101c057602090816003193601126101c057823567ffffffffffffffff81116101c3578591846101ff879336908301610901565b93610209856108d0565b9261021687519485610898565b858452610222866108d0565b8489019690601f1901368837855b81811061028057505050505083519485948186019282875251809352850193925b82811061026057505050500390f35b83516001600160a01b031685528695509381019392810192600101610251565b6102918183879c99989a9b9c61098e565b6001600160a01b039035818116908190036103755790858593928d51948580926339db007960e21b82525afa9081156103805788916102ee575b6102e393506102da838c610957565b91169052610932565b989796949598610230565b919290508581813d8311610379575b6103078183610898565b810103126103755780519082821682036101a757898101518060020b036101a7579061036e60c0838f610340906102e39897960161099e565b5061034d6060820161099e565b5061035a608082016109ad565b5061036760a082016109ad565b5001610981565b50906102cb565b8780fd5b503d6102fd565b8c513d8a823e3d90fd5b939050346101bc57806003193601126101bc576001600160a01b038235818116949193908590036101c35760249467ffffffffffffffff90863582811161089457366023820112156108945780840135986103e48a6108d0565b916103f188519384610898565b8a835260209a8a838d86019202830101913683116101a7579499948b01905b8282106107f557505050508491735F9d8674B2963A42472030445241b9Df74101901925b82518110156107f15760806000198161044d8487610957565b5101511461077b575b826104618386610957565b5151168c88836104718689610957565b5101518c5163c37f7f7f60e01b81526001600160a01b039094169184019182523360208301526040820152829081906060010381895af48015610771578d898e8c948f9461073e575b508d886104c7898c610957565b51511691876104d68a8d610957565b510151915195869463095ea7b360e01b86528501528301528160449586925af1801561069f578c8f938f909588968f8f958f978d908c926106d6575b50938a938460c09461052b60e49b99958e9d9b99610957565b519481519e8f9d8e809d63178ca23160e31b8252838a511691015287015116908b0152840151169088015260608201516064880152810151608487015260a081015160a487015201511660c48401525af1801561066257908c916106a9575b505089826105988386610957565b515116838a6105a78588610957565b51015116908d856105b88689610957565b5151168c51948580926370a0823160e01b82528d30908301525afa92831561069f578a93610670575b50863b1561066c578a51636336129b60e11b81526001600160a01b039182168a820190815292909116602083015260408201929092528890829081906060010381885af480156106625761063f575b5061063a90610932565b610434565b85811161065057885261063a610630565b634e487b7160e01b8852604187528a88fd5b89513d8a823e3d90fd5b8980fd5b9092508d81813d8311610698575b6106888183610898565b8101031261066c575191386105e1565b503d61067e565b8b513d8c823e3d90fd5b813d83116106cf575b6106bc8183610898565b810103126106cb578a3861058a565b8680fd5b503d6106b2565b98505050509593509550505081813d8311610737575b6106f68183610898565b8101031261066c5760e4898f938f8f908f8f93918b998a93848f9461052b8f60c0978f9e61072390610981565b5095999b9d5095999b505094505093610512565b503d6106ec565b935050508092503d831161076a575b6107578183610898565b8101031261037557878a8d898e386104ba565b503d61074d565b8a513d8b823e3d90fd5b8a8c846107888588610957565b5151168b51928380926370a0823160e01b8252338d8301525afa9081156107715789916107c4575b50816107bc8487610957565b510152610456565b90508c81813d83116107ea575b6107db8183610898565b810103126101a75751386107b0565b503d6107d1565b8680f35b83829b969b3603126101a757895184810181811089821117610882578b5261081c836108e8565b81528d61082a8185016108e8565b908201526108398b84016108e8565b8b820152606080840135908201526080808401359082015260a0808401359082015260c080840135908d8216820361087e578201528152949994908301908c01610410565b8b80fd5b634e487b7160e01b8b5260418a528d8bfd5b8480fd5b90601f8019910116810190811067ffffffffffffffff8211176108ba57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108ba5760051b60200190565b35906001600160a01b03821682036108fc57565b600080fd5b9181601f840112156108fc5782359167ffffffffffffffff83116108fc576020808501948460051b0101116108fc57565b60001981146109415760010190565b634e487b7160e01b600052601160045260246000fd5b805182101561096b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b519081151582036108fc57565b919081101561096b5760051b0190565b519061ffff821682036108fc57565b519060ff821682036108fc5756fea2646970667358221220889dedc6f0f99fe1d58acf5e989a3b03b780987e156c8c102808cd837110232e64736f6c63430008120033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b60009060e08235811c90816344f8630e1461038a57816382f8850f146101c757506383dbfa461461004457600080fd5b346101c357826003193601126101c3578035916001600160a01b03808416918285036101c057602494853567ffffffffffffffff81116101bc5761008f909493929436908701610901565b929091319361009d846108d0565b976100aa8a51998a610898565b8489526100b6856108d0565b97602095868b0199601f1901368b37885b818110610116575050505050505085519460608601928652606082870152518092526080850193925b82811061010257438787015285850386f35b8351855293810193928101926001016100f0565b6101258183899c9a9b9c61098e565b358681168091036101a7578985918f51928380926370a0823160e01b82528a898301525afa9081156101b257908d92918a91610179575b5061016a8261017094610957565b52610932565b989796986100c7565b809293508b8092503d83116101ab575b6101938183610898565b810103126101a757518c919061016a61015c565b8880fd5b503d610189565b8e513d8b823e3d90fd5b8280fd5b80fd5b5080fd5b929050346101c057602090816003193601126101c057823567ffffffffffffffff81116101c3578591846101ff879336908301610901565b93610209856108d0565b9261021687519485610898565b858452610222866108d0565b8489019690601f1901368837855b81811061028057505050505083519485948186019282875251809352850193925b82811061026057505050500390f35b83516001600160a01b031685528695509381019392810192600101610251565b6102918183879c99989a9b9c61098e565b6001600160a01b039035818116908190036103755790858593928d51948580926339db007960e21b82525afa9081156103805788916102ee575b6102e393506102da838c610957565b91169052610932565b989796949598610230565b919290508581813d8311610379575b6103078183610898565b810103126103755780519082821682036101a757898101518060020b036101a7579061036e60c0838f610340906102e39897960161099e565b5061034d6060820161099e565b5061035a608082016109ad565b5061036760a082016109ad565b5001610981565b50906102cb565b8780fd5b503d6102fd565b8c513d8a823e3d90fd5b939050346101bc57806003193601126101bc576001600160a01b038235818116949193908590036101c35760249467ffffffffffffffff90863582811161089457366023820112156108945780840135986103e48a6108d0565b916103f188519384610898565b8a835260209a8a838d86019202830101913683116101a7579499948b01905b8282106107f55750505050849173__$183737d697d7aa9b5df9988cbe11bc4947$__925b82518110156107f15760806000198161044d8487610957565b5101511461077b575b826104618386610957565b5151168c88836104718689610957565b5101518c5163c37f7f7f60e01b81526001600160a01b039094169184019182523360208301526040820152829081906060010381895af48015610771578d898e8c948f9461073e575b508d886104c7898c610957565b51511691876104d68a8d610957565b510151915195869463095ea7b360e01b86528501528301528160449586925af1801561069f578c8f938f909588968f8f958f978d908c926106d6575b50938a938460c09461052b60e49b99958e9d9b99610957565b519481519e8f9d8e809d63178ca23160e31b8252838a511691015287015116908b0152840151169088015260608201516064880152810151608487015260a081015160a487015201511660c48401525af1801561066257908c916106a9575b505089826105988386610957565b515116838a6105a78588610957565b51015116908d856105b88689610957565b5151168c51948580926370a0823160e01b82528d30908301525afa92831561069f578a93610670575b50863b1561066c578a51636336129b60e11b81526001600160a01b039182168a820190815292909116602083015260408201929092528890829081906060010381885af480156106625761063f575b5061063a90610932565b610434565b85811161065057885261063a610630565b634e487b7160e01b8852604187528a88fd5b89513d8a823e3d90fd5b8980fd5b9092508d81813d8311610698575b6106888183610898565b8101031261066c575191386105e1565b503d61067e565b8b513d8c823e3d90fd5b813d83116106cf575b6106bc8183610898565b810103126106cb578a3861058a565b8680fd5b503d6106b2565b98505050509593509550505081813d8311610737575b6106f68183610898565b8101031261066c5760e4898f938f8f908f8f93918b998a93848f9461052b8f60c0978f9e61072390610981565b5095999b9d5095999b505094505093610512565b503d6106ec565b935050508092503d831161076a575b6107578183610898565b8101031261037557878a8d898e386104ba565b503d61074d565b8a513d8b823e3d90fd5b8a8c846107888588610957565b5151168b51928380926370a0823160e01b8252338d8301525afa9081156107715789916107c4575b50816107bc8487610957565b510152610456565b90508c81813d83116107ea575b6107db8183610898565b810103126101a75751386107b0565b503d6107d1565b8680f35b83829b969b3603126101a757895184810181811089821117610882578b5261081c836108e8565b81528d61082a8185016108e8565b908201526108398b84016108e8565b8b820152606080840135908201526080808401359082015260a0808401359082015260c080840135908d8216820361087e578201528152949994908301908c01610410565b8b80fd5b634e487b7160e01b8b5260418a528d8bfd5b8480fd5b90601f8019910116810190811067ffffffffffffffff8211176108ba57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116108ba5760051b60200190565b35906001600160a01b03821682036108fc57565b600080fd5b9181601f840112156108fc5782359167ffffffffffffffff83116108fc576020808501948460051b0101116108fc57565b60001981146109415760010190565b634e487b7160e01b600052601160045260246000fd5b805182101561096b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b519081151582036108fc57565b919081101561096b5760051b0190565b519061ffff821682036108fc57565b519060ff821682036108fc5756fea2646970667358221220889dedc6f0f99fe1d58acf5e989a3b03b780987e156c8c102808cd837110232e64736f6c63430008120033",
  "libraries": {
    "TokenTransfersLibrary": "0x5F9d8674B2963A42472030445241b9Df74101901"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}