{
  "address": "0x25F12BC61B59db7C455D06Dd5C9d659A42587733",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBalancer",
          "name": "_vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IBalancerBotLens.PoolUpdateData[]",
          "name": "_pools",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "_tokensToReturn",
          "type": "address[]"
        }
      ],
      "name": "removeAndSetLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x802b9826d105cc04709a04b5bd80846b05e51efff4a23e85255ec07de717bb16",
  "receipt": {
    "to": null,
    "from": "0x936b14f9eF89f263E775241C394583D5d419c2D2",
    "contractAddress": "0x25F12BC61B59db7C455D06Dd5C9d659A42587733",
    "transactionIndex": 29,
    "gasUsed": "817872",
    "logsBloom": "0x
    "blockHash": "0xe0a8eefa7e152cccfdd34c1c5ed56fafe4995e861465d1832f741464e0e2d4e2",
    "transactionHash": "0x802b9826d105cc04709a04b5bd80846b05e51efff4a23e85255ec07de717bb16",
    "logs": [],
    "blockNumber": 4763457,
    "cumulativeGasUsed": "6203379",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ac08d1652288d4d03be56436412dd0c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBalancer\",\"name\":\"_vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IBalancerBotLens.PoolUpdateData[]\",\"name\":\"_pools\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokensToReturn\",\"type\":\"address[]\"}],\"name\":\"removeAndSetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TestnetServices/BalancerBotLens.sol\":\"BalancerBotLens\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/TestnetServices/BalancerBotLens.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./../libraries/Errors.sol\\\";\\n\\nimport {IBalancer} from \\\"../interfaces/IBalancer.sol\\\";\\nimport {IAsset} from \\\"../interfaces/IAsset.sol\\\";\\nimport {IBalancerBotLens} from \\\"./interfaces/IBalancerBotLens.sol\\\";\\n\\ncontract BalancerBotLens is IBalancerBotLens {\\n    function removeAndSetLiquidity(\\n        IBalancer _vault,\\n        PoolUpdateData[] calldata _pools,\\n        IERC20[] calldata _tokensToReturn\\n    ) external override {\\n        for (uint256 i; i < _pools.length; i++) {\\n            (address poolAddress, ) = _vault.getPool(_pools[i].poolId);\\n            IERC20(poolAddress).transferFrom(msg.sender, address(this), IERC20(poolAddress).balanceOf(msg.sender));\\n            IERC20(poolAddress).approve(address(_vault), type(uint256).max);\\n\\n            (IAsset[] memory tokens, uint256[] memory balances, ) = _vault.getPoolTokens(_pools[i].poolId);\\n            _require(balances.length == _pools[i].amounts.length, Errors.WRONG_BALANCES.selector);\\n\\n            IBalancer.JoinPoolRequest memory joinData;\\n            joinData.assets = tokens;\\n            joinData.maxAmountsIn = new uint256[](balances.length);\\n\\n            IBalancer.ExitPoolRequest memory exitData;\\n            exitData.assets = tokens;\\n            exitData.minAmountsOut = new uint256[](balances.length);\\n\\n            for (uint256 j; j < joinData.assets.length; j++) {\\n                // avoid stack too deep error\\n                address vaultAddress = address(_vault);\\n\\n                IERC20 tokenERC20 = IERC20(address(joinData.assets[j]));\\n                uint256 senderBalance = tokenERC20.balanceOf(msg.sender);\\n                if (senderBalance > 0) tokenERC20.transferFrom(msg.sender, address(this), senderBalance);\\n                if (tokenERC20.allowance(address(this), vaultAddress) < senderBalance)\\n                    tokenERC20.approve(vaultAddress, type(uint256).max);\\n\\n                if (_pools[i].amounts[j] > balances[j]) {\\n                    joinData.maxAmountsIn[j] = _pools[i].amounts[j] - balances[j];\\n                    exitData.minAmountsOut[j] = 0;\\n                } else {\\n                    joinData.maxAmountsIn[j] = 0;\\n                    exitData.minAmountsOut[j] = balances[j] - _pools[i].amounts[j];\\n                }\\n            }\\n\\n            // EXACT_TOKENS_IN_FOR_BPT_OUT=1\\n            joinData.userData = abi.encode(1, joinData.maxAmountsIn, 0);\\n            _vault.joinPool(_pools[i].poolId, address(this), address(this), joinData);\\n\\n            // BPT_IN_FOR_EXACT_TOKENS_OUT=2\\n            exitData.userData = abi.encode(2, exitData.minAmountsOut, type(uint256).max);\\n            _vault.exitPool(_pools[i].poolId, address(this), payable(address(this)), exitData);\\n\\n            IERC20(poolAddress).transfer(msg.sender, IERC20(poolAddress).balanceOf(address(this)));\\n        }\\n\\n        for (uint256 i; i < _tokensToReturn.length; i++) {\\n            uint256 balance = _tokensToReturn[i].balanceOf(address(this));\\n            if (balance > 0) _tokensToReturn[i].transfer(msg.sender, balance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe6cdc63ba8456c43d0d9df1de5322d038748a50929cb745692a33f0f60b7b308\",\"license\":\"BUSL-1.1\"},\"contracts/TestnetServices/interfaces/IBalancerBotLens.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IBalancer} from \\\"../../interfaces/IBalancer.sol\\\";\\n\\ninterface IBalancerBotLens {\\n    struct PoolUpdateData {\\n        bytes32 poolId;\\n        uint256[] amounts;\\n    }\\n\\n    function removeAndSetLiquidity(\\n        IBalancer _vault,\\n        PoolUpdateData[] calldata _pools,\\n        IERC20[] calldata _tokensToReturn\\n    ) external;\\n}\\n\",\"keccak256\":\"0x86792893e388621ac9afce22307bc66d075d16a421df2888177db59072e9b0b7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/** @notice This contract was taken from (https://github.com/balancer-labs/balancer-v2-monorepo) and used for IBalancer*/\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n\\n}\\n\",\"keccak256\":\"0xd5dded630c33e367b52f7addae46d85cf182436c28680101c2969182556f01df\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBalancer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/** @notice This contract (originally IVault) was taken from (https://github.com/balancer-labs/balancer-v2-monorepo).\\n * Unused methods were removed.\\n */\\n\\npragma solidity ^0.8.18;\\n\\nimport {IAsset} from \\\"./IAsset.sol\\\";\\n\\ninterface IBalancer {\\n    enum PoolSpecialization {\\n        GENERAL,\\n        MINIMAL_SWAP_INFO,\\n        TWO_TOKEN\\n    }\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *f\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(\\n        bytes32 poolId\\n    ) external view returns (IAsset[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x9d4b7f2e9786ce6e4ed270659f867ef4e943ab9c6d77697f9a0d3596a49f692c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// (c) 2023 Primex.finance\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n// solhint-disable-next-line func-visibility\\nfunction _require(bool condition, bytes4 selector) pure {\\n    if (!condition) _revert(selector);\\n}\\n\\n// solhint-disable-next-line func-visibility\\nfunction _revert(bytes4 selector) pure {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly (\\\"memory-safe\\\") {\\n        let free_mem_ptr := mload(64)\\n        mstore(free_mem_ptr, selector)\\n        revert(free_mem_ptr, 4)\\n    }\\n}\\n\\nlibrary Errors {\\n    event Log(bytes4 error);\\n\\n    //common\\n    error ADDRESS_NOT_SUPPORTED();\\n    error FORBIDDEN();\\n    error AMOUNT_IS_0();\\n    error CALLER_IS_NOT_TRADER();\\n    error CONDITION_INDEX_IS_OUT_OF_BOUNDS();\\n    error INVALID_PERCENT_NUMBER();\\n    error INVALID_SECURITY_BUFFER();\\n    error INVALID_MAINTENANCE_BUFFER();\\n    error TOKEN_ADDRESS_IS_ZERO();\\n    error IDENTICAL_TOKEN_ADDRESSES();\\n    error ASSET_DECIMALS_EXCEEDS_MAX_VALUE();\\n    error CAN_NOT_ADD_WITH_ZERO_ADDRESS();\\n    error SHOULD_BE_DIFFERENT_ASSETS_IN_SPOT();\\n    error TOKEN_NOT_SUPPORTED();\\n    error INSUFFICIENT_DEPOSIT();\\n    error SHOULD_NOT_HAVE_DUPLICATES();\\n    // error LIMIT_PRICE_IS_ZERO();\\n    error BUCKET_IS_NOT_ACTIVE();\\n    error DIFFERENT_DATA_LENGTH();\\n    error RECIPIENT_OR_SENDER_MUST_BE_ON_WHITE_LIST();\\n    error SLIPPAGE_TOLERANCE_EXCEEDED();\\n    error OPERATION_NOT_SUPPORTED();\\n    error SENDER_IS_BLACKLISTED();\\n    error NATIVE_CURRENCY_CANNOT_BE_ASSET();\\n    error DISABLED_TRANSFER_NATIVE_CURRENCY();\\n    error INVALID_AMOUNT();\\n\\n    // bonus executor\\n    error CALLER_IS_NOT_NFT();\\n    error BONUS_FOR_BUCKET_ALREADY_ACTIVATED();\\n    error WRONG_LENGTH();\\n    error BONUS_DOES_NOT_EXIST();\\n    error CALLER_IS_NOT_DEBT_TOKEN();\\n    error CALLER_IS_NOT_P_TOKEN();\\n    error MAX_BONUS_COUNT_EXCEEDED();\\n    error TIER_IS_NOT_ACTIVE();\\n    error BONUS_PERCENT_IS_ZERO();\\n\\n    // bucket\\n    error INCORRECT_LIQUIDITY_MINING_PARAMS();\\n    error PAIR_PRICE_DROP_IS_NOT_CORRECT();\\n    error ASSET_IS_NOT_SUPPORTED();\\n    error BUCKET_OUTSIDE_PRIMEX_PROTOCOL();\\n    error DEADLINE_IS_PASSED();\\n    error DEADLINE_IS_NOT_PASSED();\\n    error BUCKET_IS_NOT_LAUNCHED();\\n    error BURN_AMOUNT_EXCEEDS_PROTOCOL_DEBT();\\n    error LIQUIDITY_INDEX_OVERFLOW();\\n    error BORROW_INDEX_OVERFLOW();\\n    error BAR_OVERFLOW();\\n    error LAR_OVERFLOW();\\n    error UR_IS_MORE_THAN_1();\\n    error ASSET_ALREADY_SUPPORTED();\\n    error DEPOSIT_IS_MORE_AMOUNT_PER_USER();\\n    error DEPOSIT_EXCEEDS_MAX_TOTAL_DEPOSIT();\\n    error MINING_AMOUNT_WITHDRAW_IS_LOCKED_ON_STABILIZATION_PERIOD();\\n    error WITHDRAW_RATE_IS_MORE_10_PERCENT();\\n    error INVALID_FEE_BUFFER();\\n    error RESERVE_RATE_SHOULD_BE_LESS_THAN_1();\\n    error MAX_TOTAL_DEPOSIT_IS_ZERO();\\n    error AMOUNT_SCALED_SHOULD_BE_GREATER_THAN_ZERO();\\n    error NOT_ENOUGH_LIQUIDITY_IN_THE_BUCKET();\\n\\n    // p/debt token, PMXToken\\n    error BUCKET_IS_IMMUTABLE();\\n    error INVALID_MINT_AMOUNT();\\n    error INVALID_BURN_AMOUNT();\\n    error TRANSFER_NOT_SUPPORTED();\\n    error APPROVE_NOT_SUPPORTED();\\n    error CALLER_IS_NOT_BUCKET();\\n    error CALLER_IS_NOT_A_BUCKET_FACTORY();\\n    error CALLER_IS_NOT_P_TOKEN_RECEIVER();\\n    error DURATION_MUST_BE_MORE_THAN_0();\\n    error INCORRECT_ID();\\n    error THERE_ARE_NO_LOCK_DEPOSITS();\\n    error LOCK_TIME_IS_NOT_EXPIRED();\\n    error TRANSFER_AMOUNT_EXCEED_ALLOWANCE();\\n    error CALLER_IS_NOT_A_MINTER();\\n    error ACTION_ONLY_WITH_AVAILABLE_BALANCE();\\n    error FEE_DECREASER_CALL_FAILED();\\n    error TRADER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error INTEREST_INCREASER_CALL_FAILED();\\n    error LENDER_REWARD_DISTRIBUTOR_CALL_FAILED();\\n    error DEPOSIT_DOES_NOT_EXIST();\\n    error RECIPIENT_IS_BLACKLISTED();\\n\\n    //LOM\\n    error ORDER_CAN_NOT_BE_FILLED();\\n    error ORDER_DOES_NOT_EXIST();\\n    error ORDER_IS_NOT_SPOT();\\n    error LEVERAGE_MUST_BE_MORE_THAN_1();\\n    error CANNOT_CHANGE_SPOT_ORDER_TO_MARGIN();\\n    error SHOULD_HAVE_OPEN_CONDITIONS();\\n    error INCORRECT_LEVERAGE();\\n    error INCORRECT_DEADLINE();\\n    error LEVERAGE_SHOULD_BE_1();\\n    error LEVERAGE_EXCEEDS_MAX_LEVERAGE();\\n    error SHOULD_OPEN_POSITION();\\n    error IS_SPOT_ORDER();\\n    error SHOULD_NOT_HAVE_CLOSE_CONDITIONS();\\n    error ORDER_HAS_EXPIRED();\\n\\n    // LiquidityMiningRewardDistributor\\n    error BUCKET_IS_NOT_STABLE();\\n    error ATTEMPT_TO_WITHDRAW_MORE_THAN_DEPOSITED();\\n    error WITHDRAW_PMX_BY_ADMIN_FORBIDDEN();\\n\\n    // nft\\n    error TOKEN_IS_BLOCKED();\\n    error ONLY_MINTERS();\\n    error PROGRAM_IS_NOT_ACTIVE();\\n    error CALLER_IS_NOT_OWNER();\\n    error TOKEN_IS_ALREADY_ACTIVATED();\\n    error WRONG_NETWORK();\\n    error ID_DOES_NOT_EXIST();\\n    error WRONG_URIS_LENGTH();\\n\\n    // PM\\n    error ASSET_ADDRESS_NOT_SUPPORTED();\\n    error IDENTICAL_ASSET_ADDRESSES();\\n    error POSITION_DOES_NOT_EXIST();\\n    error AMOUNT_IS_MORE_THAN_POSITION_AMOUNT();\\n    error BORROWED_AMOUNT_IS_ZERO();\\n    error IS_SPOT_POSITION();\\n    error AMOUNT_IS_MORE_THAN_DEPOSIT();\\n    error DECREASE_AMOUNT_IS_ZERO();\\n    error INSUFFICIENT_DEPOSIT_SIZE();\\n    error IS_NOT_RISKY_OR_CANNOT_BE_CLOSED();\\n    error BUCKET_SHOULD_BE_UNDEFINED();\\n    error DEPOSIT_IN_THIRD_ASSET_ROUTES_LENGTH_SHOULD_BE_0();\\n    error POSITION_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error ADDRESS_IS_ZERO();\\n    error WRONG_TRUSTED_MULTIPLIER();\\n    error POSITION_SIZE_EXCEEDED();\\n    error POSITION_BUCKET_IS_INCORRECT();\\n    error THERE_MUST_BE_AT_LEAST_ONE_POSITION();\\n    error NOTHING_TO_CLOSE();\\n\\n    // BatchManager\\n    error PARAMS_LENGTH_MISMATCH();\\n    error BATCH_CANNOT_BE_CLOSED_FOR_THIS_REASON();\\n    error CLOSE_CONDITION_IS_NOT_CORRECT();\\n    error SOLD_ASSET_IS_INCORRECT();\\n\\n    // Price Oracle\\n    error ZERO_EXCHANGE_RATE();\\n    error NO_PRICEFEED_FOUND();\\n    error NO_PRICE_DROP_FEED_FOUND();\\n\\n    //DNS\\n    error INCORRECT_FEE_RATE();\\n    error INCORRECT_RESTRICTIONS();\\n    error BUCKET_ALREADY_FROZEN();\\n    error BUCKET_IS_ALREADY_ADDED();\\n    error DEX_IS_ALREADY_ACTIVATED();\\n    error DEX_IS_ALREADY_FROZEN();\\n    error DEX_IS_ALREADY_ADDED();\\n    error BUCKET_NOT_ADDED();\\n    error DEX_NOT_ACTIVE();\\n    error BUCKET_ALREADY_ACTIVATED();\\n    error DEX_NOT_ADDED();\\n    error BUCKET_IS_INACTIVE();\\n    error WITHDRAWAL_NOT_ALLOWED();\\n    error BUCKET_IS_ALREADY_DEPRECATED();\\n\\n    // Primex upkeep\\n    error NUMBER_IS_0();\\n\\n    //referral program, WhiteBlackList\\n    error CALLER_ALREADY_REGISTERED();\\n    error MISMATCH();\\n    error PARENT_NOT_WHITELISTED();\\n    error ADDRESS_ALREADY_WHITELISTED();\\n    error ADDRESS_ALREADY_BLACKLISTED();\\n    error ADDRESS_NOT_BLACKLISTED();\\n    error ADDRESS_NOT_WHITELISTED();\\n    error ADDRESS_NOT_UNLISTED();\\n    error ADDRESS_IS_WHITELISTED();\\n    error ADDRESS_IS_NOT_CONTRACT();\\n\\n    //Reserve\\n    error BURN_AMOUNT_IS_ZERO();\\n    error CALLER_IS_NOT_EXECUTOR();\\n    error ADDRESS_NOT_PRIMEX_BUCKET();\\n    error NOT_SUFFICIENT_RESERVE_BALANCE();\\n    error INCORRECT_TRANSFER_RESTRICTIONS();\\n\\n    //Vault\\n    error AMOUNT_EXCEEDS_AVAILABLE_BALANCE();\\n    error INSUFFICIENT_FREE_ASSETS();\\n    error CALLER_IS_NOT_SPENDER();\\n\\n    //Pricing Library\\n    error IDENTICAL_ASSETS();\\n    error SUM_OF_SHARES_SHOULD_BE_GREATER_THAN_ZERO();\\n    error DIFFERENT_PRICE_DEX_AND_ORACLE();\\n    error TAKE_PROFIT_IS_LTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_GTE_LIMIT_PRICE();\\n    error STOP_LOSS_IS_LTE_LIQUIDATION_PRICE();\\n    error INSUFFICIENT_POSITION_SIZE();\\n    error INCORRECT_PATH();\\n    error DEPOSITED_TO_BORROWED_ROUTES_LENGTH_SHOULD_BE_0();\\n    error INCORRECT_CM_TYPE();\\n    error FEE_RATE_IN_NATIVE_IS_ZERO();\\n\\n    // Token transfers\\n    error TOKEN_TRANSFER_IN_FAILED();\\n    error TOKEN_TRANSFER_IN_OVERFLOW();\\n    error TOKEN_TRANSFER_OUT_FAILED();\\n    error NATIVE_TOKEN_TRANSFER_FAILED();\\n\\n    // Conditional Managers\\n    error LOW_PRICE_ROUND_IS_LESS_HIGH_PRICE_ROUND();\\n    error TRAILING_DELTA_IS_INCORRECT();\\n    error DATA_FOR_ROUND_DOES_NOT_EXIST();\\n    error HIGH_PRICE_TIMESTAMP_IS_INCORRECT();\\n    error NO_PRICE_FEED_INTERSECTION();\\n    error SHOULD_BE_CCM();\\n    error SHOULD_BE_COM();\\n\\n    //Lens\\n    error DEPOSITED_AMOUNT_IS_0();\\n    error SPOT_DEPOSITED_ASSET_SHOULD_BE_EQUAL_BORROWED_ASSET();\\n    error ZERO_ASSET_ADDRESS();\\n    error ASSETS_SHOULD_BE_DIFFERENT();\\n    error ZERO_SHARES();\\n    error SHARES_AMOUNT_IS_GREATER_THAN_AMOUNT_TO_SELL();\\n    error NO_ACTIVE_DEXES();\\n\\n    //Bots\\n    error WRONG_BALANCES();\\n    error INVALID_INDEX();\\n    error INVALID_DIVIDER();\\n    error ARRAYS_LENGTHS_IS_NOT_EQUAL();\\n    error DENOMINATOR_IS_0();\\n\\n    //DexAdapter\\n    error ZERO_AMOUNT_IN();\\n    error ZERO_AMOUNT();\\n    error UNKNOWN_DEX_TYPE();\\n    error REVERTED_WITHOUT_A_STRING_TRY_TO_CHECK_THE_ANCILLARY_DATA();\\n    error DELTA_OF_TOKEN_OUT_HAS_POSITIVE_VALUE();\\n    error DELTA_OF_TOKEN_IN_HAS_NEGATIVE_VALUE();\\n    error QUOTER_IS_NOT_PROVIDED();\\n    error DEX_ROUTER_NOT_SUPPORTED();\\n    error QUOTER_NOT_SUPPORTED();\\n    error SWAP_DEADLINE_PASSED();\\n\\n    //SpotTradingRewardDistributor\\n    error PERIOD_DURATION_IS_ZERO();\\n    error REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_PERIOD_IS_NOT_CORRECT();\\n\\n    //ActivityRewardDistributor\\n    error TOTAL_REWARD_AMOUNT_IS_ZERO();\\n    error REWARD_PER_DAY_IS_NOT_CORRECT();\\n    error ZERO_BUCKET_ADDRESS();\\n    //KeeperRewardDistributor\\n    error INCORRECT_PART_IN_REWARD();\\n    error INCORRECT_MULTIPLIER();\\n\\n    //Treasury\\n    error TRANSFER_RESTRICTIONS_NOT_MET();\\n    error INSUFFICIENT_NATIVE_TOKEN_BALANCE();\\n    error INSUFFICIENT_TOKEN_BALANCE();\\n    error EXCEEDED_MAX_AMOUNT_DURING_TIMEFRAME();\\n    error EXCEEDED_MAX_SPENDING_LIMITS();\\n    error SPENDING_LIMITS_ARE_INCORRECT();\\n    error SPENDER_IS_NOT_EXIST();\\n}\\n\",\"keccak256\":\"0xdefed1730079812b35863325fa1451cd220f15f8d26af3cd218e579567a8d65f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610dd2908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c63dad110131461002757600080fd5b346101d45760603660031901126101d4576004356001600160a01b03811681036101d45760243567ffffffffffffffff81116101d45761006b903690600401610aa4565b60443567ffffffffffffffff81116101d45761008c84913690600401610aa4565b9390926000905b8082106101e057858560005b8281106100a857005b6001600160a01b036100c36100be838686610c60565b610d88565b169060405180926370a0823160e01b825230600483015281602460209384935afa9283156101a0576000936101ac575b508261010a575b506101059150610ad5565b61009f565b6000928190610158906001600160a01b036101296100be878b8b610c60565b60405163a9059cbb60e01b81523360048201526024810193909352919687939190921691839182906044820190565b03925af19283156101a05761010593610172575b506100fa565b8161019192903d10610199575b6101898183610b5c565b810190610b7e565b50848061016c565b503d61017f565b6040513d6000823e3d90fd5b9080935081813d83116101d9575b6101c48183610b5c565b810103126101d4575191856100f3565b600080fd5b503d6101ba565b6101f08282859795989698610afa565b6040805163f6c0092760e01b815291356004830152909590866024816001600160a01b038b165afa9586156101a057600096610a51575b506040516370a0823160e01b81523360048201526020816024816001600160a01b038b165afa9081156101a057600091610a1e575b506040516323b872dd60e01b8152336004820152306024820152604481019190915260208160648160006001600160a01b038c165af180156101a0576109ff575b5060405163095ea7b360e01b81526001600160a01b0388811660048301526000196024830152602090829060449082906000908c165af180156101a0576109e0575b506102eb838383610afa565b604051631f29a8cd60e31b815290356004820152966000886024816001600160a01b0385165afa9586156101a05760009860009761089b575b50865161033f610335878787610afa565b6020810190610bae565b919050036108895761034f610be4565b9589875261035d8851610c1a565b602088015261036a610be4565b998a526103778851610c1a565b60208b015260005b87518051821015610615576001600160a01b039061039e908390610c4c565b5116906040516370a0823160e01b8152336004820152602081602481865afa9081156101a0576000916105e3575b5080610588575b604051636eb1769f60e11b81523060048201526001600160a01b0387166024820152602081604481875afa9081156101a057600091610556575b50106104ed575b6104a0915089818d8b8b8b8b61043886610432610335868686610afa565b90610c60565b356104438789610c4c565b5110156104a55785602061048a6000996104838461047c8161043261047361049a9f9e9c899e9c6104929c610afa565b88810190610bae565b3592610c4c565b5190610c70565b930151610c4c565b520151610c4c565b52610ad5565b61037f565b90856104326104dd61048a956104e6946104d685809b9d60006104d061049a9f60209e8f0151610c4c565b52610c4c565b5196610afa565b86810190610bae565b3590610c70565b60405163095ea7b360e01b81526001600160a01b0386166004820152600019602482015291602090839060449082906000905af19182156101a0576104a092610537575b50610414565b61054f9060203d602011610199576101898183610b5c565b508c610531565b90506020813d602011610580575b8161057160209383610b5c565b810103126101d457518e61040d565b3d9150610564565b6040516323b872dd60e01b8152336004820152306024820152604481018290526020816064816000885af180156101a0576105c4575b506103d3565b6105dc9060203d602011610199576101898183610b5c565b508d6105be565b90506020813d60201161060d575b816105fe60209383610b5c565b810103126101d457518d6103cc565b3d91506105f1565b50509793965097909493919361064a61065f602083015160405192839160016020840152606060408401526080830190610c7d565b6000606083015203601f198101835282610b5c565b604082015261066f838887610afa565b356001600160a01b0387163b156101d4576106bb91600091604051938492839263172b958560e31b84526004840152306024840152306044840152608060648401526084830190610cb1565b0381836001600160a01b038b165af180156101a05761087a575b506106ff610715602083015160405192839160026020840152606060408401526080830190610c7d565b600019606083015203601f198101835282610b5c565b6040820152610725828786610afa565b356001600160a01b0386163b156101d457610771916000916040519384928392638bdb391360e01b84526004840152306024840152306044840152608060648401526084830190610cb1565b0381836001600160a01b038a165af180156101a05761086b575b506040516370a0823160e01b8152306004820152916020836024816001600160a01b0385165afa9283156101a057600093610835575b5060405163a9059cbb60e01b81523360048201526024810193909352602090839081600081604481015b03926001600160a01b03165af19182156101a05761080e92610816575b50610ad5565b909192610093565b61082e9060203d602011610199576101898183610b5c565b5087610808565b92506020833d602011610863575b8161085060209383610b5c565b810103126101d4579151916107eb6107c1565b3d9150610843565b61087490610b32565b8761078b565b61088390610b32565b886106d5565b604051633063a1eb60e11b8152600490fd5b985095503d97886000823e6108b08982610b5c565b6060818a810103126101d45780519067ffffffffffffffff82116101d457898101601f8383010112156101d45781810151916108eb83610b96565b926108f96040519485610b5c565b808452602084018c840160208360051b8587010101116101d457602083850101905b60208360051b858701010182106109c0575050505060208101519967ffffffffffffffff8b116101d457808201601f8c84010112156101d4578a8201519161096283610b96565b9b6109706040519d8e610b5c565b838d5260208d0192820160208560051b8385010101116101d457602081830101925b60208560051b838501010184106109b0575050505050979589610324565b8351815260209384019301610992565b81516001600160a01b03811681036101d45781526020918201910161091b565b6109f89060203d602011610199576101898183610b5c565b50876102df565b610a179060203d602011610199576101898183610b5c565b508761029d565b90506020813d602011610a49575b81610a3960209383610b5c565b810103126101d45751602061025c565b3d9150610a2c565b9095506040813d604011610a9c575b81610a6d60409383610b5c565b810103126101d4578051906001600160a01b03821682036101d4576020600391015110156101d4579487610227565b3d9150610a60565b9181601f840112156101d45782359167ffffffffffffffff83116101d4576020808501948460051b0101116101d457565b6000198114610ae45760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015610b1c5760051b81013590603e19813603018212156101d4570190565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff8111610b4657604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610b4657604052565b908160209103126101d4575180151581036101d45790565b67ffffffffffffffff8111610b465760051b60200190565b903590601e19813603018212156101d4570180359067ffffffffffffffff82116101d457602001918160051b360383136101d457565b604051906080820182811067ffffffffffffffff821117610b465760405260006060838181528160208201528160408201520152565b90610c2482610b96565b610c316040519182610b5c565b8281528092610c42601f1991610b96565b0190602036910137565b8051821015610b1c5760209160051b010190565b9190811015610b1c5760051b0190565b91908203918211610ae457565b90815180825260208080930193019160005b828110610c9d575050505090565b835185529381019392810192600101610c8f565b608082019080519260808152835180935260a081019260208095019060005b86828210610d6b5792505050820151928181038583015284808551928381520194019060005b86828210610d57575050505060408201519181840360408301528251928385528560005b858110610d435750600086860190910152506060908101511515910152601f01601f1916010190565b818184010151828289010152018690610d1a565b835187529586019590920191600101610cf6565b83516001600160a01b031687529586019590920191600101610cd0565b356001600160a01b03811681036101d4579056fea26469706673582212203f518371ada2580d95af7f29950d2960c86530ae1e94e11c57376c5e0a5d523164736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c63dad110131461002757600080fd5b346101d45760603660031901126101d4576004356001600160a01b03811681036101d45760243567ffffffffffffffff81116101d45761006b903690600401610aa4565b60443567ffffffffffffffff81116101d45761008c84913690600401610aa4565b9390926000905b8082106101e057858560005b8281106100a857005b6001600160a01b036100c36100be838686610c60565b610d88565b169060405180926370a0823160e01b825230600483015281602460209384935afa9283156101a0576000936101ac575b508261010a575b506101059150610ad5565b61009f565b6000928190610158906001600160a01b036101296100be878b8b610c60565b60405163a9059cbb60e01b81523360048201526024810193909352919687939190921691839182906044820190565b03925af19283156101a05761010593610172575b506100fa565b8161019192903d10610199575b6101898183610b5c565b810190610b7e565b50848061016c565b503d61017f565b6040513d6000823e3d90fd5b9080935081813d83116101d9575b6101c48183610b5c565b810103126101d4575191856100f3565b600080fd5b503d6101ba565b6101f08282859795989698610afa565b6040805163f6c0092760e01b815291356004830152909590866024816001600160a01b038b165afa9586156101a057600096610a51575b506040516370a0823160e01b81523360048201526020816024816001600160a01b038b165afa9081156101a057600091610a1e575b506040516323b872dd60e01b8152336004820152306024820152604481019190915260208160648160006001600160a01b038c165af180156101a0576109ff575b5060405163095ea7b360e01b81526001600160a01b0388811660048301526000196024830152602090829060449082906000908c165af180156101a0576109e0575b506102eb838383610afa565b604051631f29a8cd60e31b815290356004820152966000886024816001600160a01b0385165afa9586156101a05760009860009761089b575b50865161033f610335878787610afa565b6020810190610bae565b919050036108895761034f610be4565b9589875261035d8851610c1a565b602088015261036a610be4565b998a526103778851610c1a565b60208b015260005b87518051821015610615576001600160a01b039061039e908390610c4c565b5116906040516370a0823160e01b8152336004820152602081602481865afa9081156101a0576000916105e3575b5080610588575b604051636eb1769f60e11b81523060048201526001600160a01b0387166024820152602081604481875afa9081156101a057600091610556575b50106104ed575b6104a0915089818d8b8b8b8b61043886610432610335868686610afa565b90610c60565b356104438789610c4c565b5110156104a55785602061048a6000996104838461047c8161043261047361049a9f9e9c899e9c6104929c610afa565b88810190610bae565b3592610c4c565b5190610c70565b930151610c4c565b520151610c4c565b52610ad5565b61037f565b90856104326104dd61048a956104e6946104d685809b9d60006104d061049a9f60209e8f0151610c4c565b52610c4c565b5196610afa565b86810190610bae565b3590610c70565b60405163095ea7b360e01b81526001600160a01b0386166004820152600019602482015291602090839060449082906000905af19182156101a0576104a092610537575b50610414565b61054f9060203d602011610199576101898183610b5c565b508c610531565b90506020813d602011610580575b8161057160209383610b5c565b810103126101d457518e61040d565b3d9150610564565b6040516323b872dd60e01b8152336004820152306024820152604481018290526020816064816000885af180156101a0576105c4575b506103d3565b6105dc9060203d602011610199576101898183610b5c565b508d6105be565b90506020813d60201161060d575b816105fe60209383610b5c565b810103126101d457518d6103cc565b3d91506105f1565b50509793965097909493919361064a61065f602083015160405192839160016020840152606060408401526080830190610c7d565b6000606083015203601f198101835282610b5c565b604082015261066f838887610afa565b356001600160a01b0387163b156101d4576106bb91600091604051938492839263172b958560e31b84526004840152306024840152306044840152608060648401526084830190610cb1565b0381836001600160a01b038b165af180156101a05761087a575b506106ff610715602083015160405192839160026020840152606060408401526080830190610c7d565b600019606083015203601f198101835282610b5c565b6040820152610725828786610afa565b356001600160a01b0386163b156101d457610771916000916040519384928392638bdb391360e01b84526004840152306024840152306044840152608060648401526084830190610cb1565b0381836001600160a01b038a165af180156101a05761086b575b506040516370a0823160e01b8152306004820152916020836024816001600160a01b0385165afa9283156101a057600093610835575b5060405163a9059cbb60e01b81523360048201526024810193909352602090839081600081604481015b03926001600160a01b03165af19182156101a05761080e92610816575b50610ad5565b909192610093565b61082e9060203d602011610199576101898183610b5c565b5087610808565b92506020833d602011610863575b8161085060209383610b5c565b810103126101d4579151916107eb6107c1565b3d9150610843565b61087490610b32565b8761078b565b61088390610b32565b886106d5565b604051633063a1eb60e11b8152600490fd5b985095503d97886000823e6108b08982610b5c565b6060818a810103126101d45780519067ffffffffffffffff82116101d457898101601f8383010112156101d45781810151916108eb83610b96565b926108f96040519485610b5c565b808452602084018c840160208360051b8587010101116101d457602083850101905b60208360051b858701010182106109c0575050505060208101519967ffffffffffffffff8b116101d457808201601f8c84010112156101d4578a8201519161096283610b96565b9b6109706040519d8e610b5c565b838d5260208d0192820160208560051b8385010101116101d457602081830101925b60208560051b838501010184106109b0575050505050979589610324565b8351815260209384019301610992565b81516001600160a01b03811681036101d45781526020918201910161091b565b6109f89060203d602011610199576101898183610b5c565b50876102df565b610a179060203d602011610199576101898183610b5c565b508761029d565b90506020813d602011610a49575b81610a3960209383610b5c565b810103126101d45751602061025c565b3d9150610a2c565b9095506040813d604011610a9c575b81610a6d60409383610b5c565b810103126101d4578051906001600160a01b03821682036101d4576020600391015110156101d4579487610227565b3d9150610a60565b9181601f840112156101d45782359167ffffffffffffffff83116101d4576020808501948460051b0101116101d457565b6000198114610ae45760010190565b634e487b7160e01b600052601160045260246000fd5b9190811015610b1c5760051b81013590603e19813603018212156101d4570190565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff8111610b4657604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610b4657604052565b908160209103126101d4575180151581036101d45790565b67ffffffffffffffff8111610b465760051b60200190565b903590601e19813603018212156101d4570180359067ffffffffffffffff82116101d457602001918160051b360383136101d457565b604051906080820182811067ffffffffffffffff821117610b465760405260006060838181528160208201528160408201520152565b90610c2482610b96565b610c316040519182610b5c565b8281528092610c42601f1991610b96565b0190602036910137565b8051821015610b1c5760209160051b010190565b9190811015610b1c5760051b0190565b91908203918211610ae457565b90815180825260208080930193019160005b828110610c9d575050505090565b835185529381019392810192600101610c8f565b608082019080519260808152835180935260a081019260208095019060005b86828210610d6b5792505050820151928181038583015284808551928381520194019060005b86828210610d57575050505060408201519181840360408301528251928385528560005b858110610d435750600086860190910152506060908101511515910152601f01601f1916010190565b818184010151828289010152018690610d1a565b835187529586019590920191600101610cf6565b83516001600160a01b031687529586019590920191600101610cd0565b356001600160a01b03811681036101d4579056fea26469706673582212203f518371ada2580d95af7f29950d2960c86530ae1e94e11c57376c5e0a5d523164736f6c63430008120033",
  "libraries": {
    "Errors": "0x2dB9cEB28103A186ad78A10d25c874Bd77F3fC5C"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}